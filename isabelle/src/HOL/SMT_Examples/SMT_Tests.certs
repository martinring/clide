8c0dd63633148cae631c41716f59fedf31aaf85f 8 0
#2 := false
#1 := true
#8 := (not true)
#29 := (iff #8 false)
#30 := [rewrite]: #29
#28 := [asserted]: #8
[mp #28 #30]: false
unsat
0e95eca2e0e7caa31aef537bbf293f83696bbe8a 16 0
#2 := false
#8 := (not false)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
bbd400f7a6b516cc913f7b22468b7a0f5ab6d4ef 21 0
#2 := false
#1 := true
#8 := (not true)
#9 := (not #8)
#10 := (not #9)
#42 := (iff #10 false)
#31 := (iff #8 false)
#32 := [rewrite]: #31
#40 := (iff #10 #8)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#41 := [monotonicity #39]: #40
#43 := [trans #41 #32]: #42
#30 := [asserted]: #10
[mp #30 #43]: false
unsat
218e23551f716b340d470b13088877ee41ffeabf 16 0
#2 := false
#1 := true
#8 := (and true true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
4820ba699dfc46472702e8103b5f713f524239e1 16 0
#2 := false
#1 := true
#8 := (or true false)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
ee9714cb019befa9d851be80ac36f38d43541012 16 0
#2 := false
#1 := true
#8 := (implies false true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
7869b66c1f04020ccc620174a1f0451e995f1abd 24 0
#2 := false
#1 := true
#8 := (iff false true)
#9 := (not #8)
#10 := (not #9)
#45 := (iff #10 false)
#40 := (not true)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#38 := (iff #9 true)
#33 := (not false)
#36 := (iff #33 true)
#37 := [rewrite]: #36
#34 := (iff #9 #33)
#31 := (iff #8 false)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#30 := [asserted]: #10
[mp #30 #46]: false
unsat
4e759d02d4de42cc8b917c1ee399e500780bf8d9 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (or #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (or #33 #36)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #35 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
6f508687a1b8d851ff54bda8c3b55201243d9664 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (not #11)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (not false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (and #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
a570d829481d812db472649896375ed3e544b2a0 65 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and false #9)
#13 := (or #12 #9)
#11 := (not #9)
#14 := (or #11 #13)
#1 := true
#10 := (and true #9)
#15 := (or #10 #14)
#16 := (not #15)
#83 := (iff #16 false)
#78 := (not true)
#81 := (iff #78 false)
#82 := [rewrite]: #81
#79 := (iff #16 #78)
#76 := (iff #15 true)
#37 := (= f1 f3)
#71 := (or #37 true)
#74 := (iff #71 true)
#75 := [rewrite]: #74
#72 := (iff #15 #71)
#69 := (iff #14 true)
#47 := (not #37)
#64 := (or #47 #37)
#67 := (iff #64 true)
#68 := [rewrite]: #67
#65 := (iff #14 #64)
#62 := (iff #13 #37)
#57 := (or false #37)
#60 := (iff #57 #37)
#61 := [rewrite]: #60
#58 := (iff #13 #57)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#55 := (iff #12 false)
#50 := (and false #37)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#52 := [monotonicity #39]: #51
#56 := [trans #52 #54]: #55
#59 := [monotonicity #56 #39]: #58
#63 := [trans #59 #61]: #62
#48 := (iff #11 #47)
#49 := [monotonicity #39]: #48
#66 := [monotonicity #49 #63]: #65
#70 := [trans #66 #68]: #69
#45 := (iff #10 #37)
#40 := (and true #37)
#43 := (iff #40 #37)
#44 := [rewrite]: #43
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#46 := [trans #42 #44]: #45
#73 := [monotonicity #46 #70]: #72
#77 := [trans #73 #75]: #76
#80 := [monotonicity #77]: #79
#84 := [trans #80 #82]: #83
#36 := [asserted]: #16
[mp #36 #84]: false
unsat
4cee40af08d20a91303cc3118e83d7eca7872920 29 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (implies #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := (= f1 f3)
#35 := (implies #32 #32)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 #32)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
0fe45fcdabd9bb3a2f80916a3d449a773092c058 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (and #9 #10)
#12 := (implies #11 false)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (implies false false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (and #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
d63aa12ea1f62e0c634eee23e682ed847e82572d 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (and #11 #9)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (and #36 #39)
#52 := (implies #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (and #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
ac9f8dfae9db87406db77382935caeb1212c8720 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (or #11 #9)
#12 := (or #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (or #36 #39)
#52 := (implies #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (or #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
3ca7c9c03f9ec0a6bb70ba63fef8fe4be3fc1124 55 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
#79 := (iff #36 false)
#69 := (not #36)
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#42 := (and #36 #39)
#51 := (not #42)
#60 := (or #36 #39 #51)
#63 := (not #60)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (or #9 #11)
#12 := (and #9 #11)
#14 := (implies #12 #13)
#15 := (not #14)
#66 := (iff #15 #63)
#45 := (or #36 #39)
#52 := (or #51 #45)
#57 := (not #52)
#64 := (iff #57 #63)
#61 := (iff #52 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#48 := (implies #42 #45)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#47 := [monotonicity #38 #41]: #46
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#50 := [monotonicity #44 #47]: #49
#56 := [trans #50 #54]: #55
#59 := [monotonicity #56]: #58
#67 := [trans #59 #65]: #66
#35 := [asserted]: #15
#68 := [mp #35 #67]: #63
#70 := [not-or-elim #68]: #69
#80 := [iff-false #70]: #79
#73 := [not-or-elim #68]: #42
#74 := [and-elim #73]: #36
[mp #74 #80]: false
unsat
520e744f261e775610c6856eddf3b7e384835c22 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#72 := (iff #16 false)
#40 := (= f1 f4)
#37 := (= f1 f3)
#43 := (or #37 #40)
#49 := (not #37)
#55 := (or #49 #43)
#60 := (not #55)
#70 := (iff #60 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #60 #65)
#63 := (iff #55 true)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#46 := (not #43)
#52 := (implies #46 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39]: #50
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #39 #42]: #44
#48 := [monotonicity #45]: #47
#54 := [monotonicity #48 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#73 := [trans #62 #71]: #72
#36 := [asserted]: #16
[mp #36 #73]: false
unsat
a4cd863a4afcd8896c4557ed1f94e6b2e251460c 55 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#14 := (not #11)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#15 := (implies #13 #14)
#16 := (not #15)
#72 := (iff #16 false)
#40 := (= f1 f4)
#37 := (= f1 f3)
#43 := (or #37 #40)
#49 := (not #40)
#55 := (or #49 #43)
#60 := (not #55)
#70 := (iff #60 false)
#1 := true
#65 := (not true)
#68 := (iff #65 false)
#69 := [rewrite]: #68
#66 := (iff #60 #65)
#63 := (iff #55 true)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#46 := (not #43)
#52 := (implies #46 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#51 := [monotonicity #42]: #50
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#45 := [monotonicity #39 #42]: #44
#48 := [monotonicity #45]: #47
#54 := [monotonicity #48 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#73 := [trans #62 #71]: #72
#36 := [asserted]: #16
[mp #36 #73]: false
unsat
971edb4251c21bd89bd88e455c303075d8fa8060 49 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#37 := (= f1 f3)
#71 := (iff #37 false)
#40 := (not #37)
decl f4 :: S1
#11 := f4
#43 := (= f1 f4)
#46 := (and #37 #43)
#49 := (not #46)
#55 := (or #37 #49)
#60 := (not #55)
#12 := (= f4 f1)
#9 := (= f3 f1)
#13 := (and #9 #12)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (implies #40 #49)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39 #45]: #47
#51 := [monotonicity #48]: #50
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#54 := [monotonicity #42 #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#36 := [asserted]: #16
#65 := [mp #36 #62]: #60
#63 := [not-or-elim #65]: #40
#72 := [iff-false #63]: #71
#64 := [not-or-elim #65]: #46
#66 := [and-elim #64]: #37
[mp #66 #72]: false
unsat
f2ade1ff188c65975bec097c4372f4c2c6bf872d 54 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#37 := (= f1 f3)
#76 := (iff #37 false)
#40 := (not #37)
decl f4 :: S1
#11 := f4
#43 := (= f1 f4)
#49 := (and #37 #43)
#54 := (not #49)
#60 := (or #37 #54)
#65 := (not #60)
#9 := (= f3 f1)
#12 := (= f4 f1)
#13 := (and #12 #9)
#14 := (not #13)
#10 := (not #9)
#15 := (implies #10 #14)
#16 := (not #15)
#66 := (iff #16 #65)
#63 := (iff #15 #60)
#57 := (implies #40 #54)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (iff #13 #49)
#46 := (and #43 #37)
#50 := (iff #46 #49)
#51 := [rewrite]: #50
#47 := (iff #13 #46)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#48 := [monotonicity #45 #39]: #47
#53 := [trans #48 #51]: #52
#56 := [monotonicity #53]: #55
#41 := (iff #10 #40)
#42 := [monotonicity #39]: #41
#59 := [monotonicity #42 #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#36 := [asserted]: #16
#70 := [mp #36 #67]: #65
#68 := [not-or-elim #70]: #40
#77 := [iff-false #68]: #76
#69 := [not-or-elim #70]: #49
#71 := [and-elim #69]: #37
[mp #71 #77]: false
unsat
682534b0f67b638e243f2eb512302b970aa41e32 60 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#42 := (= f1 f4)
#51 := (not #42)
decl f3 :: S1
#8 := f3
#39 := (= f1 f3)
#48 := (not #39)
#54 := (or #48 #51)
#45 := (and #39 #42)
#67 := (iff #45 #54)
#72 := (iff #67 false)
#57 := (not #54)
#78 := (iff #57 #54)
#75 := (iff #78 false)
#76 := [rewrite]: #75
#79 := (iff #67 #78)
#60 := (iff #45 #57)
#77 := [rewrite]: #60
#80 := [monotonicity #77]: #79
#74 := [trans #80 #76]: #72
#11 := (= f4 f1)
#14 := (not #11)
#9 := (= f3 f1)
#13 := (not #9)
#15 := (or #13 #14)
#16 := (not #15)
#12 := (and #9 #11)
#17 := (iff #12 #16)
#18 := (not #17)
#69 := (iff #18 #67)
#63 := (not #60)
#66 := (iff #63 #67)
#68 := [rewrite]: #66
#64 := (iff #18 #63)
#61 := (iff #17 #60)
#58 := (iff #16 #57)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#53 := [monotonicity #44]: #52
#49 := (iff #13 #48)
#40 := (iff #9 #39)
#41 := [rewrite]: #40
#50 := [monotonicity #41]: #49
#56 := [monotonicity #50 #53]: #55
#59 := [monotonicity #56]: #58
#46 := (iff #12 #45)
#47 := [monotonicity #41 #44]: #46
#62 := [monotonicity #47 #59]: #61
#65 := [monotonicity #62]: #64
#70 := [trans #65 #68]: #69
#38 := [asserted]: #18
#73 := [mp #38 #70]: #67
[mp #73 #74]: false
unsat
18c084b69ef057902c4f565daffb9414815edad2 79 0
#2 := false
decl f1 :: S1
#4 := f1
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#16 := (and #11 #14)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#17 := (and #9 #16)
#12 := (and #9 #11)
#15 := (and #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#95 := (iff #19 false)
#49 := (= f1 f5)
#43 := (= f1 f4)
#55 := (and #43 #49)
#40 := (= f1 f3)
#58 := (and #40 #55)
#46 := (and #40 #43)
#52 := (and #46 #49)
#64 := (not #52)
#65 := (or #64 #58)
#70 := (not #65)
#93 := (iff #70 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #70 #88)
#86 := (iff #65 true)
#73 := (and #40 #43 #49)
#76 := (not #73)
#81 := (or #76 #73)
#84 := (iff #81 true)
#85 := [rewrite]: #84
#82 := (iff #65 #81)
#79 := (iff #58 #73)
#80 := [rewrite]: #79
#77 := (iff #64 #76)
#74 := (iff #52 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#83 := [monotonicity #78 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #52 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#57 := [monotonicity #45 #51]: #56
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#60 := [monotonicity #42 #57]: #59
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#96 := [trans #72 #94]: #95
#39 := [asserted]: #19
[mp #39 #96]: false
unsat
b35caa01ace8f0712871ad8d5740788301cd45cb 94 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#49 := (= f1 f5)
decl f4 :: S1
#10 := f4
#43 := (= f1 f4)
decl f3 :: S1
#8 := f3
#40 := (= f1 f3)
#73 := (or #40 #43 #49)
#114 := (iff #73 false)
#109 := (or false false false)
#112 := (iff #109 false)
#113 := [rewrite]: #112
#110 := (iff #73 #109)
#107 := (iff #49 false)
#97 := (not #49)
#76 := (not #73)
#82 := (or #40 #43 #49 #76)
#87 := (not #82)
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (or #11 #14)
#9 := (= f3 f1)
#17 := (or #9 #16)
#12 := (or #9 #11)
#15 := (or #12 #14)
#18 := (implies #15 #17)
#19 := (not #18)
#90 := (iff #19 #87)
#55 := (or #43 #49)
#58 := (or #40 #55)
#46 := (or #40 #43)
#52 := (or #46 #49)
#64 := (not #52)
#65 := (or #64 #58)
#70 := (not #65)
#88 := (iff #70 #87)
#85 := (iff #65 #82)
#79 := (or #76 #58)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #65 #79)
#77 := (iff #64 #76)
#74 := (iff #52 #73)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [monotonicity #86]: #88
#71 := (iff #19 #70)
#68 := (iff #18 #65)
#61 := (implies #52 #58)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#57 := [monotonicity #45 #51]: #56
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#60 := [monotonicity #42 #57]: #59
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#63 := [monotonicity #54 #60]: #62
#69 := [trans #63 #67]: #68
#72 := [monotonicity #69]: #71
#91 := [trans #72 #89]: #90
#39 := [asserted]: #19
#92 := [mp #39 #91]: #87
#98 := [not-or-elim #92]: #97
#108 := [iff-false #98]: #107
#105 := (iff #43 false)
#95 := (not #43)
#96 := [not-or-elim #92]: #95
#106 := [iff-false #96]: #105
#103 := (iff #40 false)
#93 := (not #40)
#94 := [not-or-elim #92]: #93
#104 := [iff-false #94]: #103
#111 := [monotonicity #104 #106 #108]: #110
#115 := [trans #111 #113]: #114
#99 := [not-or-elim #92]: #73
[mp #99 #115]: false
unsat
644cc5c7eac6cad9197e62e1430e0caf631242de 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (or #41 #50)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#89 := (not #44)
#88 := (not #41)
#90 := (or #88 #89)
#91 := (not #90)
#119 := (not #50)
#130 := [hypothesis]: #50
#120 := (or #56 #119)
#121 := [def-axiom]: #120
#131 := [unit-resolution #121 #130]: #56
#59 := (or #44 #50)
#126 := (or #59 #119)
#127 := [def-axiom]: #126
#132 := [unit-resolution #127 #130]: #59
#98 := (not #59)
#97 := (not #56)
#99 := (or #97 #98)
#62 := (and #56 #59)
#78 := (not #62)
#108 := (iff #78 #99)
#100 := (not #99)
#103 := (not #100)
#106 := (iff #103 #99)
#107 := [rewrite]: #106
#104 := (iff #78 #103)
#101 := (iff #62 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#109 := [trans #105 #107]: #108
#47 := (and #41 #44)
#53 := (or #47 #50)
#68 := (not #53)
#69 := (or #68 #62)
#74 := (not #69)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#16 := (or #9 #14)
#18 := (and #16 #17)
#12 := (and #9 #11)
#15 := (or #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #53 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#61 := [monotonicity #46 #52]: #60
#57 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #52]: #57
#64 := [monotonicity #58 #61]: #63
#54 := (iff #15 #53)
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [monotonicity #49 #52]: #54
#67 := [monotonicity #55 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#40 := [asserted]: #20
#79 := [mp #40 #76]: #74
#80 := [not-or-elim #79]: #78
#110 := [mp #80 #109]: #99
#133 := [unit-resolution #110 #132 #131]: false
#134 := [lemma #133]: #119
#83 := (or #50 #91)
#94 := (iff #53 #83)
#84 := (or #91 #50)
#92 := (iff #84 #83)
#93 := [rewrite]: #92
#85 := (iff #53 #84)
#86 := (iff #47 #91)
#87 := [rewrite]: #86
#82 := [monotonicity #87]: #85
#95 := [trans #82 #93]: #94
#77 := [not-or-elim #79]: #53
#96 := [mp #77 #95]: #83
#135 := [unit-resolution #96 #134]: #91
#111 := (or #90 #41)
#112 := [def-axiom]: #111
#136 := [unit-resolution #112 #135]: #41
#117 := (or #56 #88)
#118 := [def-axiom]: #117
#137 := [unit-resolution #118 #136]: #56
#113 := (or #90 #44)
#114 := [def-axiom]: #113
#138 := [unit-resolution #114 #135]: #44
#124 := (or #59 #89)
#125 := [def-axiom]: #124
#139 := [unit-resolution #125 #138]: #59
[unit-resolution #110 #139 #137]: false
unsat
93bc0888dce281b8a619c094f485437218f003bd 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#64 := (and #41 #50)
#101 := (not #64)
#140 := (iff #101 false)
#1 := true
#135 := (not true)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #101 #135)
#133 := (iff #64 true)
#128 := (and true true)
#131 := (iff #128 true)
#132 := [rewrite]: #131
#129 := (iff #64 #128)
#126 := (iff #50 true)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#56 := (or #44 #50)
#123 := (iff #56 #50)
#118 := (or false #50)
#121 := (iff #118 #50)
#122 := [rewrite]: #121
#119 := (iff #56 #118)
#106 := (iff #44 false)
#96 := (not #44)
#47 := (or #41 #44)
#61 := (and #47 #56)
#78 := (not #61)
#87 := (or #44 #78 #64)
#90 := (not #87)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (and #9 #14)
#18 := (or #17 #11)
#15 := (or #14 #11)
#12 := (or #9 #11)
#16 := (and #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#93 := (iff #20 #90)
#70 := (or #44 #64)
#79 := (or #78 #70)
#84 := (not #79)
#91 := (iff #84 #90)
#88 := (iff #79 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#85 := (iff #20 #84)
#82 := (iff #19 #79)
#75 := (implies #61 #70)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #19 #75)
#73 := (iff #18 #70)
#67 := (or #64 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #18 #67)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#65 := (iff #17 #64)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#66 := [monotonicity #43 #52]: #65
#69 := [monotonicity #66 #46]: #68
#74 := [trans #69 #72]: #73
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#53 := (or #50 #44)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#55 := [monotonicity #52 #46]: #54
#60 := [trans #55 #58]: #59
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#63 := [monotonicity #49 #60]: #62
#77 := [monotonicity #63 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#94 := [trans #86 #92]: #93
#40 := [asserted]: #20
#95 := [mp #40 #94]: #90
#97 := [not-or-elim #95]: #96
#107 := [iff-false #97]: #106
#120 := [monotonicity #107]: #119
#124 := [trans #120 #122]: #123
#98 := [not-or-elim #95]: #61
#100 := [and-elim #98]: #56
#125 := [mp #100 #124]: #50
#127 := [iff-true #125]: #126
#116 := (iff #41 true)
#113 := (iff #47 #41)
#108 := (or #41 false)
#111 := (iff #108 #41)
#112 := [rewrite]: #111
#109 := (iff #47 #108)
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#99 := [and-elim #98]: #47
#115 := [mp #99 #114]: #41
#117 := [iff-true #115]: #116
#130 := [monotonicity #117 #127]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134]: #136
#141 := [trans #137 #139]: #140
#102 := [not-or-elim #95]: #101
[mp #102 #141]: false
unsat
25b40c8c6dac4ff528a28853107efdd6966efb87 110 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#47 := (or #41 #44)
#131 := (iff #47 false)
#126 := (or false false)
#129 := (iff #126 false)
#130 := [rewrite]: #129
#127 := (iff #47 #126)
#124 := (iff #44 false)
#120 := (not #44)
decl f5 :: S1
#13 := f5
#50 := (= f1 f5)
#59 := (and #44 #50)
#91 := (not #59)
#121 := (iff #91 #120)
#118 := (iff #59 #44)
#1 := true
#113 := (and #44 true)
#116 := (iff #113 #44)
#117 := [rewrite]: #116
#114 := (iff #59 #113)
#98 := (iff #50 true)
#53 := (and #47 #50)
#56 := (and #41 #50)
#68 := (not #53)
#77 := (or #68 #56 #59)
#80 := (not #77)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (and #11 #14)
#9 := (= f3 f1)
#16 := (and #9 #14)
#18 := (or #16 #17)
#12 := (or #9 #11)
#15 := (and #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#83 := (iff #20 #80)
#62 := (or #56 #59)
#69 := (or #68 #62)
#74 := (not #69)
#81 := (iff #74 #80)
#78 := (iff #69 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#65 := (implies #53 #62)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#60 := (iff #17 #59)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#61 := [monotonicity #46 #52]: #60
#57 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#58 := [monotonicity #43 #52]: #57
#64 := [monotonicity #58 #61]: #63
#54 := (iff #15 #53)
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [monotonicity #49 #52]: #54
#67 := [monotonicity #55 #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#84 := [trans #76 #82]: #83
#40 := [asserted]: #20
#85 := [mp #40 #84]: #80
#86 := [not-or-elim #85]: #53
#88 := [and-elim #86]: #50
#99 := [iff-true #88]: #98
#115 := [monotonicity #99]: #114
#119 := [trans #115 #117]: #118
#122 := [monotonicity #119]: #121
#92 := [not-or-elim #85]: #91
#123 := [mp #92 #122]: #120
#125 := [iff-false #123]: #124
#111 := (iff #41 false)
#107 := (not #41)
#89 := (not #56)
#108 := (iff #89 #107)
#105 := (iff #56 #41)
#100 := (and #41 true)
#103 := (iff #100 #41)
#104 := [rewrite]: #103
#101 := (iff #56 #100)
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#109 := [monotonicity #106]: #108
#90 := [not-or-elim #85]: #89
#110 := [mp #90 #109]: #107
#112 := [iff-false #110]: #111
#128 := [monotonicity #112 #125]: #127
#132 := [trans #128 #130]: #131
#87 := [and-elim #86]: #47
[mp #87 #132]: false
unsat
3be7256d2b13897c8029d9190e000fab6c7cea0c 127 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#50 := (= f1 f5)
#94 := (not #50)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#99 := (not #44)
#95 := (or #99 #94)
#92 := (not #95)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#98 := (not #41)
#100 := (or #98 #99)
#101 := (not #100)
#143 := [hypothesis]: #101
#133 := (or #100 #44)
#134 := [def-axiom]: #133
#144 := [unit-resolution #134 #143]: #44
#64 := (or #41 #50)
#131 := (or #100 #41)
#132 := [def-axiom]: #131
#145 := [unit-resolution #132 #143]: #41
#137 := (or #64 #98)
#138 := [def-axiom]: #137
#146 := [unit-resolution #138 #145]: #64
#112 := (not #64)
#113 := (or #99 #112)
#70 := (and #44 #64)
#88 := (not #70)
#122 := (iff #88 #113)
#114 := (not #113)
#117 := (not #114)
#120 := (iff #117 #113)
#121 := [rewrite]: #120
#118 := (iff #88 #117)
#115 := (iff #70 #114)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#56 := (and #44 #50)
#47 := (and #41 #44)
#61 := (or #47 #56)
#78 := (not #61)
#79 := (or #78 #70)
#84 := (not #79)
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (and #17 #11)
#15 := (and #14 #11)
#12 := (and #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#85 := (iff #20 #84)
#82 := (iff #19 #79)
#75 := (implies #61 #70)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #19 #75)
#73 := (iff #18 #70)
#67 := (and #64 #44)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #18 #67)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#65 := (iff #17 #64)
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#66 := [monotonicity #43 #52]: #65
#69 := [monotonicity #66 #46]: #68
#74 := [trans #69 #72]: #73
#62 := (iff #16 #61)
#59 := (iff #15 #56)
#53 := (and #50 #44)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #15 #53)
#55 := [monotonicity #52 #46]: #54
#60 := [trans #55 #58]: #59
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#63 := [monotonicity #49 #60]: #62
#77 := [monotonicity #63 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#40 := [asserted]: #20
#89 := [mp #40 #86]: #84
#90 := [not-or-elim #89]: #88
#124 := [mp #90 #123]: #113
#147 := [unit-resolution #124 #146 #144]: false
#148 := [lemma #147]: #100
#106 := (or #92 #101)
#109 := (iff #61 #106)
#103 := (or #101 #92)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #61 #103)
#93 := (iff #56 #92)
#102 := [rewrite]: #93
#96 := (iff #47 #101)
#97 := [rewrite]: #96
#105 := [monotonicity #97 #102]: #104
#110 := [trans #105 #108]: #109
#87 := [not-or-elim #89]: #61
#111 := [mp #87 #110]: #106
#149 := [unit-resolution #111 #148]: #92
#127 := (or #95 #50)
#128 := [def-axiom]: #127
#150 := [unit-resolution #128 #149]: #50
#125 := (or #95 #44)
#126 := [def-axiom]: #125
#151 := [unit-resolution #126 #149]: #44
#152 := [unit-resolution #124 #151]: #112
#139 := (or #64 #94)
#140 := [def-axiom]: #139
[unit-resolution #140 #152 #150]: false
unsat
e4d3d98d52d5e02451d4a933a7ae69eccde69dc7 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#45 := (not #36)
#46 := (or #45 #39)
#54 := (not #46)
#55 := (or #36 #54)
#85 := (iff #55 #54)
#80 := (or false #54)
#83 := (iff #80 #54)
#84 := [rewrite]: #83
#81 := (iff #55 #80)
#78 := (iff #36 false)
#63 := (not #55)
#64 := (or #36 #63)
#69 := (not #64)
#9 := (= f3 f1)
#11 := (= f4 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (not #14)
#70 := (iff #15 #69)
#67 := (iff #14 #64)
#60 := (implies #55 #36)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #14 #60)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#58 := (iff #13 #55)
#51 := (implies #46 #36)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #13 #51)
#49 := (iff #12 #46)
#42 := (implies #36 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #38 #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50 #38]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59 #38]: #61
#68 := [trans #62 #66]: #67
#71 := [monotonicity #68]: #70
#35 := [asserted]: #15
#74 := [mp #35 #71]: #69
#72 := [not-or-elim #74]: #45
#79 := [iff-false #72]: #78
#82 := [monotonicity #79]: #81
#86 := [trans #82 #84]: #85
#73 := [not-or-elim #74]: #55
#87 := [mp #73 #86]: #54
#76 := [not-or-elim #87]: #36
[unit-resolution #72 #76]: false
unsat
19c46603d78602c88e567210d895a32ffee713db 157 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#56 := (= f1 f5)
#62 := (not #56)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#63 := (or #44 #62)
#102 := (not #63)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (not #41)
#51 := (or #50 #44)
#120 := (not #44)
#101 := (not #51)
#155 := [hypothesis]: #101
#130 := (or #51 #120)
#131 := [def-axiom]: #130
#156 := [unit-resolution #131 #155]: #120
#71 := (or #41 #56)
#128 := (or #51 #41)
#129 := [def-axiom]: #128
#157 := [unit-resolution #129 #155]: #41
#114 := (or #71 #50)
#115 := [def-axiom]: #114
#158 := [unit-resolution #115 #157]: #71
#77 := (not #71)
#78 := (or #44 #77)
#103 := (or #101 #102)
#140 := (or #103 #51)
#141 := [def-axiom]: #140
#159 := [unit-resolution #141 #155]: #103
#104 := (not #103)
#149 := (or #78 #104)
#110 := (iff #78 #103)
#68 := (and #51 #63)
#89 := (not #68)
#90 := (iff #78 #89)
#111 := (iff #90 #110)
#108 := (iff #89 #103)
#96 := (not #104)
#106 := (iff #96 #103)
#107 := [rewrite]: #106
#98 := (iff #89 #96)
#99 := (iff #68 #104)
#100 := [rewrite]: #99
#105 := [monotonicity #100]: #98
#109 := [trans #105 #107]: #108
#112 := [monotonicity #109]: #111
#11 := (= f4 f1)
#14 := (= f5 f1)
#9 := (= f3 f1)
#17 := (or #9 #14)
#18 := (implies #17 #11)
#15 := (implies #14 #11)
#12 := (implies #9 #11)
#16 := (and #12 #15)
#19 := (iff #16 #18)
#20 := (not #19)
#93 := (iff #20 #90)
#83 := (iff #68 #78)
#86 := (not #83)
#91 := (iff #86 #90)
#92 := [rewrite]: #91
#87 := (iff #20 #86)
#84 := (iff #19 #83)
#81 := (iff #18 #78)
#74 := (implies #71 #44)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #18 #74)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#72 := (iff #17 #71)
#57 := (iff #14 #56)
#58 := [rewrite]: #57
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#73 := [monotonicity #43 #58]: #72
#76 := [monotonicity #73 #46]: #75
#82 := [trans #76 #80]: #81
#69 := (iff #16 #68)
#66 := (iff #15 #63)
#59 := (implies #56 #44)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #15 #59)
#61 := [monotonicity #58 #46]: #60
#67 := [trans #61 #65]: #66
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#70 := [monotonicity #55 #67]: #69
#85 := [monotonicity #70 #82]: #84
#88 := [monotonicity #85]: #87
#94 := [trans #88 #92]: #93
#40 := [asserted]: #20
#97 := [mp #40 #94]: #90
#113 := [mp #97 #112]: #110
#146 := (not #110)
#147 := (or #78 #104 #146)
#148 := [def-axiom]: #147
#150 := [unit-resolution #148 #113]: #149
#160 := [unit-resolution #150 #159]: #78
#125 := (not #78)
#126 := (or #125 #44 #77)
#127 := [def-axiom]: #126
#161 := [unit-resolution #127 #160 #158 #156]: false
#162 := [lemma #161]: #51
#163 := [hypothesis]: #125
#121 := (or #78 #120)
#122 := [def-axiom]: #121
#164 := [unit-resolution #122 #163]: #120
#165 := [unit-resolution #150 #163]: #104
#142 := (or #103 #63)
#143 := [def-axiom]: #142
#166 := [unit-resolution #143 #165]: #63
#123 := (or #78 #71)
#124 := [def-axiom]: #123
#167 := [unit-resolution #124 #163]: #71
#132 := (or #101 #50 #44)
#133 := [def-axiom]: #132
#168 := [unit-resolution #133 #164 #162]: #50
#118 := (or #77 #41 #56)
#119 := [def-axiom]: #118
#169 := [unit-resolution #119 #168 #167]: #56
#138 := (or #102 #44 #62)
#139 := [def-axiom]: #138
#170 := [unit-resolution #139 #169 #166 #164]: false
#171 := [lemma #170]: #78
#153 := (or #125 #103)
#151 := (or #125 #103 #146)
#152 := [def-axiom]: #151
#154 := [unit-resolution #152 #113]: #153
#172 := [unit-resolution #154 #171]: #103
#144 := (or #104 #101 #102)
#145 := [def-axiom]: #144
#173 := [unit-resolution #145 #172 #162]: #102
#136 := (or #63 #56)
#137 := [def-axiom]: #136
#174 := [unit-resolution #137 #173]: #56
#134 := (or #63 #120)
#135 := [def-axiom]: #134
#175 := [unit-resolution #135 #173]: #120
#176 := [unit-resolution #127 #175 #171]: #77
#116 := (or #71 #62)
#117 := [def-axiom]: #116
[unit-resolution #117 #176 #174]: false
unsat
9ca0ea6fd7baaf9ab5e21ea28520ab880b00ee9a 114 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#49 := (= f1 f5)
decl f4 :: S1
#10 := f4
#43 := (= f1 f4)
#64 := (not #43)
decl f3 :: S1
#8 := f3
#40 := (= f1 f3)
#73 := (not #40)
#91 := (or #73 #64 #49)
#46 := (and #40 #43)
#55 := (not #46)
#56 := (or #55 #49)
#85 := (not #56)
#97 := (iff #85 #91)
#132 := (iff #97 false)
#124 := (not #91)
#127 := (iff #124 #91)
#130 := (iff #127 false)
#131 := [rewrite]: #130
#128 := (iff #97 #127)
#125 := (iff #85 #124)
#122 := (iff #56 #91)
#110 := (or #73 #64)
#117 := (or #110 #49)
#120 := (iff #117 #91)
#121 := [rewrite]: #120
#118 := (iff #56 #117)
#115 := (iff #55 #110)
#111 := (not #110)
#108 := (not #111)
#107 := (iff #108 #110)
#114 := [rewrite]: #107
#109 := (iff #55 #108)
#112 := (iff #46 #111)
#113 := [rewrite]: #112
#106 := [monotonicity #113]: #109
#116 := [trans #106 #114]: #115
#119 := [monotonicity #116]: #118
#123 := [trans #119 #121]: #122
#126 := [monotonicity #123]: #125
#129 := [monotonicity #126]: #128
#133 := [trans #129 #131]: #132
#14 := (= f5 f1)
#11 := (= f4 f1)
#16 := (implies #11 #14)
#9 := (= f3 f1)
#17 := (implies #9 #16)
#12 := (and #9 #11)
#15 := (implies #12 #14)
#18 := (iff #15 #17)
#19 := (not #18)
#102 := (iff #19 #97)
#65 := (or #64 #49)
#74 := (or #73 #65)
#86 := (iff #74 #85)
#100 := (iff #86 #97)
#94 := (iff #91 #85)
#98 := (iff #94 #97)
#99 := [rewrite]: #98
#95 := (iff #86 #94)
#92 := (iff #74 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#101 := [trans #96 #99]: #100
#89 := (iff #19 #86)
#79 := (iff #56 #74)
#82 := (not #79)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #19 #82)
#80 := (iff #18 #79)
#77 := (iff #17 #74)
#70 := (implies #40 #65)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #17 #70)
#68 := (iff #16 #65)
#61 := (implies #43 #49)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #16 #61)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#44 := (iff #11 #43)
#45 := [rewrite]: #44
#63 := [monotonicity #45 #51]: #62
#69 := [trans #63 #67]: #68
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#72 := [monotonicity #42 #69]: #71
#78 := [trans #72 #76]: #77
#59 := (iff #15 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #15 #52)
#47 := (iff #12 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#81 := [monotonicity #60 #78]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#103 := [trans #90 #101]: #102
#39 := [asserted]: #19
#104 := [mp #39 #103]: #97
[mp #104 #133]: false
unsat
04315913425b7fdaa9756cb775e4e6e81e279b08 198 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#68 := (= f1 f5)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#89 := (and #44 #68)
#95 := (not #89)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#96 := (or #47 #95)
#217 := (iff #96 false)
#212 := (or false false)
#215 := (iff #212 false)
#216 := [rewrite]: #215
#213 := (iff #96 #212)
#210 := (iff #95 false)
#1 := true
#205 := (not true)
#208 := (iff #205 false)
#209 := [rewrite]: #208
#206 := (iff #95 #205)
#203 := (iff #89 true)
#198 := (and true true)
#201 := (iff #198 true)
#202 := [rewrite]: #201
#199 := (iff #89 #198)
#196 := (iff #68 true)
#74 := (not #68)
#75 := (or #47 #74)
#83 := (not #75)
#84 := (or #47 #83)
#193 := (iff #84 #68)
#188 := (or false #68)
#191 := (iff #188 #68)
#192 := [rewrite]: #191
#189 := (iff #84 #188)
#186 := (iff #83 #68)
#181 := (not #74)
#184 := (iff #181 #68)
#185 := [rewrite]: #184
#182 := (iff #83 #181)
#179 := (iff #75 #74)
#174 := (or false #74)
#177 := (iff #174 #74)
#178 := [rewrite]: #177
#175 := (iff #75 #174)
#148 := (iff #47 false)
#140 := (not #47)
#104 := (not #96)
#113 := (not #84)
#53 := (not #44)
#54 := (or #53 #47)
#62 := (not #54)
#63 := (or #47 #62)
#122 := (not #63)
#131 := (or #47 #122 #113 #104)
#134 := (not #131)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (implies #19 #11)
#16 := (implies #15 #11)
#17 := (implies #16 #11)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (implies #12 #11)
#22 := (implies #13 #21)
#23 := (not #22)
#137 := (iff #23 #134)
#105 := (or #47 #104)
#114 := (or #113 #105)
#123 := (or #122 #114)
#128 := (not #123)
#135 := (iff #128 #134)
#132 := (iff #123 #131)
#133 := [rewrite]: #132
#136 := [monotonicity #133]: #135
#129 := (iff #23 #128)
#126 := (iff #22 #123)
#119 := (implies #63 #114)
#124 := (iff #119 #123)
#125 := [rewrite]: #124
#120 := (iff #22 #119)
#117 := (iff #21 #114)
#110 := (implies #84 #105)
#115 := (iff #110 #114)
#116 := [rewrite]: #115
#111 := (iff #21 #110)
#108 := (iff #20 #105)
#101 := (implies #96 #47)
#106 := (iff #101 #105)
#107 := [rewrite]: #106
#102 := (iff #20 #101)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#99 := (iff #19 #96)
#92 := (implies #89 #47)
#97 := (iff #92 #96)
#98 := [rewrite]: #97
#93 := (iff #19 #92)
#90 := (iff #18 #89)
#69 := (iff #15 #68)
#70 := [rewrite]: #69
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#91 := [monotonicity #46 #70]: #90
#94 := [monotonicity #91 #49]: #93
#100 := [trans #94 #98]: #99
#103 := [monotonicity #100 #49]: #102
#109 := [trans #103 #107]: #108
#87 := (iff #17 #84)
#80 := (implies #75 #47)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #17 #80)
#78 := (iff #16 #75)
#71 := (implies #68 #47)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #16 #71)
#73 := [monotonicity #70 #49]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79 #49]: #81
#88 := [trans #82 #86]: #87
#112 := [monotonicity #88 #109]: #111
#118 := [trans #112 #116]: #117
#66 := (iff #13 #63)
#59 := (implies #54 #47)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #13 #59)
#57 := (iff #12 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #12 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58 #49]: #60
#67 := [trans #61 #65]: #66
#121 := [monotonicity #67 #118]: #120
#127 := [trans #121 #125]: #126
#130 := [monotonicity #127]: #129
#138 := [trans #130 #136]: #137
#43 := [asserted]: #23
#139 := [mp #43 #138]: #134
#141 := [not-or-elim #139]: #140
#149 := [iff-false #141]: #148
#176 := [monotonicity #149]: #175
#180 := [trans #176 #178]: #179
#183 := [monotonicity #180]: #182
#187 := [trans #183 #185]: #186
#190 := [monotonicity #149 #187]: #189
#194 := [trans #190 #192]: #193
#143 := [not-or-elim #139]: #84
#195 := [mp #143 #194]: #68
#197 := [iff-true #195]: #196
#172 := (iff #44 true)
#169 := (iff #63 #44)
#164 := (or false #44)
#167 := (iff #164 #44)
#168 := [rewrite]: #167
#165 := (iff #63 #164)
#162 := (iff #62 #44)
#157 := (not #53)
#160 := (iff #157 #44)
#161 := [rewrite]: #160
#158 := (iff #62 #157)
#155 := (iff #54 #53)
#150 := (or #53 false)
#153 := (iff #150 #53)
#154 := [rewrite]: #153
#151 := (iff #54 #150)
#152 := [monotonicity #149]: #151
#156 := [trans #152 #154]: #155
#159 := [monotonicity #156]: #158
#163 := [trans #159 #161]: #162
#166 := [monotonicity #149 #163]: #165
#170 := [trans #166 #168]: #169
#142 := [not-or-elim #139]: #63
#171 := [mp #142 #170]: #44
#173 := [iff-true #171]: #172
#200 := [monotonicity #173 #197]: #199
#204 := [trans #200 #202]: #203
#207 := [monotonicity #204]: #206
#211 := [trans #207 #209]: #210
#214 := [monotonicity #149 #211]: #213
#218 := [trans #214 #216]: #217
#144 := [not-or-elim #139]: #96
[mp #144 #218]: false
unsat
a3110cebbaf91f1580f58fbd5e9552fa7ad95997 134 0
#2 := false
decl f5 :: S1
#14 := f5
decl f1 :: S1
#4 := f1
#62 := (= f1 f5)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#77 := (and #44 #62)
#83 := (not #77)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#84 := (or #47 #83)
#153 := (iff #84 false)
#148 := (or false false)
#151 := (iff #148 false)
#152 := [rewrite]: #151
#149 := (iff #84 #148)
#146 := (iff #83 false)
#1 := true
#141 := (not true)
#144 := (iff #141 false)
#145 := [rewrite]: #144
#142 := (iff #83 #141)
#139 := (iff #77 true)
#134 := (and true true)
#137 := (iff #134 true)
#138 := [rewrite]: #137
#135 := (iff #77 #134)
#132 := (iff #62 true)
#89 := (not #84)
#68 := (not #62)
#53 := (not #44)
#111 := (or #53 #47 #68 #89)
#114 := (not #111)
#11 := (= f4 f1)
#15 := (= f5 f1)
#9 := (= f3 f1)
#18 := (and #9 #15)
#19 := (implies #18 #11)
#20 := (not #19)
#16 := (implies #15 #11)
#17 := (not #16)
#21 := (implies #17 #20)
#12 := (implies #9 #11)
#13 := (not #12)
#22 := (implies #13 #21)
#23 := (not #22)
#117 := (iff #23 #114)
#69 := (or #47 #68)
#95 := (or #69 #89)
#54 := (or #53 #47)
#103 := (or #54 #95)
#108 := (not #103)
#115 := (iff #108 #114)
#112 := (iff #103 #111)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#109 := (iff #23 #108)
#106 := (iff #22 #103)
#59 := (not #54)
#100 := (implies #59 #95)
#104 := (iff #100 #103)
#105 := [rewrite]: #104
#101 := (iff #22 #100)
#98 := (iff #21 #95)
#74 := (not #69)
#92 := (implies #74 #89)
#96 := (iff #92 #95)
#97 := [rewrite]: #96
#93 := (iff #21 #92)
#90 := (iff #20 #89)
#87 := (iff #19 #84)
#80 := (implies #77 #47)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #19 #80)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#78 := (iff #18 #77)
#63 := (iff #15 #62)
#64 := [rewrite]: #63
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#79 := [monotonicity #46 #64]: #78
#82 := [monotonicity #79 #49]: #81
#88 := [trans #82 #86]: #87
#91 := [monotonicity #88]: #90
#75 := (iff #17 #74)
#72 := (iff #16 #69)
#65 := (implies #62 #47)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #16 #65)
#67 := [monotonicity #64 #49]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#94 := [monotonicity #76 #91]: #93
#99 := [trans #94 #97]: #98
#60 := (iff #13 #59)
#57 := (iff #12 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #12 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58]: #60
#102 := [monotonicity #61 #99]: #101
#107 := [trans #102 #105]: #106
#110 := [monotonicity #107]: #109
#118 := [trans #110 #116]: #117
#43 := [asserted]: #23
#119 := [mp #43 #118]: #114
#123 := [not-or-elim #119]: #62
#133 := [iff-true #123]: #132
#128 := (iff #44 true)
#120 := [not-or-elim #119]: #44
#129 := [iff-true #120]: #128
#136 := [monotonicity #129 #133]: #135
#140 := [trans #136 #138]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#130 := (iff #47 false)
#121 := (not #47)
#122 := [not-or-elim #119]: #121
#131 := [iff-false #122]: #130
#150 := [monotonicity #131 #147]: #149
#154 := [trans #150 #152]: #153
#124 := [not-or-elim #119]: #84
[mp #124 #154]: false
unsat
d522bffbdc6af87260d2b830a506e89f66c0f6c5 162 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (not #41)
#73 := (or #56 #47)
#100 := (not #73)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#65 := (or #56 #44)
#99 := (not #65)
#101 := (or #99 #100)
#96 := (not #47)
#94 := (not #44)
#103 := (or #94 #96)
#104 := (not #103)
#107 := (or #56 #104)
#110 := (not #107)
#102 := (not #101)
#161 := [hypothesis]: #102
#155 := (or #101 #110)
#116 := (iff #101 #107)
#50 := (and #44 #47)
#57 := (or #56 #50)
#87 := (not #57)
#78 := (and #65 #73)
#88 := (iff #78 #87)
#119 := (iff #88 #116)
#113 := (iff #102 #110)
#117 := (iff #113 #116)
#118 := [rewrite]: #117
#114 := (iff #88 #113)
#111 := (iff #87 #110)
#108 := (iff #57 #107)
#105 := (iff #50 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#112 := [monotonicity #109]: #111
#97 := (iff #78 #102)
#98 := [rewrite]: #97
#115 := [monotonicity #98 #112]: #114
#120 := [trans #115 #118]: #119
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (and #16 #17)
#14 := (and #11 #13)
#15 := (implies #9 #14)
#19 := (iff #15 #18)
#20 := (not #19)
#91 := (iff #20 #88)
#81 := (iff #57 #78)
#84 := (not #81)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #20 #84)
#82 := (iff #19 #81)
#79 := (iff #18 #78)
#76 := (iff #17 #73)
#70 := (implies #41 #47)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #17 #70)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#72 := [monotonicity #43 #49]: #71
#77 := [trans #72 #75]: #76
#68 := (iff #16 #65)
#62 := (implies #41 #44)
#66 := (iff #62 #65)
#67 := [rewrite]: #66
#63 := (iff #16 #62)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#64 := [monotonicity #43 #46]: #63
#69 := [trans #64 #67]: #68
#80 := [monotonicity #69 #77]: #79
#60 := (iff #15 #57)
#53 := (implies #41 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#55 := [monotonicity #43 #52]: #54
#61 := [trans #55 #59]: #60
#83 := [monotonicity #61 #80]: #82
#86 := [monotonicity #83]: #85
#92 := [trans #86 #90]: #91
#40 := [asserted]: #20
#95 := [mp #40 #92]: #88
#121 := [mp #95 #120]: #116
#152 := (not #116)
#153 := (or #101 #110 #152)
#154 := [def-axiom]: #153
#156 := [unit-resolution #154 #121]: #155
#162 := [unit-resolution #156 #161]: #110
#148 := (or #107 #103)
#149 := [def-axiom]: #148
#163 := [unit-resolution #149 #162]: #103
#134 := (or #101 #65)
#135 := [def-axiom]: #134
#164 := [unit-resolution #135 #161]: #65
#146 := (or #107 #41)
#147 := [def-axiom]: #146
#165 := [unit-resolution #147 #162]: #41
#126 := (or #99 #56 #44)
#127 := [def-axiom]: #126
#166 := [unit-resolution #127 #165 #164]: #44
#136 := (or #101 #73)
#137 := [def-axiom]: #136
#167 := [unit-resolution #137 #161]: #73
#132 := (or #100 #56 #47)
#133 := [def-axiom]: #132
#168 := [unit-resolution #133 #165 #167]: #47
#144 := (or #104 #94 #96)
#145 := [def-axiom]: #144
#169 := [unit-resolution #145 #168 #166 #163]: false
#170 := [lemma #169]: #101
#159 := (or #102 #107)
#157 := (or #102 #107 #152)
#158 := [def-axiom]: #157
#160 := [unit-resolution #158 #121]: #159
#176 := [unit-resolution #160 #170]: #107
#171 := [hypothesis]: #56
#122 := (or #65 #41)
#123 := [def-axiom]: #122
#172 := [unit-resolution #123 #171]: #65
#128 := (or #73 #41)
#129 := [def-axiom]: #128
#173 := [unit-resolution #129 #171]: #73
#138 := (or #102 #99 #100)
#139 := [def-axiom]: #138
#174 := [unit-resolution #139 #173 #172 #170]: false
#175 := [lemma #174]: #41
#150 := (or #110 #56 #104)
#151 := [def-axiom]: #150
#177 := [unit-resolution #151 #175 #176]: #104
#140 := (or #103 #44)
#141 := [def-axiom]: #140
#178 := [unit-resolution #141 #177]: #44
#124 := (or #65 #94)
#125 := [def-axiom]: #124
#179 := [unit-resolution #125 #178]: #65
#142 := (or #103 #47)
#143 := [def-axiom]: #142
#180 := [unit-resolution #143 #177]: #47
#130 := (or #73 #96)
#131 := [def-axiom]: #130
#181 := [unit-resolution #131 #180]: #73
[unit-resolution #139 #181 #179 #170]: false
unsat
f29fbcc0ceaf6bd7f24274c3de5b8c954ec638b1 54 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (implies #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#71 := (iff #14 false)
#38 := (= f1 f4)
#44 := (not #38)
#35 := (= f1 f3)
#45 := (or #35 #44)
#53 := (not #35)
#54 := (or #53 #45)
#59 := (not #54)
#69 := (iff #59 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #59 #64)
#62 := (iff #54 true)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#60 := (iff #14 #59)
#57 := (iff #13 #54)
#50 := (implies #35 #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #13 #50)
#48 := (iff #12 #45)
#41 := (implies #38 #35)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #12 #41)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40 #37]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #37 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #58]: #60
#72 := [trans #61 #70]: #71
#34 := [asserted]: #14
[mp #34 #72]: false
unsat
d58edad648d31ef919b96bbaf6580f1a23405517 144 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
#53 := (not #44)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#62 := (not #41)
#105 := (or #62 #53 #47)
#163 := (iff #105 false)
#158 := (or false false false)
#161 := (iff #158 false)
#162 := [rewrite]: #161
#159 := (iff #105 #158)
#135 := (iff #47 false)
#126 := (not #47)
#108 := (not #105)
#71 := (or #62 #44)
#87 := (not #71)
#114 := (or #62 #47 #87 #108)
#119 := (not #114)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (implies #16 #17)
#14 := (implies #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#122 := (iff #20 #119)
#79 := (or #62 #47)
#88 := (or #87 #79)
#54 := (or #53 #47)
#63 := (or #62 #54)
#96 := (not #63)
#97 := (or #96 #88)
#102 := (not #97)
#120 := (iff #102 #119)
#117 := (iff #97 #114)
#111 := (or #108 #88)
#115 := (iff #111 #114)
#116 := [rewrite]: #115
#112 := (iff #97 #111)
#109 := (iff #96 #108)
#106 := (iff #63 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#118 := [trans #113 #116]: #117
#121 := [monotonicity #118]: #120
#103 := (iff #20 #102)
#100 := (iff #19 #97)
#93 := (implies #63 #88)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #19 #93)
#91 := (iff #18 #88)
#84 := (implies #71 #79)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #18 #84)
#82 := (iff #17 #79)
#76 := (implies #41 #47)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #17 #76)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#78 := [monotonicity #43 #49]: #77
#83 := [trans #78 #81]: #82
#74 := (iff #16 #71)
#68 := (implies #41 #44)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #16 #68)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#70 := [monotonicity #43 #46]: #69
#75 := [trans #70 #73]: #74
#86 := [monotonicity #75 #83]: #85
#92 := [trans #86 #90]: #91
#66 := (iff #15 #63)
#59 := (implies #41 #54)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #15 #59)
#57 := (iff #14 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [monotonicity #43 #58]: #60
#67 := [trans #61 #65]: #66
#95 := [monotonicity #67 #92]: #94
#101 := [trans #95 #99]: #100
#104 := [monotonicity #101]: #103
#123 := [trans #104 #121]: #122
#40 := [asserted]: #20
#124 := [mp #40 #123]: #119
#127 := [not-or-elim #124]: #126
#136 := [iff-false #127]: #135
#156 := (iff #53 false)
#1 := true
#137 := (not true)
#140 := (iff #137 false)
#141 := [rewrite]: #140
#154 := (iff #53 #137)
#152 := (iff #44 true)
#149 := (iff #71 #44)
#144 := (or false #44)
#147 := (iff #144 #44)
#148 := [rewrite]: #147
#145 := (iff #71 #144)
#142 := (iff #62 false)
#138 := (iff #62 #137)
#133 := (iff #41 true)
#125 := [not-or-elim #124]: #41
#134 := [iff-true #125]: #133
#139 := [monotonicity #134]: #138
#143 := [trans #139 #141]: #142
#146 := [monotonicity #143]: #145
#150 := [trans #146 #148]: #149
#128 := [not-or-elim #124]: #71
#151 := [mp #128 #150]: #44
#153 := [iff-true #151]: #152
#155 := [monotonicity #153]: #154
#157 := [trans #155 #141]: #156
#160 := [monotonicity #143 #157 #136]: #159
#164 := [trans #160 #162]: #163
#129 := [not-or-elim #124]: #105
[mp #129 #164]: false
unsat
00d66332779f959f5155f96744316681d812ae6d 121 0
#2 := false
decl f5 :: S1
#13 := f5
decl f1 :: S1
#4 := f1
#56 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (not #41)
#93 := (or #50 #44 #56)
#140 := (iff #93 false)
#135 := (or false false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #93 #135)
#126 := (iff #56 false)
#116 := (not #56)
#96 := (not #93)
#102 := (or #50 #44 #56 #96)
#107 := (not #102)
#14 := (= f5 f1)
#11 := (= f4 f1)
#17 := (or #11 #14)
#9 := (= f3 f1)
#18 := (implies #9 #17)
#15 := (implies #9 #14)
#12 := (implies #9 #11)
#16 := (or #12 #15)
#19 := (implies #16 #18)
#20 := (not #19)
#110 := (iff #20 #107)
#70 := (or #44 #56)
#76 := (or #50 #70)
#62 := (or #50 #56)
#51 := (or #50 #44)
#67 := (or #51 #62)
#84 := (not #67)
#85 := (or #84 #76)
#90 := (not #85)
#108 := (iff #90 #107)
#105 := (iff #85 #102)
#99 := (or #96 #76)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #85 #99)
#97 := (iff #84 #96)
#94 := (iff #67 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#109 := [monotonicity #106]: #108
#91 := (iff #20 #90)
#88 := (iff #19 #85)
#81 := (implies #67 #76)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #19 #81)
#79 := (iff #18 #76)
#73 := (implies #41 #70)
#77 := (iff #73 #76)
#78 := [rewrite]: #77
#74 := (iff #18 #73)
#71 := (iff #17 #70)
#57 := (iff #14 #56)
#58 := [rewrite]: #57
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#72 := [monotonicity #46 #58]: #71
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#75 := [monotonicity #43 #72]: #74
#80 := [trans #75 #78]: #79
#68 := (iff #16 #67)
#65 := (iff #15 #62)
#59 := (implies #41 #56)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#61 := [monotonicity #43 #58]: #60
#66 := [trans #61 #64]: #65
#54 := (iff #12 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #12 #47)
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#69 := [monotonicity #55 #66]: #68
#83 := [monotonicity #69 #80]: #82
#89 := [trans #83 #87]: #88
#92 := [monotonicity #89]: #91
#111 := [trans #92 #109]: #110
#40 := [asserted]: #20
#112 := [mp #40 #111]: #107
#117 := [not-or-elim #112]: #116
#127 := [iff-false #117]: #126
#124 := (iff #44 false)
#114 := (not #44)
#115 := [not-or-elim #112]: #114
#125 := [iff-false #115]: #124
#133 := (iff #50 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #50 #128)
#122 := (iff #41 true)
#113 := [not-or-elim #112]: #41
#123 := [iff-true #113]: #122
#130 := [monotonicity #123]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134 #125 #127]: #136
#141 := [trans #137 #139]: #140
#118 := [not-or-elim #112]: #93
[mp #118 #141]: false
unsat
e8da757bab2c8873de4c9abb00d9ba6b32efbf76 123 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#56 := (not #48)
#57 := (or #38 #56)
#65 := (not #57)
#66 := (or #38 #65)
#74 := (not #66)
#75 := (or #41 #74)
#143 := (iff #75 false)
#138 := (or false false)
#141 := (iff #138 false)
#142 := [rewrite]: #141
#139 := (iff #75 #138)
#136 := (iff #74 false)
#1 := true
#131 := (not true)
#134 := (iff #131 false)
#135 := [rewrite]: #134
#132 := (iff #74 #131)
#129 := (iff #66 true)
#124 := (or #38 #47)
#127 := (iff #124 true)
#128 := [rewrite]: #127
#125 := (iff #66 #124)
#122 := (iff #65 #47)
#120 := (iff #57 #38)
#115 := (or #38 #38)
#118 := (iff #115 #38)
#119 := [rewrite]: #118
#116 := (iff #57 #115)
#113 := (iff #56 #38)
#108 := (not #47)
#111 := (iff #108 #38)
#112 := [rewrite]: #111
#109 := (iff #56 #108)
#106 := (iff #48 #47)
#101 := (or #47 false)
#104 := (iff #101 #47)
#105 := [rewrite]: #104
#102 := (iff #48 #101)
#99 := (iff #41 false)
#92 := (not #41)
#83 := (not #75)
#84 := (or #41 #83)
#89 := (not #84)
#11 := (= f4 f1)
#9 := (= f3 f1)
#12 := (implies #9 #11)
#13 := (implies #12 #9)
#14 := (implies #13 #9)
#15 := (implies #14 #11)
#16 := (implies #15 #11)
#17 := (not #16)
#90 := (iff #17 #89)
#87 := (iff #16 #84)
#80 := (implies #75 #41)
#85 := (iff #80 #84)
#86 := [rewrite]: #85
#81 := (iff #16 #80)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#78 := (iff #15 #75)
#71 := (implies #66 #41)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #15 #71)
#69 := (iff #14 #66)
#62 := (implies #57 #38)
#67 := (iff #62 #66)
#68 := [rewrite]: #67
#63 := (iff #14 #62)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#60 := (iff #13 #57)
#53 := (implies #48 #38)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #13 #53)
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52 #40]: #54
#61 := [trans #55 #59]: #60
#64 := [monotonicity #61 #40]: #63
#70 := [trans #64 #68]: #69
#73 := [monotonicity #70 #43]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79 #43]: #81
#88 := [trans #82 #86]: #87
#91 := [monotonicity #88]: #90
#37 := [asserted]: #17
#94 := [mp #37 #91]: #89
#93 := [not-or-elim #94]: #92
#100 := [iff-false #93]: #99
#103 := [monotonicity #100]: #102
#107 := [trans #103 #105]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#117 := [monotonicity #114]: #116
#121 := [trans #117 #119]: #120
#123 := [monotonicity #121]: #122
#126 := [monotonicity #123]: #125
#130 := [trans #126 #128]: #129
#133 := [monotonicity #130]: #132
#137 := [trans #133 #135]: #136
#140 := [monotonicity #100 #137]: #139
#144 := [trans #140 #142]: #143
#95 := [not-or-elim #94]: #75
[mp #95 #144]: false
unsat
e9d35c7bb1cf28b044ff39158dac0d3feace74d2 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (implies #12 #15)
#17 := (not #16)
#77 := (iff #17 false)
#1 := true
#72 := (not true)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #17 #72)
#70 := (iff #16 true)
#41 := (= f1 f4)
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#65 := (implies #48 #48)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 #48)
#53 := (not #41)
#58 := (implies #53 #47)
#61 := (iff #58 #48)
#62 := [rewrite]: #61
#59 := (iff #15 #58)
#56 := (iff #14 #47)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#57 := [monotonicity #40]: #56
#54 := (iff #13 #53)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#55 := [monotonicity #43]: #54
#60 := [monotonicity #55 #57]: #59
#64 := [trans #60 #62]: #63
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#67 := [monotonicity #52 #64]: #66
#71 := [trans #67 #69]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#37 := [asserted]: #17
[mp #37 #78]: false
unsat
ff95a56cf58e4b621d6e82e0aebf8b86faaedf39 121 0
#2 := false
decl f5 :: S1
#12 := f5
decl f1 :: S1
#4 := f1
#47 := (= f1 f5)
decl f4 :: S1
#10 := f4
#44 := (= f1 f4)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#56 := (not #41)
#93 := (or #56 #44 #47)
#140 := (iff #93 false)
#135 := (or false false false)
#138 := (iff #135 false)
#139 := [rewrite]: #138
#136 := (iff #93 #135)
#126 := (iff #47 false)
#116 := (not #47)
#96 := (not #93)
#102 := (or #56 #44 #47 #96)
#107 := (not #102)
#13 := (= f5 f1)
#9 := (= f3 f1)
#17 := (implies #9 #13)
#11 := (= f4 f1)
#16 := (implies #9 #11)
#18 := (or #16 #17)
#14 := (or #11 #13)
#15 := (implies #9 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#110 := (iff #20 #107)
#73 := (or #56 #47)
#65 := (or #56 #44)
#78 := (or #65 #73)
#50 := (or #44 #47)
#57 := (or #56 #50)
#84 := (not #57)
#85 := (or #84 #78)
#90 := (not #85)
#108 := (iff #90 #107)
#105 := (iff #85 #102)
#99 := (or #96 #78)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #85 #99)
#97 := (iff #84 #96)
#94 := (iff #57 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#106 := [trans #101 #104]: #105
#109 := [monotonicity #106]: #108
#91 := (iff #20 #90)
#88 := (iff #19 #85)
#81 := (implies #57 #78)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #19 #81)
#79 := (iff #18 #78)
#76 := (iff #17 #73)
#70 := (implies #41 #47)
#74 := (iff #70 #73)
#75 := [rewrite]: #74
#71 := (iff #17 #70)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#72 := [monotonicity #43 #49]: #71
#77 := [trans #72 #75]: #76
#68 := (iff #16 #65)
#62 := (implies #41 #44)
#66 := (iff #62 #65)
#67 := [rewrite]: #66
#63 := (iff #16 #62)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#64 := [monotonicity #43 #46]: #63
#69 := [trans #64 #67]: #68
#80 := [monotonicity #69 #77]: #79
#60 := (iff #15 #57)
#53 := (implies #41 #50)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#51 := (iff #14 #50)
#52 := [monotonicity #46 #49]: #51
#55 := [monotonicity #43 #52]: #54
#61 := [trans #55 #59]: #60
#83 := [monotonicity #61 #80]: #82
#89 := [trans #83 #87]: #88
#92 := [monotonicity #89]: #91
#111 := [trans #92 #109]: #110
#40 := [asserted]: #20
#112 := [mp #40 #111]: #107
#117 := [not-or-elim #112]: #116
#127 := [iff-false #117]: #126
#124 := (iff #44 false)
#114 := (not #44)
#115 := [not-or-elim #112]: #114
#125 := [iff-false #115]: #124
#133 := (iff #56 false)
#1 := true
#128 := (not true)
#131 := (iff #128 false)
#132 := [rewrite]: #131
#129 := (iff #56 #128)
#122 := (iff #41 true)
#113 := [not-or-elim #112]: #41
#123 := [iff-true #113]: #122
#130 := [monotonicity #123]: #129
#134 := [trans #130 #132]: #133
#137 := [monotonicity #134 #125 #127]: #136
#141 := [trans #137 #139]: #140
#118 := [not-or-elim #112]: #93
[mp #118 #141]: false
unsat
47f13964ba3dfd91ee45da107e4d79352a28a5c5 84 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
#56 := (not #41)
#100 := [hypothesis]: #56
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#57 := (or #38 #56)
#62 := (and #48 #57)
#65 := (iff #38 #41)
#71 := (not #62)
#72 := (or #71 #65)
#77 := (not #72)
#11 := (= f4 f1)
#9 := (= f3 f1)
#15 := (iff #9 #11)
#13 := (implies #11 #9)
#12 := (implies #9 #11)
#14 := (and #12 #13)
#16 := (implies #14 #15)
#17 := (not #16)
#78 := (iff #17 #77)
#75 := (iff #16 #72)
#68 := (implies #62 #65)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #16 #68)
#66 := (iff #15 #65)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#67 := [monotonicity #40 #43]: #66
#63 := (iff #14 #62)
#60 := (iff #13 #57)
#53 := (implies #41 #38)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #13 #53)
#55 := [monotonicity #43 #40]: #54
#61 := [trans #55 #59]: #60
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#64 := [monotonicity #52 #61]: #63
#70 := [monotonicity #64 #67]: #69
#76 := [trans #70 #74]: #75
#79 := [monotonicity #76]: #78
#37 := [asserted]: #17
#82 := [mp #37 #79]: #77
#80 := [not-or-elim #82]: #62
#81 := [and-elim #80]: #48
#101 := [unit-resolution #81 #100]: #47
#92 := (or #41 #38)
#93 := (iff #41 #47)
#84 := (not #65)
#94 := (iff #84 #93)
#95 := [rewrite]: #94
#85 := [not-or-elim #82]: #84
#96 := [mp #85 #95]: #93
#97 := (not #93)
#98 := (or #41 #38 #97)
#91 := [def-axiom]: #98
#89 := [unit-resolution #91 #96]: #92
#102 := [unit-resolution #89 #101 #100]: false
#103 := [lemma #102]: #41
#83 := [and-elim #80]: #57
#104 := [unit-resolution #83 #103]: #38
#88 := (or #56 #47)
#90 := (or #56 #47 #97)
#87 := [def-axiom]: #90
#99 := [unit-resolution #87 #96]: #88
[unit-resolution #99 #104 #103]: false
unsat
67d0291df830bf23c2458b5c5d9ab7a1b7326290 47 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (iff #11 #9)
#12 := (iff #9 #11)
#14 := (iff #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (iff #36 #39)
#52 := (iff #42 #42)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 #42)
#45 := (iff #39 #36)
#48 := (iff #45 #42)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#47 := [monotonicity #41 #38]: #46
#51 := [trans #47 #49]: #50
#43 := (iff #12 #42)
#44 := [monotonicity #38 #41]: #43
#54 := [monotonicity #44 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
6d227e1b0585e5b365b0d07f07d7c5708cbc3115 41 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (iff #9 #10)
#12 := (not #11)
#13 := (not #12)
#59 := (iff #13 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #13 #54)
#52 := (iff #12 true)
#47 := (not false)
#50 := (iff #47 true)
#51 := [rewrite]: #50
#48 := (iff #12 #47)
#45 := (iff #11 false)
#34 := (= f1 f3)
#37 := (not #34)
#40 := (iff #34 #37)
#43 := (iff #40 false)
#44 := [rewrite]: #43
#41 := (iff #11 #40)
#38 := (iff #10 #37)
#35 := (iff #9 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [monotonicity #36 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#33 := [asserted]: #13
[mp #33 #60]: false
unsat
183781528451fe65de60bc2d2e22c1d75fff00de 60 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#14 := (not #9)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#13 := (not #11)
#15 := (implies #13 #14)
#12 := (implies #9 #11)
#16 := (iff #12 #15)
#17 := (not #16)
#77 := (iff #17 false)
#1 := true
#72 := (not true)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #17 #72)
#70 := (iff #16 true)
#41 := (= f1 f4)
#38 := (= f1 f3)
#47 := (not #38)
#48 := (or #47 #41)
#65 := (iff #48 #48)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #16 #65)
#63 := (iff #15 #48)
#53 := (not #41)
#58 := (implies #53 #47)
#61 := (iff #58 #48)
#62 := [rewrite]: #61
#59 := (iff #15 #58)
#56 := (iff #14 #47)
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#57 := [monotonicity #40]: #56
#54 := (iff #13 #53)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#55 := [monotonicity #43]: #54
#60 := [monotonicity #55 #57]: #59
#64 := [trans #60 #62]: #63
#51 := (iff #12 #48)
#44 := (implies #38 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #12 #44)
#46 := [monotonicity #40 #43]: #45
#52 := [trans #46 #50]: #51
#67 := [monotonicity #52 #64]: #66
#71 := [trans #67 #69]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#37 := [asserted]: #17
[mp #37 #78]: false
unsat
8a2f295cb26eb802daa0916270c630d0aae6a230 72 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (iff #9 #9)
#11 := (iff #9 #10)
#12 := (iff #9 #11)
#13 := (iff #9 #12)
#14 := (iff #9 #13)
#15 := (iff #9 #14)
#16 := (iff #9 #15)
#17 := (iff #9 #16)
#18 := (iff #9 #17)
#19 := (not #18)
#90 := (iff #19 false)
#1 := true
#85 := (not true)
#88 := (iff #85 false)
#89 := [rewrite]: #88
#86 := (iff #19 #85)
#83 := (iff #18 true)
#40 := (= f1 f3)
#43 := (iff #40 #40)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#81 := (iff #18 #43)
#79 := (iff #17 #40)
#50 := (iff #40 true)
#53 := (iff #50 #40)
#54 := [rewrite]: #53
#77 := (iff #17 #50)
#75 := (iff #16 true)
#73 := (iff #16 #43)
#71 := (iff #15 #40)
#69 := (iff #15 #50)
#67 := (iff #14 true)
#65 := (iff #14 #43)
#63 := (iff #13 #40)
#61 := (iff #13 #50)
#59 := (iff #12 true)
#57 := (iff #12 #43)
#55 := (iff #11 #40)
#51 := (iff #11 #50)
#48 := (iff #10 true)
#44 := (iff #10 #43)
#41 := (iff #9 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #42 #49]: #51
#56 := [trans #52 #54]: #55
#58 := [monotonicity #42 #56]: #57
#60 := [trans #58 #47]: #59
#62 := [monotonicity #42 #60]: #61
#64 := [trans #62 #54]: #63
#66 := [monotonicity #42 #64]: #65
#68 := [trans #66 #47]: #67
#70 := [monotonicity #42 #68]: #69
#72 := [trans #70 #54]: #71
#74 := [monotonicity #42 #72]: #73
#76 := [trans #74 #47]: #75
#78 := [monotonicity #42 #76]: #77
#80 := [trans #78 #54]: #79
#82 := [monotonicity #42 #80]: #81
#84 := [trans #82 #47]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#39 := [asserted]: #19
[mp #39 #91]: false
unsat
1c44d521ac456bc35b48a603c12488d178412b54 151 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#44 := (= f1 f4)
decl f5 :: S1
#12 := f5
#47 := (= f1 f5)
decl f3 :: S1
#8 := f3
#41 := (= f1 f3)
#50 := (ite #41 #44 #47)
#67 := (or #41 #47)
#94 := (not #67)
#56 := (not #41)
#57 := (or #56 #44)
#93 := (not #57)
#95 := (or #93 #94)
#96 := (not #95)
#153 := [hypothesis]: #96
#133 := (or #95 #67)
#134 := [def-axiom]: #133
#154 := [unit-resolution #134 #153]: #67
#81 := (not #50)
#144 := (or #81 #95)
#103 := (iff #50 #95)
#72 := (and #57 #67)
#82 := (iff #72 #81)
#106 := (iff #82 #103)
#98 := (iff #95 #50)
#104 := (iff #98 #103)
#105 := [rewrite]: #104
#101 := (iff #82 #98)
#88 := (iff #96 #81)
#99 := (iff #88 #98)
#100 := [rewrite]: #99
#90 := (iff #82 #88)
#91 := (iff #72 #96)
#92 := [rewrite]: #91
#97 := [monotonicity #92]: #90
#102 := [trans #97 #100]: #101
#107 := [trans #102 #105]: #106
#13 := (= f5 f1)
#9 := (= f3 f1)
#16 := (not #9)
#17 := (implies #16 #13)
#11 := (= f4 f1)
#15 := (implies #9 #11)
#18 := (and #15 #17)
#14 := (ite #9 #11 #13)
#19 := (iff #14 #18)
#20 := (not #19)
#85 := (iff #20 #82)
#75 := (iff #50 #72)
#78 := (not #75)
#83 := (iff #78 #82)
#84 := [rewrite]: #83
#79 := (iff #20 #78)
#76 := (iff #19 #75)
#73 := (iff #18 #72)
#70 := (iff #17 #67)
#64 := (implies #56 #47)
#68 := (iff #64 #67)
#69 := [rewrite]: #68
#65 := (iff #17 #64)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#62 := (iff #16 #56)
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#63 := [monotonicity #43]: #62
#66 := [monotonicity #63 #49]: #65
#71 := [trans #66 #69]: #70
#60 := (iff #15 #57)
#53 := (implies #41 #44)
#58 := (iff #53 #57)
#59 := [rewrite]: #58
#54 := (iff #15 #53)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#55 := [monotonicity #43 #46]: #54
#61 := [trans #55 #59]: #60
#74 := [monotonicity #61 #71]: #73
#51 := (iff #14 #50)
#52 := [monotonicity #43 #46 #49]: #51
#77 := [monotonicity #52 #74]: #76
#80 := [monotonicity #77]: #79
#86 := [trans #80 #84]: #85
#40 := [asserted]: #20
#89 := [mp #40 #86]: #82
#108 := [mp #89 #107]: #103
#137 := (not #103)
#142 := (or #81 #95 #137)
#143 := [def-axiom]: #142
#145 := [unit-resolution #143 #108]: #144
#155 := [unit-resolution #145 #153]: #81
#131 := (or #95 #57)
#132 := [def-axiom]: #131
#156 := [unit-resolution #132 #153]: #57
#151 := (or #56 #93 #50)
#146 := [hypothesis]: #57
#147 := [hypothesis]: #41
#113 := (not #44)
#148 := [hypothesis]: #81
#114 := (or #50 #56 #113)
#115 := [def-axiom]: #114
#149 := [unit-resolution #115 #147 #148]: #113
#123 := (or #93 #56 #44)
#124 := [def-axiom]: #123
#150 := [unit-resolution #124 #149 #147 #146]: false
#152 := [lemma #150]: #151
#157 := [unit-resolution #152 #156 #155]: #56
#116 := (not #47)
#117 := (or #50 #41 #116)
#118 := [def-axiom]: #117
#158 := [unit-resolution #118 #157 #155]: #116
#129 := (or #94 #41 #47)
#130 := [def-axiom]: #129
#159 := [unit-resolution #130 #158 #157 #154]: false
#160 := [lemma #159]: #95
#140 := (or #50 #96)
#138 := (or #50 #96 #137)
#139 := [def-axiom]: #138
#141 := [unit-resolution #139 #108]: #140
#163 := [unit-resolution #141 #160]: #50
#161 := [hypothesis]: #56
#119 := (or #57 #41)
#120 := [def-axiom]: #119
#162 := [unit-resolution #120 #161]: #57
#111 := (or #81 #41 #47)
#112 := [def-axiom]: #111
#164 := [unit-resolution #112 #161 #163]: #47
#127 := (or #67 #116)
#128 := [def-axiom]: #127
#165 := [unit-resolution #128 #164]: #67
#135 := (or #96 #93 #94)
#136 := [def-axiom]: #135
#166 := [unit-resolution #136 #165 #162 #160]: false
#167 := [lemma #166]: #41
#109 := (or #81 #56 #44)
#110 := [def-axiom]: #109
#168 := [unit-resolution #110 #167 #163]: #44
#125 := (or #67 #56)
#126 := [def-axiom]: #125
#169 := [unit-resolution #126 #167]: #67
#170 := [unit-resolution #136 #169 #160]: #93
#121 := (or #57 #113)
#122 := [def-axiom]: #121
[unit-resolution #122 #170 #168]: false
unsat
643b93e1a561bfd028bc3792417378d161ef2e8a 66 0
#2 := false
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#36 := (= f1 f3)
#54 := (not #36)
#90 := [hypothesis]: #36
decl f4 :: S1
#10 := f4
#39 := (= f1 f4)
#45 := (not #39)
#46 := (or #36 #45)
#72 := (or #46 #54)
#73 := [def-axiom]: #72
#91 := [unit-resolution #73 #90]: #46
#70 := (not #46)
#92 := (or #54 #70)
#55 := (or #54 #39)
#60 := (ite #36 #46 #55)
#63 := (not #60)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#12 := (implies #11 #9)
#14 := (ite #9 #12 #13)
#15 := (not #14)
#64 := (iff #15 #63)
#61 := (iff #14 #60)
#58 := (iff #13 #55)
#51 := (implies #36 #39)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #13 #51)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#53 := [monotonicity #38 #41]: #52
#59 := [trans #53 #57]: #58
#49 := (iff #12 #46)
#42 := (implies #39 #36)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #12 #42)
#44 := [monotonicity #41 #38]: #43
#50 := [trans #44 #48]: #49
#62 := [monotonicity #38 #50 #59]: #61
#65 := [monotonicity #62]: #64
#35 := [asserted]: #15
#68 := [mp #35 #65]: #63
#86 := (or #60 #54 #70)
#87 := [def-axiom]: #86
#93 := [unit-resolution #87 #68]: #92
#94 := [unit-resolution #93 #91 #90]: false
#95 := [lemma #94]: #54
#69 := (or #55 #36)
#76 := [def-axiom]: #69
#96 := [unit-resolution #76 #95]: #55
#79 := (not #55)
#97 := (or #36 #79)
#88 := (or #60 #36 #79)
#89 := [def-axiom]: #88
#98 := [unit-resolution #89 #68]: #97
[unit-resolution #98 #96 #95]: false
unsat
8a97d35ae3bf1f06142ca3c295d9a54474a4bbad 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #14 #18)
#12 := (or #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#82 := (iff #21 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #21 #77)
#75 := (iff #20 true)
#54 := (= f1 f6)
#51 := (= f1 f5)
#45 := (= f1 f4)
#42 := (= f1 f3)
#48 := (or #42 #45)
#57 := (ite #48 #51 #54)
#70 := (iff #57 #57)
#73 := (iff #70 true)
#74 := [rewrite]: #73
#71 := (iff #20 #70)
#68 := (iff #19 #57)
#60 := (ite #45 #51 #54)
#63 := (ite #42 #51 #60)
#66 := (iff #63 #57)
#67 := [rewrite]: #66
#64 := (iff #19 #63)
#61 := (iff #18 #60)
#55 := (iff #16 #54)
#56 := [rewrite]: #55
#52 := (iff #14 #51)
#53 := [rewrite]: #52
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#62 := [monotonicity #47 #53 #56]: #61
#43 := (iff #9 #42)
#44 := [rewrite]: #43
#65 := [monotonicity #44 #53 #62]: #64
#69 := [trans #65 #67]: #68
#58 := (iff #17 #57)
#49 := (iff #12 #48)
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #53 #56]: #58
#72 := [monotonicity #59 #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#41 := [asserted]: #21
[mp #41 #83]: false
unsat
d57ccd1bb5c7d6c6ba7796601f6907fb7769428b 67 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#18 := (ite #11 #14 #16)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#19 := (ite #9 #18 #16)
#12 := (and #9 #11)
#17 := (ite #12 #14 #16)
#20 := (iff #17 #19)
#21 := (not #20)
#82 := (iff #21 false)
#1 := true
#77 := (not true)
#80 := (iff #77 false)
#81 := [rewrite]: #80
#78 := (iff #21 #77)
#75 := (iff #20 true)
#54 := (= f1 f6)
#51 := (= f1 f5)
#45 := (= f1 f4)
#42 := (= f1 f3)
#48 := (and #42 #45)
#57 := (ite #48 #51 #54)
#70 := (iff #57 #57)
#73 := (iff #70 true)
#74 := [rewrite]: #73
#71 := (iff #20 #70)
#68 := (iff #19 #57)
#60 := (ite #45 #51 #54)
#63 := (ite #42 #60 #54)
#66 := (iff #63 #57)
#67 := [rewrite]: #66
#64 := (iff #19 #63)
#55 := (iff #16 #54)
#56 := [rewrite]: #55
#61 := (iff #18 #60)
#52 := (iff #14 #51)
#53 := [rewrite]: #52
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#62 := [monotonicity #47 #53 #56]: #61
#43 := (iff #9 #42)
#44 := [rewrite]: #43
#65 := [monotonicity #44 #62 #56]: #64
#69 := [trans #65 #67]: #68
#58 := (iff #17 #57)
#49 := (iff #12 #48)
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #53 #56]: #58
#72 := [monotonicity #59 #69]: #71
#76 := [trans #72 #74]: #75
#79 := [monotonicity #76]: #78
#83 := [trans #79 #81]: #82
#41 := [asserted]: #21
[mp #41 #83]: false
unsat
cc825ea9100726025c75fca6a38c4c3107dd3158 181 0
#2 := false
decl f6 :: S1
#14 := f6
decl f1 :: S1
#4 := f1
#53 := (= f1 f6)
decl f5 :: S1
#12 := f5
#50 := (= f1 f5)
decl f4 :: S1
#10 := f4
#47 := (= f1 f4)
#56 := (ite #47 #50 #53)
decl f3 :: S1
#8 := f3
#44 := (= f1 f3)
#62 := (not #44)
#63 := (or #62 #56)
#101 := (not #63)
#176 := [hypothesis]: #101
#151 := (or #63 #44)
#152 := [def-axiom]: #151
#177 := [unit-resolution #152 #176]: #44
#87 := (or #62 #53)
#79 := (or #62 #50)
#71 := (or #62 #47)
#92 := (ite #71 #79 #87)
#160 := (or #92 #63)
#102 := (iff #92 #101)
#15 := (= f6 f1)
#9 := (= f3 f1)
#20 := (implies #9 #15)
#13 := (= f5 f1)
#19 := (implies #9 #13)
#11 := (= f4 f1)
#18 := (implies #9 #11)
#21 := (ite #18 #19 #20)
#16 := (ite #11 #13 #15)
#17 := (implies #9 #16)
#22 := (iff #17 #21)
#23 := (not #22)
#105 := (iff #23 #102)
#95 := (iff #63 #92)
#98 := (not #95)
#103 := (iff #98 #102)
#104 := [rewrite]: #103
#99 := (iff #23 #98)
#96 := (iff #22 #95)
#93 := (iff #21 #92)
#90 := (iff #20 #87)
#84 := (implies #44 #53)
#88 := (iff #84 #87)
#89 := [rewrite]: #88
#85 := (iff #20 #84)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#45 := (iff #9 #44)
#46 := [rewrite]: #45
#86 := [monotonicity #46 #55]: #85
#91 := [trans #86 #89]: #90
#82 := (iff #19 #79)
#76 := (implies #44 #50)
#80 := (iff #76 #79)
#81 := [rewrite]: #80
#77 := (iff #19 #76)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#78 := [monotonicity #46 #52]: #77
#83 := [trans #78 #81]: #82
#74 := (iff #18 #71)
#68 := (implies #44 #47)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #18 #68)
#48 := (iff #11 #47)
#49 := [rewrite]: #48
#70 := [monotonicity #46 #49]: #69
#75 := [trans #70 #73]: #74
#94 := [monotonicity #75 #83 #91]: #93
#66 := (iff #17 #63)
#59 := (implies #44 #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#58 := [monotonicity #49 #52 #55]: #57
#61 := [monotonicity #46 #58]: #60
#67 := [trans #61 #65]: #66
#97 := [monotonicity #67 #94]: #96
#100 := [monotonicity #97]: #99
#106 := [trans #100 #104]: #105
#43 := [asserted]: #23
#109 := [mp #43 #106]: #102
#157 := (not #102)
#158 := (or #92 #63 #157)
#159 := [def-axiom]: #158
#161 := [unit-resolution #159 #109]: #160
#178 := [unit-resolution #161 #176]: #92
#112 := (not #71)
#142 := (not #56)
#153 := (or #63 #142)
#154 := [def-axiom]: #153
#179 := [unit-resolution #154 #176]: #142
#133 := (not #92)
#174 := (or #112 #56 #62 #133)
#166 := [hypothesis]: #142
#167 := [hypothesis]: #44
#168 := [hypothesis]: #71
#108 := (or #112 #62 #47)
#110 := [def-axiom]: #108
#169 := [unit-resolution #110 #168 #167]: #47
#170 := [hypothesis]: #92
#134 := (or #133 #112 #79)
#135 := [def-axiom]: #134
#171 := [unit-resolution #135 #168 #170]: #79
#122 := (not #79)
#123 := (or #122 #62 #50)
#124 := [def-axiom]: #123
#172 := [unit-resolution #124 #171 #167]: #50
#119 := (not #50)
#115 := (not #47)
#147 := (or #56 #115 #119)
#148 := [def-axiom]: #147
#173 := [unit-resolution #148 #172 #169 #166]: false
#175 := [lemma #173]: #174
#180 := [unit-resolution #175 #179 #177 #178]: #112
#136 := (or #133 #71 #87)
#137 := [def-axiom]: #136
#181 := [unit-resolution #137 #180 #178]: #87
#127 := (not #53)
#116 := (or #71 #115)
#111 := [def-axiom]: #116
#182 := [unit-resolution #111 #180]: #115
#149 := (or #56 #47 #127)
#150 := [def-axiom]: #149
#183 := [unit-resolution #150 #182 #179]: #127
#130 := (not #87)
#131 := (or #130 #62 #53)
#132 := [def-axiom]: #131
#184 := [unit-resolution #132 #183 #181 #177]: false
#185 := [lemma #184]: #63
#164 := (or #133 #101)
#162 := (or #133 #101 #157)
#163 := [def-axiom]: #162
#165 := [unit-resolution #163 #109]: #164
#186 := [unit-resolution #165 #185]: #133
#187 := [hypothesis]: #62
#113 := (or #71 #44)
#114 := [def-axiom]: #113
#188 := [unit-resolution #114 #187]: #71
#117 := (or #79 #44)
#118 := [def-axiom]: #117
#189 := [unit-resolution #118 #187]: #79
#138 := (or #92 #112 #122)
#139 := [def-axiom]: #138
#190 := [unit-resolution #139 #189 #188 #186]: false
#191 := [lemma #190]: #44
#155 := (or #101 #62 #56)
#156 := [def-axiom]: #155
#194 := [unit-resolution #156 #191 #185]: #56
#192 := [hypothesis]: #112
#140 := (or #92 #71 #130)
#141 := [def-axiom]: #140
#193 := [unit-resolution #141 #192 #186]: #130
#195 := [unit-resolution #111 #192]: #115
#145 := (or #142 #47 #53)
#146 := [def-axiom]: #145
#196 := [unit-resolution #146 #195 #194]: #53
#128 := (or #87 #127)
#129 := [def-axiom]: #128
#197 := [unit-resolution #129 #196 #193]: false
#198 := [lemma #197]: #71
#199 := [unit-resolution #110 #198 #191]: #47
#200 := [unit-resolution #139 #198 #186]: #122
#120 := (or #79 #119)
#121 := [def-axiom]: #120
#201 := [unit-resolution #121 #200]: #119
#143 := (or #142 #115 #50)
#144 := [def-axiom]: #143
[unit-resolution #144 #201 #199 #194]: false
unsat
7ec9b76ddbd0690a0ae0e84f7aac32369b67562e 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #9 #9 #10)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (ite #33 #33 #36)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#37 := (iff #10 #36)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #35 #35 #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
9a59901175f7c3f42e5be82db6a8df07aaf0199e 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#10 := (not #9)
#11 := (ite #10 #10 #9)
#12 := (not #11)
#51 := (iff #12 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (iff #11 true)
#33 := (= f1 f3)
#36 := (not #33)
#39 := (ite #36 #36 #33)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #11 #39)
#34 := (iff #9 #33)
#35 := [rewrite]: #34
#37 := (iff #10 #36)
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38 #38 #35]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
6758e928b7c8973f924b8c2c252430960344c442 18 0
#2 := false
decl f3 :: S2
#8 := f3
#9 := (= f3 f3)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
5cd924cc739389c12253492d422dfc6ac2f6d405 29 0
#2 := false
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#11 := (= f4 f3)
#10 := (= f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (implies #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (iff #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
e82612aca334f7d47bdb5a90fdc8f5dfc017ae67 34 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#14 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#61 := (iff #12 #14)
#59 := (iff #14 #12)
#10 := (= f3 f4)
#13 := (and #10 #12)
#37 := (not #13)
#38 := (or #37 #14)
#41 := (not #38)
#15 := (implies #13 #14)
#16 := (not #15)
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#36 := [asserted]: #16
#46 := [mp #36 #43]: #41
#44 := [not-or-elim #46]: #13
#45 := [and-elim #44]: #10
#60 := [monotonicity #45]: #59
#62 := [symm #60]: #61
#47 := [and-elim #44]: #12
#57 := [mp #47 #62]: #14
#48 := (not #14)
#49 := [not-or-elim #46]: #48
[unit-resolution #49 #57]: false
unsat
450aaafd6173c5e6036fdec198da2898811d4211 27 0
#2 := false
decl f5 :: (-> S2 S2)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := [monotonicity #43]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
268885483340f29776e2c235da393d33273743e0 31 0
#2 := false
decl f5 :: (-> S2 S2 S3)
decl f3 :: S2
#8 := f3
decl f4 :: S2
#9 := f4
#12 := (f5 f4 f3)
#11 := (f5 f3 f4)
#13 := (= #11 #12)
#56 := (= #12 #11)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := (= f4 f3)
#55 := [symm #43]: #54
#57 := [monotonicity #55 #43]: #56
#52 := [symm #57]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #52]: false
unsat
b23fdcb8ecc896d99515b950a22874e320c73a5e 63 0
#2 := false
decl f3 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#49 := (= f4 #9)
#10 := (f3 #9)
#12 := (f3 #10)
#81 := (= #12 #9)
#79 := (= #9 #12)
#40 := (= f4 #10)
#13 := (f3 #12)
#14 := (f3 #13)
#43 := (= f4 #14)
#46 := (and #40 #43)
#55 := (not #46)
#56 := (or #55 #49)
#61 := (not #56)
#17 := (= #9 f4)
#15 := (= #14 f4)
#11 := (= #10 f4)
#16 := (and #11 #15)
#18 := (implies #16 #17)
#19 := (not #18)
#62 := (iff #19 #61)
#59 := (iff #18 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #18 #52)
#50 := (iff #17 #49)
#51 := [rewrite]: #50
#47 := (iff #16 #46)
#44 := (iff #15 #43)
#45 := [rewrite]: #44
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#48 := [monotonicity #42 #45]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#63 := [monotonicity #60]: #62
#39 := [asserted]: #19
#66 := [mp #39 #63]: #61
#64 := [not-or-elim #66]: #46
#65 := [and-elim #64]: #40
#80 := [monotonicity #65]: #79
#82 := [symm #80]: #81
#84 := (= f4 #12)
#72 := (= #14 #12)
#73 := (= #12 #14)
#75 := (= #10 #13)
#77 := (= #13 #10)
#78 := [monotonicity #82]: #77
#76 := [symm #78]: #75
#74 := [monotonicity #76]: #73
#83 := [symm #74]: #72
#67 := [and-elim #64]: #43
#85 := [trans #67 #83]: #84
#86 := [trans #85 #82]: #49
#68 := (not #49)
#69 := [not-or-elim #66]: #68
[unit-resolution #69 #86]: false
unsat
bdf634420f64829e899fdad55dc280602f81f222 176 0
#2 := false
decl f5 :: S2
#11 := f5
decl f4 :: S2
#10 := f4
decl f3 :: S1
#8 := f3
decl f1 :: S1
#4 := f1
#43 := (= f1 f3)
#46 := (ite #43 f4 f5)
decl f6 :: S2
#13 := f6
#52 := (= f6 #46)
#114 := (= f5 #46)
#60 := (not #43)
#15 := (= f4 f6)
#172 := (iff #52 #15)
#170 := (iff #15 #52)
#49 := (= #46 f6)
#53 := (iff #49 #52)
#169 := [commutativity]: #53
#167 := (iff #15 #49)
#113 := (= f4 #46)
#161 := [hypothesis]: #43
#115 := (or #60 #113)
#116 := [def-axiom]: #115
#166 := [unit-resolution #116 #161]: #113
#168 := [monotonicity #166]: #167
#171 := [trans #168 #169]: #170
#173 := [symm #171]: #172
#18 := (= f5 f6)
#71 := (or #18 #43)
#98 := (not #71)
#61 := (or #15 #60)
#97 := (not #61)
#99 := (or #97 #98)
#178 := (or #99 #60)
#119 := (not #15)
#85 := (not #52)
#174 := (iff #85 #119)
#175 := [monotonicity #173]: #174
#100 := (not #99)
#162 := [hypothesis]: #100
#146 := (or #85 #99)
#107 := (iff #52 #99)
#76 := (and #61 #71)
#86 := (iff #76 #85)
#110 := (iff #86 #107)
#102 := (iff #99 #52)
#108 := (iff #102 #107)
#109 := [rewrite]: #108
#105 := (iff #86 #102)
#92 := (iff #100 #85)
#103 := (iff #92 #102)
#104 := [rewrite]: #103
#94 := (iff #86 #92)
#95 := (iff #76 #100)
#96 := [rewrite]: #95
#101 := [monotonicity #96]: #94
#106 := [trans #101 #104]: #105
#111 := [trans #106 #109]: #110
#9 := (= f3 f1)
#17 := (not #9)
#19 := (implies #17 #18)
#16 := (implies #9 #15)
#20 := (and #16 #19)
#12 := (ite #9 f4 f5)
#14 := (= #12 f6)
#21 := (iff #14 #20)
#22 := (not #21)
#89 := (iff #22 #86)
#79 := (iff #52 #76)
#82 := (not #79)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #22 #82)
#80 := (iff #21 #79)
#77 := (iff #20 #76)
#74 := (iff #19 #71)
#68 := (implies #60 #18)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #19 #68)
#66 := (iff #17 #60)
#44 := (iff #9 #43)
#45 := [rewrite]: #44
#67 := [monotonicity #45]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#64 := (iff #16 #61)
#57 := (implies #43 #15)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #16 #57)
#59 := [monotonicity #45]: #58
#65 := [trans #59 #63]: #64
#78 := [monotonicity #65 #75]: #77
#55 := (iff #14 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (= #12 #46)
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#56 := [trans #51 #54]: #55
#81 := [monotonicity #56 #78]: #80
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#42 := [asserted]: #22
#93 := [mp #42 #90]: #86
#112 := [mp #93 #111]: #107
#139 := (not #107)
#144 := (or #85 #99 #139)
#145 := [def-axiom]: #144
#147 := [unit-resolution #145 #112]: #146
#165 := [unit-resolution #147 #162]: #85
#176 := [mp #165 #175]: #119
#133 := (or #99 #61)
#134 := [def-axiom]: #133
#163 := [unit-resolution #134 #162]: #61
#124 := (or #97 #15 #60)
#125 := [def-axiom]: #124
#164 := [unit-resolution #125 #163 #161]: #15
#177 := [unit-resolution #164 #176]: false
#179 := [lemma #177]: #178
#180 := [unit-resolution #179 #161]: #99
#142 := (or #52 #100)
#140 := (or #52 #100 #139)
#141 := [def-axiom]: #140
#143 := [unit-resolution #141 #112]: #142
#183 := [unit-resolution #143 #180]: #52
#184 := [mp #183 #173]: #15
#156 := (iff #114 #18)
#154 := (iff #18 #114)
#148 := [hypothesis]: #98
#135 := (or #99 #71)
#136 := [def-axiom]: #135
#152 := [unit-resolution #136 #148]: #99
#153 := [unit-resolution #143 #152]: #52
#155 := [monotonicity #153]: #154
#157 := [symm #155]: #156
#129 := (or #71 #60)
#130 := [def-axiom]: #129
#150 := [unit-resolution #130 #148]: #60
#117 := (or #43 #114)
#118 := [def-axiom]: #117
#151 := [unit-resolution #118 #150]: #114
#158 := [mp #151 #157]: #18
#126 := (not #18)
#127 := (or #71 #126)
#128 := [def-axiom]: #127
#149 := [unit-resolution #128 #148]: #126
#159 := [unit-resolution #149 #158]: false
#160 := [lemma #159]: #71
#137 := (or #100 #97 #98)
#138 := [def-axiom]: #137
#181 := [unit-resolution #138 #180 #160]: #97
#120 := (or #61 #119)
#121 := [def-axiom]: #120
#182 := [unit-resolution #121 #181]: #119
#185 := [unit-resolution #182 #184]: false
#186 := [lemma #185]: #60
#190 := [unit-resolution #118 #186]: #114
#192 := (= f6 f5)
#131 := (or #98 #18 #43)
#132 := [def-axiom]: #131
#191 := [unit-resolution #132 #186 #160]: #18
#193 := [symm #191]: #192
#194 := [trans #193 #190]: #52
#122 := (or #61 #43)
#123 := [def-axiom]: #122
#187 := [unit-resolution #123 #186]: #61
#188 := [unit-resolution #138 #187 #160]: #100
#189 := [unit-resolution #147 #188]: #85
[unit-resolution #189 #194]: false
unsat
7caf561e8dba712e3313b4433e2a7d62033d4cc1 36 0
#2 := false
decl f5 :: S2
#10 := f5
decl f3 :: S2
#8 := f3
#12 := (= f3 f5)
#13 := (not #12)
decl f4 :: S2
#9 := f4
#11 := (distinct f3 f4 f5)
#36 := (not #11)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #11 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#44 := [not-or-elim #45]: #12
#55 := (= f4 f5)
#56 := (not #55)
#53 := (= f3 f4)
#54 := (not #53)
#51 := (and #54 #13 #56)
#43 := [not-or-elim #45]: #11
#61 := (or #36 #51)
#62 := [def-axiom]: #61
#65 := [unit-resolution #62 #43]: #51
#52 := (not #51)
#47 := (or #52 #13)
#48 := [def-axiom]: #47
[unit-resolution #48 #65 #44]: false
unsat
5d166c0e6b2d72dafe17b5b5de7117e70ffd077f 77 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#84 := (= f3 f4)
decl f6 :: S2
#12 := f6
#39 := (= f4 f6)
#103 := (iff #39 #84)
#101 := (iff #84 #39)
#13 := (= f6 f4)
#40 := (iff #13 #39)
#100 := [commutativity]: #40
#98 := (iff #84 #13)
#14 := (= f3 f6)
#45 := (not #39)
#15 := (not #14)
decl f5 :: S2
#10 := f5
#11 := (distinct f3 f4 f5)
#54 := (not #11)
#63 := (or #54 #15 #45)
#66 := (not #63)
#16 := (implies #13 #15)
#17 := (implies #11 #16)
#18 := (not #17)
#69 := (iff #18 #66)
#46 := (or #15 #45)
#55 := (or #54 #46)
#60 := (not #55)
#67 := (iff #60 #66)
#64 := (iff #55 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#61 := (iff #18 #60)
#58 := (iff #17 #55)
#51 := (implies #11 #46)
#56 := (iff #51 #55)
#57 := [rewrite]: #56
#52 := (iff #17 #51)
#49 := (iff #16 #46)
#42 := (implies #39 #15)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #16 #42)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#59 := [trans #53 #57]: #58
#62 := [monotonicity #59]: #61
#70 := [trans #62 #68]: #69
#38 := [asserted]: #18
#71 := [mp #38 #70]: #66
#73 := [not-or-elim #71]: #14
#99 := [monotonicity #73]: #98
#102 := [trans #99 #100]: #101
#104 := [symm #102]: #103
#74 := [not-or-elim #71]: #39
#105 := [mp #74 #104]: #84
#85 := (not #84)
#82 := (= f4 f5)
#83 := (not #82)
#86 := (= f3 f5)
#87 := (not #86)
#80 := (and #85 #87 #83)
#72 := [not-or-elim #71]: #11
#92 := (or #54 #80)
#93 := [def-axiom]: #92
#96 := [unit-resolution #93 #72]: #80
#81 := (not #80)
#78 := (or #81 #85)
#79 := [def-axiom]: #78
#97 := [unit-resolution #79 #96]: #85
[unit-resolution #97 #105]: false
unsat
533428288e5c80da242f85265bdf0f4abb151e65 28 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#10 := (distinct f3 f4 f3 f4)
#11 := (not #10)
#12 := (not #11)
#47 := (iff #12 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #12 #42)
#40 := (iff #11 true)
#35 := (not false)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #11 #35)
#33 := (iff #10 false)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#32 := [asserted]: #12
[mp #32 #48]: false
unsat
017c0a2408f982087afab8f6a30c931842322a6a 38 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#11 := (distinct f3 f4)
#12 := (not #11)
#10 := (= f3 f4)
#13 := (implies #10 #12)
#14 := (not #13)
#57 := (iff #14 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (iff #13 true)
#45 := (implies #10 #10)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #13 #45)
#43 := (iff #12 #10)
#35 := (not #10)
#38 := (not #35)
#41 := (iff #38 #10)
#42 := [rewrite]: #41
#39 := (iff #12 #38)
#36 := (iff #11 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#34 := [asserted]: #14
[mp #34 #58]: false
unsat
3d691d698b1a15f8a77e4e6f63eb68946744774b 40 0
#2 := false
decl f5 :: S2
#11 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#14 := (distinct f3 f4 f5)
#15 := (not #14)
#12 := (= f3 f5)
#10 := (= f3 f4)
#13 := (and #10 #12)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#16 := (implies #13 #15)
#17 := (not #16)
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#37 := [asserted]: #17
#47 := [mp #37 #44]: #42
#49 := [not-or-elim #47]: #14
#61 := (= f4 f5)
#62 := (not #61)
#60 := (not #12)
#59 := (not #10)
#57 := (and #59 #60 #62)
#58 := (not #57)
#45 := [not-or-elim #47]: #13
#46 := [and-elim #45]: #10
#55 := (or #58 #59)
#56 := [def-axiom]: #55
#69 := [unit-resolution #56 #46]: #58
#65 := (or #15 #57)
#66 := [def-axiom]: #65
#70 := [unit-resolution #66 #69]: #15
[unit-resolution #70 #49]: false
unsat
91ca794ae2ea70dac95d2e0e4e034ae7338238ca 33 0
#2 := false
decl f3 :: S2
#8 := f3
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f6 :: S2
#11 := f6
#13 := (distinct f6 f4 f5 f3)
#12 := (distinct f3 f4 f5 f6)
#14 := (implies #12 #13)
#15 := (not #14)
#50 := (iff #15 false)
#1 := true
#45 := (not true)
#48 := (iff #45 false)
#49 := [rewrite]: #48
#46 := (iff #15 #45)
#43 := (iff #14 true)
#38 := (implies #12 #12)
#41 := (iff #38 true)
#42 := [rewrite]: #41
#39 := (iff #14 #38)
#36 := (iff #13 #12)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#44 := [trans #40 #42]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#35 := [asserted]: #15
[mp #35 #51]: false
unsat
213abf865430cd165dad7b08270c63f2d0321573 91 0
#2 := false
decl f5 :: S2
#10 := f5
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#13 := (distinct f3 f4 f5)
#70 := (= f4 f5)
#71 := (not #70)
#66 := (= f3 f5)
#67 := (not #66)
#64 := (= f3 f4)
#65 := (not #64)
#96 := (and #65 #67 #71)
decl f6 :: S2
#11 := f6
#74 := (= f5 f6)
#75 := (not #74)
#72 := (= f4 f6)
#73 := (not #72)
#68 := (= f3 f6)
#69 := (not #68)
#76 := (and #65 #67 #69 #71 #73 #75)
#12 := (distinct f3 f4 f5 f6)
#14 := (distinct f4 f5 f6)
#15 := (and #13 #14)
#38 := (not #12)
#39 := (or #38 #15)
#42 := (not #39)
#16 := (implies #12 #15)
#17 := (not #16)
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#37 := [asserted]: #17
#47 := [mp #37 #44]: #42
#45 := [not-or-elim #47]: #12
#92 := (or #38 #76)
#93 := [def-axiom]: #92
#124 := [unit-resolution #93 #45]: #76
#77 := (not #76)
#78 := (or #77 #65)
#79 := [def-axiom]: #78
#125 := [unit-resolution #79 #124]: #65
#84 := (or #77 #71)
#85 := [def-axiom]: #84
#126 := [unit-resolution #85 #124]: #71
#80 := (or #77 #67)
#81 := [def-axiom]: #80
#127 := [unit-resolution #81 #124]: #67
#104 := (or #96 #64 #66 #70)
#105 := [def-axiom]: #104
#128 := [unit-resolution #105 #127 #126 #125]: #96
#97 := (not #96)
#108 := (or #13 #97)
#109 := [def-axiom]: #108
#129 := [unit-resolution #109 #128]: #13
#110 := (and #71 #73 #75)
#88 := (or #77 #75)
#89 := [def-axiom]: #88
#130 := [unit-resolution #89 #124]: #75
#86 := (or #77 #73)
#87 := [def-axiom]: #86
#131 := [unit-resolution #87 #124]: #73
#118 := (or #110 #70 #72 #74)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131 #130 #126]: #110
#111 := (not #110)
#122 := (or #14 #111)
#123 := [def-axiom]: #122
#133 := [unit-resolution #123 #132]: #14
#57 := (not #14)
#56 := (not #13)
#58 := (or #56 #57)
#46 := (not #15)
#61 := (iff #46 #58)
#59 := (not #58)
#52 := (not #59)
#51 := (iff #52 #58)
#60 := [rewrite]: #51
#53 := (iff #46 #52)
#54 := (iff #15 #59)
#55 := [rewrite]: #54
#50 := [monotonicity #55]: #53
#62 := [trans #50 #60]: #61
#48 := [not-or-elim #47]: #46
#63 := [mp #48 #62]: #58
[unit-resolution #63 #133 #129]: false
unsat
f1809e8489f94ca6f5ab262d227412571fae6063 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (forall (vars (?v0 S2)) #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (forall (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #10 #34)
#32 := (iff #9 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
d955ec6b7cfeeee07c53113d44b234b0343ba998 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := (= f1 #9)
#37 := (forall (vars (?v0 S2)) #34)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
ac9cb8d0afa0ef87b47bcfca90097c8127bbb5a7 95 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!0 :: S2
#77 := ?v0!0
#78 := (f3 ?v0!0)
decl f1 :: S1
#4 := f1
#79 := (= f1 #78)
#74 := (not #79)
decl ?v1!1 :: S2
#88 := ?v1!1
#89 := (f3 ?v1!1)
#90 := (= f1 #89)
#108 := (or #79 #90)
#111 := (not #108)
#114 := (and #79 #111)
#91 := (or #90 #79)
#92 := (not #91)
#85 := (not #74)
#98 := (and #85 #92)
#115 := (iff #98 #114)
#112 := (iff #92 #111)
#109 := (iff #91 #108)
#110 := [rewrite]: #109
#113 := [monotonicity #110]: #112
#106 := (iff #85 #79)
#107 := [rewrite]: #106
#116 := [monotonicity #107 #113]: #115
#11 := (:var 1 S2)
#12 := (f3 #11)
#42 := (= f1 #12)
#8 := (:var 0 S2)
#9 := (f3 #8)
#39 := (= f1 #9)
#48 := (or #39 #42)
#53 := (forall (vars (?v1 S2)) #48)
#59 := (not #39)
#60 := (or #59 #53)
#65 := (forall (vars (?v0 S2)) #60)
#68 := (not #65)
#101 := (~ #68 #98)
#80 := (or #39 #79)
#72 := (forall (vars (?v1 S2)) #80)
#81 := (or #74 #72)
#82 := (not #81)
#99 := (~ #82 #98)
#93 := (not #72)
#94 := (~ #93 #92)
#95 := [sk]: #94
#86 := (~ #85 #85)
#87 := [refl]: #86
#100 := [nnf-neg #87 #95]: #99
#83 := (~ #68 #82)
#84 := [sk]: #83
#102 := [trans #84 #100]: #101
#10 := (= #9 f1)
#13 := (= #12 f1)
#14 := (or #13 #10)
#15 := (forall (vars (?v1 S2)) #14)
#16 := (implies #10 #15)
#17 := (forall (vars (?v0 S2)) #16)
#18 := (not #17)
#69 := (iff #18 #68)
#66 := (iff #17 #65)
#63 := (iff #16 #60)
#56 := (implies #39 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #16 #56)
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#45 := (or #42 #39)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #14 #45)
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#43 := (iff #13 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44 #41]: #46
#52 := [trans #47 #50]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #41 #55]: #57
#64 := [trans #58 #62]: #63
#67 := [quant-intro #64]: #66
#70 := [monotonicity #67]: #69
#38 := [asserted]: #18
#73 := [mp #38 #70]: #68
#103 := [mp~ #73 #102]: #98
#104 := [mp #103 #116]: #114
#117 := [and-elim #104]: #111
#118 := [not-or-elim #117]: #74
#105 := [and-elim #104]: #79
[unit-resolution #105 #118]: false
unsat
049ea7d2d96c9794ec9b3845824fa548d49c024b 296 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#664 := (pattern #9)
decl f1 :: S1
#4 := f1
#40 := (= f1 #9)
#671 := (forall (vars (?v0 S2)) (:pat #664) #40)
decl f4 :: (-> S2 S1)
#11 := (f4 #8)
#665 := (pattern #11)
#43 := (= f1 #11)
#679 := (forall (vars (?v0 S2)) (:pat #665) #43)
#684 := (not #679)
#676 := (not #671)
#687 := (or #676 #684)
#690 := (not #687)
#173 := (not #43)
#172 := (not #40)
#174 := (or #172 #173)
#175 := (not #174)
#666 := (forall (vars (?v0 S2)) (:pat #664 #665) #175)
#445 := (not #666)
decl ?v0!1 :: S2
#95 := ?v0!1
#633 := (f4 ?v0!1)
#634 := (= f1 #633)
#356 := (not #634)
#96 := (f3 ?v0!1)
#97 := (= f1 #96)
#98 := (not #97)
#357 := (or #98 #356)
decl ?v0!2 :: S2
#104 := ?v0!2
#105 := (f4 ?v0!2)
#106 := (= f1 #105)
#326 := (f3 ?v0!2)
#337 := (= f1 #326)
#338 := (not #337)
#107 := (not #106)
#336 := (or #107 #338)
#656 := (not #336)
#639 := [hypothesis]: #666
#301 := (or #656 #445)
#296 := [hypothesis]: #336
#652 := (or #445 #656)
#266 := (or #338 #107)
#339 := (not #266)
#324 := (or #445 #339)
#659 := (iff #324 #652)
#661 := (iff #652 #652)
#662 := [rewrite]: #661
#658 := (iff #339 #656)
#340 := (iff #266 #336)
#319 := [rewrite]: #340
#313 := [monotonicity #319]: #658
#660 := [monotonicity #313]: #659
#657 := [trans #660 #662]: #659
#325 := [quant-inst #104]: #324
#663 := [mp #325 #657]: #652
#300 := [unit-resolution #663 #639 #296]: false
#302 := [lemma #300]: #301
#635 := [unit-resolution #302 #639]: #656
#653 := (or #336 #106)
#311 := [def-axiom]: #653
#632 := [unit-resolution #311 #635]: #106
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f4 ?v0!0)
#86 := (= f1 #85)
#87 := (f3 ?v0!0)
#88 := (= f1 #87)
#103 := (not #88)
#102 := (not #86)
#93 := (or #102 #103)
#94 := (not #93)
#363 := (or #94 #445)
#362 := [hypothesis]: #93
#640 := (or #445 #94)
#303 := (or #103 #102)
#641 := (not #303)
#646 := (or #445 #641)
#647 := (iff #646 #640)
#287 := (iff #640 #640)
#288 := [rewrite]: #287
#644 := (iff #641 #94)
#642 := (iff #303 #93)
#643 := [rewrite]: #642
#645 := [monotonicity #643]: #644
#649 := [monotonicity #645]: #647
#650 := [trans #649 #288]: #647
#282 := [quant-inst #84]: #646
#648 := [mp #282 #650]: #640
#348 := [unit-resolution #648 #639 #362]: false
#254 := [lemma #348]: #363
#625 := [unit-resolution #254 #639]: #94
#651 := (or #93 #86)
#637 := [def-axiom]: #651
#629 := [unit-resolution #637 #625]: #86
#638 := (or #93 #88)
#344 := [def-axiom]: #638
#626 := [unit-resolution #344 #625]: #88
#166 := (or #102 #103 #98 #107)
#135 := (and #86 #88)
#138 := (not #135)
#144 := (or #98 #107 #138)
#169 := (iff #144 #166)
#163 := (or #98 #107 #93)
#167 := (iff #163 #166)
#168 := [rewrite]: #167
#164 := (iff #144 #163)
#161 := (iff #138 #93)
#156 := (not #94)
#159 := (iff #156 #93)
#160 := [rewrite]: #159
#157 := (iff #138 #156)
#111 := (iff #135 #94)
#112 := [rewrite]: #111
#158 := [monotonicity #112]: #157
#162 := [trans #158 #160]: #161
#165 := [monotonicity #162]: #164
#170 := [trans #165 #168]: #169
#55 := (forall (vars (?v0 S2)) #43)
#52 := (forall (vars (?v0 S2)) #40)
#58 := (and #52 #55)
#46 := (and #40 #43)
#49 := (forall (vars (?v0 S2)) #46)
#149 := (or #49 #58)
#152 := (and #144 #149)
#127 := (or #58 #49)
#89 := (and #88 #86)
#90 := (not #89)
#113 := (or #98 #107)
#128 := (or #113 #90)
#129 := (and #128 #127)
#153 := (iff #129 #152)
#150 := (iff #127 #149)
#151 := [rewrite]: #150
#147 := (iff #128 #144)
#141 := (or #113 #138)
#145 := (iff #141 #144)
#146 := [rewrite]: #145
#142 := (iff #128 #141)
#139 := (iff #90 #138)
#136 := (iff #89 #135)
#137 := [rewrite]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#148 := [trans #143 #146]: #147
#154 := [monotonicity #148 #151]: #153
#67 := (not #49)
#68 := (iff #58 #67)
#130 := (~ #68 #129)
#91 := (~ #67 #90)
#92 := [sk]: #91
#74 := (not #67)
#76 := (~ #74 #49)
#81 := (~ #49 #49)
#79 := (~ #46 #46)
#80 := [refl]: #79
#82 := [nnf-pos #80]: #81
#83 := [nnf-neg #82]: #76
#125 := (~ #58 #58)
#123 := (~ #55 #55)
#121 := (~ #43 #43)
#122 := [refl]: #121
#124 := [nnf-pos #122]: #123
#119 := (~ #52 #52)
#117 := (~ #40 #40)
#118 := [refl]: #117
#120 := [nnf-pos #118]: #119
#126 := [monotonicity #120 #124]: #125
#114 := (not #58)
#115 := (~ #114 #113)
#108 := (not #55)
#109 := (~ #108 #107)
#110 := [sk]: #109
#99 := (not #52)
#100 := (~ #99 #98)
#101 := [sk]: #100
#116 := [nnf-neg #101 #110]: #115
#131 := [nnf-pos #116 #126 #83 #92]: #130
#12 := (= #11 f1)
#16 := (forall (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (forall (vars (?v0 S2)) #10)
#17 := (and #15 #16)
#13 := (and #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#71 := (iff #19 #68)
#61 := (iff #49 #58)
#64 := (not #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#57 := [quant-intro #45]: #56
#53 := (iff #15 #52)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#60 := [monotonicity #54 #57]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#48 := [monotonicity #42 #45]: #47
#51 := [quant-intro #48]: #50
#63 := [monotonicity #51 #60]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#39 := [asserted]: #19
#75 := [mp #39 #72]: #68
#132 := [mp~ #75 #131]: #129
#133 := [mp #132 #154]: #152
#134 := [and-elim #133]: #144
#171 := [mp #134 #170]: #166
#630 := [unit-resolution #171 #626 #629 #632]: #98
#346 := (or #357 #97)
#347 := [def-axiom]: #346
#619 := [unit-resolution #347 #630]: #357
#631 := (not #357)
#636 := (or #445 #631)
#345 := [quant-inst #95]: #636
#620 := [unit-resolution #345 #639 #619]: false
#621 := [lemma #620]: #445
#693 := (or #666 #690)
#181 := (or #99 #108)
#182 := (not #181)
#178 := (forall (vars (?v0 S2)) #175)
#185 := (or #178 #182)
#694 := (iff #185 #693)
#691 := (iff #182 #690)
#688 := (iff #181 #687)
#685 := (iff #108 #684)
#682 := (iff #55 #679)
#680 := (iff #43 #43)
#681 := [refl]: #680
#683 := [quant-intro #681]: #682
#686 := [monotonicity #683]: #685
#677 := (iff #99 #676)
#674 := (iff #52 #671)
#672 := (iff #40 #40)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#678 := [monotonicity #675]: #677
#689 := [monotonicity #678 #686]: #688
#692 := [monotonicity #689]: #691
#669 := (iff #178 #666)
#667 := (iff #175 #175)
#668 := [refl]: #667
#670 := [quant-intro #668]: #669
#695 := [monotonicity #670 #692]: #694
#186 := (iff #149 #185)
#183 := (iff #58 #182)
#184 := [rewrite]: #183
#179 := (iff #49 #178)
#176 := (iff #46 #175)
#177 := [rewrite]: #176
#180 := [quant-intro #177]: #179
#187 := [monotonicity #180 #184]: #186
#155 := [and-elim #133]: #149
#188 := [mp #155 #187]: #185
#696 := [mp #188 #695]: #693
#349 := [unit-resolution #696 #621]: #690
#246 := (or #687 #671)
#333 := [def-axiom]: #246
#627 := [unit-resolution #333 #349]: #671
#247 := (or #687 #679)
#334 := [def-axiom]: #247
#623 := [unit-resolution #334 #349]: #679
#618 := [hypothesis]: #102
#624 := (or #684 #86)
#465 := [quant-inst #84]: #624
#466 := [unit-resolution #465 #618 #623]: false
#467 := [lemma #466]: #86
#616 := [hypothesis]: #98
#628 := (or #676 #97)
#341 := [quant-inst #95]: #628
#617 := [unit-resolution #341 #616 #627]: false
#622 := [lemma #617]: #97
#609 := [hypothesis]: #107
#611 := (or #684 #106)
#612 := [quant-inst #104]: #611
#610 := [unit-resolution #612 #609 #623]: false
#606 := [lemma #610]: #106
#607 := [unit-resolution #171 #606 #622 #467]: #103
#614 := (or #676 #88)
#608 := [quant-inst #84]: #614
[unit-resolution #608 #607 #627]: false
unsat
3b618dd5f7cad6fec6bf71ac0425349f4d47cb2a 204 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#624 := (pattern #9)
decl f4 :: S1
#12 := f4
decl f1 :: S1
#4 := f1
#45 := (= f1 f4)
#39 := (= f1 #9)
#51 := (or #39 #45)
#630 := (forall (vars (?v0 S2)) (:pat #624) #51)
#93 := (not #45)
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f3 ?v0!0)
#86 := (= f1 #85)
#91 := (or #45 #86)
#279 := [hypothesis]: #45
#206 := (or #91 #93)
#293 := [def-axiom]: #206
#616 := [unit-resolution #293 #279]: #91
decl ?v0!1 :: S2
#99 := ?v0!1
#100 := (f3 ?v0!1)
#101 := (= f1 #100)
#121 := (or #45 #101)
#286 := (or #121 #93)
#297 := [def-axiom]: #286
#618 := [unit-resolution #297 #279]: #121
#124 := (not #121)
#92 := (not #91)
#143 := (or #92 #124)
#87 := (not #86)
#127 := (and #93 #87)
#130 := (or #124 #127)
#146 := (iff #130 #143)
#140 := (or #124 #92)
#144 := (iff #140 #143)
#145 := [rewrite]: #144
#141 := (iff #130 #140)
#107 := (iff #127 #92)
#108 := [rewrite]: #107
#142 := [monotonicity #108]: #141
#147 := [trans #142 #145]: #146
#54 := (forall (vars (?v0 S2)) #51)
#42 := (forall (vars (?v0 S2)) #39)
#133 := (or #42 #45 #54)
#136 := (and #130 #133)
#48 := (or #42 #45)
#113 := (or #54 #48)
#96 := (and #87 #93)
#102 := (or #101 #45)
#103 := (not #102)
#114 := (or #103 #96)
#115 := (and #114 #113)
#137 := (iff #115 #136)
#134 := (iff #113 #133)
#135 := [rewrite]: #134
#131 := (iff #114 #130)
#128 := (iff #96 #127)
#129 := [rewrite]: #128
#125 := (iff #103 #124)
#122 := (iff #102 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#132 := [monotonicity #126 #129]: #131
#138 := [monotonicity #132 #135]: #137
#63 := (not #48)
#64 := (iff #54 #63)
#116 := (~ #64 #115)
#97 := (~ #63 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#88 := (not #42)
#89 := (~ #88 #87)
#90 := [sk]: #89
#98 := [nnf-neg #90 #95]: #97
#81 := (not #63)
#82 := (~ #81 #48)
#79 := (~ #48 #48)
#70 := (~ #45 #45)
#72 := [refl]: #70
#77 := (~ #42 #42)
#75 := (~ #39 #39)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#80 := [monotonicity #78 #72]: #79
#83 := [nnf-neg #80]: #82
#111 := (~ #54 #54)
#109 := (~ #51 #51)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#104 := (not #54)
#105 := (~ #104 #103)
#106 := [sk]: #105
#117 := [nnf-pos #106 #112 #83 #98]: #116
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (or #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (or #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#118 := [mp~ #71 #117]: #115
#119 := [mp #118 #138]: #136
#120 := [and-elim #119]: #130
#148 := [mp #120 #147]: #143
#273 := [unit-resolution #148 #618 #616]: false
#405 := [lemma #273]: #93
#625 := (forall (vars (?v0 S2)) (:pat #624) #39)
#262 := (not #625)
#604 := [hypothesis]: #625
#612 := (not #630)
#298 := (not #101)
#272 := [hypothesis]: #298
#256 := (or #612 #101)
#614 := [hypothesis]: #630
#284 := (or #612 #45 #101)
#285 := (or #612 #102)
#613 := (iff #285 #284)
#620 := (or #612 #121)
#617 := (iff #620 #284)
#623 := [rewrite]: #617
#621 := (iff #285 #620)
#622 := [monotonicity #123]: #621
#271 := [trans #622 #623]: #613
#619 := [quant-inst #99]: #285
#276 := [mp #619 #271]: #284
#615 := [unit-resolution #276 #405 #272 #614]: false
#599 := [lemma #615]: #256
#260 := [unit-resolution #599 #272]: #612
#635 := (or #625 #45 #630)
#636 := (iff #133 #635)
#633 := (iff #54 #630)
#631 := (iff #51 #51)
#632 := [refl]: #631
#634 := [quant-intro #632]: #633
#628 := (iff #42 #625)
#626 := (iff #39 #39)
#627 := [refl]: #626
#629 := [quant-intro #627]: #628
#637 := [monotonicity #629 #634]: #636
#139 := [and-elim #119]: #133
#638 := [mp #139 #637]: #635
#261 := [unit-resolution #638 #260 #405]: #625
#263 := (or #262 #101)
#601 := [quant-inst #99]: #263
#602 := [unit-resolution #601 #272 #261]: false
#603 := [lemma #602]: #101
#226 := (or #121 #298)
#299 := [def-axiom]: #226
#605 := [unit-resolution #299 #603]: #121
#242 := [unit-resolution #148 #605]: #92
#207 := (or #91 #87)
#294 := [def-axiom]: #207
#607 := [unit-resolution #294 #242]: #87
#600 := (or #262 #86)
#606 := [quant-inst #84]: #600
#609 := [unit-resolution #606 #607 #604]: false
#247 := [lemma #609]: #262
#594 := [unit-resolution #638 #247 #405]: #630
#611 := (or #612 #45 #86)
#248 := (or #86 #45)
#597 := (or #612 #248)
#323 := (iff #597 #611)
#304 := (or #612 #91)
#322 := (iff #304 #611)
#308 := [rewrite]: #322
#320 := (iff #597 #304)
#610 := (iff #248 #91)
#608 := [rewrite]: #610
#321 := [monotonicity #608]: #320
#214 := [trans #321 #308]: #323
#598 := [quant-inst #84]: #597
#593 := [mp #598 #214]: #611
[unit-resolution #593 #405 #607 #594]: false
unsat
d3ac39bb1c7a6d7418172a244d9e337158e1130d 249 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#650 := (pattern #9)
decl f1 :: S1
#4 := f1
#39 := (= f1 #9)
#651 := (forall (vars (?v0 S2)) (:pat #650) #39)
decl f4 :: S1
#12 := f4
#45 := (= f1 f4)
#93 := (not #45)
#656 := (not #651)
#659 := (or #656 #93)
#662 := (not #659)
#163 := (not #39)
#164 := (or #163 #93)
#165 := (not #164)
#665 := (forall (vars (?v0 S2)) (:pat #650) #165)
#310 := (not #665)
decl ?v0!1 :: S2
#99 := ?v0!1
#100 := (f3 ?v0!1)
#101 := (= f1 #100)
#91 := (not #101)
#92 := (or #93 #91)
decl ?v0!0 :: S2
#84 := ?v0!0
#85 := (f3 ?v0!0)
#86 := (= f1 #85)
#87 := (not #86)
#305 := (or #93 #87)
#323 := [hypothesis]: #87
#298 := (or #305 #86)
#641 := [def-axiom]: #298
#286 := [unit-resolution #641 #323]: #305
#324 := (or #656 #86)
#312 := [hypothesis]: #651
#252 := [quant-inst #84]: #324
#325 := [unit-resolution #252 #323 #312]: false
#322 := [lemma #325]: #324
#287 := [unit-resolution #322 #323]: #656
#232 := (or #659 #651)
#319 := [def-axiom]: #232
#288 := [unit-resolution #319 #287]: #659
#670 := (or #662 #665)
#168 := (forall (vars (?v0 S2)) #165)
#42 := (forall (vars (?v0 S2)) #39)
#88 := (not #42)
#159 := (or #88 #93)
#160 := (not #159)
#171 := (or #160 #168)
#671 := (iff #171 #670)
#668 := (iff #168 #665)
#666 := (iff #165 #165)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#663 := (iff #160 #662)
#660 := (iff #159 #659)
#657 := (iff #88 #656)
#654 := (iff #42 #651)
#652 := (iff #39 #39)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#658 := [monotonicity #655]: #657
#661 := [monotonicity #658]: #660
#664 := [monotonicity #661]: #663
#672 := [monotonicity #664 #669]: #671
#51 := (and #39 #45)
#54 := (forall (vars (?v0 S2)) #51)
#48 := (and #42 #45)
#135 := (or #48 #54)
#172 := (iff #135 #171)
#169 := (iff #54 #168)
#166 := (iff #51 #165)
#167 := [rewrite]: #166
#170 := [quant-intro #167]: #169
#161 := (iff #48 #160)
#162 := [rewrite]: #161
#173 := [monotonicity #162 #170]: #172
#121 := (and #45 #101)
#124 := (not #121)
#130 := (or #93 #87 #124)
#138 := (and #130 #135)
#113 := (or #54 #48)
#96 := (or #87 #93)
#102 := (and #101 #45)
#103 := (not #102)
#114 := (or #103 #96)
#115 := (and #114 #113)
#139 := (iff #115 #138)
#136 := (iff #113 #135)
#137 := [rewrite]: #136
#133 := (iff #114 #130)
#127 := (or #124 #96)
#131 := (iff #127 #130)
#132 := [rewrite]: #131
#128 := (iff #114 #127)
#125 := (iff #103 #124)
#122 := (iff #102 #121)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#129 := [monotonicity #126]: #128
#134 := [trans #129 #132]: #133
#140 := [monotonicity #134 #137]: #139
#63 := (not #48)
#64 := (iff #54 #63)
#116 := (~ #64 #115)
#97 := (~ #63 #96)
#94 := (~ #93 #93)
#95 := [refl]: #94
#89 := (~ #88 #87)
#90 := [sk]: #89
#98 := [nnf-neg #90 #95]: #97
#81 := (not #63)
#82 := (~ #81 #48)
#79 := (~ #48 #48)
#70 := (~ #45 #45)
#72 := [refl]: #70
#77 := (~ #42 #42)
#75 := (~ #39 #39)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#80 := [monotonicity #78 #72]: #79
#83 := [nnf-neg #80]: #82
#111 := (~ #54 #54)
#109 := (~ #51 #51)
#110 := [refl]: #109
#112 := [nnf-pos #110]: #111
#104 := (not #54)
#105 := (~ #104 #103)
#106 := [sk]: #105
#117 := [nnf-pos #106 #112 #83 #98]: #116
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (forall (vars (?v0 S2)) #15)
#11 := (forall (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#118 := [mp~ #71 #117]: #115
#119 := [mp #118 #140]: #138
#141 := [and-elim #119]: #135
#174 := [mp #141 #173]: #171
#673 := [mp #174 #672]: #670
#289 := [unit-resolution #673 #288]: #665
#299 := (not #305)
#311 := (or #310 #299)
#326 := (not #96)
#645 := (or #310 #326)
#647 := (iff #645 #311)
#643 := (iff #311 #311)
#649 := [rewrite]: #643
#431 := (iff #326 #299)
#642 := (iff #96 #305)
#644 := [rewrite]: #642
#638 := [monotonicity #644]: #431
#648 := [monotonicity #638]: #647
#639 := [trans #648 #649]: #647
#646 := [quant-inst #84]: #645
#297 := [mp #646 #639]: #311
#627 := [unit-resolution #297 #289 #286]: false
#628 := [lemma #627]: #86
#107 := (not #92)
#619 := [hypothesis]: #107
#634 := (or #92 #45)
#637 := [def-axiom]: #634
#620 := [unit-resolution #637 #619]: #45
#623 := (or #92 #101)
#624 := [def-axiom]: #623
#342 := [unit-resolution #624 #619]: #101
#153 := (or #93 #87 #91)
#156 := (iff #130 #153)
#150 := (or #93 #87 #92)
#154 := (iff #150 #153)
#155 := [rewrite]: #154
#151 := (iff #130 #150)
#148 := (iff #124 #92)
#143 := (not #107)
#146 := (iff #143 #92)
#147 := [rewrite]: #146
#144 := (iff #124 #143)
#108 := (iff #121 #107)
#142 := [rewrite]: #108
#145 := [monotonicity #142]: #144
#149 := [trans #145 #147]: #148
#152 := [monotonicity #149]: #151
#157 := [trans #152 #155]: #156
#120 := [and-elim #119]: #130
#158 := [mp #120 #157]: #153
#343 := [unit-resolution #158 #342 #620 #628]: false
#617 := [lemma #343]: #92
#349 := (or #107 #310)
#347 := [hypothesis]: #92
#348 := [hypothesis]: #665
#631 := (or #310 #107)
#302 := (or #91 #93)
#640 := (not #302)
#626 := (or #310 #640)
#268 := (iff #626 #631)
#635 := (iff #631 #631)
#273 := [rewrite]: #635
#629 := (iff #640 #107)
#282 := (iff #302 #92)
#625 := [rewrite]: #282
#630 := [monotonicity #625]: #629
#633 := [monotonicity #630]: #268
#274 := [trans #633 #273]: #268
#632 := [quant-inst #99]: #626
#636 := [mp #632 #274]: #631
#334 := [unit-resolution #636 #348 #347]: false
#240 := [lemma #334]: #349
#621 := [unit-resolution #240 #617]: #310
#618 := [unit-resolution #673 #621]: #662
#332 := [unit-resolution #319 #618]: #651
#233 := (or #659 #45)
#320 := [def-axiom]: #233
#333 := [unit-resolution #320 #618]: #45
#335 := [unit-resolution #158 #333 #628]: #91
#622 := (or #656 #101)
#331 := [quant-inst #99]: #622
[unit-resolution #331 #335 #332]: false
unsat
44bf7cfb85eb1c4e00dce5a88ea0a349e1b59c09 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S2 S1)
#9 := (:var 0 S2)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#67 := (iff #18 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #18 #62)
#60 := (iff #17 true)
#45 := (= f1 #14)
#46 := (forall (vars (?v0 S2) (?v2 S2)) #45)
#55 := (iff #46 #46)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #17 #55)
#53 := (iff #16 #46)
#51 := (iff #15 #45)
#52 := [rewrite]: #51
#54 := [quant-intro #52]: #53
#49 := (iff #12 #46)
#39 := (= f1 #10)
#42 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #39)
#47 := (iff #42 #46)
#48 := [elim-unused]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#50 := [trans #44 #48]: #49
#57 := [monotonicity #50 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#38 := [asserted]: #18
[mp #38 #68]: false
unsat
07180efbff5a77042937fc4dee6db649992c0567 136 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl f4 :: S2
#16 := f4
decl f5 :: S2
#20 := f5
#175 := (f3 f5 f4)
decl f1 :: S1
#4 := f1
#262 := (= f1 #175)
#176 := (not #262)
#21 := (f3 f4 f5)
#70 := (= f1 #21)
#105 := (not #70)
#9 := (:var 0 S2)
#17 := (f3 #9 f4)
#64 := (= f1 #17)
#67 := (forall (vars (?v0 S2)) #64)
#76 := (not #67)
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#49 := (= f1 #12)
#10 := (f3 #8 #9)
#46 := (= f1 #10)
#55 := (not #46)
#56 := (or #55 #49)
#61 := (forall (vars (?v0 S2) (?v1 S2)) #56)
#85 := (not #61)
#94 := (or #85 #76 #70)
#97 := (not #94)
#22 := (= #21 f1)
#18 := (= #17 f1)
#19 := (forall (vars (?v0 S2)) #18)
#23 := (implies #19 #22)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#24 := (implies #15 #23)
#25 := (not #24)
#100 := (iff #25 #97)
#77 := (or #76 #70)
#86 := (or #85 #77)
#91 := (not #86)
#98 := (iff #91 #97)
#95 := (iff #86 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#92 := (iff #25 #91)
#89 := (iff #24 #86)
#82 := (implies #61 #77)
#87 := (iff #82 #86)
#88 := [rewrite]: #87
#83 := (iff #24 #82)
#80 := (iff #23 #77)
#73 := (implies #67 #70)
#78 := (iff #73 #77)
#79 := [rewrite]: #78
#74 := (iff #23 #73)
#71 := (iff #22 #70)
#72 := [rewrite]: #71
#68 := (iff #19 #67)
#65 := (iff #18 #64)
#66 := [rewrite]: #65
#69 := [quant-intro #66]: #68
#75 := [monotonicity #69 #72]: #74
#81 := [trans #75 #79]: #80
#62 := (iff #15 #61)
#59 := (iff #14 #56)
#52 := (implies #46 #49)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #14 #52)
#50 := (iff #13 #49)
#51 := [rewrite]: #50
#47 := (iff #11 #46)
#48 := [rewrite]: #47
#54 := [monotonicity #48 #51]: #53
#60 := [trans #54 #58]: #59
#63 := [quant-intro #60]: #62
#84 := [monotonicity #63 #81]: #83
#90 := [trans #84 #88]: #89
#93 := [monotonicity #90]: #92
#101 := [trans #93 #99]: #100
#45 := [asserted]: #25
#102 := [mp #45 #101]: #97
#106 := [not-or-elim #102]: #105
#594 := (pattern #12)
#593 := (pattern #10)
#595 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #593 #594) #56)
#598 := (iff #61 #595)
#596 := (iff #56 #56)
#597 := [refl]: #596
#599 := [quant-intro #597]: #598
#118 := (~ #61 #61)
#116 := (~ #56 #56)
#117 := [refl]: #116
#119 := [nnf-pos #117]: #118
#103 := [not-or-elim #102]: #61
#108 := [mp~ #103 #119]: #61
#600 := [mp #108 #599]: #595
#266 := (not #595)
#267 := (or #266 #70 #176)
#263 := (or #176 #70)
#195 := (or #266 #263)
#242 := (iff #195 #267)
#177 := (or #70 #176)
#265 := (or #266 #177)
#585 := (iff #265 #267)
#587 := [rewrite]: #585
#269 := (iff #195 #265)
#264 := (iff #263 #177)
#255 := [rewrite]: #264
#248 := [monotonicity #255]: #269
#374 := [trans #248 #587]: #242
#268 := [quant-inst #20 #16]: #195
#581 := [mp #268 #374]: #267
#253 := [unit-resolution #581 #600 #106]: #176
#601 := (pattern #17)
#602 := (forall (vars (?v0 S2)) (:pat #601) #64)
#605 := (iff #67 #602)
#603 := (iff #64 #64)
#604 := [refl]: #603
#606 := [quant-intro #604]: #605
#110 := (~ #67 #67)
#109 := (~ #64 #64)
#120 := [refl]: #109
#111 := [nnf-pos #120]: #110
#104 := [not-or-elim #102]: #67
#121 := [mp~ #104 #111]: #67
#607 := [mp #121 #606]: #602
#588 := (not #602)
#589 := (or #588 #262)
#590 := [quant-inst #20]: #589
[unit-resolution #590 #607 #253]: false
unsat
1b292cde8b432d2890e3f7c5bd6fc59df5914e46 126 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: (-> S3 S2 S2)
decl f6 :: S2
#17 := f6
decl f5 :: S3
#11 := f5
#21 := (f4 f5 f6)
#22 := (f4 f5 #21)
#158 := (f3 #22)
decl f1 :: S1
#4 := f1
#245 := (= f1 #158)
#156 := (f3 #21)
#243 := (= f1 #156)
#18 := (f3 f6)
#66 := (= f1 #18)
#8 := (:var 0 S2)
#12 := (f4 f5 #8)
#13 := (f3 #12)
#51 := (= f1 #13)
#9 := (f3 #8)
#48 := (= f1 #9)
#57 := (not #48)
#58 := (or #57 #51)
#63 := (forall (vars (?v0 S2)) #58)
#69 := (and #63 #66)
#23 := (f4 f5 #22)
#24 := (f3 #23)
#72 := (= f1 #24)
#78 := (not #69)
#79 := (or #78 #72)
#84 := (not #79)
#25 := (= #24 f1)
#19 := (= #18 f1)
#14 := (= #13 f1)
#10 := (= #9 f1)
#15 := (implies #10 #14)
#16 := (forall (vars (?v0 S2)) #15)
#20 := (and #16 #19)
#26 := (implies #20 #25)
#27 := (not #26)
#85 := (iff #27 #84)
#82 := (iff #26 #79)
#75 := (implies #69 #72)
#80 := (iff #75 #79)
#81 := [rewrite]: #80
#76 := (iff #26 #75)
#73 := (iff #25 #72)
#74 := [rewrite]: #73
#70 := (iff #20 #69)
#67 := (iff #19 #66)
#68 := [rewrite]: #67
#64 := (iff #16 #63)
#61 := (iff #15 #58)
#54 := (implies #48 #51)
#59 := (iff #54 #58)
#60 := [rewrite]: #59
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#53 := [rewrite]: #52
#49 := (iff #10 #48)
#50 := [rewrite]: #49
#56 := [monotonicity #50 #53]: #55
#62 := [trans #56 #60]: #61
#65 := [quant-intro #62]: #64
#71 := [monotonicity #65 #68]: #70
#77 := [monotonicity #71 #74]: #76
#83 := [trans #77 #81]: #82
#86 := [monotonicity #83]: #85
#47 := [asserted]: #27
#89 := [mp #47 #86]: #84
#87 := [not-or-elim #89]: #69
#90 := [and-elim #87]: #66
#574 := (pattern #12)
#575 := (forall (vars (?v0 S2)) (:pat #574) #58)
#578 := (iff #63 #575)
#576 := (iff #58 #58)
#577 := [refl]: #576
#579 := [quant-intro #577]: #578
#104 := (~ #63 #63)
#102 := (~ #58 #58)
#103 := [refl]: #102
#105 := [nnf-pos #103]: #104
#88 := [and-elim #87]: #63
#94 := [mp~ #88 #105]: #63
#580 := [mp #94 #579]: #575
#157 := (not #66)
#236 := (not #575)
#247 := (or #236 #157 #243)
#244 := (or #157 #243)
#248 := (or #236 #244)
#249 := (iff #248 #247)
#246 := [rewrite]: #249
#176 := [quant-inst #17]: #248
#250 := [mp #176 #246]: #247
#212 := [unit-resolution #250 #580 #90]: #243
#229 := (not #243)
#355 := (or #236 #229 #245)
#566 := (or #229 #245)
#562 := (or #236 #566)
#235 := (iff #562 #355)
#569 := [rewrite]: #235
#234 := [quant-inst #21]: #562
#570 := [mp #234 #569]: #355
#213 := [unit-resolution #570 #580 #212]: #245
#91 := (not #72)
#92 := [not-or-elim #89]: #91
#568 := (not #245)
#573 := (or #236 #72 #568)
#223 := (or #568 #72)
#563 := (or #236 #223)
#549 := (iff #563 #573)
#571 := (or #72 #568)
#226 := (or #236 #571)
#565 := (iff #226 #573)
#206 := [rewrite]: #565
#564 := (iff #563 #226)
#572 := (iff #223 #571)
#567 := [rewrite]: #572
#222 := [monotonicity #567]: #564
#210 := [trans #222 #206]: #549
#221 := [quant-inst #22]: #563
#211 := [mp #221 #210]: #573
[unit-resolution #211 #580 #92 #213]: false
unsat
13b01358656727e1edb81fc16730f2ee5b483b3e 64 0
#2 := false
decl f3 :: (-> S2 S2 S3)
decl f4 :: S2
#14 := f4
decl f5 :: S2
#16 := f5
#18 := (f3 f5 f4)
#17 := (f3 f4 f5)
#19 := (= #17 #18)
#65 := (not #19)
#8 := (:var 1 S2)
#9 := (:var 0 S2)
#11 := (f3 #9 #8)
#10 := (f3 #8 #9)
#12 := (= #10 #11)
#13 := (forall (vars (?v0 S2) (?v1 S2)) #12)
#55 := (not #13)
#56 := (or #55 #19)
#61 := (not #56)
#15 := (= f4 f4)
#20 := (and #15 #19)
#21 := (implies #13 #20)
#22 := (not #21)
#62 := (iff #22 #61)
#59 := (iff #21 #56)
#52 := (implies #13 #19)
#57 := (iff #52 #56)
#58 := [rewrite]: #57
#53 := (iff #21 #52)
#50 := (iff #20 #19)
#1 := true
#45 := (and true #19)
#48 := (iff #45 #19)
#49 := [rewrite]: #48
#46 := (iff #20 #45)
#43 := (iff #15 true)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#60 := [trans #54 #58]: #59
#63 := [monotonicity #60]: #62
#42 := [asserted]: #22
#66 := [mp #42 #63]: #61
#67 := [not-or-elim #66]: #65
#550 := (pattern #11)
#549 := (pattern #10)
#551 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #549 #550) #12)
#554 := (iff #13 #551)
#552 := (iff #12 #12)
#553 := [refl]: #552
#555 := [quant-intro #553]: #554
#77 := (~ #13 #13)
#75 := (~ #12 #12)
#76 := [refl]: #75
#78 := [nnf-pos #76]: #77
#64 := [not-or-elim #66]: #13
#69 := [mp~ #64 #78]: #13
#556 := [mp #69 #555]: #551
#132 := (not #551)
#219 := (or #132 #19)
#133 := [quant-inst #14 #16]: #219
[unit-resolution #133 #556 #67]: false
unsat
8729e6c9d45ca3f4162f872a23bbd60b4b1c3963 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl f7 :: S2
#22 := f7
#25 := (f3 f7)
decl f1 :: S1
#4 := f1
#97 := (= f1 #25)
#286 := (not #97)
decl f4 :: (-> S2 S1)
#8 := (:var 0 S2)
#11 := (f4 #8)
#705 := (pattern #11)
#9 := (f3 #8)
#704 := (pattern #9)
#60 := (= f1 #11)
#57 := (= f1 #9)
#66 := (not #57)
#67 := (or #66 #60)
#706 := (forall (vars (?v0 S2)) (:pat #704 #705) #67)
#72 := (forall (vars (?v0 S2)) #67)
#709 := (iff #72 #706)
#707 := (iff #67 #67)
#708 := [refl]: #707
#710 := [quant-intro #708]: #709
#190 := (~ #72 #72)
#204 := (~ #67 #67)
#205 := [refl]: #204
#191 := [nnf-pos #205]: #190
decl f6 :: (-> S2 S1)
#23 := (f6 f7)
#94 := (= f1 #23)
#81 := (not #60)
#89 := (and #66 #81)
#106 := (not #89)
#139 := (or #106 #94 #97)
#142 := (forall (vars (?v0 S2)) #139)
decl f5 :: S2
#15 := f5
#16 := (f4 f5)
#75 := (= f1 #16)
#78 := (not #75)
#151 := (and #72 #78 #142)
#156 := (not #151)
#32 := (f4 f7)
#121 := (= f1 #32)
#162 := (or #94 #121 #156)
#167 := (not #162)
#33 := (= #32 f1)
#24 := (= #23 f1)
#34 := (or #24 #33)
#26 := (= #25 f1)
#27 := (or #24 #26)
#10 := (= #9 f1)
#20 := (not #10)
#12 := (= #11 f1)
#19 := (not #12)
#21 := (and #19 #20)
#28 := (implies #21 #27)
#29 := (forall (vars (?v0 S2)) #28)
#17 := (= #16 f1)
#18 := (not #17)
#30 := (and #18 #29)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#31 := (and #14 #30)
#35 := (implies #31 #34)
#36 := (not #35)
#170 := (iff #36 #167)
#124 := (or #94 #121)
#100 := (or #94 #97)
#107 := (or #106 #100)
#112 := (forall (vars (?v0 S2)) #107)
#115 := (and #78 #112)
#118 := (and #72 #115)
#130 := (not #118)
#131 := (or #130 #124)
#136 := (not #131)
#168 := (iff #136 #167)
#165 := (iff #131 #162)
#159 := (or #156 #124)
#163 := (iff #159 #162)
#164 := [rewrite]: #163
#160 := (iff #131 #159)
#157 := (iff #130 #156)
#154 := (iff #118 #151)
#145 := (and #78 #142)
#148 := (and #72 #145)
#152 := (iff #148 #151)
#153 := [rewrite]: #152
#149 := (iff #118 #148)
#146 := (iff #115 #145)
#143 := (iff #112 #142)
#140 := (iff #107 #139)
#141 := [rewrite]: #140
#144 := [quant-intro #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#155 := [trans #150 #153]: #154
#158 := [monotonicity #155]: #157
#161 := [monotonicity #158]: #160
#166 := [trans #161 #164]: #165
#169 := [monotonicity #166]: #168
#137 := (iff #36 #136)
#134 := (iff #35 #131)
#127 := (implies #118 #124)
#132 := (iff #127 #131)
#133 := [rewrite]: #132
#128 := (iff #35 #127)
#125 := (iff #34 #124)
#122 := (iff #33 #121)
#123 := [rewrite]: #122
#95 := (iff #24 #94)
#96 := [rewrite]: #95
#126 := [monotonicity #96 #123]: #125
#119 := (iff #31 #118)
#116 := (iff #30 #115)
#113 := (iff #29 #112)
#110 := (iff #28 #107)
#103 := (implies #89 #100)
#108 := (iff #103 #107)
#109 := [rewrite]: #108
#104 := (iff #28 #103)
#101 := (iff #27 #100)
#98 := (iff #26 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #96 #99]: #101
#92 := (iff #21 #89)
#86 := (and #81 #66)
#90 := (iff #86 #89)
#91 := [rewrite]: #90
#87 := (iff #21 #86)
#84 := (iff #20 #66)
#58 := (iff #10 #57)
#59 := [rewrite]: #58
#85 := [monotonicity #59]: #84
#82 := (iff #19 #81)
#61 := (iff #12 #60)
#62 := [rewrite]: #61
#83 := [monotonicity #62]: #82
#88 := [monotonicity #83 #85]: #87
#93 := [trans #88 #91]: #92
#105 := [monotonicity #93 #102]: #104
#111 := [trans #105 #109]: #110
#114 := [quant-intro #111]: #113
#79 := (iff #18 #78)
#76 := (iff #17 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#117 := [monotonicity #80 #114]: #116
#73 := (iff #14 #72)
#70 := (iff #13 #67)
#63 := (implies #57 #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #13 #63)
#65 := [monotonicity #59 #62]: #64
#71 := [trans #65 #69]: #70
#74 := [quant-intro #71]: #73
#120 := [monotonicity #74 #117]: #119
#129 := [monotonicity #120 #126]: #128
#135 := [trans #129 #133]: #134
#138 := [monotonicity #135]: #137
#171 := [trans #138 #169]: #170
#56 := [asserted]: #36
#172 := [mp #56 #171]: #167
#177 := [not-or-elim #172]: #151
#178 := [and-elim #177]: #72
#188 := [mp~ #178 #191]: #72
#711 := [mp #188 #710]: #706
#175 := (not #121)
#176 := [not-or-elim #172]: #175
#288 := (not #706)
#375 := (or #288 #286 #121)
#373 := (or #286 #121)
#366 := (or #288 #373)
#378 := (iff #366 #375)
#306 := [rewrite]: #378
#377 := [quant-inst #22]: #366
#379 := [mp #377 #306]: #375
#401 := [unit-resolution #379 #176 #711]: #286
#220 := (or #57 #60 #97)
#712 := (forall (vars (?v0 S2)) (:pat #704 #705) #220)
#225 := (forall (vars (?v0 S2)) #220)
#715 := (iff #225 #712)
#713 := (iff #220 #220)
#714 := [refl]: #713
#716 := [quant-intro #714]: #715
#195 := (or #106 #97)
#200 := (forall (vars (?v0 S2)) #195)
#226 := (iff #200 #225)
#223 := (iff #195 #220)
#206 := (or #57 #60)
#217 := (or #206 #97)
#221 := (iff #217 #220)
#222 := [rewrite]: #221
#218 := (iff #195 #217)
#215 := (iff #106 #206)
#207 := (not #206)
#210 := (not #207)
#213 := (iff #210 #206)
#214 := [rewrite]: #213
#211 := (iff #106 #210)
#208 := (iff #89 #207)
#209 := [rewrite]: #208
#212 := [monotonicity #209]: #211
#216 := [trans #212 #214]: #215
#219 := [monotonicity #216]: #218
#224 := [trans #219 #222]: #223
#227 := [quant-intro #224]: #226
#187 := (~ #200 #200)
#189 := (~ #195 #195)
#186 := [refl]: #189
#182 := [nnf-pos #186]: #187
#201 := (iff #142 #200)
#198 := (iff #139 #195)
#192 := (or #106 false #97)
#196 := (iff #192 #195)
#197 := [rewrite]: #196
#193 := (iff #139 #192)
#184 := (iff #94 false)
#173 := (not #94)
#174 := [not-or-elim #172]: #173
#185 := [iff-false #174]: #184
#194 := [monotonicity #185]: #193
#199 := [trans #194 #197]: #198
#202 := [quant-intro #199]: #201
#180 := [and-elim #177]: #142
#203 := [mp #180 #202]: #200
#183 := [mp~ #203 #182]: #200
#228 := [mp #183 #227]: #225
#717 := [mp #228 #716]: #712
#359 := (not #712)
#696 := (or #359 #97 #121)
#287 := (or #97 #121 #97)
#698 := (or #359 #287)
#700 := (iff #698 #696)
#374 := (or #97 #121)
#485 := (or #359 #374)
#365 := (iff #485 #696)
#699 := [rewrite]: #365
#692 := (iff #698 #485)
#376 := (iff #287 #374)
#380 := [rewrite]: #376
#364 := [monotonicity #380]: #692
#701 := [trans #364 #699]: #700
#353 := [quant-inst #22]: #698
#702 := [mp #353 #701]: #696
[unit-resolution #702 #176 #717 #401]: false
unsat
b2586fe221d4519a3bc11715a6afc923e5ff0b19 25 0
#2 := false
#8 := (:var 0 S2)
#9 := (= #8 #8)
#10 := (exists (vars (?v0 S2)) #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (exists (vars (?v0 S2)) true)
#37 := (iff #34 true)
#38 := [elim-unused]: #37
#35 := (iff #10 #34)
#32 := (iff #9 true)
#33 := [rewrite]: #32
#36 := [quant-intro #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
0b9b80c026d042a35c3971f59d4c9cc24f2e1be5 34 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (exists (vars (?v0 S2)) #10)
#12 := (iff #11 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := (= f1 #9)
#37 := (exists (vars (?v0 S2)) #34)
#40 := (iff #37 #37)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (iff #11 #37)
#35 := (iff #10 #34)
#36 := [rewrite]: #35
#39 := [quant-intro #36]: #38
#42 := [monotonicity #39 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
2ad5bfe4ae1a537e6115da5fac3d5e5fd857b08d 263 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#114 := ?v0!1
#115 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#116 := (= f1 #115)
decl f4 :: (-> S2 S1)
decl ?v0!2 :: S2
#121 := ?v0!2
#122 := (f4 ?v0!2)
#123 := (= f1 #122)
#602 := (not #123)
#595 := [hypothesis]: #123
#8 := (:var 0 S2)
#11 := (f4 #8)
#642 := (pattern #11)
#43 := (= f1 #11)
#103 := (not #43)
#643 := (forall (vars (?v0 S2)) (:pat #642) #103)
#648 := (not #643)
#9 := (f3 #8)
#633 := (pattern #9)
#40 := (= f1 #9)
#96 := (not #40)
#634 := (forall (vars (?v0 S2)) (:pat #633) #96)
#639 := (not #634)
#651 := (or #639 #648)
#654 := (not #651)
#46 := (or #40 #43)
#90 := (not #46)
#657 := (forall (vars (?v0 S2)) (:pat #633 #642) #90)
#282 := (not #657)
decl ?v0!0 :: S2
#79 := ?v0!0
#80 := (f4 ?v0!0)
#81 := (= f1 #80)
#82 := (f3 ?v0!0)
#74 := (= f1 #82)
#76 := (or #74 #81)
#265 := (not #116)
#628 := (f4 ?v0!1)
#629 := (= f1 #628)
#630 := (or #116 #629)
#631 := (not #630)
#623 := [hypothesis]: #657
#613 := (or #631 #282)
#626 := [hypothesis]: #630
#281 := (or #282 #631)
#624 := [quant-inst #114]: #281
#612 := [unit-resolution #624 #623 #626]: false
#614 := [lemma #612]: #613
#596 := [unit-resolution #614 #623]: #631
#608 := (or #630 #265)
#269 := [def-axiom]: #608
#597 := [unit-resolution #269 #596]: #265
#295 := (not #74)
#306 := [hypothesis]: #74
#293 := (or #76 #295)
#294 := [def-axiom]: #293
#625 := [unit-resolution #294 #306]: #76
#235 := (or #639 #295)
#307 := [hypothesis]: #634
#308 := [quant-inst #79]: #235
#305 := [unit-resolution #308 #307 #306]: false
#309 := [lemma #305]: #235
#627 := [unit-resolution #309 #306]: #639
#215 := (or #651 #634)
#302 := [def-axiom]: #215
#632 := [unit-resolution #302 #627]: #651
#662 := (or #654 #657)
#93 := (forall (vars (?v0 S2)) #90)
#106 := (forall (vars (?v0 S2)) #103)
#120 := (not #106)
#99 := (forall (vars (?v0 S2)) #96)
#119 := (not #99)
#85 := (or #119 #120)
#86 := (not #85)
#152 := (or #86 #93)
#663 := (iff #152 #662)
#660 := (iff #93 #657)
#658 := (iff #90 #90)
#659 := [refl]: #658
#661 := [quant-intro #659]: #660
#655 := (iff #86 #654)
#652 := (iff #85 #651)
#649 := (iff #120 #648)
#646 := (iff #106 #643)
#644 := (iff #103 #103)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#650 := [monotonicity #647]: #649
#640 := (iff #119 #639)
#637 := (iff #99 #634)
#635 := (iff #96 #96)
#636 := [refl]: #635
#638 := [quant-intro #636]: #637
#641 := [monotonicity #638]: #640
#653 := [monotonicity #641 #650]: #652
#656 := [monotonicity #653]: #655
#664 := [monotonicity #656 #661]: #663
#110 := (and #99 #106)
#139 := (or #93 #110)
#155 := (iff #139 #152)
#149 := (or #93 #86)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #139 #149)
#126 := (iff #110 #86)
#127 := [rewrite]: #126
#151 := [monotonicity #127]: #150
#156 := [trans #151 #154]: #155
#142 := (or #74 #81 #116 #123)
#145 := (and #139 #142)
#128 := (or #116 #123)
#131 := (or #128 #76)
#132 := (or #110 #93)
#133 := (and #132 #131)
#146 := (iff #133 #145)
#143 := (iff #131 #142)
#144 := [rewrite]: #143
#140 := (iff #132 #139)
#141 := [rewrite]: #140
#147 := [monotonicity #141 #144]: #146
#49 := (exists (vars (?v0 S2)) #46)
#67 := (not #49)
#55 := (exists (vars (?v0 S2)) #43)
#52 := (exists (vars (?v0 S2)) #40)
#58 := (or #52 #55)
#68 := (iff #58 #67)
#134 := (~ #68 #133)
#94 := (~ #67 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#95 := [nnf-neg #92]: #94
#87 := (not #67)
#88 := (~ #87 #76)
#83 := (~ #49 #76)
#84 := [sk]: #83
#89 := [nnf-neg #84]: #88
#129 := (~ #58 #128)
#124 := (~ #55 #123)
#125 := [sk]: #124
#117 := (~ #52 #116)
#118 := [sk]: #117
#130 := [monotonicity #118 #125]: #129
#111 := (not #58)
#112 := (~ #111 #110)
#107 := (not #55)
#108 := (~ #107 #106)
#104 := (~ #103 #103)
#105 := [refl]: #104
#109 := [nnf-neg #105]: #108
#100 := (not #52)
#101 := (~ #100 #99)
#97 := (~ #96 #96)
#98 := [refl]: #97
#102 := [nnf-neg #98]: #101
#113 := [nnf-neg #102 #109]: #112
#135 := [nnf-pos #113 #130 #89 #95]: #134
#12 := (= #11 f1)
#16 := (exists (vars (?v0 S2)) #12)
#10 := (= #9 f1)
#15 := (exists (vars (?v0 S2)) #10)
#17 := (or #15 #16)
#13 := (or #10 #12)
#14 := (exists (vars (?v0 S2)) #13)
#18 := (iff #14 #17)
#19 := (not #18)
#71 := (iff #19 #68)
#61 := (iff #49 #58)
#64 := (not #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#56 := (iff #16 #55)
#44 := (iff #12 #43)
#45 := [rewrite]: #44
#57 := [quant-intro #45]: #56
#53 := (iff #15 #52)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#54 := [quant-intro #42]: #53
#60 := [monotonicity #54 #57]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#48 := [monotonicity #42 #45]: #47
#51 := [quant-intro #48]: #50
#63 := [monotonicity #51 #60]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#39 := [asserted]: #19
#75 := [mp #39 #72]: #68
#136 := [mp~ #75 #135]: #133
#137 := [mp #136 #147]: #145
#138 := [and-elim #137]: #139
#157 := [mp #138 #156]: #152
#665 := [mp #157 #664]: #662
#622 := [unit-resolution #665 #632]: #657
#288 := (not #76)
#414 := (or #282 #288)
#621 := [quant-inst #79]: #414
#280 := [unit-resolution #621 #622 #625]: false
#285 := [lemma #280]: #295
#609 := (f3 ?v0!2)
#615 := (= f1 #609)
#618 := (or #123 #615)
#619 := (not #618)
#316 := (or #619 #282)
#314 := [hypothesis]: #618
#606 := (or #282 #619)
#251 := (or #615 #123)
#616 := (not #251)
#607 := (or #282 #616)
#329 := (iff #607 #606)
#331 := (iff #606 #606)
#317 := [rewrite]: #331
#617 := (iff #616 #619)
#256 := (iff #251 #618)
#257 := [rewrite]: #256
#620 := [monotonicity #257]: #617
#330 := [monotonicity #620]: #329
#332 := [trans #330 #317]: #329
#313 := [quant-inst #121]: #607
#223 := [mp #313 #332]: #606
#315 := [unit-resolution #223 #623 #314]: false
#318 := [lemma #315]: #316
#588 := [unit-resolution #318 #623]: #619
#603 := (or #618 #602)
#325 := [def-axiom]: #603
#589 := [unit-resolution #325 #588]: #602
#148 := [and-elim #137]: #142
#590 := [unit-resolution #148 #589 #285 #597]: #81
#310 := (not #81)
#594 := (or #76 #310)
#598 := [def-axiom]: #594
#585 := [unit-resolution #598 #590]: #76
#586 := [unit-resolution #621 #623 #585]: false
#591 := [lemma #586]: #282
#599 := [unit-resolution #665 #591]: #654
#216 := (or #651 #643)
#303 := [def-axiom]: #216
#593 := [unit-resolution #303 #599]: #643
#592 := (or #648 #602)
#587 := [quant-inst #121]: #592
#434 := [unit-resolution #587 #593 #595]: false
#435 := [lemma #434]: #602
#436 := [hypothesis]: #81
#579 := (or #648 #310)
#580 := [quant-inst #79]: #579
#578 := [unit-resolution #580 #593 #436]: false
#581 := [lemma #578]: #310
#575 := (or #81 #116 #123)
#576 := [unit-resolution #148 #285]: #575
#577 := [unit-resolution #576 #581 #435]: #116
#584 := [unit-resolution #302 #599]: #634
#582 := (or #639 #265)
#583 := [quant-inst #114]: #582
[unit-resolution #583 #584 #577]: false
unsat
49837552f1674d9522be923aa91cdae0b305a0be 222 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#108 := ?v0!1
#109 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#110 := (= f1 #109)
#154 := (not #110)
decl f4 :: S1
#12 := f4
#45 := (= f1 f4)
#95 := (not #45)
#155 := (or #95 #154)
#156 := (not #155)
decl ?v0!0 :: S2
#75 := ?v0!0
#76 := (f3 ?v0!0)
#77 := (= f1 #76)
#159 := (not #77)
#160 := (or #95 #159)
#161 := (not #160)
#618 := [hypothesis]: #161
#317 := (or #160 #77)
#245 := [def-axiom]: #317
#279 := [unit-resolution #245 #618]: #77
#8 := (:var 0 S2)
#9 := (f3 #8)
#643 := (pattern #9)
#39 := (= f1 #9)
#88 := (not #39)
#114 := (or #88 #95)
#649 := (forall (vars (?v0 S2)) (:pat #643) #114)
#305 := (or #160 #45)
#316 := [def-axiom]: #305
#280 := [unit-resolution #316 #618]: #45
#644 := (forall (vars (?v0 S2)) (:pat #643) #88)
#635 := (not #644)
#637 := (or #635 #159)
#319 := [hypothesis]: #77
#298 := [hypothesis]: #644
#292 := [quant-inst #75]: #637
#424 := [unit-resolution #292 #298 #319]: false
#631 := [lemma #424]: #637
#281 := [unit-resolution #631 #279]: #635
#654 := (or #95 #644 #649)
#147 := (forall (vars (?v0 S2)) #114)
#91 := (forall (vars (?v0 S2)) #88)
#150 := (or #95 #91 #147)
#655 := (iff #150 #654)
#652 := (iff #147 #649)
#650 := (iff #114 #114)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#647 := (iff #91 #644)
#645 := (iff #88 #88)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#656 := [monotonicity #648 #653]: #655
#51 := (and #39 #45)
#101 := (not #51)
#104 := (forall (vars (?v0 S2)) #101)
#124 := (or #95 #91 #104)
#151 := (iff #124 #150)
#148 := (iff #104 #147)
#145 := (iff #101 #114)
#115 := (not #114)
#140 := (not #115)
#143 := (iff #140 #114)
#144 := [rewrite]: #143
#141 := (iff #101 #140)
#72 := (iff #51 #115)
#79 := [rewrite]: #72
#142 := [monotonicity #79]: #141
#146 := [trans #142 #144]: #145
#149 := [quant-intro #146]: #148
#152 := [monotonicity #149]: #151
#130 := (and #45 #77)
#127 := (and #45 #110)
#133 := (or #127 #130)
#136 := (and #124 #133)
#82 := (and #77 #45)
#111 := (and #110 #45)
#116 := (or #111 #82)
#98 := (or #91 #95)
#117 := (or #104 #98)
#118 := (and #117 #116)
#137 := (iff #118 #136)
#134 := (iff #116 #133)
#131 := (iff #82 #130)
#132 := [rewrite]: #131
#128 := (iff #111 #127)
#129 := [rewrite]: #128
#135 := [monotonicity #129 #132]: #134
#125 := (iff #117 #124)
#126 := [rewrite]: #125
#138 := [monotonicity #126 #135]: #137
#42 := (exists (vars (?v0 S2)) #39)
#48 := (and #42 #45)
#63 := (not #48)
#54 := (exists (vars (?v0 S2)) #51)
#64 := (iff #54 #63)
#119 := (~ #64 #118)
#99 := (~ #63 #98)
#96 := (~ #95 #95)
#97 := [refl]: #96
#92 := (not #42)
#93 := (~ #92 #91)
#89 := (~ #88 #88)
#90 := [refl]: #89
#94 := [nnf-neg #90]: #93
#100 := [nnf-neg #94 #97]: #99
#85 := (not #63)
#86 := (~ #85 #82)
#83 := (~ #48 #82)
#80 := (~ #45 #45)
#81 := [refl]: #80
#78 := (~ #42 #77)
#70 := [sk]: #78
#84 := [monotonicity #70 #81]: #83
#87 := [nnf-neg #84]: #86
#112 := (~ #54 #111)
#113 := [sk]: #112
#105 := (not #54)
#106 := (~ #105 #104)
#102 := (~ #101 #101)
#103 := [refl]: #102
#107 := [nnf-neg #103]: #106
#120 := [nnf-pos #107 #113 #87 #100]: #119
#13 := (= f4 f1)
#10 := (= #9 f1)
#15 := (and #10 #13)
#16 := (exists (vars (?v0 S2)) #15)
#11 := (exists (vars (?v0 S2)) #10)
#14 := (and #11 #13)
#17 := (iff #14 #16)
#18 := (not #17)
#67 := (iff #18 #64)
#57 := (iff #48 #54)
#60 := (not #57)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #18 #60)
#58 := (iff #17 #57)
#55 := (iff #16 #54)
#52 := (iff #15 #51)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#40 := (iff #10 #39)
#41 := [rewrite]: #40
#53 := [monotonicity #41 #47]: #52
#56 := [quant-intro #53]: #55
#49 := (iff #14 #48)
#43 := (iff #11 #42)
#44 := [quant-intro #41]: #43
#50 := [monotonicity #44 #47]: #49
#59 := [monotonicity #50 #56]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#38 := [asserted]: #18
#71 := [mp #38 #68]: #64
#121 := [mp~ #71 #120]: #118
#122 := [mp #121 #138]: #136
#123 := [and-elim #122]: #124
#153 := [mp #123 #152]: #150
#657 := [mp #153 #656]: #654
#282 := [unit-resolution #657 #281 #280]: #649
#639 := (not #649)
#640 := (or #639 #95 #159)
#303 := (or #159 #95)
#641 := (or #639 #303)
#291 := (iff #641 #640)
#642 := (or #639 #160)
#295 := (iff #642 #640)
#633 := [rewrite]: #295
#632 := (iff #641 #642)
#304 := (iff #303 #160)
#638 := [rewrite]: #304
#290 := [monotonicity #638]: #632
#634 := [trans #290 #633]: #291
#636 := [quant-inst #75]: #641
#275 := [mp #636 #634]: #640
#620 := [unit-resolution #275 #280 #282 #279]: false
#621 := [lemma #620]: #160
#164 := (or #156 #161)
#165 := (iff #133 #164)
#162 := (iff #130 #161)
#163 := [rewrite]: #162
#157 := (iff #127 #156)
#158 := [rewrite]: #157
#166 := [monotonicity #158 #163]: #165
#139 := [and-elim #122]: #133
#167 := [mp #139 #166]: #164
#617 := [unit-resolution #167 #621]: #156
#226 := (or #155 #110)
#313 := [def-axiom]: #226
#323 := [unit-resolution #313 #617]: #110
#225 := (or #155 #45)
#312 := [def-axiom]: #225
#340 := [unit-resolution #312 #617]: #45
#339 := [hypothesis]: #649
#619 := (or #639 #95 #154)
#622 := (or #154 #95)
#625 := (or #639 #622)
#627 := (iff #625 #619)
#626 := (or #639 #155)
#267 := (iff #626 #619)
#629 := [rewrite]: #267
#628 := (iff #625 #626)
#623 := (iff #622 #155)
#624 := [rewrite]: #623
#266 := [monotonicity #624]: #628
#630 := [trans #266 #629]: #627
#261 := [quant-inst #108]: #625
#616 := [mp #261 #630]: #619
#341 := [unit-resolution #616 #340 #339 #323]: false
#327 := [lemma #341]: #639
#342 := [unit-resolution #657 #327 #340]: #644
#612 := (or #635 #154)
#613 := [quant-inst #108]: #612
[unit-resolution #613 #342 #323]: false
unsat
ae4569403e4041d6e7e74864d4d8162485073321 49 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S4 S1)
#9 := (:var 0 S4)
#13 := (:var 1 S2)
#14 := (f3 #13 #9)
#15 := (= #14 f1)
#16 := (exists (vars (?v0 S2) (?v1 S4)) #15)
#8 := (:var 2 S2)
#10 := (f3 #8 #9)
#11 := (= #10 f1)
#12 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #11)
#17 := (iff #12 #16)
#18 := (not #17)
#67 := (iff #18 false)
#1 := true
#62 := (not true)
#65 := (iff #62 false)
#66 := [rewrite]: #65
#63 := (iff #18 #62)
#60 := (iff #17 true)
#45 := (= f1 #14)
#46 := (exists (vars (?v0 S2) (?v2 S4)) #45)
#55 := (iff #46 #46)
#58 := (iff #55 true)
#59 := [rewrite]: #58
#56 := (iff #17 #55)
#53 := (iff #16 #46)
#51 := (iff #15 #45)
#52 := [rewrite]: #51
#54 := [quant-intro #52]: #53
#49 := (iff #12 #46)
#39 := (= f1 #10)
#42 := (exists (vars (?v0 S2) (?v1 S3) (?v2 S4)) #39)
#47 := (iff #42 #46)
#48 := [elim-unused]: #47
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#44 := [quant-intro #41]: #43
#50 := [trans #44 #48]: #49
#57 := [monotonicity #50 #54]: #56
#61 := [trans #57 #59]: #60
#64 := [monotonicity #61]: #63
#68 := [trans #64 #66]: #67
#38 := [asserted]: #18
[mp #38 #68]: false
unsat
d1b3651883bd583f235d214bf142f4826c696167 122 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v0!1 :: S2
#125 := ?v0!1
#128 := (f3 ?v0!1)
decl f1 :: S1
#4 := f1
#129 := (= f1 #128)
decl f4 :: (-> S2 S1)
#126 := (f4 ?v0!1)
#127 := (= f1 #126)
#138 := (and #127 #129)
#130 := (and #129 #127)
#139 := (iff #130 #138)
#140 := [rewrite]: #139
#8 := (:var 0 S2)
#14 := (f4 #8)
#56 := (= f1 #14)
#9 := (f3 #8)
#44 := (= f1 #9)
#59 := (and #44 #56)
#62 := (exists (vars (?v0 S2)) #59)
#131 := (~ #62 #130)
#132 := [sk]: #131
#53 := (exists (vars (?v0 S2)) #44)
#65 := (or #53 #62)
#113 := (iff #65 #62)
#108 := (or false #62)
#111 := (iff #108 #62)
#112 := [rewrite]: #111
#109 := (iff #65 #108)
#106 := (iff #53 false)
#68 := (not #53)
#47 := (not #44)
#50 := (exists (vars (?v0 S2)) #47)
#92 := (and #50 #68 #65)
#10 := (= #9 f1)
#13 := (exists (vars (?v0 S2)) #10)
#19 := (not #13)
#15 := (= #14 f1)
#16 := (and #10 #15)
#17 := (exists (vars (?v0 S2)) #16)
#18 := (or #13 #17)
#20 := (and #18 #19)
#11 := (not #10)
#12 := (exists (vars (?v0 S2)) #11)
#21 := (and #12 #20)
#22 := (not #21)
#23 := (not #22)
#95 := (iff #23 #92)
#74 := (and #68 #65)
#79 := (and #50 #74)
#93 := (iff #79 #92)
#94 := [rewrite]: #93
#90 := (iff #23 #79)
#82 := (not #79)
#85 := (not #82)
#88 := (iff #85 #79)
#89 := [rewrite]: #88
#86 := (iff #23 #85)
#83 := (iff #22 #82)
#80 := (iff #21 #79)
#77 := (iff #20 #74)
#71 := (and #65 #68)
#75 := (iff #71 #74)
#76 := [rewrite]: #75
#72 := (iff #20 #71)
#69 := (iff #19 #68)
#54 := (iff #13 #53)
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#55 := [quant-intro #46]: #54
#70 := [monotonicity #55]: #69
#66 := (iff #18 #65)
#63 := (iff #17 #62)
#60 := (iff #16 #59)
#57 := (iff #15 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #46 #58]: #60
#64 := [quant-intro #61]: #63
#67 := [monotonicity #55 #64]: #66
#73 := [monotonicity #67 #70]: #72
#78 := [trans #73 #76]: #77
#51 := (iff #12 #50)
#48 := (iff #11 #47)
#49 := [monotonicity #46]: #48
#52 := [quant-intro #49]: #51
#81 := [monotonicity #52 #78]: #80
#84 := [monotonicity #81]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#96 := [trans #91 #94]: #95
#43 := [asserted]: #23
#97 := [mp #43 #96]: #92
#99 := [and-elim #97]: #68
#107 := [iff-false #99]: #106
#110 := [monotonicity #107]: #109
#114 := [trans #110 #112]: #113
#100 := [and-elim #97]: #65
#115 := [mp #100 #114]: #62
#135 := [mp~ #115 #132]: #130
#136 := [mp #135 #140]: #138
#141 := [and-elim #136]: #129
#615 := (pattern #9)
#616 := (forall (vars (?v0 S2)) (:pat #615) #47)
#121 := (forall (vars (?v0 S2)) #47)
#619 := (iff #121 #616)
#617 := (iff #47 #47)
#618 := [refl]: #617
#620 := [quant-intro #618]: #619
#122 := (~ #68 #121)
#118 := (~ #47 #47)
#119 := [refl]: #118
#123 := [nnf-neg #119]: #122
#124 := [mp~ #99 #123]: #121
#621 := [mp #124 #620]: #616
#197 := (not #129)
#285 := (not #616)
#199 := (or #285 #197)
#286 := [quant-inst #125]: #199
[unit-resolution #286 #621 #141]: false
unsat
5dbb54e3f79f77198d3a0109880c6612eee2c993 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!10)

317998ded3ba09b3ca0b4841fddbf22609971173 1 0
unsat
5d41ec3d43526a42a83f6a2101e1fdacb01a1e18 1 0
unsat
4353868152099814cbf92f87fbe5cfd7c0e847d9 1 0
unsat
d1960c3de8c282f29b8966d1941c342d346c0824 1 0
unsat
0bb08ec8e7f02569dc9b5667cb6facd8b7ac2d68 1 0
unsat
1ac5f2b326a5a2213b4bbc21839ed6c4581cf4ef 107 0
#2 := false
decl f3 :: (-> S2 S1 S1)
decl ?v0!1 :: S1
#84 := ?v0!1
decl f4 :: S2
#8 := f4
#85 := (f3 f4 ?v0!1)
decl f1 :: S1
#4 := f1
#86 := (= f1 #85)
decl ?v0!0 :: S1
#70 := ?v0!0
#71 := (f3 f4 ?v0!0)
#72 := (= f1 #71)
#73 := (not #72)
#168 := [hypothesis]: #72
#9 := (:var 0 S1)
#10 := (f3 f4 #9)
#586 := (pattern #10)
#38 := (= f1 #10)
#47 := (not #38)
#587 := (forall (vars (?v0 S1)) (:pat #586) #47)
#50 := (forall (vars (?v0 S1)) #47)
#590 := (iff #50 #587)
#588 := (iff #47 #47)
#589 := [refl]: #588
#591 := [quant-intro #589]: #590
#106 := (or #72 #86)
#111 := (and #50 #106)
#65 := (not #73)
#91 := (or #86 #65)
#92 := (or #50 #50)
#93 := (and #92 #91)
#112 := (iff #93 #111)
#109 := (iff #91 #106)
#103 := (or #86 #72)
#107 := (iff #103 #106)
#108 := [rewrite]: #107
#104 := (iff #91 #103)
#101 := (iff #65 #72)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#110 := [trans #105 #108]: #109
#99 := (iff #92 #50)
#100 := [rewrite]: #99
#113 := [monotonicity #100 #110]: #112
#41 := (exists (vars (?v0 S1)) #38)
#59 := (iff #41 #50)
#94 := (~ #59 #93)
#80 := (~ #50 #50)
#78 := (~ #47 #47)
#79 := [refl]: #78
#81 := [nnf-pos #79]: #80
#67 := (not #50)
#74 := (~ #67 #65)
#75 := [sk]: #74
#87 := (~ #41 #86)
#88 := [sk]: #87
#44 := (not #41)
#82 := (~ #44 #50)
#83 := [nnf-neg #79]: #82
#95 := [nnf-pos #83 #88 #75 #81]: #94
#11 := (= #10 f1)
#14 := (not #11)
#15 := (forall (vars (?v0 S1)) #14)
#12 := (exists (vars (?v0 S1)) #11)
#13 := (not #12)
#16 := (iff #13 #15)
#17 := (not #16)
#62 := (iff #17 #59)
#53 := (iff #44 #50)
#56 := (not #53)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#49 := [monotonicity #40]: #48
#52 := [quant-intro #49]: #51
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#43 := [quant-intro #40]: #42
#46 := [monotonicity #43]: #45
#55 := [monotonicity #46 #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#37 := [asserted]: #17
#66 := [mp #37 #63]: #59
#96 := [mp~ #66 #95]: #93
#97 := [mp #96 #113]: #111
#98 := [and-elim #97]: #50
#592 := [mp #98 #591]: #587
#169 := (not #587)
#256 := (or #169 #73)
#170 := [quant-inst #70]: #256
#255 := [unit-resolution #170 #592 #168]: false
#257 := [lemma #255]: #73
#114 := [and-elim #97]: #106
#259 := [unit-resolution #114 #257]: #86
#248 := (not #86)
#188 := (or #169 #248)
#261 := [quant-inst #84]: #188
[unit-resolution #261 #592 #259]: false
unsat
1af05fd396617468d45aac672c15e8ac2f621100 228 0
#2 := false
decl f3 :: (-> S2 S1 S1)
decl ?v0!0 :: S1
#88 := ?v0!0
decl f4 :: S2
#8 := f4
#89 := (f3 f4 ?v0!0)
decl f1 :: S1
#4 := f1
#90 := (= f1 #89)
#91 := (not #90)
decl ?v0!1 :: S1
#120 := ?v0!1
#121 := (f3 f4 ?v0!1)
#122 := (= f1 #121)
#123 := (not #122)
#255 := [hypothesis]: #123
#9 := (:var 0 S1)
#10 := (f3 f4 #9)
#631 := (pattern #10)
#40 := (= f1 #10)
#632 := (forall (vars (?v0 S1)) (:pat #631) #40)
#637 := (not #632)
decl f5 :: S1
#12 := f5
#43 := (= f1 f5)
#640 := (or #43 #637)
#643 := (not #640)
#49 := (not #40)
#50 := (or #49 #43)
#98 := (not #50)
#646 := (forall (vars (?v0 S1)) (:pat #631) #98)
#286 := (not #646)
#267 := (or #43 #91)
#128 := (or #43 #123)
#306 := (not #128)
#621 := [hypothesis]: #646
#622 := (or #306 #286)
#283 := [hypothesis]: #128
#623 := (or #286 #306)
#293 := (or #123 #43)
#304 := (not #293)
#625 := (or #286 #304)
#412 := (iff #625 #623)
#291 := (iff #623 #623)
#292 := [rewrite]: #291
#303 := (iff #304 #306)
#305 := (iff #293 #128)
#233 := [rewrite]: #305
#307 := [monotonicity #233]: #303
#619 := [monotonicity #307]: #412
#626 := [trans #619 #292]: #412
#280 := [quant-inst #120]: #625
#627 := [mp #280 #626]: #623
#279 := [unit-resolution #627 #621 #283]: false
#263 := [lemma #279]: #622
#311 := [unit-resolution #263 #621]: #306
#624 := (or #128 #122)
#630 := [def-axiom]: #624
#327 := [unit-resolution #630 #311]: #122
#104 := (not #43)
#628 := (or #128 #104)
#629 := [def-axiom]: #628
#328 := [unit-resolution #629 #311]: #104
#142 := (or #43 #91 #123)
#58 := (forall (vars (?v0 S1)) #40)
#114 := (and #104 #58)
#101 := (forall (vars (?v0 S1)) #98)
#139 := (or #101 #114)
#145 := (and #139 #142)
#83 := (or #91 #43)
#131 := (or #128 #83)
#132 := (or #114 #101)
#133 := (and #132 #131)
#146 := (iff #133 #145)
#143 := (iff #131 #142)
#144 := [rewrite]: #143
#140 := (iff #132 #139)
#141 := [rewrite]: #140
#147 := [monotonicity #141 #144]: #146
#55 := (exists (vars (?v0 S1)) #50)
#76 := (not #55)
#64 := (not #58)
#65 := (or #43 #64)
#77 := (iff #65 #76)
#134 := (~ #77 #133)
#102 := (~ #76 #101)
#99 := (~ #98 #98)
#100 := [refl]: #99
#103 := [nnf-neg #100]: #102
#95 := (not #76)
#96 := (~ #95 #83)
#85 := (~ #55 #83)
#92 := [sk]: #85
#97 := [nnf-neg #92]: #96
#129 := (~ #65 #128)
#124 := (~ #64 #123)
#125 := [sk]: #124
#118 := (~ #43 #43)
#119 := [refl]: #118
#130 := [monotonicity #119 #125]: #129
#115 := (not #65)
#116 := (~ #115 #114)
#111 := (not #64)
#112 := (~ #111 #58)
#109 := (~ #58 #58)
#107 := (~ #40 #40)
#108 := [refl]: #107
#110 := [nnf-pos #108]: #109
#113 := [nnf-neg #110]: #112
#105 := (~ #104 #104)
#106 := [refl]: #105
#117 := [nnf-neg #106 #113]: #116
#135 := [nnf-pos #117 #130 #97 #103]: #134
#13 := (= f5 f1)
#11 := (= #10 f1)
#16 := (forall (vars (?v0 S1)) #11)
#17 := (implies #16 #13)
#14 := (implies #11 #13)
#15 := (exists (vars (?v0 S1)) #14)
#18 := (iff #15 #17)
#19 := (not #18)
#80 := (iff #19 #77)
#70 := (iff #55 #65)
#73 := (not #70)
#78 := (iff #73 #77)
#79 := [rewrite]: #78
#74 := (iff #19 #73)
#71 := (iff #18 #70)
#68 := (iff #17 #65)
#61 := (implies #58 #43)
#66 := (iff #61 #65)
#67 := [rewrite]: #66
#62 := (iff #17 #61)
#44 := (iff #13 #43)
#45 := [rewrite]: #44
#59 := (iff #16 #58)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#60 := [quant-intro #42]: #59
#63 := [monotonicity #60 #45]: #62
#69 := [trans #63 #67]: #68
#56 := (iff #15 #55)
#53 := (iff #14 #50)
#46 := (implies #40 #43)
#51 := (iff #46 #50)
#52 := [rewrite]: #51
#47 := (iff #14 #46)
#48 := [monotonicity #42 #45]: #47
#54 := [trans #48 #52]: #53
#57 := [quant-intro #54]: #56
#72 := [monotonicity #57 #69]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#39 := [asserted]: #19
#84 := [mp #39 #81]: #77
#136 := [mp~ #84 #135]: #133
#137 := [mp #136 #147]: #145
#148 := [and-elim #137]: #142
#329 := [unit-resolution #148 #328 #327]: #91
#615 := (or #267 #90)
#618 := [def-axiom]: #615
#315 := [unit-resolution #618 #329]: #267
#270 := (not #267)
#610 := (or #286 #270)
#606 := (not #83)
#611 := (or #286 #606)
#607 := (iff #611 #610)
#249 := (iff #610 #610)
#614 := [rewrite]: #249
#608 := (iff #606 #270)
#268 := (iff #83 #267)
#269 := [rewrite]: #268
#609 := [monotonicity #269]: #608
#613 := [monotonicity #609]: #607
#616 := [trans #613 #614]: #607
#612 := [quant-inst #88]: #611
#254 := [mp #612 #616]: #610
#330 := [unit-resolution #254 #621 #315]: false
#221 := [lemma #330]: #286
#651 := (or #643 #646)
#150 := (or #115 #101)
#652 := (iff #150 #651)
#649 := (iff #101 #646)
#647 := (iff #98 #98)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#644 := (iff #115 #643)
#641 := (iff #65 #640)
#638 := (iff #64 #637)
#635 := (iff #58 #632)
#633 := (iff #40 #40)
#634 := [refl]: #633
#636 := [quant-intro #634]: #635
#639 := [monotonicity #636]: #638
#642 := [monotonicity #639]: #641
#645 := [monotonicity #642]: #644
#653 := [monotonicity #645 #650]: #652
#153 := (iff #139 #150)
#93 := (or #101 #115)
#151 := (iff #93 #150)
#152 := [rewrite]: #151
#94 := (iff #139 #93)
#126 := (iff #114 #115)
#127 := [rewrite]: #126
#149 := [monotonicity #127]: #94
#154 := [trans #149 #152]: #153
#138 := [and-elim #137]: #139
#155 := [mp #138 #154]: #150
#654 := [mp #155 #653]: #651
#617 := [unit-resolution #654 #221]: #643
#214 := (or #640 #632)
#301 := [def-axiom]: #214
#600 := [unit-resolution #301 #617]: #632
#604 := (or #637 #122)
#605 := [quant-inst #120]: #604
#601 := [unit-resolution #605 #600 #255]: false
#323 := [lemma #601]: #122
#598 := (or #91 #123)
#213 := (or #640 #104)
#300 := [def-axiom]: #213
#324 := [unit-resolution #300 #617]: #104
#603 := [unit-resolution #148 #324]: #598
#312 := [unit-resolution #603 #323]: #91
#602 := (or #637 #90)
#599 := [quant-inst #88]: #602
[unit-resolution #599 #600 #312]: false
unsat
46ded07bd280adcfd682a42ca03ae99c0bb1cbfc 161 0
#2 := false
decl f3 :: (-> S3 S2 S1)
#11 := (:var 0 S2)
decl f4 :: (-> S4 S1 S3)
decl f6 :: S1
#17 := f6
decl f5 :: S4
#8 := f5
#18 := (f4 f5 f6)
#19 := (f3 #18 #11)
#612 := (pattern #19)
decl f1 :: S1
#4 := f1
#60 := (= f1 #19)
#109 := (not #60)
#613 := (forall (vars (?v0 S2)) (:pat #612) #109)
decl f7 :: S2
#22 := f7
#23 := (f3 #18 f7)
#66 := (= f1 #23)
#187 := (= f1 f6)
#188 := (iff #66 #187)
#9 := (:var 1 S1)
#10 := (f4 f5 #9)
#12 := (f3 #10 #11)
#605 := (pattern #12)
#51 := (= f1 #9)
#48 := (= f1 #12)
#54 := (iff #48 #51)
#606 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #605) #54)
#57 := (forall (vars (?v0 S1) (?v1 S2)) #54)
#609 := (iff #57 #606)
#607 := (iff #54 #54)
#608 := [refl]: #607
#610 := [quant-intro #608]: #609
#91 := (~ #57 #57)
#98 := (~ #54 #54)
#99 := [refl]: #98
#92 := [nnf-pos #99]: #91
#63 := (exists (vars (?v0 S2)) #60)
#69 := (iff #63 #66)
#75 := (not #57)
#76 := (or #75 #69)
#81 := (not #76)
#24 := (= #23 f1)
#20 := (= #19 f1)
#21 := (exists (vars (?v0 S2)) #20)
#25 := (iff #21 #24)
#14 := (= #9 f1)
#13 := (= #12 f1)
#15 := (iff #13 #14)
#16 := (forall (vars (?v0 S1) (?v1 S2)) #15)
#26 := (implies #16 #25)
#27 := (not #26)
#82 := (iff #27 #81)
#79 := (iff #26 #76)
#72 := (implies #57 #69)
#77 := (iff #72 #76)
#78 := [rewrite]: #77
#73 := (iff #26 #72)
#70 := (iff #25 #69)
#67 := (iff #24 #66)
#68 := [rewrite]: #67
#64 := (iff #21 #63)
#61 := (iff #20 #60)
#62 := [rewrite]: #61
#65 := [quant-intro #62]: #64
#71 := [monotonicity #65 #68]: #70
#58 := (iff #16 #57)
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#53 := [rewrite]: #52
#49 := (iff #13 #48)
#50 := [rewrite]: #49
#56 := [monotonicity #50 #53]: #55
#59 := [quant-intro #56]: #58
#74 := [monotonicity #59 #71]: #73
#80 := [trans #74 #78]: #79
#83 := [monotonicity #80]: #82
#47 := [asserted]: #27
#86 := [mp #47 #83]: #81
#84 := [not-or-elim #86]: #57
#89 := [mp~ #84 #92]: #57
#611 := [mp #89 #610]: #606
#189 := (not #606)
#265 := (or #189 #188)
#266 := [quant-inst #17 #22]: #265
#275 := [unit-resolution #266 #611]: #188
decl ?v0!0 :: S2
#90 := ?v0!0
#100 := (f3 #18 ?v0!0)
#101 := (= f1 #100)
#274 := (iff #101 #187)
#276 := (or #189 #274)
#267 := [quant-inst #17 #90]: #276
#593 := [unit-resolution #267 #611]: #274
#278 := (not #274)
#596 := (or #278 #187)
#115 := (not #66)
#595 := [hypothesis]: #115
#120 := (or #66 #101)
#112 := (forall (vars (?v0 S2)) #109)
#121 := (or #115 #112)
#128 := (and #120 #121)
#122 := (and #121 #120)
#129 := (iff #122 #128)
#130 := [rewrite]: #129
#93 := (not #63)
#94 := (iff #66 #93)
#123 := (~ #94 #122)
#113 := (~ #93 #112)
#110 := (~ #109 #109)
#111 := [refl]: #110
#114 := [nnf-neg #111]: #113
#106 := (not #93)
#107 := (~ #106 #101)
#102 := (~ #63 #101)
#103 := [sk]: #102
#108 := [nnf-neg #103]: #107
#118 := (~ #66 #66)
#119 := [refl]: #118
#116 := (~ #115 #115)
#117 := [refl]: #116
#124 := [nnf-pos #117 #119 #108 #114]: #123
#85 := (not #69)
#95 := (iff #85 #94)
#96 := [rewrite]: #95
#87 := [not-or-elim #86]: #85
#97 := [mp #87 #96]: #94
#125 := [mp~ #97 #124]: #122
#126 := [mp #125 #130]: #128
#127 := [and-elim #126]: #120
#253 := [unit-resolution #127 #595]: #101
#277 := (not #101)
#281 := (or #278 #277 #187)
#260 := [def-axiom]: #281
#237 := [unit-resolution #260 #253]: #596
#580 := [unit-resolution #237 #593]: #187
#279 := (not #187)
#600 := (not #188)
#241 := (or #600 #279)
#601 := (or #600 #66 #279)
#602 := [def-axiom]: #601
#242 := [unit-resolution #602 #595]: #241
#243 := [unit-resolution #242 #580 #275]: false
#244 := [lemma #243]: #66
#618 := (or #115 #613)
#619 := (iff #121 #618)
#616 := (iff #112 #613)
#614 := (iff #109 #109)
#615 := [refl]: #614
#617 := [quant-intro #615]: #616
#620 := [monotonicity #617]: #619
#131 := [and-elim #126]: #121
#621 := [mp #131 #620]: #618
#207 := [unit-resolution #621 #244]: #613
#604 := (not #613)
#594 := (or #604 #115)
#252 := [quant-inst #22]: #594
[unit-resolution #252 #244 #207]: false
unsat
61574c1108ca575449f952349f2919221122b716 110 0
#2 := false
decl f3 :: (-> S2 S1 S1)
#12 := (:var 0 S1)
decl f4 :: S2
#8 := f4
#13 := (f3 f4 #12)
#595 := (pattern #13)
decl f1 :: S1
#4 := f1
#49 := (= f1 #13)
#58 := (not #49)
#596 := (forall (vars (?v0 S1)) (:pat #595) #58)
#61 := (forall (vars (?v0 S1)) #58)
#599 := (iff #61 #596)
#597 := (iff #58 #58)
#598 := [refl]: #597
#600 := [quant-intro #598]: #599
#52 := (exists (vars (?v0 S1)) #49)
#55 := (not #52)
#117 := (~ #55 #61)
#119 := (~ #58 #58)
#120 := [refl]: #119
#118 := [nnf-neg #120]: #117
decl f5 :: S1
#9 := f5
#10 := (f3 f4 f5)
#46 := (= f1 #10)
#64 := (ite #46 #55 #61)
#114 := (iff #64 #55)
#1 := true
#109 := (ite true #55 #61)
#112 := (iff #109 #55)
#113 := [rewrite]: #112
#110 := (iff #64 #109)
#107 := (iff #46 true)
decl f6 :: S1
#20 := f6
#21 := (f3 f4 f6)
#67 := (= f1 #21)
#82 := (not #64)
#73 := (not #46)
#91 := (or #73 #82 #67)
#94 := (not #91)
#22 := (= #21 f1)
#11 := (= #10 f1)
#23 := (implies #11 #22)
#14 := (= #13 f1)
#17 := (not #14)
#18 := (forall (vars (?v0 S1)) #17)
#15 := (exists (vars (?v0 S1)) #14)
#16 := (not #15)
#19 := (ite #11 #16 #18)
#24 := (implies #19 #23)
#25 := (not #24)
#97 := (iff #25 #94)
#74 := (or #73 #67)
#83 := (or #82 #74)
#88 := (not #83)
#95 := (iff #88 #94)
#92 := (iff #83 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#89 := (iff #25 #88)
#86 := (iff #24 #83)
#79 := (implies #64 #74)
#84 := (iff #79 #83)
#85 := [rewrite]: #84
#80 := (iff #24 #79)
#77 := (iff #23 #74)
#70 := (implies #46 #67)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #23 #70)
#68 := (iff #22 #67)
#69 := [rewrite]: #68
#47 := (iff #11 #46)
#48 := [rewrite]: #47
#72 := [monotonicity #48 #69]: #71
#78 := [trans #72 #76]: #77
#65 := (iff #19 #64)
#62 := (iff #18 #61)
#59 := (iff #17 #58)
#50 := (iff #14 #49)
#51 := [rewrite]: #50
#60 := [monotonicity #51]: #59
#63 := [quant-intro #60]: #62
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#54 := [quant-intro #51]: #53
#57 := [monotonicity #54]: #56
#66 := [monotonicity #48 #57 #63]: #65
#81 := [monotonicity #66 #78]: #80
#87 := [trans #81 #85]: #86
#90 := [monotonicity #87]: #89
#98 := [trans #90 #96]: #97
#45 := [asserted]: #25
#99 := [mp #45 #98]: #94
#100 := [not-or-elim #99]: #46
#108 := [iff-true #100]: #107
#111 := [monotonicity #108]: #110
#115 := [trans #111 #113]: #114
#101 := [not-or-elim #99]: #64
#116 := [mp #101 #115]: #55
#105 := [mp~ #116 #118]: #61
#601 := [mp #105 #600]: #596
#178 := (not #596)
#265 := (or #178 #73)
#179 := [quant-inst #9]: #265
[unit-resolution #179 #100 #601]: false
unsat
378ceaf70d81cc1e628d67f3e8faa04e3659aa70 189 0
#2 := false
decl f3 :: (-> S3 S2 S1)
#11 := (:var 0 S2)
decl f4 :: (-> S4 S1 S3)
decl f7 :: S1
#27 := f7
decl f5 :: S4
#8 := f5
#28 := (f4 f5 f7)
#29 := (f3 #28 #11)
#721 := (pattern #29)
decl f1 :: S1
#4 := f1
#87 := (= f1 #29)
#193 := (not #87)
#722 := (forall (vars (?v0 S2)) (:pat #721) #193)
decl f6 :: S2
#21 := f6
#32 := (f3 #28 f6)
#93 := (= f1 #32)
#271 := (= f1 f7)
#272 := (iff #93 #271)
#9 := (:var 1 S1)
#10 := (f4 f5 #9)
#12 := (f3 #10 #11)
#689 := (pattern #12)
#60 := (= f1 #9)
#57 := (= f1 #12)
#63 := (iff #57 #60)
#690 := (forall (vars (?v0 S1) (?v1 S2)) (:pat #689) #63)
#66 := (forall (vars (?v0 S1) (?v1 S2)) #63)
#693 := (iff #66 #690)
#691 := (iff #63 #63)
#692 := [refl]: #691
#694 := [quant-intro #692]: #693
#122 := (~ #66 #66)
#129 := (~ #63 #63)
#130 := [refl]: #129
#123 := [nnf-pos #130]: #122
#19 := (:var 0 S1)
#20 := (f4 f5 #19)
#22 := (f3 #20 f6)
#75 := (= f1 #22)
#78 := (forall (vars (?v0 S1)) #75)
#69 := (exists (vars (?v1 S2)) #57)
#72 := (forall (vars (?v0 S1)) #69)
#81 := (iff #72 #78)
#84 := (and #66 #81)
#90 := (exists (vars (?v0 S2)) #87)
#96 := (iff #90 #93)
#102 := (not #84)
#103 := (or #102 #96)
#108 := (not #103)
#33 := (= #32 f1)
#30 := (= #29 f1)
#31 := (exists (vars (?v0 S2)) #30)
#34 := (iff #31 #33)
#23 := (= #22 f1)
#24 := (forall (vars (?v0 S1)) #23)
#13 := (= #12 f1)
#17 := (exists (vars (?v1 S2)) #13)
#18 := (forall (vars (?v0 S1)) #17)
#25 := (iff #18 #24)
#14 := (= #9 f1)
#15 := (iff #13 #14)
#16 := (forall (vars (?v0 S1) (?v1 S2)) #15)
#26 := (and #16 #25)
#35 := (implies #26 #34)
#36 := (not #35)
#109 := (iff #36 #108)
#106 := (iff #35 #103)
#99 := (implies #84 #96)
#104 := (iff #99 #103)
#105 := [rewrite]: #104
#100 := (iff #35 #99)
#97 := (iff #34 #96)
#94 := (iff #33 #93)
#95 := [rewrite]: #94
#91 := (iff #31 #90)
#88 := (iff #30 #87)
#89 := [rewrite]: #88
#92 := [quant-intro #89]: #91
#98 := [monotonicity #92 #95]: #97
#85 := (iff #26 #84)
#82 := (iff #25 #81)
#79 := (iff #24 #78)
#76 := (iff #23 #75)
#77 := [rewrite]: #76
#80 := [quant-intro #77]: #79
#73 := (iff #18 #72)
#70 := (iff #17 #69)
#58 := (iff #13 #57)
#59 := [rewrite]: #58
#71 := [quant-intro #59]: #70
#74 := [quant-intro #71]: #73
#83 := [monotonicity #74 #80]: #82
#67 := (iff #16 #66)
#64 := (iff #15 #63)
#61 := (iff #14 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #59 #62]: #64
#68 := [quant-intro #65]: #67
#86 := [monotonicity #68 #83]: #85
#101 := [monotonicity #86 #98]: #100
#107 := [trans #101 #105]: #106
#110 := [monotonicity #107]: #109
#56 := [asserted]: #36
#113 := [mp #56 #110]: #108
#111 := [not-or-elim #113]: #84
#112 := [and-elim #111]: #66
#120 := [mp~ #112 #123]: #66
#695 := [mp #120 #694]: #690
#273 := (not #690)
#349 := (or #273 #272)
#350 := [quant-inst #27 #21]: #349
#359 := [unit-resolution #350 #695]: #272
decl ?v0!3 :: S2
#136 := ?v0!3
#137 := (f3 #28 ?v0!3)
#164 := (= f1 #137)
#358 := (iff #164 #271)
#360 := (or #273 #358)
#351 := [quant-inst #27 #136]: #360
#677 := [unit-resolution #351 #695]: #358
#362 := (not #358)
#680 := (or #362 #271)
#199 := (not #93)
#679 := [hypothesis]: #199
#204 := (or #93 #164)
#196 := (forall (vars (?v0 S2)) #193)
#205 := (or #199 #196)
#212 := (and #204 #205)
#206 := (and #205 #204)
#213 := (iff #206 #212)
#214 := [rewrite]: #213
#124 := (not #90)
#125 := (iff #93 #124)
#207 := (~ #125 #206)
#197 := (~ #124 #196)
#194 := (~ #193 #193)
#195 := [refl]: #194
#198 := [nnf-neg #195]: #197
#190 := (not #124)
#191 := (~ #190 #164)
#165 := (~ #90 #164)
#187 := [sk]: #165
#192 := [nnf-neg #187]: #191
#202 := (~ #93 #93)
#203 := [refl]: #202
#200 := (~ #199 #199)
#201 := [refl]: #200
#208 := [nnf-pos #201 #203 #192 #198]: #207
#115 := (not #96)
#126 := (iff #115 #125)
#127 := [rewrite]: #126
#116 := [not-or-elim #113]: #115
#128 := [mp #116 #127]: #125
#209 := [mp~ #128 #208]: #206
#210 := [mp #209 #214]: #212
#211 := [and-elim #210]: #204
#337 := [unit-resolution #211 #679]: #164
#361 := (not #164)
#365 := (or #362 #361 #271)
#344 := [def-axiom]: #365
#321 := [unit-resolution #344 #337]: #680
#664 := [unit-resolution #321 #677]: #271
#363 := (not #271)
#684 := (not #272)
#325 := (or #684 #363)
#685 := (or #684 #93 #363)
#686 := [def-axiom]: #685
#326 := [unit-resolution #686 #679]: #325
#327 := [unit-resolution #326 #664 #359]: false
#328 := [lemma #327]: #93
#727 := (or #199 #722)
#728 := (iff #205 #727)
#725 := (iff #196 #722)
#723 := (iff #193 #193)
#724 := [refl]: #723
#726 := [quant-intro #724]: #725
#729 := [monotonicity #726]: #728
#215 := [and-elim #210]: #205
#730 := [mp #215 #729]: #727
#291 := [unit-resolution #730 #328]: #722
#688 := (not #722)
#678 := (or #688 #199)
#336 := [quant-inst #21]: #678
[unit-resolution #336 #328 #291]: false
unsat
805c18c78cece7578f6235471e947733267a5411 1 0
unsat
626a766d3e6816fc4d39780448f9c6b7965da15c 1 0
unsat
50072264e2ef93269d01148a43be95c93e8e95a2 1 2
unsat
WARNING: failed to find a pattern for quantifier (quantifier id: k!16)

7ff73f8c9727b866009974cd8b3025b90d61fd57 1 0
unsat
1d553b580169e91a5cf9cde1ec11372e8b99f6a5 1 0
unsat
f010ef4b805535e5ca8fec6afaee63fc30f4e69e 1 0
unsat
9cb750c0f8a06bad91d2052f6046dd5974818efe 1 0
unsat
08358038248416355849cc7ae66f2673721af28b 1 0
unsat
ac618ea2f315b87a071d15251b68179d70f7a036 107 0
#2 := false
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#597 := (pattern #9)
decl f1 :: S1
#4 := f1
#40 := (= f1 #9)
#46 := (not #40)
#604 := (forall (vars (?v0 S2)) (:pat #597) #46)
#118 := (forall (vars (?v0 S2)) #46)
#607 := (iff #118 #604)
#605 := (iff #46 #46)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#61 := (exists (vars (?v0 S2)) #40)
#77 := (not #61)
#119 := (~ #77 #118)
#116 := (~ #46 #46)
#117 := [refl]: #116
#120 := [nnf-neg #117]: #119
#11 := (:var 1 S2)
#12 := (= #8 #11)
#47 := (or #12 #46)
#52 := (forall (vars (?v1 S2)) #47)
#55 := (and #40 #52)
#58 := (exists (vars (?v0 S2)) #55)
#67 := (not #58)
#68 := (or #67 #61)
#73 := (not #68)
#10 := (= #9 f1)
#17 := (exists (vars (?v0 S2)) #10)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#18 := (implies #16 #17)
#19 := (not #18)
#74 := (iff #19 #73)
#71 := (iff #18 #68)
#64 := (implies #58 #61)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #18 #64)
#62 := (iff #17 #61)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#63 := [quant-intro #42]: #62
#59 := (iff #16 #58)
#56 := (iff #15 #55)
#53 := (iff #14 #52)
#50 := (iff #13 #47)
#43 := (implies #40 #12)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #13 #43)
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [quant-intro #51]: #53
#57 := [monotonicity #42 #54]: #56
#60 := [quant-intro #57]: #59
#66 := [monotonicity #60 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#39 := [asserted]: #19
#78 := [mp #39 #75]: #73
#79 := [not-or-elim #78]: #77
#121 := [mp~ #79 #120]: #118
#609 := [mp #121 #608]: #604
decl ?v0!0 :: S2
#87 := ?v0!0
#81 := (f3 ?v0!0)
#82 := (= f1 #81)
#88 := (= #8 ?v0!0)
#106 := (or #46 #88)
#109 := (forall (vars (?v1 S2)) #106)
#112 := (and #82 #109)
#89 := (or #88 #46)
#90 := (forall (vars (?v1 S2)) #89)
#91 := (and #82 #90)
#113 := (iff #91 #112)
#110 := (iff #90 #109)
#107 := (iff #89 #106)
#108 := [rewrite]: #107
#111 := [quant-intro #108]: #110
#114 := [monotonicity #111]: #113
#92 := (~ #58 #91)
#100 := (~ #91 #91)
#98 := (~ #90 #90)
#96 := (~ #89 #89)
#97 := [refl]: #96
#99 := [nnf-pos #97]: #98
#94 := (~ #82 #82)
#95 := [refl]: #94
#101 := [monotonicity #95 #99]: #100
#93 := [sk]: #92
#102 := [trans #93 #101]: #92
#76 := [not-or-elim #78]: #58
#103 := [mp~ #76 #102]: #91
#104 := [mp #103 #114]: #112
#105 := [and-elim #104]: #82
#179 := (not #82)
#267 := (not #604)
#181 := (or #267 #179)
#268 := [quant-inst #87]: #181
[unit-resolution #268 #105 #609]: false
unsat
c1764d5fdaaf5fcd099b25c4b805ce423c186fa4 75 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#18 := (not #10)
#11 := (:var 1 S2)
#12 := (= #8 #11)
#17 := (not #12)
#19 := (implies #17 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #10 #20)
#22 := (exists (vars (?v0 S2)) #21)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#16 := (exists (vars (?v0 S2)) #15)
#23 := (iff #16 #22)
#24 := (not #23)
#93 := (iff #24 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #24 #88)
#86 := (iff #23 true)
#45 := (= f1 #9)
#51 := (not #45)
#52 := (or #12 #51)
#57 := (forall (vars (?v1 S2)) #52)
#60 := (and #45 #57)
#63 := (exists (vars (?v0 S2)) #60)
#81 := (iff #63 #63)
#84 := (iff #81 true)
#85 := [rewrite]: #84
#82 := (iff #23 #81)
#79 := (iff #22 #63)
#77 := (iff #21 #60)
#75 := (iff #20 #57)
#73 := (iff #19 #52)
#68 := (implies #17 #51)
#71 := (iff #68 #52)
#72 := [rewrite]: #71
#69 := (iff #19 #68)
#66 := (iff #18 #51)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#67 := [monotonicity #47]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#76 := [quant-intro #74]: #75
#78 := [monotonicity #47 #76]: #77
#80 := [quant-intro #78]: #79
#64 := (iff #16 #63)
#61 := (iff #15 #60)
#58 := (iff #14 #57)
#55 := (iff #13 #52)
#48 := (implies #45 #12)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #13 #48)
#50 := [monotonicity #47]: #49
#56 := [trans #50 #54]: #55
#59 := [quant-intro #56]: #58
#62 := [monotonicity #47 #59]: #61
#65 := [quant-intro #62]: #64
#83 := [monotonicity #65 #80]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#44 := [asserted]: #24
[mp #44 #94]: false
unsat
39e6e981f54bfbbd33de190a32e637bca3addace 207 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!0 :: (-> S2 S2)
decl f4 :: S2
#8 := f4
#224 := (?v1!0 f4)
#225 := (f3 #224)
decl f1 :: S1
#4 := f1
#312 := (= f1 #225)
#226 := (not #312)
#311 := (= f4 #224)
#316 := (or #311 #226)
#314 := (not #316)
#11 := (:var 0 S2)
#12 := (f3 #11)
#642 := (pattern #12)
#123 := (?v1!0 #11)
#150 := (= #11 #123)
#124 := (f3 #123)
#120 := (= f1 #124)
#131 := (not #120)
#156 := (or #131 #150)
#161 := (not #156)
#49 := (= f1 #12)
#58 := (not #49)
#164 := (or #58 #161)
#649 := (forall (vars (?v0 S2)) (:pat #642) #164)
#167 := (forall (vars (?v0 S2)) #164)
#652 := (iff #167 #649)
#650 := (iff #164 #164)
#651 := [refl]: #650
#653 := [quant-intro #651]: #652
#132 := (= #123 #11)
#133 := (or #132 #131)
#134 := (not #133)
#140 := (or #58 #134)
#144 := (forall (vars (?v0 S2)) #140)
#168 := (iff #144 #167)
#165 := (iff #140 #164)
#162 := (iff #134 #161)
#159 := (iff #133 #156)
#153 := (or #150 #131)
#157 := (iff #153 #156)
#158 := [rewrite]: #157
#154 := (iff #133 #153)
#151 := (iff #132 #150)
#152 := [rewrite]: #151
#155 := [monotonicity #152]: #154
#160 := [trans #155 #158]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#17 := (:var 1 S2)
#18 := (= #11 #17)
#70 := (or #18 #58)
#75 := (forall (vars (?v1 S2)) #70)
#78 := (and #49 #75)
#81 := (exists (vars (?v0 S2)) #78)
#116 := (not #81)
#145 := (~ #116 #144)
#141 := (not #78)
#142 := (~ #141 #140)
#135 := (not #75)
#136 := (~ #135 #134)
#137 := [sk]: #136
#122 := (~ #58 #58)
#119 := [refl]: #122
#143 := [nnf-neg #119 #137]: #142
#146 := [nnf-neg #143]: #145
#52 := (= f4 #11)
#59 := (or #58 #52)
#64 := (forall (vars (?v0 S2)) #59)
#87 := (not #64)
#9 := (f3 f4)
#46 := (= f1 #9)
#96 := (not #46)
#105 := (or #96 #87 #81)
#108 := (not #105)
#13 := (= #12 f1)
#19 := (implies #13 #18)
#20 := (forall (vars (?v1 S2)) #19)
#21 := (and #13 #20)
#22 := (exists (vars (?v0 S2)) #21)
#14 := (= #11 f4)
#15 := (implies #13 #14)
#16 := (forall (vars (?v0 S2)) #15)
#23 := (implies #16 #22)
#10 := (= #9 f1)
#24 := (implies #10 #23)
#25 := (not #24)
#111 := (iff #25 #108)
#88 := (or #87 #81)
#97 := (or #96 #88)
#102 := (not #97)
#109 := (iff #102 #108)
#106 := (iff #97 #105)
#107 := [rewrite]: #106
#110 := [monotonicity #107]: #109
#103 := (iff #25 #102)
#100 := (iff #24 #97)
#93 := (implies #46 #88)
#98 := (iff #93 #97)
#99 := [rewrite]: #98
#94 := (iff #24 #93)
#91 := (iff #23 #88)
#84 := (implies #64 #81)
#89 := (iff #84 #88)
#90 := [rewrite]: #89
#85 := (iff #23 #84)
#82 := (iff #22 #81)
#79 := (iff #21 #78)
#76 := (iff #20 #75)
#73 := (iff #19 #70)
#67 := (implies #49 #18)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #19 #67)
#50 := (iff #13 #49)
#51 := [rewrite]: #50
#69 := [monotonicity #51]: #68
#74 := [trans #69 #72]: #73
#77 := [quant-intro #74]: #76
#80 := [monotonicity #51 #77]: #79
#83 := [quant-intro #80]: #82
#65 := (iff #16 #64)
#62 := (iff #15 #59)
#55 := (implies #49 #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #15 #55)
#53 := (iff #14 #52)
#54 := [rewrite]: #53
#57 := [monotonicity #51 #54]: #56
#63 := [trans #57 #61]: #62
#66 := [quant-intro #63]: #65
#86 := [monotonicity #66 #83]: #85
#92 := [trans #86 #90]: #91
#47 := (iff #10 #46)
#48 := [rewrite]: #47
#95 := [monotonicity #48 #92]: #94
#101 := [trans #95 #99]: #100
#104 := [monotonicity #101]: #103
#112 := [trans #104 #110]: #111
#45 := [asserted]: #25
#113 := [mp #45 #112]: #108
#117 := [not-or-elim #113]: #116
#147 := [mp~ #117 #146]: #144
#148 := [mp #147 #169]: #167
#654 := [mp #148 #653]: #649
#114 := [not-or-elim #113]: #46
#423 := (not #649)
#630 := (or #423 #96 #314)
#313 := (or #226 #311)
#304 := (not #313)
#315 := (or #96 #304)
#302 := (or #423 #315)
#641 := (iff #302 #630)
#634 := (or #96 #314)
#637 := (or #423 #634)
#640 := (iff #637 #630)
#635 := [rewrite]: #640
#638 := (iff #302 #637)
#636 := (iff #315 #634)
#318 := (iff #304 #314)
#244 := (iff #313 #316)
#317 := [rewrite]: #244
#297 := [monotonicity #317]: #318
#291 := [monotonicity #297]: #636
#639 := [monotonicity #291]: #638
#631 := [trans #639 #635]: #641
#303 := [quant-inst #8]: #302
#289 := [mp #303 #631]: #630
#598 := [unit-resolution #289 #114 #654]: #314
#633 := (or #316 #312)
#274 := [def-axiom]: #633
#599 := [unit-resolution #274 #598]: #312
#294 := (not #311)
#632 := (or #316 #294)
#290 := [def-axiom]: #632
#594 := [unit-resolution #290 #598]: #294
#643 := (forall (vars (?v0 S2)) (:pat #642) #59)
#646 := (iff #64 #643)
#644 := (iff #59 #59)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#129 := (~ #64 #64)
#127 := (~ #59 #59)
#128 := [refl]: #127
#130 := [nnf-pos #128]: #129
#115 := [not-or-elim #113]: #64
#121 := [mp~ #115 #130]: #64
#648 := [mp #121 #647]: #643
#279 := (not #643)
#280 := (or #279 #311 #226)
#281 := (or #279 #313)
#624 := (iff #281 #280)
#620 := (or #279 #316)
#623 := (iff #620 #280)
#618 := [rewrite]: #623
#621 := (iff #281 #620)
#622 := [monotonicity #317]: #621
#260 := [trans #622 #618]: #624
#619 := [quant-inst #224]: #281
#625 := [mp #619 #260]: #280
[unit-resolution #625 #648 #594 #599]: false
unsat
4b1b63f9918482e3acffbd2b8d473f76fd800caf 250 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#126 := ?v0!0
#255 := (?v1!1 ?v0!0)
#256 := (f3 #255)
decl f1 :: S1
#4 := f1
#343 := (= f1 #256)
#257 := (not #343)
#342 := (= ?v0!0 #255)
#275 := (or #342 #257)
#349 := (not #275)
#8 := (:var 0 S2)
#9 := (f3 #8)
#680 := (pattern #9)
#122 := (?v1!1 #8)
#157 := (= #8 #122)
#123 := (f3 #122)
#137 := (= f1 #123)
#138 := (not #137)
#163 := (or #138 #157)
#168 := (not #163)
#47 := (= f1 #9)
#84 := (not #47)
#171 := (or #84 #168)
#681 := (forall (vars (?v0 S2)) (:pat #680) #171)
#174 := (forall (vars (?v0 S2)) #171)
#684 := (iff #174 #681)
#682 := (iff #171 #171)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#139 := (= #122 #8)
#140 := (or #139 #138)
#141 := (not #140)
#147 := (or #84 #141)
#151 := (forall (vars (?v0 S2)) #147)
#175 := (iff #151 #174)
#172 := (iff #147 #171)
#169 := (iff #141 #168)
#166 := (iff #140 #163)
#160 := (or #157 #138)
#164 := (iff #160 #163)
#165 := [rewrite]: #164
#161 := (iff #140 #160)
#158 := (iff #139 #157)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#167 := [trans #162 #165]: #166
#170 := [monotonicity #167]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#12 := (:var 1 S2)
#20 := (= #8 #12)
#85 := (or #20 #84)
#90 := (forall (vars (?v1 S2)) #85)
#93 := (and #47 #90)
#96 := (exists (vars (?v0 S2)) #93)
#115 := (not #96)
#152 := (~ #115 #151)
#148 := (not #93)
#149 := (~ #148 #147)
#142 := (not #90)
#143 := (~ #142 #141)
#144 := [sk]: #143
#135 := (~ #84 #84)
#136 := [refl]: #135
#150 := [nnf-neg #136 #144]: #149
#153 := [nnf-neg #150]: #152
#13 := (f3 #12)
#53 := (= f1 #13)
#59 := (and #47 #53)
#69 := (not #59)
#70 := (or #20 #69)
#75 := (forall (vars (?v0 S2) (?v1 S2)) #70)
#50 := (exists (vars (?v0 S2)) #47)
#78 := (and #50 #75)
#102 := (not #78)
#103 := (or #102 #96)
#108 := (not #103)
#10 := (= #9 f1)
#21 := (implies #10 #20)
#22 := (forall (vars (?v1 S2)) #21)
#23 := (and #10 #22)
#24 := (exists (vars (?v0 S2)) #23)
#16 := (= #12 #8)
#14 := (= #13 f1)
#15 := (and #14 #10)
#17 := (implies #15 #16)
#18 := (forall (vars (?v0 S2) (?v1 S2)) #17)
#11 := (exists (vars (?v0 S2)) #10)
#19 := (and #11 #18)
#25 := (implies #19 #24)
#26 := (not #25)
#109 := (iff #26 #108)
#106 := (iff #25 #103)
#99 := (implies #78 #96)
#104 := (iff #99 #103)
#105 := [rewrite]: #104
#100 := (iff #25 #99)
#97 := (iff #24 #96)
#94 := (iff #23 #93)
#91 := (iff #22 #90)
#88 := (iff #21 #85)
#81 := (implies #47 #20)
#86 := (iff #81 #85)
#87 := [rewrite]: #86
#82 := (iff #21 #81)
#48 := (iff #10 #47)
#49 := [rewrite]: #48
#83 := [monotonicity #49]: #82
#89 := [trans #83 #87]: #88
#92 := [quant-intro #89]: #91
#95 := [monotonicity #49 #92]: #94
#98 := [quant-intro #95]: #97
#79 := (iff #19 #78)
#76 := (iff #18 #75)
#73 := (iff #17 #70)
#66 := (implies #59 #20)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #17 #66)
#64 := (iff #16 #20)
#65 := [rewrite]: #64
#62 := (iff #15 #59)
#56 := (and #53 #47)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #15 #56)
#54 := (iff #14 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55 #49]: #57
#63 := [trans #58 #61]: #62
#68 := [monotonicity #63 #65]: #67
#74 := [trans #68 #72]: #73
#77 := [quant-intro #74]: #76
#51 := (iff #11 #50)
#52 := [quant-intro #49]: #51
#80 := [monotonicity #52 #77]: #79
#101 := [monotonicity #80 #98]: #100
#107 := [trans #101 #105]: #106
#110 := [monotonicity #107]: #109
#46 := [asserted]: #26
#113 := [mp #46 #110]: #108
#116 := [not-or-elim #113]: #115
#154 := [mp~ #116 #153]: #151
#155 := [mp #154 #176]: #174
#686 := [mp #155 #685]: #681
#127 := (f3 ?v0!0)
#128 := (= f1 #127)
#129 := (~ #50 #128)
#118 := [sk]: #129
#111 := [not-or-elim #113]: #78
#112 := [and-elim #111]: #50
#131 := [mp~ #112 #118]: #128
#346 := (not #128)
#661 := (not #681)
#333 := (or #661 #346 #349)
#344 := (or #257 #342)
#335 := (not #344)
#347 := (or #346 #335)
#334 := (or #661 #347)
#662 := (iff #334 #333)
#667 := (or #346 #349)
#669 := (or #661 #667)
#666 := (iff #669 #333)
#672 := [rewrite]: #666
#670 := (iff #334 #669)
#322 := (iff #347 #667)
#328 := (iff #335 #349)
#348 := (iff #344 #275)
#345 := [rewrite]: #348
#665 := [monotonicity #345]: #328
#454 := [monotonicity #665]: #322
#671 := [monotonicity #454]: #670
#320 := [trans #671 #672]: #662
#668 := [quant-inst #126]: #334
#325 := [mp #668 #320]: #333
#456 := [unit-resolution #325 #131 #686]: #349
#305 := (or #275 #343)
#648 := [def-axiom]: #305
#609 := [unit-resolution #648 #456]: #343
#663 := (not #342)
#321 := (or #275 #663)
#664 := [def-axiom]: #321
#610 := [unit-resolution #664 #456]: #663
#673 := (pattern #9 #13)
#145 := (not #53)
#189 := (or #20 #84 #145)
#674 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #673) #189)
#194 := (forall (vars (?v0 S2) (?v1 S2)) #189)
#677 := (iff #194 #674)
#675 := (iff #189 #189)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#195 := (iff #75 #194)
#192 := (iff #70 #189)
#146 := (or #84 #145)
#186 := (or #20 #146)
#190 := (iff #186 #189)
#191 := [rewrite]: #190
#187 := (iff #70 #186)
#184 := (iff #69 #146)
#156 := (not #146)
#179 := (not #156)
#182 := (iff #179 #146)
#183 := [rewrite]: #182
#180 := (iff #69 #179)
#177 := (iff #59 #156)
#178 := [rewrite]: #177
#181 := [monotonicity #178]: #180
#185 := [trans #181 #183]: #184
#188 := [monotonicity #185]: #187
#193 := [trans #188 #191]: #192
#196 := [quant-intro #193]: #195
#132 := (~ #75 #75)
#119 := (~ #70 #70)
#130 := [refl]: #119
#133 := [nnf-pos #130]: #132
#114 := [and-elim #111]: #75
#134 := [mp~ #114 #133]: #75
#197 := [mp #134 #196]: #194
#679 := [mp #197 #678]: #674
#630 := (not #674)
#625 := (or #630 #346 #342 #257)
#355 := (= #255 ?v0!0)
#356 := (or #355 #257 #346)
#626 := (or #630 #356)
#476 := (iff #626 #625)
#638 := (or #346 #342 #257)
#632 := (or #630 #638)
#474 := (iff #632 #625)
#475 := [rewrite]: #474
#627 := (iff #626 #632)
#628 := (iff #356 #638)
#637 := (or #342 #257 #346)
#635 := (iff #637 #638)
#639 := [rewrite]: #635
#350 := (iff #356 #637)
#358 := (iff #355 #342)
#636 := [rewrite]: #358
#634 := [monotonicity #636]: #350
#629 := [trans #634 #639]: #628
#633 := [monotonicity #629]: #627
#618 := [trans #633 #475]: #476
#631 := [quant-inst #126 #255]: #626
#619 := [mp #631 #618]: #625
[unit-resolution #619 #131 #679 #610 #609]: false
unsat
414b387cf896c5f2a72e6de8d5c3cc3d003f29bc 238 0
#2 := false
decl f3 :: (-> S2 S1)
decl ?v1!1 :: (-> S2 S2)
decl ?v0!0 :: S2
#119 := ?v0!0
#243 := (?v1!1 ?v0!0)
#244 := (f3 #243)
decl f1 :: S1
#4 := f1
#331 := (= f1 #244)
#245 := (not #331)
#330 := (= ?v0!0 #243)
#263 := (or #330 #245)
#337 := (not #263)
#8 := (:var 0 S2)
#9 := (f3 #8)
#661 := (pattern #9)
#148 := (?v1!1 #8)
#169 := (= #8 #148)
#149 := (f3 #148)
#150 := (= f1 #149)
#151 := (not #150)
#175 := (or #151 #169)
#180 := (not #175)
#44 := (= f1 #9)
#50 := (not #44)
#183 := (or #50 #180)
#668 := (forall (vars (?v0 S2)) (:pat #661) #183)
#186 := (forall (vars (?v0 S2)) #183)
#671 := (iff #186 #668)
#669 := (iff #183 #183)
#670 := [refl]: #669
#672 := [quant-intro #670]: #671
#152 := (= #148 #8)
#153 := (or #152 #151)
#154 := (not #153)
#160 := (or #50 #154)
#163 := (forall (vars (?v0 S2)) #160)
#187 := (iff #163 #186)
#184 := (iff #160 #183)
#181 := (iff #154 #180)
#178 := (iff #153 #175)
#172 := (or #169 #151)
#176 := (iff #172 #175)
#177 := [rewrite]: #176
#173 := (iff #153 #172)
#170 := (iff #152 #169)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#11 := (:var 1 S2)
#12 := (= #8 #11)
#51 := (or #12 #50)
#56 := (forall (vars (?v1 S2)) #51)
#59 := (and #44 #56)
#71 := (not #59)
#115 := (forall (vars (?v0 S2)) #71)
#164 := (~ #115 #163)
#161 := (~ #71 #160)
#155 := (not #56)
#156 := (~ #155 #154)
#157 := [sk]: #156
#146 := (~ #50 #50)
#147 := [refl]: #146
#162 := [nnf-neg #147 #157]: #161
#165 := [nnf-pos #162]: #164
decl f4 :: S1
#17 := f4
#65 := (= f1 f4)
#72 := (or #71 #65)
#77 := (forall (vars (?v0 S2)) #72)
#116 := (iff #77 #115)
#113 := (iff #72 #71)
#108 := (or #71 false)
#111 := (iff #108 #71)
#112 := [rewrite]: #111
#109 := (iff #72 #108)
#104 := (iff #65 false)
#95 := (not #65)
#62 := (exists (vars (?v0 S2)) #59)
#80 := (and #62 #77)
#86 := (not #80)
#87 := (or #65 #86)
#92 := (not #87)
#18 := (= f4 f1)
#10 := (= #9 f1)
#13 := (implies #10 #12)
#14 := (forall (vars (?v1 S2)) #13)
#15 := (and #10 #14)
#19 := (implies #15 #18)
#20 := (forall (vars (?v0 S2)) #19)
#16 := (exists (vars (?v0 S2)) #15)
#21 := (and #16 #20)
#22 := (implies #21 #18)
#23 := (not #22)
#93 := (iff #23 #92)
#90 := (iff #22 #87)
#83 := (implies #80 #65)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #22 #83)
#66 := (iff #18 #65)
#67 := [rewrite]: #66
#81 := (iff #21 #80)
#78 := (iff #20 #77)
#75 := (iff #19 #72)
#68 := (implies #59 #65)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #19 #68)
#60 := (iff #15 #59)
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #44 #12)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#45 := (iff #10 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#58 := [quant-intro #55]: #57
#61 := [monotonicity #46 #58]: #60
#70 := [monotonicity #61 #67]: #69
#76 := [trans #70 #74]: #75
#79 := [quant-intro #76]: #78
#63 := (iff #16 #62)
#64 := [quant-intro #61]: #63
#82 := [monotonicity #64 #79]: #81
#85 := [monotonicity #82 #67]: #84
#91 := [trans #85 #89]: #90
#94 := [monotonicity #91]: #93
#43 := [asserted]: #23
#97 := [mp #43 #94]: #92
#96 := [not-or-elim #97]: #95
#105 := [iff-false #96]: #104
#110 := [monotonicity #105]: #109
#114 := [trans #110 #112]: #113
#117 := [quant-intro #114]: #116
#98 := [not-or-elim #97]: #80
#100 := [and-elim #98]: #77
#118 := [mp #100 #117]: #115
#166 := [mp~ #118 #165]: #163
#167 := [mp #166 #188]: #186
#673 := [mp #167 #672]: #668
#102 := (f3 ?v0!0)
#103 := (= f1 #102)
#120 := (= #8 ?v0!0)
#136 := (or #50 #120)
#139 := (forall (vars (?v1 S2)) #136)
#142 := (and #103 #139)
#106 := (or #120 #50)
#107 := (forall (vars (?v1 S2)) #106)
#121 := (and #103 #107)
#143 := (iff #121 #142)
#140 := (iff #107 #139)
#137 := (iff #106 #136)
#138 := [rewrite]: #137
#141 := [quant-intro #138]: #140
#144 := [monotonicity #141]: #143
#122 := (~ #62 #121)
#130 := (~ #121 #121)
#128 := (~ #107 #107)
#126 := (~ #106 #106)
#127 := [refl]: #126
#129 := [nnf-pos #127]: #128
#124 := (~ #103 #103)
#125 := [refl]: #124
#131 := [monotonicity #125 #129]: #130
#123 := [sk]: #122
#132 := [trans #123 #131]: #122
#99 := [and-elim #98]: #62
#133 := [mp~ #99 #132]: #121
#134 := [mp #133 #144]: #142
#135 := [and-elim #134]: #103
#334 := (not #103)
#649 := (not #668)
#321 := (or #649 #334 #337)
#332 := (or #245 #330)
#323 := (not #332)
#335 := (or #334 #323)
#322 := (or #649 #335)
#650 := (iff #322 #321)
#655 := (or #334 #337)
#657 := (or #649 #655)
#654 := (iff #657 #321)
#660 := [rewrite]: #654
#658 := (iff #322 #657)
#310 := (iff #335 #655)
#316 := (iff #323 #337)
#336 := (iff #332 #263)
#333 := [rewrite]: #336
#653 := [monotonicity #333]: #316
#442 := [monotonicity #653]: #310
#659 := [monotonicity #442]: #658
#308 := [trans #659 #660]: #650
#656 := [quant-inst #119]: #322
#313 := [mp #656 #308]: #321
#614 := [unit-resolution #313 #135 #673]: #337
#293 := (or #263 #331)
#636 := [def-axiom]: #293
#619 := [unit-resolution #636 #614]: #331
#651 := (not #330)
#309 := (or #263 #651)
#652 := [def-axiom]: #309
#620 := [unit-resolution #652 #614]: #651
#662 := (forall (vars (?v1 S2)) (:pat #661) #136)
#665 := (iff #139 #662)
#663 := (iff #136 #136)
#664 := [refl]: #663
#666 := [quant-intro #664]: #665
#145 := [and-elim #134]: #139
#667 := [mp #145 #666]: #662
#643 := (not #662)
#279 := (or #643 #330 #245)
#299 := (= #243 ?v0!0)
#300 := (or #245 #299)
#644 := (or #643 #300)
#634 := (iff #644 #279)
#284 := (or #643 #263)
#645 := (iff #284 #279)
#648 := [rewrite]: #645
#285 := (iff #644 #284)
#642 := (iff #300 #263)
#640 := (iff #300 #332)
#638 := (iff #299 #330)
#639 := [rewrite]: #638
#641 := [monotonicity #639]: #640
#637 := [trans #641 #333]: #642
#647 := [monotonicity #637]: #285
#635 := [trans #647 #648]: #634
#646 := [quant-inst #243]: #644
#341 := [mp #646 #635]: #279
[unit-resolution #341 #667 #620 #619]: false
unsat
43a06f7db71bb40e30122f32a94b922612b5b5ed 93 0
#2 := false
decl f5 :: (-> S2 S1)
decl f6 :: S2
#16 := f6
#20 := (f5 f6)
decl f1 :: S1
#4 := f1
#68 := (= f1 #20)
#87 := (not #68)
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
#17 := (f3 f6 f4)
#62 := (= f1 #17)
#8 := (:var 0 S2)
#12 := (f5 #8)
#47 := (= f1 #12)
#10 := (f3 #8 f4)
#44 := (= f1 #10)
#53 := (not #44)
#54 := (or #53 #47)
#59 := (forall (vars (?v0 S2)) #54)
#65 := (and #59 #62)
#74 := (not #65)
#75 := (or #74 #68)
#80 := (not #75)
#21 := (= #20 f1)
#18 := (= #17 f1)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2)) #14)
#19 := (and #15 #18)
#22 := (implies #19 #21)
#23 := (not #22)
#81 := (iff #23 #80)
#78 := (iff #22 #75)
#71 := (implies #65 #68)
#76 := (iff #71 #75)
#77 := [rewrite]: #76
#72 := (iff #22 #71)
#69 := (iff #21 #68)
#70 := [rewrite]: #69
#66 := (iff #19 #65)
#63 := (iff #18 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (iff #14 #54)
#50 := (implies #44 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #47)
#49 := [rewrite]: #48
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#52 := [monotonicity #46 #49]: #51
#58 := [trans #52 #56]: #57
#61 := [quant-intro #58]: #60
#67 := [monotonicity #61 #64]: #66
#73 := [monotonicity #67 #70]: #72
#79 := [trans #73 #77]: #78
#82 := [monotonicity #79]: #81
#43 := [asserted]: #23
#85 := [mp #43 #82]: #80
#88 := [not-or-elim #85]: #87
#83 := [not-or-elim #85]: #65
#86 := [and-elim #83]: #62
#571 := (pattern #12)
#570 := (pattern #10)
#572 := (forall (vars (?v0 S2)) (:pat #570 #571) #54)
#575 := (iff #59 #572)
#573 := (iff #54 #54)
#574 := [refl]: #573
#576 := [quant-intro #574]: #575
#100 := (~ #59 #59)
#98 := (~ #54 #54)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#84 := [and-elim #83]: #59
#90 := [mp~ #84 #101]: #59
#577 := [mp #90 #576]: #572
#152 := (not #62)
#154 := (not #572)
#241 := (or #154 #152 #68)
#239 := (or #152 #68)
#232 := (or #154 #239)
#244 := (iff #232 #241)
#172 := [rewrite]: #244
#243 := [quant-inst #16]: #232
#245 := [mp #243 #172]: #241
[unit-resolution #245 #577 #86 #88]: false
unsat
10b0ad71f1792bc4343d482448bd439666bec7e5 113 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f6 :: S2
#16 := f6
#19 := (f3 f6 f4)
decl f1 :: S1
#4 := f1
#60 := (= f1 #19)
decl f5 :: (-> S2 S1)
#17 := (f5 f6)
#57 := (= f1 #17)
#63 := (and #57 #60)
#66 := (not #63)
#8 := (:var 0 S2)
#12 := (f5 #8)
#48 := (= f1 #12)
#10 := (f3 #8 f4)
#45 := (= f1 #10)
#51 := (and #45 #48)
#54 := (exists (vars (?v0 S2)) #51)
#69 := (or #54 #66)
#72 := (not #69)
#20 := (= #19 f1)
#18 := (= #17 f1)
#21 := (and #18 #20)
#22 := (not #21)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (exists (vars (?v0 S2)) #14)
#23 := (or #15 #22)
#24 := (not #23)
#73 := (iff #24 #72)
#70 := (iff #23 #69)
#67 := (iff #22 #66)
#64 := (iff #21 #63)
#61 := (iff #20 #60)
#62 := [rewrite]: #61
#58 := (iff #18 #57)
#59 := [rewrite]: #58
#65 := [monotonicity #59 #62]: #64
#68 := [monotonicity #65]: #67
#55 := (iff #15 #54)
#52 := (iff #14 #51)
#49 := (iff #13 #48)
#50 := [rewrite]: #49
#46 := (iff #11 #45)
#47 := [rewrite]: #46
#53 := [monotonicity #47 #50]: #52
#56 := [quant-intro #53]: #55
#71 := [monotonicity #56 #68]: #70
#74 := [monotonicity #71]: #73
#44 := [asserted]: #24
#77 := [mp #44 #74]: #72
#78 := [not-or-elim #77]: #63
#80 := [and-elim #78]: #60
#79 := [and-elim #78]: #57
#584 := (pattern #12)
#583 := (pattern #10)
#96 := (not #48)
#95 := (not #45)
#97 := (or #95 #96)
#585 := (forall (vars (?v0 S2)) (:pat #583 #584) #97)
#104 := (forall (vars (?v0 S2)) #97)
#588 := (iff #104 #585)
#586 := (iff #97 #97)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#90 := (not #51)
#93 := (forall (vars (?v0 S2)) #90)
#105 := (iff #93 #104)
#102 := (iff #90 #97)
#98 := (not #97)
#86 := (not #98)
#100 := (iff #86 #97)
#101 := [rewrite]: #100
#87 := (iff #90 #86)
#88 := (iff #51 #98)
#89 := [rewrite]: #88
#99 := [monotonicity #89]: #87
#103 := [trans #99 #101]: #102
#106 := [quant-intro #103]: #105
#75 := (not #54)
#82 := (~ #75 #93)
#91 := (~ #90 #90)
#92 := [refl]: #91
#83 := [nnf-neg #92]: #82
#76 := [not-or-elim #77]: #75
#94 := [mp~ #76 #83]: #93
#107 := [mp #94 #106]: #104
#590 := [mp #107 #589]: #585
#252 := (not #60)
#165 := (not #57)
#245 := (not #585)
#256 := (or #245 #165 #252)
#166 := (or #252 #165)
#257 := (or #245 #166)
#577 := (iff #257 #256)
#253 := (or #165 #252)
#258 := (or #245 #253)
#238 := (iff #258 #256)
#575 := [rewrite]: #238
#255 := (iff #257 #258)
#167 := (iff #166 #253)
#254 := [rewrite]: #167
#259 := [monotonicity #254]: #255
#232 := [trans #259 #575]: #577
#185 := [quant-inst #16]: #257
#364 := [mp #185 #232]: #256
[unit-resolution #364 #590 #79 #80]: false
unsat
1ea0edf79c861d93e0b6cff855e43197b6927af2 43 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (not #12)
#14 := (or #12 #13)
#15 := (not #14)
#60 := (iff #15 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #15 #55)
#53 := (iff #14 true)
#39 := (= f1 f4)
#36 := (= f1 f3)
#42 := (or #36 #39)
#45 := (not #42)
#48 := (or #42 #45)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#43 := (iff #12 #42)
#40 := (iff #11 #39)
#41 := [rewrite]: #40
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #44 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#35 := [asserted]: #15
[mp #35 #61]: false
unsat
2efe31821fea4e444f1f58e423b1a3e1ab9b4cac 27 0
#2 := false
#1 := true
#9 := (or false true)
#8 := (and true false)
#10 := (implies #8 #9)
#11 := (not #10)
#48 := (iff #11 false)
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 true)
#36 := (implies false true)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (iff #9 true)
#35 := [rewrite]: #34
#32 := (iff #8 false)
#33 := [rewrite]: #32
#38 := [monotonicity #33 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#31 := [asserted]: #11
[mp #31 #49]: false
unsat
eee4a504043afccce3195787f9f287f21c12ec9e 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (iff #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := (= f1 #9)
#36 := (iff #33 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
278fae448e44a4b7b524e9ac29b485b32979de5b 33 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#11 := (= #10 f1)
#12 := (iff #11 #11)
#13 := (not #12)
#49 := (iff #13 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 true)
#34 := (= f1 #10)
#37 := (iff #34 #34)
#40 := (iff #37 true)
#41 := [rewrite]: #40
#38 := (iff #12 #37)
#35 := (iff #11 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36 #36]: #38
#43 := [trans #39 #41]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#33 := [asserted]: #13
[mp #33 #50]: false
unsat
543fe903b7fa43c36b6d0fa84d517158fd95fbda 38 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (= #9 f1)
#11 := (forall (vars (?v0 S2)) #10)
#12 := (not #11)
#13 := (ite #11 #11 #12)
#14 := (not #13)
#56 := (iff #14 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #14 #51)
#49 := (iff #13 true)
#35 := (= f1 #9)
#38 := (forall (vars (?v0 S2)) #35)
#41 := (not #38)
#44 := (ite #38 #38 #41)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#36 := (iff #10 #35)
#37 := [rewrite]: #36
#40 := [quant-intro #37]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #40 #40 #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#34 := [asserted]: #14
[mp #34 #57]: false
unsat
e82a6cc10c3ef4d2130dbd751caaaa2ceb41a37f 138 0
#2 := false
decl f4 :: S2
#9 := f4
decl f3 :: S2
#8 := f3
#152 := (= f3 f4)
decl inj!0 :: (-> S3 S2)
decl f6 :: (-> S2 S3)
#22 := (f6 f4)
#207 := (inj!0 #22)
#208 := (= #207 f4)
#209 := (= f4 #207)
#14 := (:var 0 S2)
#15 := (f6 #14)
#89 := (pattern #15)
#88 := (inj!0 #15)
#85 := (= #88 #14)
#570 := (forall (vars (k!0 S2)) (:pat #89) #85)
#90 := (forall (vars (k!0 S2)) (:pat #89) #85)
#571 := (iff #90 #570)
#573 := (iff #570 #570)
#574 := [rewrite]: #573
#572 := [rewrite]: #571
#575 := [trans #572 #574]: #571
#12 := (:var 1 S2)
#47 := (= #12 #14)
#13 := (f6 #12)
#16 := (= #13 #15)
#53 := (not #16)
#54 := (or #53 #47)
#59 := (forall (vars (?v0 S2) (?v1 S2)) #54)
#86 := (iff #59 #90)
#83 := [rewrite]: #86
#93 := (~ #59 #59)
#91 := (~ #54 #54)
#92 := [refl]: #91
#94 := [nnf-pos #92]: #93
decl f5 :: S2
#10 := f5
#11 := (distinct f3 f4 f5)
#62 := (and #11 #59)
#68 := (not #62)
#21 := (f6 f3)
#23 := (= #21 #22)
#24 := (not #23)
#69 := (or #24 #68)
#74 := (not #69)
#17 := (= #14 #12)
#18 := (implies #16 #17)
#19 := (forall (vars (?v0 S2) (?v1 S2)) #18)
#20 := (and #11 #19)
#25 := (implies #20 #24)
#26 := (not #25)
#75 := (iff #26 #74)
#72 := (iff #25 #69)
#65 := (implies #62 #24)
#70 := (iff #65 #69)
#71 := [rewrite]: #70
#66 := (iff #25 #65)
#63 := (iff #20 #62)
#60 := (iff #19 #59)
#57 := (iff #18 #54)
#50 := (implies #16 #47)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #18 #50)
#48 := (iff #17 #47)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#61 := [quant-intro #58]: #60
#64 := [monotonicity #61]: #63
#67 := [monotonicity #64]: #66
#73 := [trans #67 #71]: #72
#76 := [monotonicity #73]: #75
#46 := [asserted]: #26
#79 := [mp #46 #76]: #74
#78 := [not-or-elim #79]: #62
#81 := [and-elim #78]: #59
#87 := [mp~ #81 #94]: #59
#84 := [mp #87 #83]: #90
#576 := [mp #84 #575]: #570
#569 := (not #570)
#549 := (or #569 #209)
#550 := (or #569 #208)
#546 := (iff #550 #549)
#188 := (iff #549 #549)
#553 := [rewrite]: #188
#547 := (iff #208 #209)
#548 := [rewrite]: #547
#552 := [monotonicity #548]: #546
#555 := [trans #552 #553]: #546
#551 := [quant-inst #9]: #550
#193 := [mp #551 #555]: #549
#543 := [unit-resolution #193 #576]: #209
#254 := [symm #543]: #208
#269 := (= f3 #207)
#565 := (inj!0 #21)
#267 := (= #565 #207)
#250 := (= #207 #565)
#554 := (= #22 #21)
#77 := [not-or-elim #79]: #23
#557 := [symm #77]: #554
#266 := [monotonicity #557]: #250
#268 := [symm #266]: #267
#567 := (= f3 #565)
#559 := (or #569 #567)
#566 := (= #565 f3)
#217 := (or #569 #566)
#560 := (iff #217 #559)
#561 := (iff #559 #559)
#202 := [rewrite]: #561
#568 := (iff #566 #567)
#563 := [rewrite]: #568
#218 := [monotonicity #563]: #560
#545 := [trans #218 #202]: #560
#222 := [quant-inst #8]: #217
#206 := [mp #222 #545]: #559
#544 := [unit-resolution #206 #576]: #567
#160 := [trans #544 #268]: #269
#539 := [trans #160 #254]: #152
#239 := (not #152)
#154 := (= f4 f5)
#241 := (not #154)
#153 := (= f3 f5)
#240 := (not #153)
#232 := (and #239 #240 #241)
#80 := [and-elim #78]: #11
#219 := (not #11)
#351 := (or #219 #232)
#558 := [def-axiom]: #351
#194 := [unit-resolution #558 #80]: #232
#243 := (not #232)
#244 := (or #243 #239)
#172 := [def-axiom]: #244
#556 := [unit-resolution #172 #194]: #239
[unit-resolution #556 #539]: false
unsat
03a4fcd182047beb0b3be329b34440294749812c 117 0
#2 := false
decl f5 :: S3
#18 := f5
decl f4 :: S3
#17 := f4
#19 := (= f4 f5)
decl inj!0 :: (-> S2 S4 S3)
decl f3 :: (-> S2 S3 S4)
decl f6 :: S2
#22 := f6
#24 := (f3 f6 f5)
#565 := (inj!0 f6 #24)
#220 := (= #565 f5)
#352 := (= f5 #565)
#9 := (:var 1 S3)
#87 := (:var 0 S2)
#84 := (f3 #87 #9)
#85 := (pattern #84)
#88 := (inj!0 #87 #84)
#89 := (= #88 #9)
#82 := (forall (vars (k!0 S2) (k!1 S3)) (:pat #85) #89)
#11 := (:var 0 S3)
#14 := (= #9 #11)
#8 := (:var 2 S2)
#12 := (f3 #8 #11)
#10 := (f3 #8 #9)
#13 := (= #10 #12)
#49 := (not #13)
#50 := (or #49 #14)
#53 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #50)
#83 := (iff #53 #82)
#94 := [rewrite]: #83
#92 := (~ #53 #53)
#90 := (~ #50 #50)
#91 := [refl]: #90
#93 := [nnf-pos #91]: #92
#20 := (not #19)
#59 := (and #20 #53)
#67 := (not #59)
#23 := (f3 f6 f4)
#25 := (= #23 #24)
#26 := (not #25)
#68 := (or #26 #67)
#73 := (not #68)
#15 := (implies #13 #14)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #15)
#21 := (and #16 #20)
#27 := (implies #21 #26)
#28 := (not #27)
#74 := (iff #28 #73)
#71 := (iff #27 #68)
#64 := (implies #59 #26)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #27 #64)
#62 := (iff #21 #59)
#56 := (and #53 #20)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #21 #56)
#54 := (iff #16 #53)
#51 := (iff #15 #50)
#52 := [rewrite]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#48 := [asserted]: #28
#78 := [mp #48 #75]: #73
#77 := [not-or-elim #78]: #59
#80 := [and-elim #77]: #53
#86 := [mp~ #80 #93]: #53
#95 := [mp #86 #94]: #82
#242 := (not #82)
#232 := (or #242 #352)
#566 := (or #242 #220)
#568 := (iff #566 #232)
#564 := (iff #232 #232)
#570 := [rewrite]: #564
#559 := (iff #220 #352)
#231 := [rewrite]: #559
#569 := [monotonicity #231]: #568
#560 := [trans #569 #570]: #568
#567 := [quant-inst #18 #22]: #566
#218 := [mp #567 #560]: #232
#219 := [unit-resolution #218 #95]: #352
#209 := [symm #219]: #220
#210 := (= f4 #565)
#153 := (inj!0 f6 #23)
#207 := (= #153 #565)
#203 := (= #565 #153)
#223 := (= #24 #23)
#76 := [not-or-elim #78]: #25
#561 := [symm #76]: #223
#546 := [monotonicity #561]: #203
#208 := [symm #546]: #207
#154 := (= f4 #153)
#233 := (or #242 #154)
#240 := (= #153 f4)
#244 := (or #242 #240)
#173 := (iff #244 #233)
#243 := (iff #233 #233)
#247 := [rewrite]: #243
#241 := (iff #240 #154)
#155 := [rewrite]: #241
#246 := [monotonicity #155]: #173
#226 := [trans #246 #247]: #173
#245 := [quant-inst #17 #22]: #244
#563 := [mp #245 #226]: #233
#562 := [unit-resolution #563 #95]: #154
#548 := [trans #562 #208]: #210
#549 := [trans #548 #209]: #19
#79 := [and-elim #77]: #20
[unit-resolution #79 #549]: false
unsat
16237d3c6ed6b1b0d94625f503401c43285f9eec 115 0
#2 := false
decl f5 :: S2
#18 := f5
decl f4 :: S2
#17 := f4
#19 := (= f4 f5)
decl inj!0 :: (-> S3 S4 S2)
decl f3 :: (-> S2 S3 S4)
decl f6 :: S3
#22 := f6
#24 := (f3 f5 f6)
#563 := (inj!0 f6 #24)
#218 := (= #563 f5)
#350 := (= f5 #563)
#9 := (:var 1 S3)
#11 := (:var 0 S2)
#12 := (f3 #11 #9)
#88 := (pattern #12)
#87 := (inj!0 #9 #12)
#84 := (= #87 #11)
#89 := (forall (vars (k!0 S2) (k!1 S3)) (:pat #88) #84)
#8 := (:var 2 S2)
#14 := (= #8 #11)
#10 := (f3 #8 #9)
#13 := (= #10 #12)
#49 := (not #13)
#50 := (or #49 #14)
#53 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #50)
#85 := (iff #53 #89)
#82 := [rewrite]: #85
#92 := (~ #53 #53)
#90 := (~ #50 #50)
#91 := [refl]: #90
#93 := [nnf-pos #91]: #92
#20 := (not #19)
#59 := (and #20 #53)
#67 := (not #59)
#23 := (f3 f4 f6)
#25 := (= #23 #24)
#26 := (not #25)
#68 := (or #26 #67)
#73 := (not #68)
#15 := (implies #13 #14)
#16 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2)) #15)
#21 := (and #16 #20)
#27 := (implies #21 #26)
#28 := (not #27)
#74 := (iff #28 #73)
#71 := (iff #27 #68)
#64 := (implies #59 #26)
#69 := (iff #64 #68)
#70 := [rewrite]: #69
#65 := (iff #27 #64)
#62 := (iff #21 #59)
#56 := (and #53 #20)
#60 := (iff #56 #59)
#61 := [rewrite]: #60
#57 := (iff #21 #56)
#54 := (iff #16 #53)
#51 := (iff #15 #50)
#52 := [rewrite]: #51
#55 := [quant-intro #52]: #54
#58 := [monotonicity #55]: #57
#63 := [trans #58 #61]: #62
#66 := [monotonicity #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#48 := [asserted]: #28
#78 := [mp #48 #75]: #73
#77 := [not-or-elim #78]: #59
#80 := [and-elim #77]: #53
#86 := [mp~ #80 #93]: #53
#83 := [mp #86 #82]: #89
#240 := (not #89)
#230 := (or #240 #350)
#564 := (or #240 #218)
#566 := (iff #564 #230)
#562 := (iff #230 #230)
#568 := [rewrite]: #562
#557 := (iff #218 #350)
#229 := [rewrite]: #557
#567 := [monotonicity #229]: #566
#558 := [trans #567 #568]: #566
#565 := [quant-inst #22 #18]: #564
#216 := [mp #565 #558]: #230
#217 := [unit-resolution #216 #83]: #350
#207 := [symm #217]: #218
#208 := (= f4 #563)
#151 := (inj!0 f6 #23)
#205 := (= #151 #563)
#201 := (= #563 #151)
#221 := (= #24 #23)
#76 := [not-or-elim #78]: #25
#559 := [symm #76]: #221
#544 := [monotonicity #559]: #201
#206 := [symm #544]: #205
#152 := (= f4 #151)
#231 := (or #240 #152)
#238 := (= #151 f4)
#242 := (or #240 #238)
#171 := (iff #242 #231)
#241 := (iff #231 #231)
#245 := [rewrite]: #241
#239 := (iff #238 #152)
#153 := [rewrite]: #239
#244 := [monotonicity #153]: #171
#224 := [trans #244 #245]: #171
#243 := [quant-inst #22 #17]: #242
#561 := [mp #243 #224]: #231
#560 := [unit-resolution #561 #83]: #152
#546 := [trans #560 #206]: #208
#547 := [trans #546 #207]: #19
#79 := [and-elim #77]: #20
[unit-resolution #79 #547]: false
unsat
4c9a79660fa743d8586104c82221b940200355d2 40 0
#2 := false
decl f3 :: (-> S3 S2 S2)
decl f5 :: S2
#14 := f5
decl f4 :: S3
#8 := f4
#15 := (f3 f4 f5)
#45 := (= f5 #15)
#49 := (not #45)
#16 := (= #15 f5)
#17 := (not #16)
#50 := (iff #17 #49)
#47 := (iff #16 #45)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#44 := [asserted]: #17
#54 := [mp #44 #51]: #49
#9 := (:var 0 S2)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#38 := (= #9 #10)
#41 := (forall (vars (?v0 S2)) (:pat #11) #38)
#62 := (~ #41 #41)
#60 := (~ #38 #38)
#61 := [refl]: #60
#63 := [nnf-pos #61]: #62
#12 := (= #10 #9)
#13 := (forall (vars (?v0 S2)) (:pat #11) #12)
#42 := (iff #13 #41)
#39 := (iff #12 #38)
#40 := [rewrite]: #39
#43 := [quant-intro #40]: #42
#37 := [asserted]: #13
#46 := [mp #37 #43]: #41
#53 := [mp~ #46 #63]: #41
#117 := (not #41)
#204 := (or #117 #45)
#118 := [quant-inst #14]: #204
[unit-resolution #118 #53 #54]: false
unsat
6406bec77481f36eeae30a26a0091f3d105ae5e6 38 0
#2 := false
decl f4 :: (-> S3 S4)
decl f6 :: (-> S5 Int S3)
decl f8 :: (-> Int Int)
decl f9 :: (-> Int Int)
decl f10 :: Int
#18 := f10
#19 := (f9 f10)
#20 := (f8 #19)
decl f7 :: S5
#17 := f7
#21 := (f6 f7 #20)
#22 := (f4 #21)
decl f3 :: (-> S2 S4)
decl f5 :: S2
#15 := f5
#16 := (f3 f5)
#23 := (= #16 #22)
#24 := (not #23)
#45 := [asserted]: #24
#10 := (:var 0 S3)
#11 := (f4 #10)
#8 := (:var 1 S2)
#9 := (f3 #8)
#12 := (pattern #9 #11)
#13 := (= #9 #11)
#14 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #12) #13)
#55 := (~ #14 #14)
#53 := (~ #13 #13)
#54 := [refl]: #53
#56 := [nnf-pos #54]: #55
#44 := [asserted]: #14
#47 := [mp~ #44 #56]: #14
#110 := (not #14)
#197 := (or #110 #23)
#111 := [quant-inst #15 #21]: #197
[unit-resolution #111 #47 #45]: false
unsat
2e896cd9a2fe5bb207857c1a092e502ece669e01 16 0
#2 := false
#1 := true
#8 := (implies true true)
#9 := (not #8)
#37 := (iff #9 false)
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
a79bf9f4931711426a169989fc9caedc89cfa1a4 16 0
#2 := false
#8 := (implies false false)
#9 := (not #8)
#37 := (iff #9 false)
#1 := true
#32 := (not true)
#35 := (iff #32 false)
#36 := [rewrite]: #35
#33 := (iff #9 #32)
#30 := (iff #8 true)
#31 := [rewrite]: #30
#34 := [monotonicity #31]: #33
#38 := [trans #34 #36]: #37
#29 := [asserted]: #9
[mp #29 #38]: false
unsat
1be840005f8a5d8a9ad842fa8ca7ecbce8bcb124 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
#10 := (= #9 f1)
#11 := (implies #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := (= f1 #9)
#36 := (implies #33 #33)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 #33)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
ff912d650aac3afb164b55e5753273823fac2c2b 48 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (or #9 #11)
#13 := (implies #9 #12)
#14 := (not #13)
#65 := (iff #14 false)
#38 := (= f1 f4)
#35 := (= f1 f3)
#41 := (or #35 #38)
#47 := (not #35)
#48 := (or #47 #41)
#53 := (not #48)
#63 := (iff #53 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #53 #58)
#56 := (iff #48 true)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#44 := (implies #35 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #13 #44)
#42 := (iff #12 #41)
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#43 := [monotonicity #37 #40]: #42
#46 := [monotonicity #37 #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#66 := [trans #55 #64]: #65
#34 := [asserted]: #14
[mp #34 #66]: false
unsat
4edc7ae478dc44e520d7e30a938c9581ab4e2a19 53 0
#2 := false
decl f1 :: S1
#4 := f1
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
#12 := (or #11 #9)
#13 := (implies #9 #12)
#14 := (not #13)
#70 := (iff #14 false)
#38 := (= f1 f4)
#35 := (= f1 f3)
#44 := (or #35 #38)
#52 := (not #35)
#53 := (or #52 #44)
#58 := (not #53)
#68 := (iff #58 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #58 #63)
#61 := (iff #53 true)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#59 := (iff #14 #58)
#56 := (iff #13 #53)
#49 := (implies #35 #44)
#54 := (iff #49 #53)
#55 := [rewrite]: #54
#50 := (iff #13 #49)
#47 := (iff #12 #44)
#41 := (or #38 #35)
#45 := (iff #41 #44)
#46 := [rewrite]: #45
#42 := (iff #12 #41)
#36 := (iff #9 #35)
#37 := [rewrite]: #36
#39 := (iff #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40 #37]: #42
#48 := [trans #43 #46]: #47
#51 := [monotonicity #37 #48]: #50
#57 := [trans #51 #55]: #56
#60 := [monotonicity #57]: #59
#71 := [trans #60 #69]: #70
#34 := [asserted]: #14
[mp #34 #71]: false
unsat
efb9f6518fd6418e28f5a875349db177d5fe4ceb 56 0
#2 := false
decl f1 :: S1
#4 := f1
decl f4 :: S1
#11 := f4
#12 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#13 := (implies #9 #12)
#10 := (not #9)
#14 := (implies #10 #13)
#15 := (not #14)
#73 := (iff #15 false)
#42 := (= f1 f4)
#36 := (= f1 f3)
#39 := (not #36)
#48 := (or #39 #42)
#56 := (or #36 #48)
#61 := (not #56)
#71 := (iff #61 false)
#1 := true
#66 := (not true)
#69 := (iff #66 false)
#70 := [rewrite]: #69
#67 := (iff #61 #66)
#64 := (iff #56 true)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#72 := [trans #68 #70]: #71
#62 := (iff #15 #61)
#59 := (iff #14 #56)
#53 := (implies #39 #48)
#57 := (iff #53 #56)
#58 := [rewrite]: #57
#54 := (iff #14 #53)
#51 := (iff #13 #48)
#45 := (implies #36 #42)
#49 := (iff #45 #48)
#50 := [rewrite]: #49
#46 := (iff #13 #45)
#43 := (iff #12 #42)
#44 := [rewrite]: #43
#37 := (iff #9 #36)
#38 := [rewrite]: #37
#47 := [monotonicity #38 #44]: #46
#52 := [trans #47 #50]: #51
#40 := (iff #10 #39)
#41 := [monotonicity #38]: #40
#55 := [monotonicity #41 #52]: #54
#60 := [trans #55 #58]: #59
#63 := [monotonicity #60]: #62
#74 := [trans #63 #72]: #73
#35 := [asserted]: #15
[mp #35 #74]: false
unsat
741dce5f3cb8845f3e976710e82077b71b6e3b48 89 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#41 := (= f1 f4)
decl f3 :: S1
#8 := f3
#38 := (= f1 f3)
#50 := (not #38)
#51 := (or #50 #41)
#109 := (iff #51 false)
#104 := (or false false)
#107 := (iff #104 false)
#108 := [rewrite]: #107
#105 := (iff #51 #104)
#95 := (iff #41 false)
#44 := (not #41)
#56 := (not #51)
#78 := (or #50 #41 #56)
#81 := (not #78)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (implies #9 #11)
#14 := (not #13)
#12 := (not #11)
#15 := (implies #12 #14)
#16 := (implies #9 #15)
#17 := (not #16)
#84 := (iff #17 #81)
#62 := (or #41 #56)
#70 := (or #50 #62)
#75 := (not #70)
#82 := (iff #75 #81)
#79 := (iff #70 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#76 := (iff #17 #75)
#73 := (iff #16 #70)
#67 := (implies #38 #62)
#71 := (iff #67 #70)
#72 := [rewrite]: #71
#68 := (iff #16 #67)
#65 := (iff #15 #62)
#59 := (implies #44 #56)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #38 #41)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#39 := (iff #9 #38)
#40 := [rewrite]: #39
#49 := [monotonicity #40 #43]: #48
#55 := [trans #49 #53]: #54
#58 := [monotonicity #55]: #57
#45 := (iff #12 #44)
#46 := [monotonicity #43]: #45
#61 := [monotonicity #46 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #40 #66]: #68
#74 := [trans #69 #72]: #73
#77 := [monotonicity #74]: #76
#85 := [trans #77 #83]: #84
#37 := [asserted]: #17
#86 := [mp #37 #85]: #81
#88 := [not-or-elim #86]: #44
#96 := [iff-false #88]: #95
#102 := (iff #50 false)
#1 := true
#97 := (not true)
#100 := (iff #97 false)
#101 := [rewrite]: #100
#98 := (iff #50 #97)
#93 := (iff #38 true)
#87 := [not-or-elim #86]: #38
#94 := [iff-true #87]: #93
#99 := [monotonicity #94]: #98
#103 := [trans #99 #101]: #102
#106 := [monotonicity #103 #96]: #105
#110 := [trans #106 #108]: #109
#89 := [not-or-elim #86]: #51
[mp #89 #110]: false
unsat
0f2e31d8ce8759346cad7c733d7f6d64c22635fd 57 0
#2 := false
decl f3 :: (-> S2 S1)
decl f4 :: S2
#8 := f4
#9 := (f3 f4)
decl f1 :: S1
#4 := f1
#36 := (= f1 #9)
#48 := (not #36)
decl f5 :: (-> S2 S1)
#11 := (f5 f4)
#39 := (= f1 #11)
#49 := (iff #39 #48)
#61 := (not #49)
#76 := (iff #61 false)
#1 := true
#71 := (not true)
#74 := (iff #71 false)
#75 := [rewrite]: #74
#72 := (iff #61 #71)
#69 := (iff #49 true)
#42 := (iff #36 #39)
#58 := (not #42)
#66 := (iff #58 #49)
#67 := [rewrite]: #66
#50 := (or #42 #49)
#55 := (not #50)
#12 := (= #11 f1)
#10 := (= #9 f1)
#13 := (iff #10 #12)
#14 := (implies #13 #13)
#15 := (not #14)
#56 := (iff #15 #55)
#53 := (iff #14 #50)
#45 := (implies #42 #42)
#51 := (iff #45 #50)
#52 := [rewrite]: #51
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#41 := [rewrite]: #40
#37 := (iff #10 #36)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#47 := [monotonicity #44 #44]: #46
#54 := [trans #47 #52]: #53
#57 := [monotonicity #54]: #56
#35 := [asserted]: #15
#60 := [mp #35 #57]: #55
#59 := [not-or-elim #60]: #58
#68 := [mp #59 #67]: #49
#70 := [iff-true #68]: #69
#73 := [monotonicity #70]: #72
#77 := [trans #73 #75]: #76
#62 := [not-or-elim #60]: #61
[mp #62 #77]: false
unsat
1f5e449bae0893dc762768fde0ab33c8f0ed64d8 50 0
#2 := false
decl f5 :: S2
#11 := f5
decl f3 :: S2
#8 := f3
#13 := (= f3 f5)
decl f4 :: S2
#9 := f4
#12 := (= f4 f5)
#77 := (iff #12 #13)
#75 := (iff #13 #12)
#10 := (= f3 f4)
#37 := (not #12)
#44 := (not #10)
#53 := (or #44 #37 #13)
#56 := (not #53)
#14 := (implies #12 #13)
#15 := (implies #10 #14)
#16 := (not #15)
#59 := (iff #16 #56)
#38 := (or #37 #13)
#45 := (or #44 #38)
#50 := (not #45)
#57 := (iff #50 #56)
#54 := (iff #45 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#60 := [trans #52 #58]: #59
#36 := [asserted]: #16
#61 := [mp #36 #60]: #56
#62 := [not-or-elim #61]: #10
#76 := [monotonicity #62]: #75
#78 := [symm #76]: #77
#63 := [not-or-elim #61]: #12
#73 := [mp #63 #78]: #13
#64 := (not #13)
#65 := [not-or-elim #61]: #64
[unit-resolution #65 #73]: false
unsat
4e0b37ec3c792ee4a851a10d652496a1aab77e5d 27 0
#2 := false
decl f5 :: (-> S2 S3)
decl f4 :: S2
#9 := f4
#12 := (f5 f4)
decl f3 :: S2
#8 := f3
#11 := (f5 f3)
#13 := (= #11 #12)
#10 := (= f3 f4)
#36 := (not #10)
#37 := (or #36 #13)
#40 := (not #37)
#14 := (implies #10 #13)
#15 := (not #14)
#41 := (iff #15 #40)
#38 := (iff #14 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#35 := [asserted]: #15
#45 := [mp #35 #42]: #40
#43 := [not-or-elim #45]: #10
#54 := [monotonicity #43]: #13
#44 := (not #13)
#46 := [not-or-elim #45]: #44
[unit-resolution #46 #54]: false
unsat
4dde6baa3718fc0e77a819f22fb6fcabd08b0613 75 0
#2 := false
decl f3 :: (-> S2 S1 S1)
decl f5 :: S1
#13 := f5
decl f4 :: S2
#8 := f4
#14 := (f3 f4 f5)
decl f1 :: S1
#4 := f1
#46 := (= f1 #14)
#77 := (not #46)
#49 := (= f1 f5)
#9 := (:var 0 S1)
#10 := (f3 f4 #9)
#40 := (= f1 #10)
#43 := (forall (vars (?v0 S1)) #40)
#58 := (not #43)
#67 := (or #58 #46 #49)
#70 := (not #67)
#16 := (= f5 f1)
#15 := (= #14 f1)
#17 := (or #15 #16)
#11 := (= #10 f1)
#12 := (forall (vars (?v0 S1)) #11)
#18 := (implies #12 #17)
#19 := (not #18)
#73 := (iff #19 #70)
#52 := (or #46 #49)
#59 := (or #58 #52)
#64 := (not #59)
#71 := (iff #64 #70)
#68 := (iff #59 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#65 := (iff #19 #64)
#62 := (iff #18 #59)
#55 := (implies #43 #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #18 #55)
#53 := (iff #17 #52)
#50 := (iff #16 #49)
#51 := [rewrite]: #50
#47 := (iff #15 #46)
#48 := [rewrite]: #47
#54 := [monotonicity #48 #51]: #53
#44 := (iff #12 #43)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#45 := [quant-intro #42]: #44
#57 := [monotonicity #45 #54]: #56
#63 := [trans #57 #61]: #62
#66 := [monotonicity #63]: #65
#74 := [trans #66 #72]: #73
#39 := [asserted]: #19
#75 := [mp #39 #74]: #70
#78 := [not-or-elim #75]: #77
#562 := (pattern #10)
#563 := (forall (vars (?v0 S1)) (:pat #562) #40)
#566 := (iff #43 #563)
#564 := (iff #40 #40)
#565 := [refl]: #564
#567 := [quant-intro #565]: #566
#92 := (~ #43 #43)
#90 := (~ #40 #40)
#91 := [refl]: #90
#93 := [nnf-pos #91]: #92
#76 := [not-or-elim #75]: #43
#82 := [mp~ #76 #93]: #43
#568 := [mp #82 #567]: #563
#145 := (not #563)
#232 := (or #145 #46)
#146 := [quant-inst #13]: #232
[unit-resolution #146 #568 #78]: false
unsat
58e0c0ea4309865900675d68ad0e58b939e134fe 106 0
#2 := false
decl f3 :: (-> S2 S2 S1)
decl ?v0!0 :: S2
#77 := ?v0!0
#86 := (f3 ?v0!0 ?v0!0)
decl f1 :: S1
#4 := f1
#78 := (= f1 #86)
#79 := (not #78)
#9 := (:var 0 S2)
#16 := (f3 #9 #9)
#53 := (= f1 #16)
#56 := (forall (vars (?v0 S2)) #53)
#72 := (not #56)
#87 := (~ #72 #79)
#88 := [sk]: #87
#8 := (:var 1 S2)
#12 := (f3 #9 #8)
#44 := (= f1 #12)
#10 := (f3 #8 #9)
#41 := (= f1 #10)
#47 := (and #41 #44)
#50 := (forall (vars (?v0 S2) (?v1 S2)) #47)
#62 := (not #50)
#63 := (or #62 #56)
#68 := (not #63)
#17 := (= #16 f1)
#18 := (forall (vars (?v0 S2)) #17)
#13 := (= #12 f1)
#11 := (= #10 f1)
#14 := (and #11 #13)
#15 := (forall (vars (?v0 S2) (?v1 S2)) #14)
#19 := (implies #15 #18)
#20 := (not #19)
#69 := (iff #20 #68)
#66 := (iff #19 #63)
#59 := (implies #50 #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #19 #59)
#57 := (iff #18 #56)
#54 := (iff #17 #53)
#55 := [rewrite]: #54
#58 := [quant-intro #55]: #57
#51 := (iff #15 #50)
#48 := (iff #14 #47)
#45 := (iff #13 #44)
#46 := [rewrite]: #45
#42 := (iff #11 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#52 := [quant-intro #49]: #51
#61 := [monotonicity #52 #58]: #60
#67 := [trans #61 #65]: #66
#70 := [monotonicity #67]: #69
#40 := [asserted]: #20
#73 := [mp #40 #70]: #68
#74 := [not-or-elim #73]: #72
#91 := [mp~ #74 #88]: #79
#576 := (pattern #12)
#575 := (pattern #10)
#90 := (not #44)
#89 := (not #41)
#92 := (or #89 #90)
#93 := (not #92)
#577 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #575 #576) #93)
#96 := (forall (vars (?v0 S2) (?v1 S2)) #93)
#580 := (iff #96 #577)
#578 := (iff #93 #93)
#579 := [refl]: #578
#581 := [quant-intro #579]: #580
#97 := (iff #50 #96)
#94 := (iff #47 #93)
#95 := [rewrite]: #94
#98 := [quant-intro #95]: #97
#84 := (~ #50 #50)
#82 := (~ #47 #47)
#83 := [refl]: #82
#85 := [nnf-pos #83]: #84
#71 := [not-or-elim #73]: #50
#76 := [mp~ #71 #85]: #50
#99 := [mp #76 #98]: #96
#582 := [mp #99 #581]: #577
#247 := (not #577)
#251 := (or #247 #78)
#157 := (or #79 #79)
#244 := (not #157)
#230 := (or #247 #244)
#569 := (iff #230 #251)
#356 := (iff #251 #251)
#563 := [rewrite]: #356
#177 := (iff #244 #78)
#159 := (not #79)
#248 := (iff #159 #78)
#249 := [rewrite]: #248
#246 := (iff #244 #159)
#158 := (iff #157 #79)
#245 := [rewrite]: #158
#237 := [monotonicity #245]: #246
#250 := [trans #237 #249]: #177
#224 := [monotonicity #250]: #569
#235 := [trans #224 #563]: #569
#567 := [quant-inst #77 #77]: #230
#236 := [mp #567 #235]: #251
[unit-resolution #236 #582 #91]: false
unsat
6f5c195ed8186ea009f805e2f8ea8ad3b1ee6432 66 0
#2 := false
decl f4 :: S1
#10 := f4
decl f1 :: S1
#4 := f1
#40 := (= f1 f4)
decl f3 :: S1
#8 := f3
#37 := (= f1 f3)
#43 := (or #37 #40)
#87 := (iff #43 false)
#82 := (or false false)
#85 := (iff #82 false)
#86 := [rewrite]: #85
#83 := (iff #43 #82)
#78 := (iff #40 false)
#69 := (not #40)
#46 := (not #37)
#52 := (and #46 #43)
#60 := (not #52)
#61 := (or #40 #60)
#66 := (not #61)
#11 := (= f4 f1)
#9 := (= f3 f1)
#13 := (not #9)
#12 := (or #9 #11)
#14 := (and #12 #13)
#15 := (implies #14 #11)
#16 := (not #15)
#67 := (iff #16 #66)
#64 := (iff #15 #61)
#57 := (implies #52 #40)
#62 := (iff #57 #61)
#63 := [rewrite]: #62
#58 := (iff #15 #57)
#41 := (iff #11 #40)
#42 := [rewrite]: #41
#55 := (iff #14 #52)
#49 := (and #43 #46)
#53 := (iff #49 #52)
#54 := [rewrite]: #53
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#38 := (iff #9 #37)
#39 := [rewrite]: #38
#48 := [monotonicity #39]: #47
#44 := (iff #12 #43)
#45 := [monotonicity #39 #42]: #44
#51 := [monotonicity #45 #48]: #50
#56 := [trans #51 #54]: #55
#59 := [monotonicity #56 #42]: #58
#65 := [trans #59 #63]: #64
#68 := [monotonicity #65]: #67
#36 := [asserted]: #16
#71 := [mp #36 #68]: #66
#70 := [not-or-elim #71]: #69
#79 := [iff-false #70]: #78
#80 := (iff #37 false)
#72 := [not-or-elim #71]: #52
#73 := [and-elim #72]: #46
#81 := [iff-false #73]: #80
#84 := [monotonicity #81 #79]: #83
#88 := [trans #84 #86]: #87
#74 := [and-elim #72]: #43
[mp #74 #88]: false
unsat
bc6de36d6c86b416e91711bb23067cc8250ac153 59 0
#2 := false
decl f1 :: S1
#4 := f1
decl f6 :: S1
#15 := f6
#16 := (= f6 f1)
decl f5 :: S1
#13 := f5
#14 := (= f5 f1)
#17 := (and #14 #16)
decl f4 :: S1
#10 := f4
#11 := (= f4 f1)
decl f3 :: S1
#8 := f3
#9 := (= f3 f1)
#12 := (and #9 #11)
#18 := (or #12 #17)
#19 := (implies #18 #18)
#20 := (not #19)
#74 := (iff #20 false)
#1 := true
#69 := (not true)
#72 := (iff #69 false)
#73 := [rewrite]: #72
#70 := (iff #20 #69)
#67 := (iff #19 true)
#53 := (= f1 f6)
#50 := (= f1 f5)
#56 := (and #50 #53)
#44 := (= f1 f4)
#41 := (= f1 f3)
#47 := (and #41 #44)
#59 := (or #47 #56)
#62 := (implies #59 #59)
#65 := (iff #62 true)
#66 := [rewrite]: #65
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#57 := (iff #17 #56)
#54 := (iff #16 #53)
#55 := [rewrite]: #54
#51 := (iff #14 #50)
#52 := [rewrite]: #51
#58 := [monotonicity #52 #55]: #57
#48 := (iff #12 #47)
#45 := (iff #11 #44)
#46 := [rewrite]: #45
#42 := (iff #9 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#61 := [monotonicity #49 #58]: #60
#64 := [monotonicity #61 #61]: #63
#68 := [trans #64 #66]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#40 := [asserted]: #20
[mp #40 #75]: false
unsat
2d4ae4bcfab81366c725be4feb5f77df1b3a121a 21 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#8 := f4
#10 := (f3 f4 0::Int)
#11 := (= #10 #10)
#12 := (not #11)
#57 := (iff #12 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #12 #52)
#50 := (iff #11 true)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#49 := [asserted]: #12
[mp #49 #58]: false
unsat
1237b209e2d4ddd9117dc897ef6936e3505b22b6 21 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 1::Int
decl f4 :: S2
#8 := f4
#10 := (f3 f4 1::Int)
#11 := (= #10 #10)
#12 := (not #11)
#58 := (iff #12 false)
#1 := true
#53 := (not true)
#56 := (iff #53 false)
#57 := [rewrite]: #56
#54 := (iff #12 #53)
#51 := (iff #11 true)
#52 := [rewrite]: #51
#55 := [monotonicity #52]: #54
#59 := [trans #55 #57]: #58
#50 := [asserted]: #12
[mp #50 #59]: false
unsat
fb370925ef9917dad66e0244200f67eedf11b6cf 18 0
#2 := false
#9 := 1::Int
#8 := 0::Int
#10 := (< 0::Int 1::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
3e975ce36aa1bd6d92c534a802e4e9206e497829 18 0
#2 := false
#9 := 1::Int
#8 := 0::Int
#10 := (<= 0::Int 1::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
a8dfb9a9f38e5293ee803fd471ebee346a686963 18 0
#2 := false
#9 := 2345678901::Int
#8 := 123456789::Int
#10 := (< 123456789::Int 2345678901::Int)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
aff64a9b452534297441f7fa34b8b94b4f3e56c4 32 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 1::Int
decl f4 :: S2
#8 := f4
#13 := (f3 f4 1::Int)
#9 := 0::Int
#11 := (+ 0::Int 1::Int)
#12 := (f3 f4 #11)
#14 := (= #12 #13)
#15 := (not #14)
#68 := (iff #15 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #15 #63)
#61 := (iff #14 true)
#56 := (= #13 #13)
#59 := (iff #56 true)
#60 := [rewrite]: #59
#57 := (iff #14 #56)
#53 := (= #11 1::Int)
#54 := [rewrite]: #53
#55 := [monotonicity #54]: #14
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#52 := [asserted]: #15
[mp #52 #69]: false
unsat
188a62b171c1839a04b3ae9512b9928709991d32 39 0
#2 := false
decl f3 :: (-> S2 Int S3)
#12 := 1::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
#13 := (+ #11 1::Int)
decl f4 :: S2
#8 := f4
#14 := (f3 f4 #13)
#15 := (= #14 #14)
#16 := (not #15)
#72 := (iff #16 false)
#1 := true
#67 := (not true)
#70 := (iff #67 false)
#71 := [rewrite]: #70
#68 := (iff #16 #67)
#65 := (iff #15 true)
#54 := (+ 1::Int #11)
#57 := (f3 f4 #54)
#60 := (= #57 #57)
#63 := (iff #60 true)
#64 := [rewrite]: #63
#61 := (iff #15 #60)
#58 := (= #14 #57)
#55 := (= #13 #54)
#56 := [rewrite]: #55
#59 := [monotonicity #56]: #58
#62 := [monotonicity #59 #59]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#53 := [asserted]: #16
[mp #53 #73]: false
unsat
4bb4300ae1fd273267e574c22bf6d893fc16ad07 35 0
#2 := false
#11 := 1::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#12 := (+ #10 1::Int)
#13 := (< #10 #12)
#14 := (not #13)
#71 := (iff #14 false)
#53 := (+ 1::Int #10)
#56 := (< #10 #53)
#59 := (not #56)
#69 := (iff #59 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #59 #64)
#62 := (iff #56 true)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#60 := (iff #14 #59)
#57 := (iff #13 #56)
#54 := (= #12 #53)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#72 := [trans #61 #70]: #71
#52 := [asserted]: #14
[mp #52 #72]: false
unsat
093b78ef584eedb2da5a266465d4fa39b0cfdf4f 491 0
#2 := false
decl f5 :: (-> S4 S3 Int)
decl f8 :: S3
#15 := f8
decl f6 :: S4
#9 := f6
#16 := (f5 f6 f8)
#12 := 1::Int
#66 := (+ 1::Int #16)
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#60 := (+ 1::Int #11)
#416 := (= #60 #66)
#384 := (not #416)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#69 := (f3 f4 #66)
#63 := (f3 f4 #60)
#72 := (= #63 #69)
#663 := (f5 f6 #63)
#435 := (f3 f4 #663)
#380 := (= #435 #69)
#401 := (= #69 #435)
#399 := (= #66 #663)
#664 := (= #60 #663)
#665 := -1::Int
#655 := (* -1::Int #663)
#314 := (+ #11 #655)
#653 := (<= #314 -1::Int)
#319 := (= #314 -1::Int)
#657 := (>= #11 -1::Int)
#28 := 0::Int
#506 := (>= #11 0::Int)
#434 := (= #11 0::Int)
#343 := (f3 f4 #11)
#507 := (f5 f6 #343)
#600 := (= #507 0::Int)
#436 := (not #506)
#438 := [hypothesis]: #436
#601 := (or #506 #600)
#29 := (:var 0 Int)
#31 := (f3 f4 #29)
#673 := (pattern #31)
#119 := (>= #29 0::Int)
#32 := (f5 f6 #31)
#37 := (= #32 0::Int)
#167 := (or #37 #119)
#680 := (forall (vars (?v0 Int)) (:pat #673) #167)
#172 := (forall (vars (?v0 Int)) #167)
#683 := (iff #172 #680)
#681 := (iff #167 #167)
#682 := [refl]: #681
#684 := [quant-intro #682]: #683
#185 := (~ #172 #172)
#193 := (~ #167 #167)
#194 := [refl]: #193
#186 := [nnf-pos #194]: #185
#36 := (< #29 0::Int)
#38 := (implies #36 #37)
#39 := (forall (vars (?v0 Int)) #38)
#175 := (iff #39 #172)
#138 := (= 0::Int #32)
#144 := (not #36)
#145 := (or #144 #138)
#150 := (forall (vars (?v0 Int)) #145)
#173 := (iff #150 #172)
#170 := (iff #145 #167)
#164 := (or #119 #37)
#168 := (iff #164 #167)
#169 := [rewrite]: #168
#165 := (iff #145 #164)
#162 := (iff #138 #37)
#163 := [rewrite]: #162
#160 := (iff #144 #119)
#120 := (not #119)
#155 := (not #120)
#158 := (iff #155 #119)
#159 := [rewrite]: #158
#156 := (iff #144 #155)
#153 := (iff #36 #120)
#154 := [rewrite]: #153
#157 := [monotonicity #154]: #156
#161 := [trans #157 #159]: #160
#166 := [monotonicity #161 #163]: #165
#171 := [trans #166 #169]: #170
#174 := [quant-intro #171]: #173
#151 := (iff #39 #150)
#148 := (iff #38 #145)
#141 := (implies #36 #138)
#146 := (iff #141 #145)
#147 := [rewrite]: #146
#142 := (iff #38 #141)
#139 := (iff #37 #138)
#140 := [rewrite]: #139
#143 := [monotonicity #140]: #142
#149 := [trans #143 #147]: #148
#152 := [quant-intro #149]: #151
#176 := [trans #152 #174]: #175
#137 := [asserted]: #39
#177 := [mp #137 #176]: #172
#195 := [mp~ #177 #186]: #172
#685 := [mp #195 #684]: #680
#365 := (not #680)
#582 := (or #365 #506 #600)
#597 := (or #600 #506)
#579 := (or #365 #597)
#583 := (iff #579 #582)
#591 := (or #365 #601)
#589 := (iff #591 #582)
#594 := [rewrite]: #589
#592 := (iff #579 #591)
#588 := (iff #597 #601)
#590 := [rewrite]: #588
#593 := [monotonicity #590]: #592
#584 := [trans #593 #594]: #583
#581 := [quant-inst #11]: #579
#585 := [mp #581 #584]: #582
#439 := [unit-resolution #585 #685]: #601
#440 := [unit-resolution #439 #438]: #600
#437 := (= #11 #507)
#322 := (= f7 #343)
#23 := (:var 0 S3)
#24 := (f5 f6 #23)
#666 := (pattern #24)
#25 := (f3 f4 #24)
#93 := (= #23 #25)
#667 := (forall (vars (?v0 S3)) (:pat #666) #93)
#97 := (forall (vars (?v0 S3)) #93)
#670 := (iff #97 #667)
#668 := (iff #93 #93)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#191 := (~ #97 #97)
#189 := (~ #93 #93)
#190 := [refl]: #189
#192 := [nnf-pos #190]: #191
#26 := (= #25 #23)
#27 := (forall (vars (?v0 S3)) #26)
#98 := (iff #27 #97)
#95 := (iff #26 #93)
#96 := [rewrite]: #95
#99 := [quant-intro #96]: #98
#92 := [asserted]: #27
#102 := [mp #92 #99]: #97
#181 := [mp~ #102 #192]: #97
#672 := [mp #181 #671]: #667
#316 := (not #667)
#447 := (or #316 #322)
#654 := [quant-inst #10]: #447
#444 := [unit-resolution #654 #672]: #322
#442 := [monotonicity #444]: #437
#421 := [trans #442 #440]: #434
#424 := (not #434)
#428 := (or #424 #506)
#430 := [th-lemma arith triangle-eq]: #428
#431 := [unit-resolution #430 #438 #421]: false
#429 := [lemma #431]: #506
#388 := (or #436 #657)
#390 := [th-lemma arith farkas 1 1]: #388
#391 := [unit-resolution #390 #429]: #657
#303 := (not #657)
#306 := (or #319 #303)
#101 := (= #29 #32)
#126 := (or #101 #120)
#674 := (forall (vars (?v0 Int)) (:pat #673) #126)
#131 := (forall (vars (?v0 Int)) #126)
#677 := (iff #131 #674)
#675 := (iff #126 #126)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#183 := (~ #131 #131)
#182 := (~ #126 #126)
#179 := [refl]: #182
#184 := [nnf-pos #179]: #183
#33 := (= #32 #29)
#30 := (<= 0::Int #29)
#34 := (implies #30 #33)
#35 := (forall (vars (?v0 Int)) #34)
#134 := (iff #35 #131)
#108 := (not #30)
#109 := (or #108 #101)
#114 := (forall (vars (?v0 Int)) #109)
#132 := (iff #114 #131)
#129 := (iff #109 #126)
#123 := (or #120 #101)
#127 := (iff #123 #126)
#128 := [rewrite]: #127
#124 := (iff #109 #123)
#121 := (iff #108 #120)
#117 := (iff #30 #119)
#118 := [rewrite]: #117
#122 := [monotonicity #118]: #121
#125 := [monotonicity #122]: #124
#130 := [trans #125 #128]: #129
#133 := [quant-intro #130]: #132
#115 := (iff #35 #114)
#112 := (iff #34 #109)
#105 := (implies #30 #101)
#110 := (iff #105 #109)
#111 := [rewrite]: #110
#106 := (iff #34 #105)
#103 := (iff #33 #101)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#113 := [trans #107 #111]: #112
#116 := [quant-intro #113]: #115
#135 := [trans #116 #133]: #134
#100 := [asserted]: #35
#136 := [mp #100 #135]: #131
#180 := [mp~ #136 #184]: #131
#679 := [mp #180 #678]: #674
#645 := (not #674)
#646 := (or #645 #319 #303)
#327 := (>= #60 0::Int)
#328 := (not #327)
#659 := (or #664 #328)
#647 := (or #645 #659)
#291 := (iff #647 #646)
#648 := (or #645 #306)
#651 := (iff #648 #646)
#290 := [rewrite]: #651
#285 := (iff #647 #648)
#643 := (iff #659 #306)
#304 := (iff #328 #303)
#299 := (iff #327 #657)
#641 := [rewrite]: #299
#305 := [monotonicity #641]: #304
#656 := (iff #664 #319)
#315 := [rewrite]: #656
#644 := [monotonicity #315 #305]: #643
#649 := [monotonicity #644]: #285
#652 := [trans #649 #290]: #291
#642 := [quant-inst #60]: #647
#650 := [mp #642 #652]: #646
#474 := [unit-resolution #650 #679]: #306
#392 := [unit-resolution #474 #391]: #319
#476 := (not #319)
#477 := (or #476 #653)
#478 := [th-lemma arith triangle-eq]: #477
#393 := [unit-resolution #478 #392]: #653
#639 := (>= #314 -1::Int)
#480 := (or #476 #639)
#481 := [th-lemma arith triangle-eq]: #480
#394 := [unit-resolution #481 #392]: #639
#395 := [th-lemma arith eq-propagate -1 -1 #394 #393]: #664
#397 := (= #66 #60)
#396 := [hypothesis]: #416
#398 := [symm #396]: #397
#400 := [trans #398 #395]: #399
#378 := [monotonicity #400]: #401
#381 := [symm #378]: #380
#282 := (= #63 #435)
#420 := (or #316 #282)
#423 := [quant-inst #63]: #420
#389 := [unit-resolution #423 #672]: #282
#382 := [trans #389 #381]: #72
#329 := (not #72)
#20 := (= f7 f8)
#658 := (f3 f4 #16)
#454 := (= #658 f8)
#660 := (= f8 #658)
#661 := (or #316 #660)
#662 := [quant-inst #15]: #661
#549 := [unit-resolution #662 #672]: #660
#455 := [symm #549]: #454
#457 := (= f7 #658)
#451 := (= #343 #658)
#482 := (= #11 #16)
#344 := (f5 f6 #69)
#628 := (* -1::Int #344)
#632 := (+ #16 #628)
#606 := (<= #632 -1::Int)
#621 := (= #632 -1::Int)
#618 := (>= #16 -1::Int)
#586 := (>= #16 0::Int)
#550 := (= #16 0::Int)
#580 := (f5 f6 #658)
#587 := (= #580 0::Int)
#553 := (not #586)
#554 := [hypothesis]: #553
#572 := (or #586 #587)
#576 := (or #365 #586 #587)
#571 := (or #587 #586)
#577 := (or #365 #571)
#569 := (iff #577 #576)
#578 := (or #365 #572)
#567 := (iff #578 #576)
#568 := [rewrite]: #567
#564 := (iff #577 #578)
#574 := (iff #571 #572)
#575 := [rewrite]: #574
#565 := [monotonicity #575]: #564
#566 := [trans #565 #568]: #569
#573 := [quant-inst #16]: #577
#570 := [mp #573 #566]: #576
#548 := [unit-resolution #570 #685]: #572
#543 := [unit-resolution #548 #554]: #587
#535 := (= #16 #580)
#531 := [monotonicity #549]: #535
#532 := [trans #531 #543]: #550
#533 := (not #550)
#536 := (or #533 #586)
#537 := [th-lemma arith triangle-eq]: #536
#538 := [unit-resolution #537 #554 #532]: false
#539 := [lemma #538]: #586
#521 := (or #553 #618)
#526 := [th-lemma arith farkas 1 1]: #521
#522 := [unit-resolution #526 #539]: #618
#625 := (not #618)
#611 := (or #625 #621)
#609 := (or #645 #625 #621)
#629 := (>= #66 0::Int)
#630 := (not #629)
#627 := (= #66 #344)
#631 := (or #627 #630)
#615 := (or #645 #631)
#602 := (iff #615 #609)
#610 := (or #645 #611)
#448 := (iff #610 #609)
#449 := [rewrite]: #448
#617 := (iff #615 #610)
#614 := (iff #631 #611)
#467 := (or #621 #625)
#612 := (iff #467 #611)
#613 := [rewrite]: #612
#468 := (iff #631 #467)
#620 := (iff #630 #625)
#619 := (iff #629 #618)
#624 := [rewrite]: #619
#626 := [monotonicity #624]: #620
#622 := (iff #627 #621)
#623 := [rewrite]: #622
#469 := [monotonicity #623 #626]: #468
#608 := [trans #469 #613]: #614
#446 := [monotonicity #608]: #617
#603 := [trans #446 #449]: #602
#616 := [quant-inst #66]: #615
#605 := [mp #616 #603]: #609
#552 := [unit-resolution #605 #679]: #611
#523 := [unit-resolution #552 #522]: #621
#541 := (not #621)
#542 := (or #541 #606)
#544 := [th-lemma arith triangle-eq]: #542
#524 := [unit-resolution #544 #523]: #606
#604 := (>= #632 -1::Int)
#527 := (or #541 #604)
#528 := [th-lemma arith triangle-eq]: #527
#529 := [unit-resolution #528 #523]: #604
#513 := (+ #344 #655)
#408 := (<= #513 0::Int)
#540 := (= #344 #663)
#530 := (= #663 #344)
#86 := (not #20)
#520 := [hypothesis]: #86
#337 := (or #72 #20)
#87 := (iff #72 #86)
#17 := (+ #16 1::Int)
#18 := (f3 f4 #17)
#13 := (+ #11 1::Int)
#14 := (f3 f4 #13)
#19 := (= #14 #18)
#21 := (iff #19 #20)
#22 := (not #21)
#90 := (iff #22 #87)
#78 := (iff #20 #72)
#83 := (not #78)
#88 := (iff #83 #87)
#89 := [rewrite]: #88
#84 := (iff #22 #83)
#81 := (iff #21 #78)
#75 := (iff #72 #20)
#79 := (iff #75 #78)
#80 := [rewrite]: #79
#76 := (iff #21 #75)
#73 := (iff #19 #72)
#70 := (= #18 #69)
#67 := (= #17 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#64 := (= #14 #63)
#61 := (= #13 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#74 := [monotonicity #65 #71]: #73
#77 := [monotonicity #74]: #76
#82 := [trans #77 #80]: #81
#85 := [monotonicity #82]: #84
#91 := [trans #85 #89]: #90
#59 := [asserted]: #22
#94 := [mp #59 #91]: #87
#251 := (not #87)
#336 := (or #72 #20 #251)
#252 := [def-axiom]: #336
#338 := [unit-resolution #252 #94]: #337
#525 := [unit-resolution #338 #520]: #72
#510 := [monotonicity #525]: #530
#456 := [symm #510]: #540
#511 := (not #540)
#492 := (or #511 #408)
#516 := [th-lemma arith triangle-eq]: #492
#517 := [unit-resolution #516 #456]: #408
#519 := (>= #513 0::Int)
#512 := (or #511 #519)
#518 := [th-lemma arith triangle-eq]: #512
#486 := [unit-resolution #518 #456]: #519
#640 := (= #663 0::Int)
#464 := (not #640)
#607 := (= #344 0::Int)
#557 := (not #607)
#465 := (iff #557 #464)
#488 := (iff #607 #640)
#498 := (iff #640 #607)
#508 := [monotonicity #510]: #498
#509 := [symm #508]: #488
#470 := [monotonicity #509]: #465
#504 := (<= #344 0::Int)
#493 := (not #504)
#452 := (not #606)
#483 := (or #493 #553 #452)
#485 := [th-lemma arith assign-bounds -1 1]: #483
#487 := [unit-resolution #485 #524 #539]: #493
#494 := (or #557 #504)
#496 := [th-lemma arith triangle-eq]: #494
#497 := [unit-resolution #496 #487]: #557
#471 := [mp #497 #470]: #464
#362 := (or #640 #657)
#258 := (or #365 #640 #657)
#347 := (or #640 #327)
#635 := (or #365 #347)
#638 := (iff #635 #258)
#358 := (or #365 #362)
#637 := (iff #358 #258)
#634 := [rewrite]: #637
#359 := (iff #635 #358)
#363 := (iff #347 #362)
#364 := [monotonicity #641]: #363
#633 := [monotonicity #364]: #359
#348 := [trans #633 #634]: #638
#636 := [quant-inst #60]: #635
#349 := [mp #636 #348]: #258
#472 := [unit-resolution #349 #685]: #362
#473 := [unit-resolution #472 #471]: #657
#475 := [unit-resolution #474 #473]: #319
#479 := [unit-resolution #478 #475]: #653
#466 := [unit-resolution #481 #475]: #639
#443 := [th-lemma arith eq-propagate -1 -1 1 1 1 1 #466 #479 #486 #517 #529 #524]: #482
#453 := [monotonicity #443]: #451
#458 := [trans #444 #453]: #457
#459 := [trans #458 #455]: #20
#460 := [unit-resolution #520 #459]: false
#461 := [lemma #460]: #20
#342 := (or #329 #86)
#340 := (or #329 #86 #251)
#341 := [def-axiom]: #340
#339 := [unit-resolution #341 #94]: #342
#406 := [unit-resolution #339 #461]: #329
#383 := [unit-resolution #406 #382]: false
#385 := [lemma #383]: #384
#402 := (* -1::Int #66)
#404 := (+ #60 #402)
#405 := (<= #404 0::Int)
#462 := (* -1::Int #16)
#445 := (+ #11 #462)
#463 := (<= #445 0::Int)
#386 := [monotonicity #461]: #482
#379 := (not #482)
#387 := (or #379 #463)
#372 := [th-lemma arith triangle-eq]: #387
#373 := [unit-resolution #372 #386]: #463
#374 := (not #463)
#376 := (or #405 #374)
#375 := [th-lemma arith assign-bounds -1]: #376
#377 := [unit-resolution #375 #373]: #405
#403 := (>= #404 0::Int)
#433 := (>= #445 0::Int)
#366 := (or #379 #433)
#367 := [th-lemma arith triangle-eq]: #366
#368 := [unit-resolution #367 #386]: #433
#360 := (not #433)
#369 := (or #403 #360)
#370 := [th-lemma arith assign-bounds -1]: #369
#361 := [unit-resolution #370 #368]: #403
#352 := (not #403)
#371 := (not #405)
#353 := (or #416 #371 #352)
#354 := [th-lemma arith triangle-eq]: #353
#345 := [unit-resolution #354 #361 #377]: #416
[unit-resolution #345 #385]: false
unsat
34ccedc923aa27667e2d2f840ae4550b6d0b2c97 57 0
#2 := false
#14 := 1::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#17 := (+ #12 1::Int)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#16 := (+ #10 1::Int)
#18 := (+ #16 #17)
#13 := (+ #10 #12)
#15 := (+ #13 1::Int)
#19 := (< #15 #18)
#20 := (not #19)
#92 := (iff #20 false)
#71 := 2::Int
#72 := (+ 2::Int #13)
#59 := (+ 1::Int #13)
#77 := (< #59 #72)
#80 := (not #77)
#90 := (iff #80 false)
#1 := true
#84 := (not true)
#88 := (iff #84 false)
#89 := [rewrite]: #88
#86 := (iff #80 #84)
#83 := (iff #77 true)
#85 := [rewrite]: #83
#87 := [monotonicity #85]: #86
#91 := [trans #87 #89]: #90
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#75 := (= #18 #72)
#65 := (+ 1::Int #12)
#62 := (+ 1::Int #10)
#68 := (+ #62 #65)
#73 := (= #68 #72)
#74 := [rewrite]: #73
#69 := (= #18 #68)
#66 := (= #17 #65)
#67 := [rewrite]: #66
#63 := (= #16 #62)
#64 := [rewrite]: #63
#70 := [monotonicity #64 #67]: #69
#76 := [trans #70 #74]: #75
#60 := (= #15 #59)
#61 := [rewrite]: #60
#79 := [monotonicity #61 #76]: #78
#82 := [monotonicity #79]: #81
#93 := [trans #82 #91]: #92
#58 := [asserted]: #20
[mp #58 #93]: false
unsat
06547da4b6900b96251643835237282d4f034d2d 63 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#17 := (:var 0 S3)
decl f6 :: S4
#9 := f6
#18 := (f5 f6 #17)
#644 := (pattern #18)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#19 := (f3 f4 #18)
#70 := (= #17 #19)
#645 := (forall (vars (?v0 S3)) (:pat #644) #70)
#74 := (forall (vars (?v0 S3)) #70)
#648 := (iff #74 #645)
#646 := (iff #70 #70)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#168 := (~ #74 #74)
#166 := (~ #70 #70)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S3)) #20)
#75 := (iff #21 #74)
#72 := (iff #20 #70)
#73 := [rewrite]: #72
#76 := [quant-intro #73]: #75
#69 := [asserted]: #21
#79 := [mp #69 #76]: #74
#158 := [mp~ #79 #169]: #74
#650 := [mp #158 #649]: #645
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#55 := (f3 f4 #11)
#61 := (= f7 #55)
#66 := (not #61)
#12 := 0::Int
#13 := (+ #11 0::Int)
#14 := (f3 f4 #13)
#15 := (= #14 f7)
#16 := (not #15)
#67 := (iff #16 #66)
#64 := (iff #15 #61)
#58 := (= #55 f7)
#62 := (iff #58 #61)
#63 := [rewrite]: #62
#59 := (iff #15 #58)
#56 := (= #14 #55)
#53 := (= #13 #11)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#65 := [trans #60 #63]: #64
#68 := [monotonicity #65]: #67
#52 := [asserted]: #16
#71 := [mp #52 #68]: #66
#229 := (not #645)
#315 := (or #229 #61)
#316 := [quant-inst #10]: #315
[unit-resolution #316 #71 #650]: false
unsat
2e6c64dc1fed5f8593a680fedc292cfd0c92d82b 63 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#17 := (:var 0 S3)
decl f6 :: S4
#10 := f6
#18 := (f5 f6 #17)
#644 := (pattern #18)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#19 := (f3 f4 #18)
#70 := (= #17 #19)
#645 := (forall (vars (?v0 S3)) (:pat #644) #70)
#74 := (forall (vars (?v0 S3)) #70)
#648 := (iff #74 #645)
#646 := (iff #70 #70)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#168 := (~ #74 #74)
#166 := (~ #70 #70)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S3)) #20)
#75 := (iff #21 #74)
#72 := (iff #20 #70)
#73 := [rewrite]: #72
#76 := [quant-intro #73]: #75
#69 := [asserted]: #21
#79 := [mp #69 #76]: #74
#158 := [mp~ #79 #169]: #74
#650 := [mp #158 #649]: #645
decl f7 :: S3
#11 := f7
#12 := (f5 f6 f7)
#55 := (f3 f4 #12)
#61 := (= f7 #55)
#66 := (not #61)
#9 := 0::Int
#13 := (+ 0::Int #12)
#14 := (f3 f4 #13)
#15 := (= #14 f7)
#16 := (not #15)
#67 := (iff #16 #66)
#64 := (iff #15 #61)
#58 := (= #55 f7)
#62 := (iff #58 #61)
#63 := [rewrite]: #62
#59 := (iff #15 #58)
#56 := (= #14 #55)
#53 := (= #13 #12)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#65 := [trans #60 #63]: #64
#68 := [monotonicity #65]: #67
#52 := [asserted]: #16
#71 := [mp #52 #68]: #66
#229 := (not #645)
#315 := (or #229 #61)
#316 := [quant-inst #11]: #315
[unit-resolution #316 #71 #650]: false
unsat
37591ff5dbc8460fa182050d7f7cc90ee27bcacc 41 0
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
decl f8 :: S3
#12 := f8
#13 := (f5 f6 f8)
#16 := (+ #13 #11)
decl f4 :: S2
#8 := f4
#17 := (f3 f4 #16)
#14 := (+ #11 #13)
#15 := (f3 f4 #14)
#18 := (= #15 #17)
#19 := (not #18)
#73 := (iff #19 false)
#1 := true
#68 := (not true)
#71 := (iff #68 false)
#72 := [rewrite]: #71
#69 := (iff #19 #68)
#66 := (iff #18 true)
#61 := (= #15 #15)
#64 := (iff #61 true)
#65 := [rewrite]: #64
#62 := (iff #18 #61)
#59 := (= #17 #15)
#57 := (= #16 #14)
#58 := [rewrite]: #57
#60 := [monotonicity #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#56 := [asserted]: #19
[mp #56 #74]: false
unsat
cd71619977b1d23166ca99b7b8abcdf70eddab9e 46 0
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 S3 Int)
decl f9 :: S3
#14 := f9
decl f6 :: S4
#9 := f6
#15 := (f5 f6 f9)
decl f8 :: S3
#12 := f8
#13 := (f5 f6 f8)
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#19 := (+ #11 #13)
#20 := (+ #19 #15)
decl f4 :: S2
#8 := f4
#21 := (f3 f4 #20)
#16 := (+ #13 #15)
#17 := (+ #11 #16)
#18 := (f3 f4 #17)
#22 := (= #18 #21)
#23 := (not #22)
#77 := (iff #23 false)
#1 := true
#72 := (not true)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #23 #72)
#70 := (iff #22 true)
#65 := (= #18 #18)
#68 := (iff #65 true)
#69 := [rewrite]: #68
#66 := (iff #22 #65)
#63 := (= #21 #18)
#61 := (= #20 #17)
#62 := [rewrite]: #61
#64 := [monotonicity #62]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#60 := [asserted]: #23
[mp #60 #78]: false
unsat
813a6c8e0ab3abb6bf8ce17a0ae6b4b02be63190 465 0
#2 := false
#16 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
#475 := (= #11 0::Int)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#309 := (f3 f4 #11)
#596 := (f5 f6 #309)
#598 := (= #596 0::Int)
decl f8 :: S3
#12 := f8
#13 := (f5 f6 f8)
#647 := (f3 f4 #13)
#488 := (f5 f6 #647)
#496 := (= #488 0::Int)
#595 := (>= #11 0::Int)
#448 := (not #598)
#452 := [hypothesis]: #448
#597 := (or #595 #598)
#29 := (:var 0 Int)
#31 := (f3 f4 #29)
#666 := (pattern #31)
#91 := (>= #29 0::Int)
#32 := (f5 f6 #31)
#37 := (= #32 0::Int)
#139 := (or #37 #91)
#673 := (forall (vars (?v0 Int)) (:pat #666) #139)
#144 := (forall (vars (?v0 Int)) #139)
#676 := (iff #144 #673)
#674 := (iff #139 #139)
#675 := [refl]: #674
#677 := [quant-intro #675]: #676
#157 := (~ #144 #144)
#165 := (~ #139 #139)
#166 := [refl]: #165
#158 := [nnf-pos #166]: #157
#36 := (< #29 0::Int)
#38 := (implies #36 #37)
#39 := (forall (vars (?v0 Int)) #38)
#147 := (iff #39 #144)
#110 := (= 0::Int #32)
#116 := (not #36)
#117 := (or #116 #110)
#122 := (forall (vars (?v0 Int)) #117)
#145 := (iff #122 #144)
#142 := (iff #117 #139)
#136 := (or #91 #37)
#140 := (iff #136 #139)
#141 := [rewrite]: #140
#137 := (iff #117 #136)
#134 := (iff #110 #37)
#135 := [rewrite]: #134
#132 := (iff #116 #91)
#92 := (not #91)
#127 := (not #92)
#130 := (iff #127 #91)
#131 := [rewrite]: #130
#128 := (iff #116 #127)
#125 := (iff #36 #92)
#126 := [rewrite]: #125
#129 := [monotonicity #126]: #128
#133 := [trans #129 #131]: #132
#138 := [monotonicity #133 #135]: #137
#143 := [trans #138 #141]: #142
#146 := [quant-intro #143]: #145
#123 := (iff #39 #122)
#120 := (iff #38 #117)
#113 := (implies #36 #110)
#118 := (iff #113 #117)
#119 := [rewrite]: #118
#114 := (iff #38 #113)
#111 := (iff #37 #110)
#112 := [rewrite]: #111
#115 := [monotonicity #112]: #114
#121 := [trans #115 #119]: #120
#124 := [quant-intro #121]: #123
#148 := [trans #124 #146]: #147
#109 := [asserted]: #39
#149 := [mp #109 #148]: #144
#167 := [mp~ #149 #158]: #144
#678 := [mp #167 #677]: #673
#356 := (not #673)
#483 := (or #356 #595 #598)
#599 := (or #598 #595)
#484 := (or #356 #599)
#477 := (iff #484 #483)
#591 := (or #356 #597)
#589 := (iff #591 #483)
#592 := [rewrite]: #589
#493 := (iff #484 #591)
#600 := (iff #599 #597)
#482 := [rewrite]: #600
#588 := [monotonicity #482]: #493
#492 := [trans #588 #592]: #477
#443 := [quant-inst #11]: #484
#494 := [mp #443 #492]: #483
#453 := [unit-resolution #494 #678]: #597
#454 := [unit-resolution #453 #452]: #595
#520 := (not #595)
#469 := (or #520 #496)
#582 := (= #13 0::Int)
#14 := (+ #11 #13)
#15 := (f3 f4 #14)
#648 := (f5 f6 #15)
#649 := -1::Int
#308 := (* -1::Int #648)
#650 := (+ #13 #308)
#292 := (+ #11 #650)
#643 := (<= #292 0::Int)
#634 := (= #292 0::Int)
#656 := (>= #14 0::Int)
#495 := (>= #13 0::Int)
#526 := (not #496)
#518 := [hypothesis]: #526
#498 := (or #495 #496)
#593 := (or #356 #495 #496)
#497 := (or #496 #495)
#590 := (or #356 #497)
#584 := (iff #590 #593)
#581 := (or #356 #498)
#572 := (iff #581 #593)
#574 := [rewrite]: #572
#583 := (iff #590 #581)
#499 := (iff #497 #498)
#500 := [rewrite]: #499
#575 := [monotonicity #500]: #583
#585 := [trans #575 #574]: #584
#594 := [quant-inst #13]: #590
#586 := [mp #594 #585]: #593
#523 := [unit-resolution #586 #678]: #498
#503 := [unit-resolution #523 #518]: #495
#532 := [hypothesis]: #595
#449 := (not #495)
#504 := (or #656 #520 #449)
#485 := [th-lemma arith assign-bounds -1 -1]: #504
#509 := [unit-resolution #485 #532 #503]: #656
#657 := (not #656)
#298 := (or #634 #657)
#73 := (= #29 #32)
#98 := (or #73 #92)
#667 := (forall (vars (?v0 Int)) (:pat #666) #98)
#103 := (forall (vars (?v0 Int)) #98)
#670 := (iff #103 #667)
#668 := (iff #98 #98)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#155 := (~ #103 #103)
#154 := (~ #98 #98)
#151 := [refl]: #154
#156 := [nnf-pos #151]: #155
#33 := (= #32 #29)
#30 := (<= 0::Int #29)
#34 := (implies #30 #33)
#35 := (forall (vars (?v0 Int)) #34)
#106 := (iff #35 #103)
#80 := (not #30)
#81 := (or #80 #73)
#86 := (forall (vars (?v0 Int)) #81)
#104 := (iff #86 #103)
#101 := (iff #81 #98)
#95 := (or #92 #73)
#99 := (iff #95 #98)
#100 := [rewrite]: #99
#96 := (iff #81 #95)
#93 := (iff #80 #92)
#89 := (iff #30 #91)
#90 := [rewrite]: #89
#94 := [monotonicity #90]: #93
#97 := [monotonicity #94]: #96
#102 := [trans #97 #100]: #101
#105 := [quant-intro #102]: #104
#87 := (iff #35 #86)
#84 := (iff #34 #81)
#77 := (implies #30 #73)
#82 := (iff #77 #81)
#83 := [rewrite]: #82
#78 := (iff #34 #77)
#75 := (iff #33 #73)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#85 := [trans #79 #83]: #84
#88 := [quant-intro #85]: #87
#107 := [trans #88 #105]: #106
#72 := [asserted]: #35
#108 := [mp #72 #107]: #103
#152 := [mp~ #108 #156]: #103
#672 := [mp #152 #671]: #667
#637 := (not #667)
#638 := (or #637 #634 #657)
#307 := (= #14 #648)
#312 := (or #307 #657)
#639 := (or #637 #312)
#283 := (iff #639 #638)
#635 := (or #637 #298)
#642 := (iff #635 #638)
#644 := [rewrite]: #642
#641 := (iff #639 #635)
#299 := (iff #312 #298)
#296 := (iff #307 #634)
#297 := [rewrite]: #296
#636 := [monotonicity #297]: #299
#278 := [monotonicity #636]: #641
#284 := [trans #278 #644]: #283
#640 := [quant-inst #14]: #639
#645 := [mp #640 #284]: #638
#510 := [unit-resolution #645 #672]: #298
#505 := [unit-resolution #510 #509]: #634
#511 := (not #634)
#479 := (or #511 #643)
#486 := [th-lemma arith triangle-eq]: #479
#445 := [unit-resolution #486 #505]: #643
#646 := (>= #292 0::Int)
#352 := (<= #648 0::Int)
#632 := (= #648 0::Int)
#17 := (f3 f4 0::Int)
#630 := (f5 f6 #17)
#342 := (= #630 0::Int)
#619 := (or #637 #342)
#340 := (>= 0::Int 0::Int)
#355 := (not #340)
#627 := (= 0::Int #630)
#631 := (or #627 #355)
#460 := (or #637 #631)
#462 := (iff #460 #619)
#605 := (iff #619 #619)
#606 := [rewrite]: #605
#618 := (iff #631 #342)
#615 := (or #342 false)
#612 := (iff #615 #342)
#617 := [rewrite]: #612
#616 := (iff #631 #615)
#625 := (iff #355 false)
#1 := true
#623 := (not true)
#624 := (iff #623 false)
#621 := [rewrite]: #624
#337 := (iff #355 #623)
#344 := (iff #340 true)
#622 := [rewrite]: #344
#620 := [monotonicity #622]: #337
#614 := [trans #620 #621]: #625
#341 := (iff #627 #342)
#343 := [rewrite]: #341
#611 := [monotonicity #343 #614]: #616
#613 := [trans #611 #617]: #618
#604 := [monotonicity #613]: #462
#607 := [trans #604 #606]: #462
#461 := [quant-inst #16]: #460
#601 := [mp #461 #607]: #619
#565 := [unit-resolution #601 #672]: #342
#508 := (= #648 #630)
#18 := (= #15 #17)
#20 := (= f8 #17)
#169 := (not #20)
#19 := (= f7 #17)
#168 := (not #19)
#159 := (or #168 #169)
#545 := (= #14 0::Int)
#554 := (= #14 #630)
#557 := (= #13 #630)
#160 := (not #159)
#580 := [hypothesis]: #160
#244 := (or #159 #20)
#330 := [def-axiom]: #244
#567 := [unit-resolution #330 #580]: #20
#558 := [monotonicity #567]: #557
#552 := (= #14 #13)
#576 := (= #11 #13)
#566 := (= f7 f8)
#568 := (= #17 f8)
#569 := [symm #567]: #568
#243 := (or #159 #19)
#329 := [def-axiom]: #243
#570 := [unit-resolution #329 #580]: #19
#571 := [trans #570 #569]: #566
#551 := [monotonicity #571]: #576
#549 := (= #14 #11)
#547 := (= #11 #14)
#587 := (<= #13 0::Int)
#560 := [trans #558 #565]: #582
#561 := (not #582)
#562 := (or #561 #587)
#559 := [th-lemma arith triangle-eq]: #562
#563 := [unit-resolution #559 #560]: #587
#543 := (or #561 #495)
#544 := [th-lemma arith triangle-eq]: #543
#546 := [unit-resolution #544 #560]: #495
#548 := [th-lemma arith eq-propagate -1 -1 #546 #563]: #547
#550 := [symm #548]: #549
#553 := [trans #550 #551]: #552
#555 := [trans #553 #558]: #554
#556 := [trans #555 #565]: #545
#534 := [monotonicity #556]: #18
#60 := (not #18)
#651 := (or #60 #159)
#180 := (iff #18 #159)
#21 := (and #19 #20)
#61 := (iff #21 #60)
#183 := (iff #61 #180)
#175 := (iff #159 #18)
#181 := (iff #175 #180)
#182 := [rewrite]: #181
#178 := (iff #61 #175)
#172 := (iff #160 #60)
#176 := (iff #172 #175)
#177 := [rewrite]: #176
#173 := (iff #61 #172)
#170 := (iff #21 #160)
#171 := [rewrite]: #170
#174 := [monotonicity #171]: #173
#179 := [trans #174 #177]: #178
#184 := [trans #179 #182]: #183
#22 := (iff #18 #21)
#23 := (not #22)
#62 := (iff #23 #61)
#63 := [rewrite]: #62
#59 := [asserted]: #23
#66 := [mp #59 #63]: #61
#185 := [mp #66 #184]: #180
#333 := (not #180)
#336 := (or #60 #159 #333)
#315 := [def-axiom]: #336
#653 := [unit-resolution #315 #185]: #651
#564 := [unit-resolution #653 #580]: #60
#535 := [unit-resolution #564 #534]: false
#537 := [lemma #535]: #159
#335 := (or #18 #160)
#334 := (or #18 #160 #333)
#262 := [def-axiom]: #334
#332 := [unit-resolution #262 #185]: #335
#507 := [unit-resolution #332 #537]: #18
#401 := [monotonicity #507]: #508
#512 := [trans #401 #565]: #632
#513 := (not #632)
#514 := (or #513 #352)
#519 := [th-lemma arith triangle-eq]: #514
#515 := [unit-resolution #519 #512]: #352
#476 := (not #352)
#478 := (or #646 #520 #449 #476)
#480 := [th-lemma arith assign-bounds -1 -1 1]: #478
#487 := [unit-resolution #480 #532 #515 #503]: #646
#626 := (>= #648 0::Int)
#489 := (or #513 #626)
#490 := [th-lemma arith triangle-eq]: #489
#491 := [unit-resolution #490 #512]: #626
#577 := (* -1::Int #13)
#578 := (+ #11 #577)
#531 := (<= #578 0::Int)
#517 := (not #643)
#501 := (or #531 #449 #476 #517)
#481 := [th-lemma arith assign-bounds 1 -1/2 -1/2]: #501
#502 := [unit-resolution #481 #445 #503 #515]: #531
#573 := (>= #578 0::Int)
#521 := (or #573 #517 #520)
#527 := (not #573)
#533 := [hypothesis]: #527
#506 := [hypothesis]: #643
#516 := [th-lemma arith farkas -1/2 -1/2 -1/2 1 #515 #506 #533 #532]: false
#522 := [lemma #516]: #521
#457 := [unit-resolution #522 #445 #532]: #573
#458 := [th-lemma arith eq-propagate 1/2 1/2 -1/2 -1/2 -1/2 -1/2 #457 #502 #491 #515 #487 #445]: #582
#465 := (= #488 #13)
#463 := (= #647 f8)
#320 := (= f8 #647)
#24 := (:var 0 S3)
#25 := (f5 f6 #24)
#659 := (pattern #25)
#26 := (f3 f4 #25)
#65 := (= #24 #26)
#660 := (forall (vars (?v0 S3)) (:pat #659) #65)
#69 := (forall (vars (?v0 S3)) #65)
#663 := (iff #69 #660)
#661 := (iff #65 #65)
#662 := [refl]: #661
#664 := [quant-intro #662]: #663
#163 := (~ #69 #69)
#161 := (~ #65 #65)
#162 := [refl]: #161
#164 := [nnf-pos #162]: #163
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S3)) #27)
#70 := (iff #28 #69)
#67 := (iff #27 #65)
#68 := [rewrite]: #67
#71 := [quant-intro #68]: #70
#64 := [asserted]: #28
#74 := [mp #64 #71]: #69
#153 := [mp~ #74 #164]: #69
#665 := [mp #153 #664]: #660
#321 := (not #660)
#652 := (or #321 #320)
#658 := [quant-inst #12]: #652
#539 := [unit-resolution #658 #665]: #320
#464 := [symm #539]: #463
#466 := [monotonicity #464]: #465
#467 := [trans #466 #458]: #496
#468 := [unit-resolution #518 #467]: false
#470 := [lemma #468]: #469
#455 := [unit-resolution #470 #454]: #496
#424 := (= #596 #488)
#540 := (= #13 #488)
#541 := [monotonicity #539]: #540
#421 := (= #596 #13)
#438 := [trans #541 #455]: #582
#456 := [unit-resolution #544 #438]: #495
#426 := [unit-resolution #485 #456 #454]: #656
#427 := [unit-resolution #510 #426]: #634
#428 := [unit-resolution #486 #427]: #643
#429 := [unit-resolution #481 #428 #456 #515]: #531
#431 := [unit-resolution #522 #428 #454]: #573
#432 := (not #531)
#433 := (or #576 #432 #527)
#275 := [th-lemma arith triangle-eq]: #433
#434 := [unit-resolution #275 #431 #429]: #576
#414 := (= #596 #11)
#430 := (= #309 f7)
#440 := (= f7 #309)
#654 := (or #321 #440)
#655 := [quant-inst #10]: #654
#473 := [unit-resolution #655 #665]: #440
#435 := [symm #473]: #430
#417 := [monotonicity #435]: #414
#423 := [trans #417 #434]: #421
#422 := [trans #423 #541]: #424
#425 := [trans #422 #455]: #598
#413 := [unit-resolution #452 #425]: false
#416 := [lemma #413]: #598
#474 := (= #11 #596)
#459 := [monotonicity #473]: #474
#419 := [trans #459 #416]: #475
#450 := (or #448 #19)
#437 := (= #309 #17)
#472 := [hypothesis]: #598
#436 := [trans #459 #472]: #475
#444 := [monotonicity #436]: #437
#446 := [trans #473 #444]: #19
#471 := [hypothesis]: #168
#447 := [unit-resolution #471 #446]: false
#451 := [lemma #447]: #450
#415 := [unit-resolution #451 #416]: #19
#331 := (or #160 #168 #169)
#322 := [def-axiom]: #331
#420 := [unit-resolution #322 #415 #537]: #169
#529 := (or #526 #20)
#542 := (= #647 #17)
#538 := [hypothesis]: #496
#536 := [trans #541 #538]: #582
#528 := [monotonicity #536]: #542
#524 := [trans #539 #528]: #20
#579 := [hypothesis]: #169
#525 := [unit-resolution #579 #524]: false
#530 := [lemma #525]: #529
#410 := [unit-resolution #530 #420]: #526
#400 := [unit-resolution #470 #410]: #520
#402 := (not #475)
#403 := (or #402 #595)
#406 := [th-lemma arith triangle-eq]: #403
[unit-resolution #406 #400 #419]: false
unsat
c410ff5449a3f410ed451a7af1fea3b3810fa300 63 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#17 := (:var 0 S3)
decl f6 :: S4
#9 := f6
#18 := (f5 f6 #17)
#644 := (pattern #18)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#19 := (f3 f4 #18)
#70 := (= #17 #19)
#645 := (forall (vars (?v0 S3)) (:pat #644) #70)
#74 := (forall (vars (?v0 S3)) #70)
#648 := (iff #74 #645)
#646 := (iff #70 #70)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#168 := (~ #74 #74)
#166 := (~ #70 #70)
#167 := [refl]: #166
#169 := [nnf-pos #167]: #168
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S3)) #20)
#75 := (iff #21 #74)
#72 := (iff #20 #70)
#73 := [rewrite]: #72
#76 := [quant-intro #73]: #75
#69 := [asserted]: #21
#79 := [mp #69 #76]: #74
#158 := [mp~ #79 #169]: #74
#650 := [mp #158 #649]: #645
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#55 := (f3 f4 #11)
#61 := (= f7 #55)
#66 := (not #61)
#12 := 0::Int
#13 := (- #11 0::Int)
#14 := (f3 f4 #13)
#15 := (= #14 f7)
#16 := (not #15)
#67 := (iff #16 #66)
#64 := (iff #15 #61)
#58 := (= #55 f7)
#62 := (iff #58 #61)
#63 := [rewrite]: #62
#59 := (iff #15 #58)
#56 := (= #14 #55)
#53 := (= #13 #11)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#60 := [monotonicity #57]: #59
#65 := [trans #60 #63]: #64
#68 := [monotonicity #65]: #67
#52 := [asserted]: #16
#71 := [mp #52 #68]: #66
#229 := (not #645)
#315 := (or #229 #61)
#316 := [quant-inst #10]: #315
[unit-resolution #316 #71 #650]: false
unsat
0deb4c7d00f3565760ed39501cec28af0e51f83b 199 0
#2 := false
decl f7 :: (-> S4 Int S3)
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#58 := -1::Int
#59 := (* -1::Int #12)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#60 := (+ #10 #59)
decl f8 :: S4
#14 := f8
#63 := (f7 f8 #60)
#17 := 0::Int
#18 := (f7 f8 0::Int)
#69 := (= #18 #63)
#671 := (f3 f4 #63)
#619 := (f7 f8 #671)
#618 := (= #619 #63)
#521 := (= #63 #619)
#22 := (:var 0 S3)
#23 := (f3 f4 #22)
#687 := (pattern #23)
#24 := (f7 f8 #23)
#115 := (= #22 #24)
#688 := (forall (vars (?v0 S3)) (:pat #687) #115)
#118 := (forall (vars (?v0 S3)) #115)
#691 := (iff #118 #688)
#689 := (iff #115 #115)
#690 := [refl]: #689
#692 := [quant-intro #690]: #691
#214 := (~ #118 #118)
#212 := (~ #115 #115)
#213 := [refl]: #212
#215 := [nnf-pos #213]: #214
#25 := (= #24 #22)
#26 := (forall (vars (?v0 S3)) #25)
#119 := (iff #26 #118)
#116 := (iff #25 #115)
#117 := [rewrite]: #116
#120 := [quant-intro #117]: #119
#114 := [asserted]: #26
#123 := [mp #114 #120]: #118
#204 := [mp~ #123 #215]: #118
#693 := [mp #204 #692]: #688
#360 := (not #688)
#524 := (or #360 #521)
#525 := [quant-inst #63]: #524
#523 := [unit-resolution #525 #693]: #521
#622 := [symm #523]: #618
#528 := (= #18 #619)
#526 := (= 0::Int #671)
#644 := (= #671 0::Int)
#27 := (:var 0 Int)
#29 := (f7 f8 #27)
#694 := (pattern #29)
#139 := (>= #27 0::Int)
#30 := (f3 f4 #29)
#35 := (= #30 0::Int)
#188 := (or #35 #139)
#701 := (forall (vars (?v0 Int)) (:pat #694) #188)
#193 := (forall (vars (?v0 Int)) #188)
#704 := (iff #193 #701)
#702 := (iff #188 #188)
#703 := [refl]: #702
#705 := [quant-intro #703]: #704
#208 := (~ #193 #193)
#200 := (~ #188 #188)
#201 := [refl]: #200
#209 := [nnf-pos #201]: #208
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#196 := (iff #37 #193)
#159 := (= 0::Int #30)
#165 := (not #34)
#166 := (or #165 #159)
#171 := (forall (vars (?v0 Int)) #166)
#194 := (iff #171 #193)
#191 := (iff #166 #188)
#185 := (or #139 #35)
#189 := (iff #185 #188)
#190 := [rewrite]: #189
#186 := (iff #166 #185)
#183 := (iff #159 #35)
#184 := [rewrite]: #183
#181 := (iff #165 #139)
#141 := (not #139)
#176 := (not #141)
#179 := (iff #176 #139)
#180 := [rewrite]: #179
#177 := (iff #165 #176)
#174 := (iff #34 #141)
#175 := [rewrite]: #174
#178 := [monotonicity #175]: #177
#182 := [trans #178 #180]: #181
#187 := [monotonicity #182 #184]: #186
#192 := [trans #187 #190]: #191
#195 := [quant-intro #192]: #194
#172 := (iff #37 #171)
#169 := (iff #36 #166)
#162 := (implies #34 #159)
#167 := (iff #162 #166)
#168 := [rewrite]: #167
#163 := (iff #36 #162)
#160 := (iff #35 #159)
#161 := [rewrite]: #160
#164 := [monotonicity #161]: #163
#170 := [trans #164 #168]: #169
#173 := [quant-intro #170]: #172
#197 := [trans #173 #195]: #196
#158 := [asserted]: #37
#198 := [mp #158 #197]: #193
#216 := [mp~ #198 #209]: #193
#706 := [mp #216 #705]: #701
#87 := (>= #60 0::Int)
#86 := (not #87)
#100 := (or #69 #87)
#105 := (not #100)
#15 := (- #10 #12)
#16 := (f7 f8 #15)
#19 := (= #16 #18)
#13 := (< #10 #12)
#20 := (implies #13 #19)
#21 := (not #20)
#108 := (iff #21 #105)
#77 := (not #13)
#78 := (or #77 #69)
#83 := (not #78)
#106 := (iff #83 #105)
#103 := (iff #78 #100)
#97 := (or #87 #69)
#101 := (iff #97 #100)
#102 := [rewrite]: #101
#98 := (iff #78 #97)
#95 := (iff #77 #87)
#90 := (not #86)
#93 := (iff #90 #87)
#94 := [rewrite]: #93
#91 := (iff #77 #90)
#88 := (iff #13 #86)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#96 := [trans #92 #94]: #95
#99 := [monotonicity #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#84 := (iff #21 #83)
#81 := (iff #20 #78)
#74 := (implies #13 #69)
#79 := (iff #74 #78)
#80 := [rewrite]: #79
#75 := (iff #20 #74)
#72 := (iff #19 #69)
#66 := (= #63 #18)
#70 := (iff #66 #69)
#71 := [rewrite]: #70
#67 := (iff #19 #66)
#64 := (= #16 #63)
#61 := (= #15 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#73 := [trans #68 #71]: #72
#76 := [monotonicity #73]: #75
#82 := [trans #76 #80]: #81
#85 := [monotonicity #82]: #84
#109 := [trans #85 #107]: #108
#57 := [asserted]: #21
#110 := [mp #57 #109]: #105
#113 := [not-or-elim #110]: #86
#641 := (not #701)
#647 := (or #641 #87 #644)
#639 := (or #644 #87)
#488 := (or #641 #639)
#629 := (iff #488 #647)
#640 := (or #87 #644)
#490 := (or #641 #640)
#634 := (iff #490 #647)
#635 := [rewrite]: #634
#632 := (iff #488 #490)
#645 := (iff #639 #640)
#646 := [rewrite]: #645
#633 := [monotonicity #646]: #632
#630 := [trans #633 #635]: #629
#489 := [quant-inst #60]: #488
#636 := [mp #489 #630]: #647
#516 := [unit-resolution #636 #113 #706]: #644
#527 := [symm #516]: #526
#621 := [monotonicity #527]: #528
#609 := [trans #621 #622]: #69
#111 := (not #69)
#112 := [not-or-elim #110]: #111
[unit-resolution #112 #609]: false
unsat
0ecccf24805faeb34fe64234048355611a56c8f8 322 0
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 S3 Int)
decl f8 :: S3
#12 := f8
decl f6 :: S4
#9 := f6
#13 := (f5 f6 f8)
#60 := -1::Int
#61 := (* -1::Int #13)
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#62 := (+ #11 #61)
decl f4 :: S2
#8 := f4
#65 := (f3 f4 #62)
#16 := 0::Int
#17 := (f3 f4 0::Int)
#71 := (= #17 #65)
#648 := (f5 f6 #65)
#550 := (f3 f4 #648)
#479 := (= #550 #65)
#551 := (= #65 #550)
#24 := (:var 0 S3)
#25 := (f5 f6 #24)
#675 := (pattern #25)
#26 := (f3 f4 #25)
#103 := (= #24 #26)
#676 := (forall (vars (?v0 S3)) (:pat #675) #103)
#106 := (forall (vars (?v0 S3)) #103)
#679 := (iff #106 #676)
#677 := (iff #103 #103)
#678 := [refl]: #677
#680 := [quant-intro #678]: #679
#202 := (~ #106 #106)
#200 := (~ #103 #103)
#201 := [refl]: #200
#203 := [nnf-pos #201]: #202
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S3)) #27)
#107 := (iff #28 #106)
#104 := (iff #27 #103)
#105 := [rewrite]: #104
#108 := [quant-intro #105]: #107
#102 := [asserted]: #28
#111 := [mp #102 #108]: #106
#192 := [mp~ #111 #203]: #106
#681 := [mp #192 #680]: #676
#348 := (not #676)
#531 := (or #348 #551)
#532 := [quant-inst #65]: #531
#522 := [unit-resolution #532 #681]: #551
#480 := [symm #522]: #479
#473 := (= #17 #550)
#497 := (= 0::Int #648)
#641 := (= #648 0::Int)
#659 := (>= #62 0::Int)
#662 := (not #659)
#76 := (* -1::Int #11)
#77 := (+ #76 #13)
#80 := (f3 f4 #77)
#620 := (f5 f6 #80)
#600 := (<= #620 0::Int)
#526 := (not #600)
#510 := (= #620 0::Int)
#548 := (not #510)
#86 := (= #17 #80)
#561 := (f3 f4 #620)
#542 := (= #561 #80)
#572 := (= #80 #561)
#553 := (or #348 #572)
#554 := [quant-inst #80]: #553
#555 := [unit-resolution #554 #681]: #572
#545 := [symm #555]: #542
#540 := (= #17 #561)
#558 := (= 0::Int #620)
#556 := [hypothesis]: #510
#544 := [symm #556]: #558
#541 := [monotonicity #544]: #540
#546 := [trans #541 #545]: #86
#100 := (not #86)
#91 := (or #71 #86)
#94 := (not #91)
#19 := (- #13 #11)
#20 := (f3 f4 #19)
#21 := (= #20 #17)
#14 := (- #11 #13)
#15 := (f3 f4 #14)
#18 := (= #15 #17)
#22 := (or #18 #21)
#23 := (not #22)
#95 := (iff #23 #94)
#92 := (iff #22 #91)
#89 := (iff #21 #86)
#83 := (= #80 #17)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #21 #83)
#81 := (= #20 #80)
#78 := (= #19 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#74 := (iff #18 #71)
#68 := (= #65 #17)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #18 #68)
#66 := (= #15 #65)
#63 := (= #14 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#93 := [monotonicity #75 #90]: #92
#96 := [monotonicity #93]: #95
#59 := [asserted]: #23
#99 := [mp #59 #96]: #94
#101 := [not-or-elim #99]: #100
#547 := [unit-resolution #101 #546]: false
#543 := [lemma #547]: #548
#601 := (>= #620 0::Int)
#624 := (+ #61 #620)
#625 := (+ #11 #624)
#508 := (>= #625 0::Int)
#617 := (= #625 0::Int)
#619 := (<= #62 0::Int)
#504 := (or #510 #619)
#29 := (:var 0 Int)
#31 := (f3 f4 #29)
#682 := (pattern #31)
#127 := (>= #29 0::Int)
#32 := (f5 f6 #31)
#37 := (= #32 0::Int)
#176 := (or #37 #127)
#689 := (forall (vars (?v0 Int)) (:pat #682) #176)
#181 := (forall (vars (?v0 Int)) #176)
#692 := (iff #181 #689)
#690 := (iff #176 #176)
#691 := [refl]: #690
#693 := [quant-intro #691]: #692
#196 := (~ #181 #181)
#188 := (~ #176 #176)
#189 := [refl]: #188
#197 := [nnf-pos #189]: #196
#36 := (< #29 0::Int)
#38 := (implies #36 #37)
#39 := (forall (vars (?v0 Int)) #38)
#184 := (iff #39 #181)
#147 := (= 0::Int #32)
#153 := (not #36)
#154 := (or #153 #147)
#159 := (forall (vars (?v0 Int)) #154)
#182 := (iff #159 #181)
#179 := (iff #154 #176)
#173 := (or #127 #37)
#177 := (iff #173 #176)
#178 := [rewrite]: #177
#174 := (iff #154 #173)
#171 := (iff #147 #37)
#172 := [rewrite]: #171
#169 := (iff #153 #127)
#129 := (not #127)
#164 := (not #129)
#167 := (iff #164 #127)
#168 := [rewrite]: #167
#165 := (iff #153 #164)
#162 := (iff #36 #129)
#163 := [rewrite]: #162
#166 := [monotonicity #163]: #165
#170 := [trans #166 #168]: #169
#175 := [monotonicity #170 #172]: #174
#180 := [trans #175 #178]: #179
#183 := [quant-intro #180]: #182
#160 := (iff #39 #159)
#157 := (iff #38 #154)
#150 := (implies #36 #147)
#155 := (iff #150 #154)
#156 := [rewrite]: #155
#151 := (iff #38 #150)
#148 := (iff #37 #147)
#149 := [rewrite]: #148
#152 := [monotonicity #149]: #151
#158 := [trans #152 #156]: #157
#161 := [quant-intro #158]: #160
#185 := [trans #161 #183]: #184
#146 := [asserted]: #39
#186 := [mp #146 #185]: #181
#204 := [mp~ #186 #197]: #181
#694 := [mp #204 #693]: #689
#627 := (not #689)
#514 := (or #627 #510 #619)
#631 := (>= #77 0::Int)
#511 := (or #510 #631)
#515 := (or #627 #511)
#591 := (iff #515 #514)
#609 := (or #627 #504)
#597 := (iff #609 #514)
#599 := [rewrite]: #597
#606 := (iff #515 #609)
#512 := (iff #511 #504)
#626 := (iff #631 #619)
#455 := [rewrite]: #626
#513 := [monotonicity #455]: #512
#610 := [monotonicity #513]: #606
#588 := [trans #610 #599]: #591
#516 := [quant-inst #77]: #515
#590 := [mp #516 #588]: #514
#523 := [unit-resolution #590 #694]: #504
#533 := [unit-resolution #523 #543]: #619
#457 := (not #619)
#612 := (or #617 #457)
#110 := (= #29 #32)
#135 := (or #110 #129)
#683 := (forall (vars (?v0 Int)) (:pat #682) #135)
#140 := (forall (vars (?v0 Int)) #135)
#686 := (iff #140 #683)
#684 := (iff #135 #135)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#194 := (~ #140 #140)
#193 := (~ #135 #135)
#190 := [refl]: #193
#195 := [nnf-pos #190]: #194
#33 := (= #32 #29)
#30 := (<= 0::Int #29)
#34 := (implies #30 #33)
#35 := (forall (vars (?v0 Int)) #34)
#143 := (iff #35 #140)
#117 := (not #30)
#118 := (or #117 #110)
#123 := (forall (vars (?v0 Int)) #118)
#141 := (iff #123 #140)
#138 := (iff #118 #135)
#132 := (or #129 #110)
#136 := (iff #132 #135)
#137 := [rewrite]: #136
#133 := (iff #118 #132)
#130 := (iff #117 #129)
#126 := (iff #30 #127)
#128 := [rewrite]: #126
#131 := [monotonicity #128]: #130
#134 := [monotonicity #131]: #133
#139 := [trans #134 #137]: #138
#142 := [quant-intro #139]: #141
#124 := (iff #35 #123)
#121 := (iff #34 #118)
#114 := (implies #30 #110)
#119 := (iff #114 #118)
#120 := [rewrite]: #119
#115 := (iff #34 #114)
#112 := (iff #33 #110)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#122 := [trans #116 #120]: #121
#125 := [quant-intro #122]: #124
#144 := [trans #125 #142]: #143
#109 := [asserted]: #35
#145 := [mp #109 #144]: #140
#191 := [mp~ #145 #195]: #140
#688 := [mp #191 #687]: #683
#650 := (not #683)
#613 := (or #650 #617 #457)
#632 := (not #631)
#621 := (= #77 #620)
#622 := (or #621 #632)
#616 := (or #650 #622)
#604 := (iff #616 #613)
#499 := (or #650 #612)
#607 := (iff #499 #613)
#509 := [rewrite]: #607
#500 := (iff #616 #499)
#614 := (iff #622 #612)
#458 := (iff #632 #457)
#611 := [monotonicity #455]: #458
#623 := (iff #621 #617)
#618 := [rewrite]: #623
#615 := [monotonicity #618 #611]: #614
#459 := [monotonicity #615]: #500
#605 := [trans #459 #509]: #604
#498 := [quant-inst #77]: #616
#608 := [mp #498 #605]: #613
#536 := [unit-resolution #608 #688]: #612
#537 := [unit-resolution #536 #533]: #617
#538 := (not #617)
#534 := (or #538 #508)
#539 := [th-lemma arith triangle-eq]: #534
#519 := [unit-resolution #539 #537]: #508
#465 := (not #508)
#520 := (or #601 #465 #457)
#501 := [th-lemma arith assign-bounds 1 -1]: #520
#525 := [unit-resolution #501 #533 #519]: #601
#521 := (not #601)
#527 := (or #510 #526 #521)
#495 := [th-lemma arith triangle-eq]: #527
#502 := [unit-resolution #495 #525 #543]: #526
#493 := (<= #625 0::Int)
#461 := (or #538 #493)
#492 := [th-lemma arith triangle-eq]: #461
#494 := [unit-resolution #492 #537]: #493
#496 := (not #493)
#503 := (or #662 #600 #496)
#505 := [th-lemma arith assign-bounds 1 -1]: #503
#506 := [unit-resolution #505 #494 #502]: #662
#630 := (or #641 #659)
#628 := (or #627 #641 #659)
#633 := (or #627 #630)
#629 := (iff #633 #628)
#635 := [rewrite]: #629
#634 := [quant-inst #62]: #633
#476 := [mp #634 #635]: #628
#507 := [unit-resolution #476 #694]: #630
#517 := [unit-resolution #507 #506]: #641
#518 := [symm #517]: #497
#474 := [monotonicity #518]: #473
#481 := [trans #474 #480]: #71
#97 := (not #71)
#98 := [not-or-elim #99]: #97
[unit-resolution #98 #481]: false
unsat
2040d7605c8194d6e392f4c62e64beaa6bc5c29d 332 0
#2 := false
decl f8 :: S3
#12 := f8
decl f7 :: S3
#10 := f7
#28 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f6 :: S4
#9 := f6
#13 := (f5 f6 f8)
#60 := -1::Int
#61 := (* -1::Int #13)
#11 := (f5 f6 f7)
#62 := (+ #11 #61)
#94 := (>= #62 0::Int)
#100 := (ite #94 f7 f8)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#65 := (f3 f4 #62)
#68 := (f5 f6 #65)
#74 := (+ #13 #68)
#79 := (f3 f4 #74)
#108 := (= #79 #100)
#363 := (= f8 #100)
#93 := (not #94)
#277 := (= f7 #100)
#594 := [hypothesis]: #94
#278 := (or #93 #277)
#364 := [def-axiom]: #278
#595 := [unit-resolution #364 #594]: #277
#512 := (= #79 f7)
#296 := (f3 f4 #11)
#538 := (= #296 f7)
#369 := (= f7 #296)
#23 := (:var 0 S3)
#24 := (f5 f6 #23)
#692 := (pattern #24)
#25 := (f3 f4 #24)
#120 := (= #23 #25)
#693 := (forall (vars (?v0 S3)) (:pat #692) #120)
#123 := (forall (vars (?v0 S3)) #120)
#696 := (iff #123 #693)
#694 := (iff #120 #120)
#695 := [refl]: #694
#697 := [quant-intro #695]: #696
#217 := (~ #123 #123)
#215 := (~ #120 #120)
#216 := [refl]: #215
#218 := [nnf-pos #216]: #217
#26 := (= #25 #23)
#27 := (forall (vars (?v0 S3)) #26)
#124 := (iff #27 #123)
#121 := (iff #26 #120)
#122 := [rewrite]: #121
#125 := [quant-intro #122]: #124
#119 := [asserted]: #27
#128 := [mp #119 #125]: #123
#207 := [mp~ #128 #218]: #123
#698 := [mp #207 #697]: #693
#366 := (not #693)
#343 := (or #366 #369)
#473 := [quant-inst #10]: #343
#585 := [unit-resolution #473 #698]: #369
#544 := [symm #585]: #538
#537 := (= #79 #296)
#558 := (= #74 #11)
#587 := (= #11 #74)
#688 := (* -1::Int #68)
#689 := (+ #61 #688)
#690 := (+ #11 #689)
#677 := (<= #690 0::Int)
#685 := (= #690 0::Int)
#342 := (or #93 #685)
#29 := (:var 0 Int)
#31 := (f3 f4 #29)
#699 := (pattern #31)
#144 := (>= #29 0::Int)
#146 := (not #144)
#32 := (f5 f6 #31)
#127 := (= #29 #32)
#152 := (or #127 #146)
#700 := (forall (vars (?v0 Int)) (:pat #699) #152)
#157 := (forall (vars (?v0 Int)) #152)
#703 := (iff #157 #700)
#701 := (iff #152 #152)
#702 := [refl]: #701
#704 := [quant-intro #702]: #703
#209 := (~ #157 #157)
#208 := (~ #152 #152)
#205 := [refl]: #208
#210 := [nnf-pos #205]: #209
#33 := (= #32 #29)
#30 := (<= 0::Int #29)
#34 := (implies #30 #33)
#35 := (forall (vars (?v0 Int)) #34)
#160 := (iff #35 #157)
#134 := (not #30)
#135 := (or #134 #127)
#140 := (forall (vars (?v0 Int)) #135)
#158 := (iff #140 #157)
#155 := (iff #135 #152)
#149 := (or #146 #127)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #135 #149)
#147 := (iff #134 #146)
#143 := (iff #30 #144)
#145 := [rewrite]: #143
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#156 := [trans #151 #154]: #155
#159 := [quant-intro #156]: #158
#141 := (iff #35 #140)
#138 := (iff #34 #135)
#131 := (implies #30 #127)
#136 := (iff #131 #135)
#137 := [rewrite]: #136
#132 := (iff #34 #131)
#129 := (iff #33 #127)
#130 := [rewrite]: #129
#133 := [monotonicity #130]: #132
#139 := [trans #133 #137]: #138
#142 := [quant-intro #139]: #141
#161 := [trans #142 #159]: #160
#126 := [asserted]: #35
#162 := [mp #126 #161]: #157
#206 := [mp~ #162 #210]: #157
#705 := [mp #206 #704]: #700
#331 := (not #700)
#332 := (or #331 #93 #685)
#680 := (= #62 #68)
#354 := (or #680 #93)
#333 := (or #331 #354)
#674 := (iff #333 #332)
#670 := (or #331 #342)
#673 := (iff #670 #332)
#668 := [rewrite]: #673
#671 := (iff #333 #670)
#667 := (iff #354 #342)
#341 := (or #685 #93)
#683 := (iff #341 #342)
#326 := [rewrite]: #683
#346 := (iff #354 #341)
#691 := (iff #680 #685)
#681 := [rewrite]: #691
#682 := [monotonicity #681]: #346
#330 := [trans #682 #326]: #667
#672 := [monotonicity #330]: #671
#312 := [trans #672 #668]: #674
#669 := [quant-inst #62]: #333
#675 := [mp #669 #312]: #332
#552 := [unit-resolution #675 #705]: #342
#548 := [unit-resolution #552 #594]: #685
#549 := (not #685)
#550 := (or #549 #677)
#553 := [th-lemma arith triangle-eq]: #550
#554 := [unit-resolution #553 #548]: #677
#317 := (>= #690 0::Int)
#555 := (or #549 #317)
#551 := [th-lemma arith triangle-eq]: #555
#556 := [unit-resolution #551 #548]: #317
#536 := [th-lemma arith eq-propagate -1 -1 #556 #554]: #587
#482 := [symm #536]: #558
#518 := [monotonicity #482]: #537
#519 := [trans #518 #544]: #512
#478 := [trans #519 #595]: #108
#113 := (not #108)
#19 := (< #11 #13)
#20 := (ite #19 f8 f7)
#14 := (- #11 #13)
#15 := (f3 f4 #14)
#16 := (f5 f6 #15)
#17 := (+ #16 #13)
#18 := (f3 f4 #17)
#21 := (= #18 #20)
#22 := (not #21)
#116 := (iff #22 #113)
#85 := (= #20 #79)
#90 := (not #85)
#114 := (iff #90 #113)
#111 := (iff #85 #108)
#105 := (= #100 #79)
#109 := (iff #105 #108)
#110 := [rewrite]: #109
#106 := (iff #85 #105)
#103 := (= #20 #100)
#97 := (ite #93 f8 f7)
#101 := (= #97 #100)
#102 := [rewrite]: #101
#98 := (= #20 #97)
#95 := (iff #19 #93)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#104 := [trans #99 #102]: #103
#107 := [monotonicity #104]: #106
#112 := [trans #107 #110]: #111
#115 := [monotonicity #112]: #114
#91 := (iff #22 #90)
#88 := (iff #21 #85)
#82 := (= #79 #20)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #21 #82)
#80 := (= #18 #79)
#77 := (= #17 #74)
#71 := (+ #68 #13)
#75 := (= #71 #74)
#76 := [rewrite]: #75
#72 := (= #17 #71)
#69 := (= #16 #68)
#66 := (= #15 #65)
#63 := (= #14 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#78 := [trans #73 #76]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#117 := [trans #92 #115]: #116
#59 := [asserted]: #22
#118 := [mp #59 #117]: #113
#509 := [unit-resolution #118 #478]: false
#511 := [lemma #509]: #93
#365 := (or #94 #363)
#356 := [def-axiom]: #365
#547 := [unit-resolution #356 #511]: #363
#503 := (= #79 f8)
#367 := (f3 f4 #13)
#501 := (= #367 f8)
#368 := (= f8 #367)
#370 := (or #366 #368)
#349 := [quant-inst #12]: #370
#546 := [unit-resolution #349 #698]: #368
#502 := [symm #546]: #501
#497 := (= #79 #367)
#491 := (= #74 #13)
#535 := (= #13 #74)
#660 := (<= #68 0::Int)
#318 := (= #68 0::Int)
#676 := (or #94 #318)
#37 := (= #32 0::Int)
#193 := (or #37 #144)
#706 := (forall (vars (?v0 Int)) (:pat #699) #193)
#198 := (forall (vars (?v0 Int)) #193)
#709 := (iff #198 #706)
#707 := (iff #193 #193)
#708 := [refl]: #707
#710 := [quant-intro #708]: #709
#211 := (~ #198 #198)
#219 := (~ #193 #193)
#220 := [refl]: #219
#212 := [nnf-pos #220]: #211
#36 := (< #29 0::Int)
#38 := (implies #36 #37)
#39 := (forall (vars (?v0 Int)) #38)
#201 := (iff #39 #198)
#164 := (= 0::Int #32)
#170 := (not #36)
#171 := (or #170 #164)
#176 := (forall (vars (?v0 Int)) #171)
#199 := (iff #176 #198)
#196 := (iff #171 #193)
#190 := (or #144 #37)
#194 := (iff #190 #193)
#195 := [rewrite]: #194
#191 := (iff #171 #190)
#188 := (iff #164 #37)
#189 := [rewrite]: #188
#186 := (iff #170 #144)
#181 := (not #146)
#184 := (iff #181 #144)
#185 := [rewrite]: #184
#182 := (iff #170 #181)
#179 := (iff #36 #146)
#180 := [rewrite]: #179
#183 := [monotonicity #180]: #182
#187 := [trans #183 #185]: #186
#192 := [monotonicity #187 #189]: #191
#197 := [trans #192 #195]: #196
#200 := [quant-intro #197]: #199
#177 := (iff #39 #176)
#174 := (iff #38 #171)
#167 := (implies #36 #164)
#172 := (iff #167 #171)
#173 := [rewrite]: #172
#168 := (iff #38 #167)
#165 := (iff #37 #164)
#166 := [rewrite]: #165
#169 := [monotonicity #166]: #168
#175 := [trans #169 #173]: #174
#178 := [quant-intro #175]: #177
#202 := [trans #178 #200]: #201
#163 := [asserted]: #39
#203 := [mp #163 #202]: #198
#221 := [mp~ #203 #212]: #198
#711 := [mp #221 #710]: #706
#666 := (not #706)
#388 := (or #666 #94 #318)
#678 := (or #318 #94)
#389 := (or #666 #678)
#385 := (iff #389 #388)
#391 := (or #666 #676)
#662 := (iff #391 #388)
#384 := [rewrite]: #662
#284 := (iff #389 #391)
#679 := (iff #678 #676)
#665 := [rewrite]: #679
#661 := [monotonicity #665]: #284
#659 := [trans #661 #384]: #385
#390 := [quant-inst #62]: #389
#663 := [mp #390 #659]: #388
#542 := [unit-resolution #663 #711]: #676
#543 := [unit-resolution #542 #511]: #318
#513 := (not #318)
#520 := (or #513 #660)
#522 := [th-lemma arith triangle-eq]: #520
#523 := [unit-resolution #522 #543]: #660
#664 := (>= #68 0::Int)
#524 := (or #513 #664)
#534 := [th-lemma arith triangle-eq]: #524
#514 := [unit-resolution #534 #543]: #664
#490 := [th-lemma arith eq-propagate 1 1 #514 #523]: #535
#496 := [symm #490]: #491
#498 := [monotonicity #496]: #497
#504 := [trans #498 #502]: #503
#505 := [trans #504 #547]: #108
[unit-resolution #118 #505]: false
unsat
ec17b7c3a16edeb0d8d580fab6cc5b716941df1a 537 0
#2 := false
#31 := 0::Int
decl f5 :: (-> S4 S3 Int)
decl f3 :: (-> S2 Int S3)
decl f8 :: S3
#12 := f8
decl f6 :: S4
#9 := f6
#13 := (f5 f6 f8)
#63 := -1::Int
#64 := (* -1::Int #13)
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#65 := (+ #11 #64)
decl f4 :: S2
#8 := f4
#68 := (f3 f4 #65)
#71 := (f5 f6 #68)
#669 := (* -1::Int #71)
#670 := (+ #64 #669)
#671 := (+ #11 #670)
#666 := (= #671 0::Int)
#468 := (not #666)
#298 := (>= #671 0::Int)
#318 := (not #298)
decl f9 :: S3
#17 := f9
#18 := (f5 f6 f9)
#77 := (* -1::Int #18)
#86 := (+ #64 #77)
#87 := (+ #11 #86)
#508 := (>= #87 0::Int)
#509 := (not #508)
#90 := (f3 f4 #87)
#78 := (+ #77 #71)
#83 := (f3 f4 #78)
#93 := (= #83 #90)
#502 := (f5 f6 #90)
#505 := (f3 f4 #502)
#434 := (= #505 #90)
#515 := (= #90 #505)
#26 := (:var 0 S3)
#27 := (f5 f6 #26)
#673 := (pattern #27)
#28 := (f3 f4 #27)
#100 := (= #26 #28)
#674 := (forall (vars (?v0 S3)) (:pat #673) #100)
#104 := (forall (vars (?v0 S3)) #100)
#677 := (iff #104 #674)
#675 := (iff #100 #100)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#198 := (~ #104 #104)
#196 := (~ #100 #100)
#197 := [refl]: #196
#199 := [nnf-pos #197]: #198
#29 := (= #28 #26)
#30 := (forall (vars (?v0 S3)) #29)
#105 := (iff #30 #104)
#102 := (iff #29 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #30
#109 := [mp #99 #106]: #104
#188 := [mp~ #109 #199]: #104
#679 := [mp #188 #678]: #674
#346 := (not #674)
#428 := (or #346 #515)
#431 := [quant-inst #90]: #428
#439 := [unit-resolution #431 #679]: #515
#424 := [symm #439]: #434
#414 := (= #83 #505)
#331 := (= #78 #502)
#512 := (* -1::Int #502)
#513 := (+ #77 #512)
#514 := (+ #64 #513)
#607 := (+ #11 #514)
#583 := (<= #607 0::Int)
#604 := (= #607 0::Int)
#405 := [hypothesis]: #508
#588 := (or #509 #604)
#32 := (:var 0 Int)
#34 := (f3 f4 #32)
#680 := (pattern #34)
#125 := (>= #32 0::Int)
#127 := (not #125)
#35 := (f5 f6 #34)
#108 := (= #32 #35)
#133 := (or #108 #127)
#681 := (forall (vars (?v0 Int)) (:pat #680) #133)
#138 := (forall (vars (?v0 Int)) #133)
#684 := (iff #138 #681)
#682 := (iff #133 #133)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#190 := (~ #138 #138)
#189 := (~ #133 #133)
#186 := [refl]: #189
#191 := [nnf-pos #186]: #190
#36 := (= #35 #32)
#33 := (<= 0::Int #32)
#37 := (implies #33 #36)
#38 := (forall (vars (?v0 Int)) #37)
#141 := (iff #38 #138)
#115 := (not #33)
#116 := (or #115 #108)
#121 := (forall (vars (?v0 Int)) #116)
#139 := (iff #121 #138)
#136 := (iff #116 #133)
#130 := (or #127 #108)
#134 := (iff #130 #133)
#135 := [rewrite]: #134
#131 := (iff #116 #130)
#128 := (iff #115 #127)
#124 := (iff #33 #125)
#126 := [rewrite]: #124
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#137 := [trans #132 #135]: #136
#140 := [quant-intro #137]: #139
#122 := (iff #38 #121)
#119 := (iff #37 #116)
#112 := (implies #33 #108)
#117 := (iff #112 #116)
#118 := [rewrite]: #117
#113 := (iff #37 #112)
#110 := (iff #36 #108)
#111 := [rewrite]: #110
#114 := [monotonicity #111]: #113
#120 := [trans #114 #118]: #119
#123 := [quant-intro #120]: #122
#142 := [trans #123 #140]: #141
#107 := [asserted]: #38
#143 := [mp #107 #142]: #138
#187 := [mp~ #143 #191]: #138
#686 := [mp #187 #685]: #681
#312 := (not #681)
#601 := (or #312 #509 #604)
#510 := (= #87 #502)
#511 := (or #510 #509)
#590 := (or #312 #511)
#579 := (iff #590 #601)
#592 := (or #312 #588)
#594 := (iff #592 #601)
#578 := [rewrite]: #594
#593 := (iff #590 #592)
#600 := (iff #511 #588)
#597 := (or #604 #509)
#598 := (iff #597 #588)
#599 := [rewrite]: #598
#589 := (iff #511 #597)
#608 := (iff #510 #604)
#595 := [rewrite]: #608
#586 := [monotonicity #595]: #589
#596 := [trans #586 #599]: #600
#587 := [monotonicity #596]: #593
#581 := [trans #587 #578]: #579
#591 := [quant-inst #87]: #590
#582 := [mp #591 #581]: #601
#473 := [unit-resolution #582 #686]: #588
#384 := [unit-resolution #473 #405]: #604
#450 := (not #604)
#411 := (or #450 #583)
#412 := [th-lemma arith triangle-eq]: #411
#373 := [unit-resolution #412 #384]: #583
#584 := (>= #607 0::Int)
#451 := (or #450 #584)
#458 := [th-lemma arith triangle-eq]: #451
#374 := [unit-resolution #458 #384]: #584
#658 := (<= #671 0::Int)
#324 := (>= #65 0::Int)
#566 := (>= #502 0::Int)
#375 := (not #583)
#367 := (or #566 #375 #509)
#376 := [th-lemma arith assign-bounds 1 -1]: #367
#377 := [unit-resolution #376 #373 #405]: #566
#464 := (not #584)
#462 := (not #566)
#359 := (or #324 #462 #464)
#567 := (>= #18 0::Int)
#404 := (= #18 0::Int)
#258 := (f3 f4 #18)
#568 := (f5 f6 #258)
#569 := (= #568 0::Int)
#388 := (not #567)
#389 := [hypothesis]: #388
#570 := (or #567 #569)
#40 := (= #35 0::Int)
#174 := (or #40 #125)
#687 := (forall (vars (?v0 Int)) (:pat #680) #174)
#179 := (forall (vars (?v0 Int)) #174)
#690 := (iff #179 #687)
#688 := (iff #174 #174)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#192 := (~ #179 #179)
#200 := (~ #174 #174)
#201 := [refl]: #200
#193 := [nnf-pos #201]: #192
#39 := (< #32 0::Int)
#41 := (implies #39 #40)
#42 := (forall (vars (?v0 Int)) #41)
#182 := (iff #42 #179)
#145 := (= 0::Int #35)
#151 := (not #39)
#152 := (or #151 #145)
#157 := (forall (vars (?v0 Int)) #152)
#180 := (iff #157 #179)
#177 := (iff #152 #174)
#171 := (or #125 #40)
#175 := (iff #171 #174)
#176 := [rewrite]: #175
#172 := (iff #152 #171)
#169 := (iff #145 #40)
#170 := [rewrite]: #169
#167 := (iff #151 #125)
#162 := (not #127)
#165 := (iff #162 #125)
#166 := [rewrite]: #165
#163 := (iff #151 #162)
#160 := (iff #39 #127)
#161 := [rewrite]: #160
#164 := [monotonicity #161]: #163
#168 := [trans #164 #166]: #167
#173 := [monotonicity #168 #170]: #172
#178 := [trans #173 #176]: #177
#181 := [quant-intro #178]: #180
#158 := (iff #42 #157)
#155 := (iff #41 #152)
#148 := (implies #39 #145)
#153 := (iff #148 #152)
#154 := [rewrite]: #153
#149 := (iff #41 #148)
#146 := (iff #40 #145)
#147 := [rewrite]: #146
#150 := [monotonicity #147]: #149
#156 := [trans #150 #154]: #155
#159 := [quant-intro #156]: #158
#183 := [trans #159 #181]: #182
#144 := [asserted]: #42
#184 := [mp #144 #183]: #179
#202 := [mp~ #184 #193]: #179
#692 := [mp #202 #691]: #687
#646 := (not #687)
#551 := (or #646 #567 #569)
#559 := (or #569 #567)
#552 := (or #646 #559)
#538 := (iff #552 #551)
#554 := (or #646 #570)
#556 := (iff #554 #551)
#542 := [rewrite]: #556
#555 := (iff #552 #554)
#548 := (iff #559 #570)
#549 := [rewrite]: #548
#550 := [monotonicity #549]: #555
#539 := [trans #550 #542]: #538
#553 := [quant-inst #18]: #552
#540 := [mp #553 #539]: #551
#390 := [unit-resolution #540 #692]: #570
#391 := [unit-resolution #390 #389]: #569
#393 := (= #18 #568)
#344 := (= f9 #258)
#337 := (or #346 #344)
#348 := [quant-inst #17]: #337
#392 := [unit-resolution #348 #679]: #344
#386 := [monotonicity #392]: #393
#394 := [trans #386 #391]: #404
#379 := (not #404)
#380 := (or #379 #567)
#381 := [th-lemma arith triangle-eq]: #380
#383 := [unit-resolution #381 #389 #394]: false
#382 := [lemma #383]: #567
#368 := (or #388 #324 #462 #464)
#378 := [th-lemma arith assign-bounds 1 1 1]: #368
#360 := [unit-resolution #378 #382]: #359
#361 := [unit-resolution #360 #377 #374]: #324
#454 := (not #324)
#323 := (or #454 #666)
#313 := (or #312 #454 #666)
#336 := (= #65 #71)
#668 := (or #336 #454)
#314 := (or #312 #668)
#655 := (iff #314 #313)
#651 := (or #312 #323)
#654 := (iff #651 #313)
#649 := [rewrite]: #654
#652 := (iff #314 #651)
#648 := (iff #668 #323)
#322 := (or #666 #454)
#664 := (iff #322 #323)
#307 := [rewrite]: #664
#327 := (iff #668 #322)
#672 := (iff #336 #666)
#662 := [rewrite]: #672
#663 := [monotonicity #662]: #327
#311 := [trans #663 #307]: #648
#653 := [monotonicity #311]: #652
#293 := [trans #653 #649]: #655
#650 := [quant-inst #65]: #314
#656 := [mp #650 #293]: #313
#440 := [unit-resolution #656 #686]: #323
#353 := [unit-resolution #440 #361]: #666
#469 := (or #468 #658)
#452 := [th-lemma arith triangle-eq]: #469
#362 := [unit-resolution #452 #353]: #658
#363 := (or #468 #298)
#354 := [th-lemma arith triangle-eq]: #363
#364 := [unit-resolution #354 #353]: #298
#333 := [th-lemma arith eq-propagate 1 1 -1 -1 #364 #362 #374 #373]: #331
#334 := [monotonicity #333]: #414
#325 := [trans #334 #424]: #93
#96 := (not #93)
#21 := (+ #13 #18)
#22 := (- #11 #21)
#23 := (f3 f4 #22)
#14 := (- #11 #13)
#15 := (f3 f4 #14)
#16 := (f5 f6 #15)
#19 := (- #16 #18)
#20 := (f3 f4 #19)
#24 := (= #20 #23)
#25 := (not #24)
#97 := (iff #25 #96)
#94 := (iff #24 #93)
#91 := (= #23 #90)
#88 := (= #22 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#84 := (= #20 #83)
#81 := (= #19 #78)
#74 := (- #71 #18)
#79 := (= #74 #78)
#80 := [rewrite]: #79
#75 := (= #19 #74)
#72 := (= #16 #71)
#69 := (= #15 #68)
#66 := (= #14 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#82 := [trans #76 #80]: #81
#85 := [monotonicity #82]: #84
#95 := [monotonicity #85 #92]: #94
#98 := [monotonicity #95]: #97
#62 := [asserted]: #25
#101 := [mp #62 #98]: #96
#338 := [unit-resolution #101 #325]: false
#339 := [lemma #338]: #509
#365 := (f5 f6 #83)
#506 := (>= #365 0::Int)
#357 := (+ #18 #669)
#358 := (<= #357 0::Int)
#580 := (= #502 0::Int)
#483 := (not #580)
#623 := (= #365 0::Int)
#352 := (not #358)
#482 := [hypothesis]: #352
#456 := (or #358 #623)
#611 := (or #646 #358 #623)
#657 := (>= #78 0::Int)
#617 := (or #623 #657)
#614 := (or #646 #617)
#602 := (iff #614 #611)
#497 := (or #646 #456)
#605 := (iff #497 #611)
#507 := [rewrite]: #605
#498 := (iff #614 #497)
#612 := (iff #617 #456)
#624 := (or #623 #358)
#609 := (iff #624 #456)
#610 := [rewrite]: #609
#453 := (iff #617 #624)
#636 := (iff #657 #358)
#637 := [rewrite]: #636
#455 := [monotonicity #637]: #453
#613 := [trans #455 #610]: #612
#457 := [monotonicity #613]: #498
#603 := [trans #457 #507]: #602
#496 := [quant-inst #78]: #614
#606 := [mp #496 #603]: #611
#426 := [unit-resolution #606 #692]: #456
#419 := [unit-resolution #426 #482]: #623
#421 := (not #623)
#425 := (or #483 #421)
#500 := (f3 f4 #365)
#433 := (= #500 #505)
#430 := (= #505 #500)
#438 := (= #502 #365)
#435 := (= 0::Int #365)
#477 := [hypothesis]: #623
#437 := [symm #477]: #435
#478 := [hypothesis]: #580
#436 := [trans #478 #437]: #438
#432 := [monotonicity #436]: #430
#429 := [symm #432]: #433
#459 := (= #83 #500)
#495 := (or #346 #459)
#516 := [quant-inst #83]: #495
#427 := [unit-resolution #516 #679]: #459
#416 := [trans #427 #429]: #414
#417 := [trans #416 #424]: #93
#420 := [unit-resolution #101 #417]: false
#418 := [lemma #420]: #425
#422 := [unit-resolution #418 #419]: #483
#571 := (or #508 #580)
#575 := (or #646 #508 #580)
#585 := (or #580 #508)
#576 := (or #646 #585)
#562 := (iff #576 #575)
#577 := (or #646 #571)
#560 := (iff #577 #575)
#561 := [rewrite]: #560
#557 := (iff #576 #577)
#572 := (iff #585 #571)
#574 := [rewrite]: #572
#558 := [monotonicity #574]: #557
#563 := [trans #558 #561]: #562
#573 := [quant-inst #87]: #576
#564 := [mp #573 #563]: #575
#487 := [unit-resolution #564 #692]: #571
#423 := [unit-resolution #487 #422]: #508
#409 := [unit-resolution #473 #423]: #604
#410 := [unit-resolution #412 #409]: #583
#565 := (<= #502 0::Int)
#444 := (or #565 #358)
#643 := (>= #71 0::Int)
#299 := (= #71 0::Int)
#461 := (not #658)
#471 := (not #565)
#472 := [hypothesis]: #471
#479 := (or #566 #565)
#480 := [th-lemma arith farkas 1 1]: #479
#481 := [unit-resolution #480 #472]: #566
#484 := (or #483 #565)
#485 := [th-lemma arith triangle-eq]: #484
#486 := [unit-resolution #485 #472]: #483
#488 := [unit-resolution #487 #486]: #508
#489 := [unit-resolution #473 #488]: #604
#460 := [unit-resolution #458 #489]: #584
#465 := (or #461 #358 #462 #464)
#466 := [th-lemma arith assign-bounds 1 1 -1]: #465
#467 := [unit-resolution #466 #460 #482 #481]: #461
#470 := [unit-resolution #452 #467]: #468
#441 := [unit-resolution #440 #470]: #454
#659 := (or #299 #324)
#647 := (or #646 #299 #324)
#369 := (or #646 #659)
#371 := (iff #369 #647)
#372 := [rewrite]: #371
#370 := [quant-inst #65]: #369
#265 := [mp #370 #372]: #647
#442 := [unit-resolution #265 #692]: #659
#443 := [unit-resolution #442 #441]: #299
#445 := (not #299)
#446 := (or #445 #643)
#447 := [th-lemma arith triangle-eq]: #446
#290 := [unit-resolution #447 #443]: #643
#448 := [th-lemma arith farkas 1 1 1 1 1 #482 #441 #481 #460 #290]: false
#449 := [lemma #448]: #444
#413 := [unit-resolution #449 #482]: #565
#395 := (or #580 #471 #462)
#397 := [th-lemma arith triangle-eq]: #395
#398 := [unit-resolution #397 #422 #413]: #462
#399 := [th-lemma arith farkas 1 -1 1 #398 #423 #410]: false
#400 := [lemma #399]: #358
#355 := (+ #669 #365)
#356 := (+ #18 #355)
#622 := (>= #356 0::Int)
#641 := (= #356 0::Int)
#629 := (or #352 #641)
#632 := (or #312 #352 #641)
#660 := (not #657)
#366 := (= #78 #365)
#640 := (or #366 #660)
#627 := (or #312 #640)
#620 := (iff #627 #632)
#474 := (or #312 #629)
#618 := (iff #474 #632)
#619 := [rewrite]: #618
#475 := (iff #627 #474)
#626 := (iff #640 #629)
#635 := (or #641 #352)
#630 := (iff #635 #629)
#625 := [rewrite]: #630
#639 := (iff #640 #635)
#634 := (iff #660 #352)
#638 := [monotonicity #637]: #634
#644 := (iff #366 #641)
#645 := [rewrite]: #644
#628 := [monotonicity #645 #638]: #639
#631 := [trans #628 #625]: #626
#476 := [monotonicity #631]: #475
#621 := [trans #476 #619]: #620
#633 := [quant-inst #78]: #627
#615 := [mp #633 #621]: #632
#340 := [unit-resolution #615 #686]: #629
#341 := [unit-resolution #340 #400]: #641
#342 := (not #641)
#332 := (or #342 #622)
#343 := [th-lemma arith triangle-eq]: #332
#326 := [unit-resolution #343 #341]: #622
#328 := (not #622)
#329 := (or #506 #328 #352)
#308 := [th-lemma arith assign-bounds 1 -1]: #329
#310 := [unit-resolution #308 #326 #400]: #506
#616 := (<= #356 0::Int)
#315 := (or #342 #616)
#316 := [th-lemma arith triangle-eq]: #315
#317 := [unit-resolution #316 #341]: #616
#320 := (not #616)
#319 := (not #506)
#309 := (or #318 #508 #319 #320)
#321 := [th-lemma arith assign-bounds 1 1 -1]: #309
#302 := [unit-resolution #321 #317 #310 #339]: #318
#304 := [unit-resolution #354 #302]: #468
#642 := (<= #71 0::Int)
#301 := (not #642)
#491 := (<= #365 0::Int)
#306 := (not #491)
#305 := [unit-resolution #487 #339]: #580
#303 := [unit-resolution #418 #305]: #421
#297 := (or #623 #306)
#294 := (or #623 #306 #319)
#296 := [th-lemma arith triangle-eq]: #294
#300 := [unit-resolution #296 #310]: #297
#295 := [unit-resolution #300 #303]: #306
#275 := (or #301 #388 #491 #320)
#280 := [th-lemma arith assign-bounds -1 -1 1]: #275
#281 := [unit-resolution #280 #317 #295 #382]: #301
#286 := (or #445 #642)
#288 := [th-lemma arith triangle-eq]: #286
#289 := [unit-resolution #288 #281]: #445
#291 := [unit-resolution #442 #289]: #324
[unit-resolution #440 #291 #304]: false
unsat
ab89ff5ea26d6edebe4b09181b1bc1f04912fd23 37 0
#2 := false
decl f3 :: (-> S2 Int S3)
#12 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#10 := f7
decl f6 :: S4
#9 := f6
#11 := (f5 f6 f7)
#13 := (* #11 0::Int)
#14 := (f3 f4 #13)
#16 := (= #14 #15)
#17 := (not #16)
#69 := (iff #17 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #17 #64)
#62 := (iff #16 true)
#57 := (= #15 #15)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #16 #57)
#54 := (= #13 0::Int)
#55 := [rewrite]: #54
#56 := [monotonicity #55]: #16
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#53 := [asserted]: #17
[mp #53 #70]: false
unsat
b41254f53c1c7293071acdd08e77aef8fc6b2a43 37 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#11 := f7
decl f6 :: S4
#10 := f6
#12 := (f5 f6 f7)
#13 := (* 0::Int #12)
#14 := (f3 f4 #13)
#16 := (= #14 #15)
#17 := (not #16)
#69 := (iff #17 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #17 #64)
#62 := (iff #16 true)
#57 := (= #15 #15)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #16 #57)
#54 := (= #13 0::Int)
#55 := [rewrite]: #54
#56 := [monotonicity #55]: #16
#59 := [monotonicity #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#53 := [asserted]: #17
[mp #53 #70]: false
unsat
cc02b658321764bb4d18c203df49b67755d56924 63 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#17 := (:var 0 S3)
decl f6 :: S4
#9 := f6
#18 := (f5 f6 #17)
#644 := (pattern #18)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#19 := (f3 f4 #18)
#71 := (= #17 #19)
#645 := (forall (vars (?v0 S3)) (:pat #644) #71)
#75 := (forall (vars (?v0 S3)) #71)
#648 := (iff #75 #645)
#646 := (iff #71 #71)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#169 := (~ #75 #75)
#167 := (~ #71 #71)
#168 := [refl]: #167
#170 := [nnf-pos #168]: #169
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S3)) #20)
#76 := (iff #21 #75)
#73 := (iff #20 #71)
#74 := [rewrite]: #73
#77 := [quant-intro #74]: #76
#70 := [asserted]: #21
#80 := [mp #70 #77]: #75
#159 := [mp~ #80 #170]: #75
#650 := [mp #159 #649]: #645
decl f7 :: S3
#10 := f7
#11 := (f5 f6 f7)
#56 := (f3 f4 #11)
#62 := (= f7 #56)
#67 := (not #62)
#12 := 1::Int
#13 := (* #11 1::Int)
#14 := (f3 f4 #13)
#15 := (= #14 f7)
#16 := (not #15)
#68 := (iff #16 #67)
#65 := (iff #15 #62)
#59 := (= #56 f7)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (= #14 #56)
#54 := (= #13 #11)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#53 := [asserted]: #16
#72 := [mp #53 #69]: #67
#230 := (not #645)
#315 := (or #230 #62)
#316 := [quant-inst #10]: #315
[unit-resolution #316 #72 #650]: false
unsat
7e233a0f8e38e4c371798a2d4c4445220456e627 63 0
#2 := false
decl f5 :: (-> S4 S3 Int)
#17 := (:var 0 S3)
decl f6 :: S4
#10 := f6
#18 := (f5 f6 #17)
#644 := (pattern #18)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#19 := (f3 f4 #18)
#71 := (= #17 #19)
#645 := (forall (vars (?v0 S3)) (:pat #644) #71)
#75 := (forall (vars (?v0 S3)) #71)
#648 := (iff #75 #645)
#646 := (iff #71 #71)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#169 := (~ #75 #75)
#167 := (~ #71 #71)
#168 := [refl]: #167
#170 := [nnf-pos #168]: #169
#20 := (= #19 #17)
#21 := (forall (vars (?v0 S3)) #20)
#76 := (iff #21 #75)
#73 := (iff #20 #71)
#74 := [rewrite]: #73
#77 := [quant-intro #74]: #76
#70 := [asserted]: #21
#80 := [mp #70 #77]: #75
#159 := [mp~ #80 #170]: #75
#650 := [mp #159 #649]: #645
decl f7 :: S3
#11 := f7
#12 := (f5 f6 f7)
#56 := (f3 f4 #12)
#62 := (= f7 #56)
#67 := (not #62)
#9 := 1::Int
#13 := (* 1::Int #12)
#14 := (f3 f4 #13)
#15 := (= #14 f7)
#16 := (not #15)
#68 := (iff #16 #67)
#65 := (iff #15 #62)
#59 := (= #56 f7)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #15 #59)
#57 := (= #14 #56)
#54 := (= #13 #12)
#55 := [rewrite]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#53 := [asserted]: #16
#72 := [mp #53 #69]: #67
#230 := (not #645)
#315 := (or #230 #62)
#316 := [quant-inst #11]: #315
[unit-resolution #316 #72 #650]: false
unsat
86a82c10cd25f6f1fdba21944f486b50661e3300 39 0
#2 := false
decl f3 :: (-> S2 Int S3)
#9 := 3::Int
decl f5 :: (-> S4 S3 Int)
decl f7 :: S3
#11 := f7
decl f6 :: S4
#10 := f6
#12 := (f5 f6 f7)
#15 := (* #12 3::Int)
decl f4 :: S2
#8 := f4
#16 := (f3 f4 #15)
#13 := (* 3::Int #12)
#14 := (f3 f4 #13)
#17 := (= #14 #16)
#18 := (not #17)
#72 := (iff #18 false)
#1 := true
#67 := (not true)
#70 := (iff #67 false)
#71 := [rewrite]: #70
#68 := (iff #18 #67)
#65 := (iff #17 true)
#60 := (= #14 #14)
#63 := (iff #60 true)
#64 := [rewrite]: #63
#61 := (iff #17 #60)
#58 := (= #16 #14)
#56 := (= #15 #13)
#57 := [rewrite]: #56
#59 := [monotonicity #57]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#69 := [monotonicity #66]: #68
#73 := [trans #69 #71]: #72
#55 := [asserted]: #18
[mp #55 #73]: false
unsat
d3aa3ddfc691a1e97ab763a8c849657ed90534ad 267 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 0::Int
decl f4 :: S2
#8 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 0::Int)
#12 := (f5 #11 0::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#805 := (= #12 0::Int)
#23 := (:var 0 Int)
#34 := (:var 1 Int)
#35 := (f6 f7 #34)
#36 := (f5 #35 #23)
#883 := (pattern #36)
#186 := -1::Int
#190 := (* -1::Int #23)
#187 := (* -1::Int #34)
#193 := (div #187 #190)
#365 := (* -1::Int #193)
#366 := (+ #36 #365)
#367 := (= #366 0::Int)
#46 := (div #34 #23)
#362 := (* -1::Int #46)
#363 := (+ #36 #362)
#364 := (= #363 0::Int)
#225 := (>= #34 0::Int)
#218 := (<= #23 0::Int)
#325 := (or #218 #225)
#326 := (not #325)
#214 := (<= #34 0::Int)
#323 := (or #214 #218)
#324 := (not #323)
#329 := (or #324 #326)
#368 := (ite #329 #364 #367)
#361 := (= #36 0::Int)
#38 := (= #23 0::Int)
#37 := (= #34 0::Int)
#39 := (or #37 #38)
#369 := (ite #39 #361 #368)
#884 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #883) #369)
#372 := (forall (vars (?v0 Int) (?v1 Int)) #369)
#887 := (iff #372 #884)
#885 := (iff #369 #369)
#886 := [refl]: #885
#888 := [quant-intro #886]: #887
#332 := (ite #329 #46 #193)
#335 := (ite #39 0::Int #332)
#338 := (= #36 #335)
#341 := (forall (vars (?v0 Int) (?v1 Int)) #338)
#373 := (iff #341 #372)
#370 := (iff #338 #369)
#371 := [rewrite]: #370
#374 := [quant-intro #371]: #373
#226 := (not #225)
#219 := (not #218)
#229 := (and #219 #226)
#215 := (not #214)
#222 := (and #215 #219)
#232 := (or #222 #229)
#235 := (ite #232 #46 #193)
#238 := (ite #39 0::Int #235)
#241 := (= #36 #238)
#244 := (forall (vars (?v0 Int) (?v1 Int)) #241)
#342 := (iff #244 #341)
#339 := (iff #241 #338)
#336 := (= #238 #335)
#333 := (= #235 #332)
#330 := (iff #232 #329)
#327 := (iff #229 #326)
#328 := [rewrite]: #327
#308 := (iff #222 #324)
#309 := [rewrite]: #308
#331 := [monotonicity #309 #328]: #330
#334 := [monotonicity #331]: #333
#337 := [monotonicity #334]: #336
#340 := [monotonicity #337]: #339
#343 := [quant-intro #340]: #342
#304 := (~ #244 #244)
#317 := (~ #241 #241)
#318 := [refl]: #317
#305 := [nnf-pos #318]: #304
#48 := (- #23)
#47 := (- #34)
#49 := (div #47 #48)
#41 := (< 0::Int #23)
#43 := (< #34 0::Int)
#44 := (and #43 #41)
#40 := (< 0::Int #34)
#42 := (and #40 #41)
#45 := (or #42 #44)
#50 := (ite #45 #46 #49)
#51 := (ite #39 0::Int #50)
#52 := (= #36 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int)) #52)
#247 := (iff #53 #244)
#180 := (and #41 #43)
#183 := (or #42 #180)
#196 := (ite #183 #46 #193)
#174 := (= 0::Int #23)
#171 := (= 0::Int #34)
#177 := (or #171 #174)
#199 := (ite #177 0::Int #196)
#202 := (= #36 #199)
#205 := (forall (vars (?v0 Int) (?v1 Int)) #202)
#245 := (iff #205 #244)
#242 := (iff #202 #241)
#239 := (= #199 #238)
#236 := (= #196 #235)
#233 := (iff #183 #232)
#230 := (iff #180 #229)
#227 := (iff #43 #226)
#228 := [rewrite]: #227
#220 := (iff #41 #219)
#221 := [rewrite]: #220
#231 := [monotonicity #221 #228]: #230
#223 := (iff #42 #222)
#216 := (iff #40 #215)
#217 := [rewrite]: #216
#224 := [monotonicity #217 #221]: #223
#234 := [monotonicity #224 #231]: #233
#237 := [monotonicity #234]: #236
#212 := (iff #177 #39)
#210 := (iff #174 #38)
#211 := [rewrite]: #210
#208 := (iff #171 #37)
#209 := [rewrite]: #208
#213 := [monotonicity #209 #211]: #212
#240 := [monotonicity #213 #237]: #239
#243 := [monotonicity #240]: #242
#246 := [quant-intro #243]: #245
#206 := (iff #53 #205)
#203 := (iff #52 #202)
#200 := (= #51 #199)
#197 := (= #50 #196)
#194 := (= #49 #193)
#191 := (= #48 #190)
#192 := [rewrite]: #191
#188 := (= #47 #187)
#189 := [rewrite]: #188
#195 := [monotonicity #189 #192]: #194
#184 := (iff #45 #183)
#181 := (iff #44 #180)
#182 := [rewrite]: #181
#185 := [monotonicity #182]: #184
#198 := [monotonicity #185 #195]: #197
#178 := (iff #39 #177)
#175 := (iff #38 #174)
#176 := [rewrite]: #175
#172 := (iff #37 #171)
#173 := [rewrite]: #172
#179 := [monotonicity #173 #176]: #178
#201 := [monotonicity #179 #198]: #200
#204 := [monotonicity #201]: #203
#207 := [quant-intro #204]: #206
#248 := [trans #207 #246]: #247
#170 := [asserted]: #53
#249 := [mp #170 #248]: #244
#319 := [mp~ #249 #305]: #244
#344 := [mp #319 #343]: #341
#375 := [mp #344 #374]: #372
#889 := [mp #375 #888]: #884
#762 := (not #884)
#764 := (or #762 #805)
#818 := (* -1::Int 0::Int)
#819 := (div #818 #818)
#820 := (* -1::Int #819)
#815 := (+ #12 #820)
#816 := (= #815 0::Int)
#821 := (div 0::Int 0::Int)
#822 := (* -1::Int #821)
#817 := (+ #12 #822)
#823 := (= #817 0::Int)
#840 := (>= 0::Int 0::Int)
#664 := (<= 0::Int 0::Int)
#665 := (or #664 #840)
#666 := (not #665)
#808 := (or #664 #664)
#809 := (not #808)
#810 := (or #809 #666)
#811 := (ite #810 #823 #816)
#806 := (= 0::Int 0::Int)
#812 := (or #806 #806)
#813 := (ite #812 #805 #811)
#765 := (or #762 #813)
#763 := (iff #765 #764)
#747 := (iff #764 #764)
#748 := [rewrite]: #747
#775 := (iff #813 #805)
#1 := true
#771 := (ite true #805 #823)
#774 := (iff #771 #805)
#770 := [rewrite]: #774
#772 := (iff #813 #771)
#768 := (iff #811 #823)
#781 := (ite false #823 #823)
#777 := (iff #781 #823)
#784 := [rewrite]: #777
#782 := (iff #811 #781)
#791 := (iff #816 #823)
#790 := (= #815 #817)
#788 := (= #820 #822)
#776 := (= #819 #821)
#787 := (= #818 0::Int)
#779 := [rewrite]: #787
#778 := [monotonicity #779 #779]: #776
#789 := [monotonicity #778]: #788
#786 := [monotonicity #789]: #790
#780 := [monotonicity #786]: #791
#798 := (iff #810 false)
#702 := (or false false)
#797 := (iff #702 false)
#794 := [rewrite]: #797
#703 := (iff #810 #702)
#700 := (iff #666 false)
#488 := (not true)
#847 := (iff #488 false)
#850 := [rewrite]: #847
#699 := (iff #666 #488)
#696 := (iff #665 true)
#643 := (or true true)
#799 := (iff #643 true)
#800 := [rewrite]: #799
#796 := (iff #665 #643)
#846 := (iff #840 true)
#848 := [rewrite]: #846
#801 := (iff #664 true)
#804 := [rewrite]: #801
#681 := [monotonicity #804 #848]: #796
#698 := [trans #681 #800]: #696
#692 := [monotonicity #698]: #699
#701 := [trans #692 #850]: #700
#792 := (iff #809 false)
#795 := (iff #809 #488)
#688 := (iff #808 true)
#686 := (iff #808 #643)
#687 := [monotonicity #804 #804]: #686
#647 := [trans #687 #800]: #688
#697 := [monotonicity #647]: #795
#793 := [trans #697 #850]: #792
#704 := [monotonicity #793 #701]: #703
#785 := [trans #704 #794]: #798
#783 := [monotonicity #785 #780]: #782
#769 := [trans #783 #784]: #768
#802 := (iff #812 true)
#645 := (iff #812 #643)
#807 := (iff #806 true)
#814 := [rewrite]: #807
#646 := [monotonicity #814 #814]: #645
#803 := [trans #646 #800]: #802
#773 := [monotonicity #803 #769]: #772
#761 := [trans #773 #770]: #775
#767 := [monotonicity #761]: #763
#750 := [trans #767 #748]: #763
#766 := [quant-inst #10 #10]: #765
#751 := [mp #766 #750]: #764
#753 := [unit-resolution #751 #889]: #805
#754 := [monotonicity #753]: #15
#16 := (not #15)
#84 := [asserted]: #16
[unit-resolution #84 #754]: false
unsat
30453646d0803ed6c97ad5b92ef57ecbbc2d5650 284 0
#2 := false
decl f3 :: (-> S2 Int S3)
#14 := 0::Int
decl f4 :: S2
#8 := f4
#17 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#11 := f10
decl f9 :: S6
#10 := f9
#12 := (f8 f9 f10)
decl f7 :: S5
#9 := f7
#13 := (f6 f7 #12)
#15 := (f5 #13 0::Int)
#16 := (f3 f4 #15)
#18 := (= #16 #17)
#648 := (= #15 0::Int)
#25 := (:var 0 Int)
#36 := (:var 1 Int)
#37 := (f6 f7 #36)
#38 := (f5 #37 #25)
#885 := (pattern #38)
#188 := -1::Int
#192 := (* -1::Int #25)
#189 := (* -1::Int #36)
#195 := (div #189 #192)
#367 := (* -1::Int #195)
#368 := (+ #38 #367)
#369 := (= #368 0::Int)
#48 := (div #36 #25)
#364 := (* -1::Int #48)
#365 := (+ #38 #364)
#366 := (= #365 0::Int)
#227 := (>= #36 0::Int)
#220 := (<= #25 0::Int)
#327 := (or #220 #227)
#328 := (not #327)
#216 := (<= #36 0::Int)
#325 := (or #216 #220)
#326 := (not #325)
#331 := (or #326 #328)
#370 := (ite #331 #366 #369)
#363 := (= #38 0::Int)
#40 := (= #25 0::Int)
#39 := (= #36 0::Int)
#41 := (or #39 #40)
#371 := (ite #41 #363 #370)
#886 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #885) #371)
#374 := (forall (vars (?v0 Int) (?v1 Int)) #371)
#889 := (iff #374 #886)
#887 := (iff #371 #371)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#334 := (ite #331 #48 #195)
#337 := (ite #41 0::Int #334)
#340 := (= #38 #337)
#343 := (forall (vars (?v0 Int) (?v1 Int)) #340)
#375 := (iff #343 #374)
#372 := (iff #340 #371)
#373 := [rewrite]: #372
#376 := [quant-intro #373]: #375
#228 := (not #227)
#221 := (not #220)
#231 := (and #221 #228)
#217 := (not #216)
#224 := (and #217 #221)
#234 := (or #224 #231)
#237 := (ite #234 #48 #195)
#240 := (ite #41 0::Int #237)
#243 := (= #38 #240)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#344 := (iff #246 #343)
#341 := (iff #243 #340)
#338 := (= #240 #337)
#335 := (= #237 #334)
#332 := (iff #234 #331)
#329 := (iff #231 #328)
#330 := [rewrite]: #329
#310 := (iff #224 #326)
#311 := [rewrite]: #310
#333 := [monotonicity #311 #330]: #332
#336 := [monotonicity #333]: #335
#339 := [monotonicity #336]: #338
#342 := [monotonicity #339]: #341
#345 := [quant-intro #342]: #344
#306 := (~ #246 #246)
#319 := (~ #243 #243)
#320 := [refl]: #319
#307 := [nnf-pos #320]: #306
#50 := (- #25)
#49 := (- #36)
#51 := (div #49 #50)
#43 := (< 0::Int #25)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#52 := (ite #47 #48 #51)
#53 := (ite #41 0::Int #52)
#54 := (= #38 #53)
#55 := (forall (vars (?v0 Int) (?v1 Int)) #54)
#249 := (iff #55 #246)
#182 := (and #43 #45)
#185 := (or #44 #182)
#198 := (ite #185 #48 #195)
#176 := (= 0::Int #25)
#173 := (= 0::Int #36)
#179 := (or #173 #176)
#201 := (ite #179 0::Int #198)
#204 := (= #38 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#247 := (iff #207 #246)
#244 := (iff #204 #243)
#241 := (= #201 #240)
#238 := (= #198 #237)
#235 := (iff #185 #234)
#232 := (iff #182 #231)
#229 := (iff #45 #228)
#230 := [rewrite]: #229
#222 := (iff #43 #221)
#223 := [rewrite]: #222
#233 := [monotonicity #223 #230]: #232
#225 := (iff #44 #224)
#218 := (iff #42 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#236 := [monotonicity #226 #233]: #235
#239 := [monotonicity #236]: #238
#214 := (iff #179 #41)
#212 := (iff #176 #40)
#213 := [rewrite]: #212
#210 := (iff #173 #39)
#211 := [rewrite]: #210
#215 := [monotonicity #211 #213]: #214
#242 := [monotonicity #215 #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#208 := (iff #55 #207)
#205 := (iff #54 #204)
#202 := (= #53 #201)
#199 := (= #52 #198)
#196 := (= #51 #195)
#193 := (= #50 #192)
#194 := [rewrite]: #193
#190 := (= #49 #189)
#191 := [rewrite]: #190
#197 := [monotonicity #191 #194]: #196
#186 := (iff #47 #185)
#183 := (iff #46 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#200 := [monotonicity #187 #197]: #199
#180 := (iff #41 #179)
#177 := (iff #40 #176)
#178 := [rewrite]: #177
#174 := (iff #39 #173)
#175 := [rewrite]: #174
#181 := [monotonicity #175 #178]: #180
#203 := [monotonicity #181 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#250 := [trans #209 #248]: #249
#172 := [asserted]: #55
#251 := [mp #172 #250]: #246
#321 := [mp~ #251 #307]: #246
#346 := [mp #321 #345]: #343
#377 := [mp #346 #376]: #374
#891 := [mp #377 #890]: #886
#762 := (not #886)
#740 := (or #762 #648)
#823 := (* -1::Int 0::Int)
#824 := (* -1::Int #12)
#819 := (div #824 #823)
#825 := (* -1::Int #819)
#666 := (+ #15 #825)
#667 := (= #666 0::Int)
#668 := (div #12 0::Int)
#810 := (* -1::Int #668)
#811 := (+ #15 #810)
#812 := (= #811 0::Int)
#813 := (>= #12 0::Int)
#807 := (<= 0::Int 0::Int)
#808 := (or #807 #813)
#814 := (not #808)
#815 := (<= #12 0::Int)
#809 := (or #815 #807)
#816 := (not #809)
#645 := (or #816 #814)
#647 := (ite #645 #812 #667)
#801 := (= 0::Int 0::Int)
#802 := (= #12 0::Int)
#804 := (or #802 #801)
#805 := (ite #804 #648 #647)
#741 := (or #762 #805)
#744 := (iff #741 #740)
#746 := (iff #740 #740)
#747 := [rewrite]: #746
#761 := (iff #805 #648)
#773 := (div #824 0::Int)
#776 := (* -1::Int #773)
#763 := (+ #15 #776)
#767 := (= #763 0::Int)
#1 := true
#756 := (ite true #648 #767)
#759 := (iff #756 #648)
#760 := [rewrite]: #759
#757 := (iff #805 #756)
#754 := (iff #647 #767)
#769 := (ite false #812 #767)
#752 := (iff #769 #767)
#753 := [rewrite]: #752
#749 := (iff #647 #769)
#768 := (iff #667 #767)
#764 := (= #666 #763)
#772 := (= #825 #776)
#774 := (= #819 #773)
#770 := (= #823 0::Int)
#771 := [rewrite]: #770
#775 := [monotonicity #771]: #774
#777 := [monotonicity #775]: #772
#766 := [monotonicity #777]: #764
#765 := [monotonicity #766]: #768
#779 := (iff #645 false)
#793 := (or false false)
#784 := (iff #793 false)
#785 := [rewrite]: #784
#782 := (iff #645 #793)
#792 := (iff #814 false)
#838 := (not true)
#562 := (iff #838 false)
#563 := [rewrite]: #562
#790 := (iff #814 #838)
#778 := (iff #808 true)
#796 := (or true #813)
#789 := (iff #796 true)
#781 := [rewrite]: #789
#800 := (iff #808 #796)
#795 := (iff #807 true)
#798 := [rewrite]: #795
#787 := [monotonicity #798]: #800
#780 := [trans #787 #781]: #778
#791 := [monotonicity #780]: #790
#788 := [trans #791 #563]: #792
#706 := (iff #816 false)
#704 := (iff #816 #838)
#702 := (iff #809 true)
#683 := (or #815 true)
#701 := (iff #683 true)
#694 := [rewrite]: #701
#698 := (iff #809 #683)
#700 := [monotonicity #798]: #698
#703 := [trans #700 #694]: #702
#705 := [monotonicity #703]: #704
#799 := [trans #705 #563]: #706
#783 := [monotonicity #799 #788]: #782
#786 := [trans #783 #785]: #779
#750 := [monotonicity #786 #765]: #749
#755 := [trans #750 #753]: #754
#699 := (iff #804 true)
#688 := (or #802 true)
#649 := (iff #688 true)
#797 := [rewrite]: #649
#689 := (iff #804 #688)
#803 := (iff #801 true)
#806 := [rewrite]: #803
#690 := [monotonicity #806]: #689
#794 := [trans #690 #797]: #699
#758 := [monotonicity #794 #755]: #757
#751 := [trans #758 #760]: #761
#745 := [monotonicity #751]: #744
#742 := [trans #745 #747]: #744
#743 := [quant-inst #12 #14]: #741
#748 := [mp #743 #742]: #740
#730 := [unit-resolution #748 #891]: #648
#731 := [monotonicity #730]: #18
#19 := (not #18)
#86 := [asserted]: #19
[unit-resolution #86 #731]: false
unsat
008b16baa059bf8db3712b63abb197cb3108389b 304 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#12 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 0::Int)
#13 := (f5 #11 1::Int)
#14 := (f3 f4 #13)
#16 := (= #14 #15)
#813 := (= #13 0::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#883 := (pattern #37)
#187 := -1::Int
#191 := (* -1::Int #24)
#188 := (* -1::Int #35)
#194 := (div #188 #191)
#366 := (* -1::Int #194)
#367 := (+ #37 #366)
#368 := (= #367 0::Int)
#47 := (div #35 #24)
#363 := (* -1::Int #47)
#364 := (+ #37 #363)
#365 := (= #364 0::Int)
#226 := (>= #35 0::Int)
#219 := (<= #24 0::Int)
#326 := (or #219 #226)
#327 := (not #326)
#215 := (<= #35 0::Int)
#324 := (or #215 #219)
#325 := (not #324)
#330 := (or #325 #327)
#369 := (ite #330 #365 #368)
#362 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#370 := (ite #40 #362 #369)
#884 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #883) #370)
#373 := (forall (vars (?v0 Int) (?v1 Int)) #370)
#887 := (iff #373 #884)
#885 := (iff #370 #370)
#886 := [refl]: #885
#888 := [quant-intro #886]: #887
#333 := (ite #330 #47 #194)
#336 := (ite #40 0::Int #333)
#339 := (= #37 #336)
#342 := (forall (vars (?v0 Int) (?v1 Int)) #339)
#374 := (iff #342 #373)
#371 := (iff #339 #370)
#372 := [rewrite]: #371
#375 := [quant-intro #372]: #374
#227 := (not #226)
#220 := (not #219)
#230 := (and #220 #227)
#216 := (not #215)
#223 := (and #216 #220)
#233 := (or #223 #230)
#236 := (ite #233 #47 #194)
#239 := (ite #40 0::Int #236)
#242 := (= #37 #239)
#245 := (forall (vars (?v0 Int) (?v1 Int)) #242)
#343 := (iff #245 #342)
#340 := (iff #242 #339)
#337 := (= #239 #336)
#334 := (= #236 #333)
#331 := (iff #233 #330)
#328 := (iff #230 #327)
#329 := [rewrite]: #328
#309 := (iff #223 #325)
#310 := [rewrite]: #309
#332 := [monotonicity #310 #329]: #331
#335 := [monotonicity #332]: #334
#338 := [monotonicity #335]: #337
#341 := [monotonicity #338]: #340
#344 := [quant-intro #341]: #343
#305 := (~ #245 #245)
#318 := (~ #242 #242)
#319 := [refl]: #318
#306 := [nnf-pos #319]: #305
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (ite #46 #47 #50)
#52 := (ite #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#248 := (iff #54 #245)
#181 := (and #42 #44)
#184 := (or #43 #181)
#197 := (ite #184 #47 #194)
#175 := (= 0::Int #24)
#172 := (= 0::Int #35)
#178 := (or #172 #175)
#200 := (ite #178 0::Int #197)
#203 := (= #37 #200)
#206 := (forall (vars (?v0 Int) (?v1 Int)) #203)
#246 := (iff #206 #245)
#243 := (iff #203 #242)
#240 := (= #200 #239)
#237 := (= #197 #236)
#234 := (iff #184 #233)
#231 := (iff #181 #230)
#228 := (iff #44 #227)
#229 := [rewrite]: #228
#221 := (iff #42 #220)
#222 := [rewrite]: #221
#232 := [monotonicity #222 #229]: #231
#224 := (iff #43 #223)
#217 := (iff #41 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#235 := [monotonicity #225 #232]: #234
#238 := [monotonicity #235]: #237
#213 := (iff #178 #40)
#211 := (iff #175 #39)
#212 := [rewrite]: #211
#209 := (iff #172 #38)
#210 := [rewrite]: #209
#214 := [monotonicity #210 #212]: #213
#241 := [monotonicity #214 #238]: #240
#244 := [monotonicity #241]: #243
#247 := [quant-intro #244]: #246
#207 := (iff #54 #206)
#204 := (iff #53 #203)
#201 := (= #52 #200)
#198 := (= #51 #197)
#195 := (= #50 #194)
#192 := (= #49 #191)
#193 := [rewrite]: #192
#189 := (= #48 #188)
#190 := [rewrite]: #189
#196 := [monotonicity #190 #193]: #195
#185 := (iff #46 #184)
#182 := (iff #45 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#199 := [monotonicity #186 #196]: #198
#179 := (iff #40 #178)
#176 := (iff #39 #175)
#177 := [rewrite]: #176
#173 := (iff #38 #172)
#174 := [rewrite]: #173
#180 := [monotonicity #174 #177]: #179
#202 := [monotonicity #180 #199]: #201
#205 := [monotonicity #202]: #204
#208 := [quant-intro #205]: #207
#249 := [trans #208 #247]: #248
#171 := [asserted]: #54
#250 := [mp #171 #249]: #245
#320 := [mp~ #250 #306]: #245
#345 := [mp #320 #344]: #342
#376 := [mp #345 #375]: #373
#889 := [mp #376 #888]: #884
#731 := (not #884)
#737 := (or #731 #813)
#819 := (* -1::Int 1::Int)
#820 := (* -1::Int 0::Int)
#815 := (div #820 #819)
#816 := (* -1::Int #815)
#821 := (+ #13 #816)
#822 := (= #821 0::Int)
#817 := (div 0::Int 1::Int)
#823 := (* -1::Int #817)
#664 := (+ #13 #823)
#665 := (= #664 0::Int)
#841 := (>= 0::Int 0::Int)
#666 := (<= 1::Int 0::Int)
#808 := (or #666 #841)
#809 := (not #808)
#810 := (<= 0::Int 0::Int)
#811 := (or #810 #666)
#805 := (not #811)
#806 := (or #805 #809)
#812 := (ite #806 #665 #822)
#807 := (= 1::Int 0::Int)
#814 := (= 0::Int 0::Int)
#643 := (or #814 #807)
#645 := (ite #643 #813 #812)
#710 := (or #731 #645)
#712 := (iff #710 #737)
#716 := (iff #737 #737)
#717 := [rewrite]: #716
#735 := (iff #645 #813)
#1 := true
#728 := (ite true #813 #813)
#733 := (iff #728 #813)
#734 := [rewrite]: #733
#729 := (iff #645 #728)
#746 := (iff #812 #813)
#742 := (ite false #813 #813)
#745 := (iff #742 #813)
#740 := [rewrite]: #745
#743 := (iff #812 #742)
#739 := (iff #822 #813)
#760 := (= #821 #13)
#773 := (+ #13 0::Int)
#775 := (= #773 #13)
#761 := [rewrite]: #775
#759 := (= #821 #773)
#757 := (= #816 0::Int)
#768 := (= #820 0::Int)
#769 := [rewrite]: #768
#755 := (= #816 #820)
#753 := (= #815 0::Int)
#747 := (div 0::Int -1::Int)
#751 := (= #747 0::Int)
#752 := [rewrite]: #751
#748 := (= #815 #747)
#763 := (= #819 -1::Int)
#767 := [rewrite]: #763
#750 := [monotonicity #769 #767]: #748
#754 := [trans #750 #752]: #753
#756 := [monotonicity #754]: #755
#758 := [trans #756 #769]: #757
#749 := [monotonicity #758]: #759
#738 := [trans #749 #761]: #760
#741 := [monotonicity #738]: #739
#765 := (iff #665 #813)
#762 := (= #664 #13)
#774 := (= #664 #773)
#771 := (= #823 0::Int)
#777 := (= #823 #820)
#782 := (= #817 0::Int)
#783 := [rewrite]: #782
#784 := [monotonicity #783]: #777
#772 := [trans #784 #769]: #771
#770 := [monotonicity #772]: #774
#764 := [trans #770 #761]: #762
#766 := [monotonicity #764]: #765
#780 := (iff #806 false)
#788 := (or false false)
#786 := (iff #788 false)
#791 := [rewrite]: #786
#789 := (iff #806 #788)
#776 := (iff #809 false)
#489 := (not true)
#850 := (iff #489 false)
#836 := [rewrite]: #850
#787 := (iff #809 #489)
#798 := (iff #808 true)
#702 := (or false true)
#797 := (iff #702 true)
#794 := [rewrite]: #797
#703 := (iff #808 #702)
#848 := (iff #841 true)
#488 := [rewrite]: #848
#792 := (iff #666 false)
#793 := [rewrite]: #792
#704 := [monotonicity #793 #488]: #703
#785 := [trans #704 #794]: #798
#779 := [monotonicity #785]: #787
#778 := [trans #779 #836]: #776
#700 := (iff #805 false)
#699 := (iff #805 #489)
#696 := (iff #811 true)
#803 := (or true false)
#686 := (iff #803 true)
#687 := [rewrite]: #686
#796 := (iff #811 #803)
#795 := (iff #810 true)
#697 := [rewrite]: #795
#681 := [monotonicity #697 #793]: #796
#698 := [trans #681 #687]: #696
#692 := [monotonicity #698]: #699
#701 := [trans #692 #836]: #700
#790 := [monotonicity #701 #778]: #789
#781 := [trans #790 #791]: #780
#744 := [monotonicity #781 #766 #741]: #743
#732 := [trans #744 #740]: #746
#688 := (iff #643 true)
#801 := (iff #643 #803)
#800 := (iff #807 false)
#802 := [rewrite]: #800
#646 := (iff #814 true)
#799 := [rewrite]: #646
#804 := [monotonicity #799 #802]: #801
#647 := [trans #804 #687]: #688
#730 := [monotonicity #647 #732]: #729
#736 := [trans #730 #734]: #735
#605 := [monotonicity #736]: #712
#718 := [trans #605 #717]: #712
#711 := [quant-inst #10 #12]: #710
#723 := [mp #711 #718]: #737
#720 := [unit-resolution #723 #889]: #813
#721 := [monotonicity #720]: #16
#17 := (not #16)
#85 := [asserted]: #17
[unit-resolution #85 #721]: false
unsat
b427c6e1aa7e8efb75c28eb2c11cd0d7fd389271 307 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 1::Int
decl f4 :: S2
#8 := f4
#14 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 1::Int)
#12 := (f5 #11 1::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#766 := (= #12 1::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#883 := (pattern #37)
#23 := 0::Int
#187 := -1::Int
#191 := (* -1::Int #24)
#188 := (* -1::Int #35)
#194 := (div #188 #191)
#366 := (* -1::Int #194)
#367 := (+ #37 #366)
#368 := (= #367 0::Int)
#47 := (div #35 #24)
#363 := (* -1::Int #47)
#364 := (+ #37 #363)
#365 := (= #364 0::Int)
#226 := (>= #35 0::Int)
#219 := (<= #24 0::Int)
#326 := (or #219 #226)
#327 := (not #326)
#215 := (<= #35 0::Int)
#324 := (or #215 #219)
#325 := (not #324)
#330 := (or #325 #327)
#369 := (ite #330 #365 #368)
#362 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#370 := (ite #40 #362 #369)
#884 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #883) #370)
#373 := (forall (vars (?v0 Int) (?v1 Int)) #370)
#887 := (iff #373 #884)
#885 := (iff #370 #370)
#886 := [refl]: #885
#888 := [quant-intro #886]: #887
#333 := (ite #330 #47 #194)
#336 := (ite #40 0::Int #333)
#339 := (= #37 #336)
#342 := (forall (vars (?v0 Int) (?v1 Int)) #339)
#374 := (iff #342 #373)
#371 := (iff #339 #370)
#372 := [rewrite]: #371
#375 := [quant-intro #372]: #374
#227 := (not #226)
#220 := (not #219)
#230 := (and #220 #227)
#216 := (not #215)
#223 := (and #216 #220)
#233 := (or #223 #230)
#236 := (ite #233 #47 #194)
#239 := (ite #40 0::Int #236)
#242 := (= #37 #239)
#245 := (forall (vars (?v0 Int) (?v1 Int)) #242)
#343 := (iff #245 #342)
#340 := (iff #242 #339)
#337 := (= #239 #336)
#334 := (= #236 #333)
#331 := (iff #233 #330)
#328 := (iff #230 #327)
#329 := [rewrite]: #328
#309 := (iff #223 #325)
#310 := [rewrite]: #309
#332 := [monotonicity #310 #329]: #331
#335 := [monotonicity #332]: #334
#338 := [monotonicity #335]: #337
#341 := [monotonicity #338]: #340
#344 := [quant-intro #341]: #343
#305 := (~ #245 #245)
#318 := (~ #242 #242)
#319 := [refl]: #318
#306 := [nnf-pos #319]: #305
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (ite #46 #47 #50)
#52 := (ite #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#248 := (iff #54 #245)
#181 := (and #42 #44)
#184 := (or #43 #181)
#197 := (ite #184 #47 #194)
#175 := (= 0::Int #24)
#172 := (= 0::Int #35)
#178 := (or #172 #175)
#200 := (ite #178 0::Int #197)
#203 := (= #37 #200)
#206 := (forall (vars (?v0 Int) (?v1 Int)) #203)
#246 := (iff #206 #245)
#243 := (iff #203 #242)
#240 := (= #200 #239)
#237 := (= #197 #236)
#234 := (iff #184 #233)
#231 := (iff #181 #230)
#228 := (iff #44 #227)
#229 := [rewrite]: #228
#221 := (iff #42 #220)
#222 := [rewrite]: #221
#232 := [monotonicity #222 #229]: #231
#224 := (iff #43 #223)
#217 := (iff #41 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#235 := [monotonicity #225 #232]: #234
#238 := [monotonicity #235]: #237
#213 := (iff #178 #40)
#211 := (iff #175 #39)
#212 := [rewrite]: #211
#209 := (iff #172 #38)
#210 := [rewrite]: #209
#214 := [monotonicity #210 #212]: #213
#241 := [monotonicity #214 #238]: #240
#244 := [monotonicity #241]: #243
#247 := [quant-intro #244]: #246
#207 := (iff #54 #206)
#204 := (iff #53 #203)
#201 := (= #52 #200)
#198 := (= #51 #197)
#195 := (= #50 #194)
#192 := (= #49 #191)
#193 := [rewrite]: #192
#189 := (= #48 #188)
#190 := [rewrite]: #189
#196 := [monotonicity #190 #193]: #195
#185 := (iff #46 #184)
#182 := (iff #45 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#199 := [monotonicity #186 #196]: #198
#179 := (iff #40 #178)
#176 := (iff #39 #175)
#177 := [rewrite]: #176
#173 := (iff #38 #172)
#174 := [rewrite]: #173
#180 := [monotonicity #174 #177]: #179
#202 := [monotonicity #180 #199]: #201
#205 := [monotonicity #202]: #204
#208 := [quant-intro #205]: #207
#249 := [trans #208 #247]: #248
#171 := [asserted]: #54
#250 := [mp #171 #249]: #245
#320 := [mp~ #250 #306]: #245
#345 := [mp #320 #344]: #342
#376 := [mp #345 #375]: #373
#889 := [mp #376 #888]: #884
#712 := (not #884)
#605 := (or #712 #766)
#820 := (* -1::Int 1::Int)
#815 := (div #820 #820)
#816 := (* -1::Int #815)
#821 := (+ #12 #816)
#822 := (= #821 0::Int)
#817 := (div 1::Int 1::Int)
#823 := (* -1::Int #817)
#664 := (+ #12 #823)
#665 := (= #664 0::Int)
#841 := (>= 1::Int 0::Int)
#666 := (<= 1::Int 0::Int)
#808 := (or #666 #841)
#809 := (not #808)
#810 := (or #666 #666)
#811 := (not #810)
#805 := (or #811 #809)
#806 := (ite #805 #665 #822)
#812 := (= #12 0::Int)
#813 := (= 1::Int 0::Int)
#807 := (or #813 #813)
#814 := (ite #807 #812 #806)
#716 := (or #712 #814)
#718 := (iff #716 #605)
#719 := (iff #605 #605)
#720 := [rewrite]: #719
#710 := (iff #814 #766)
#734 := (ite false #812 #766)
#731 := (iff #734 #766)
#737 := [rewrite]: #731
#735 := (iff #814 #734)
#730 := (iff #806 #766)
#1 := true
#740 := (ite true #766 #766)
#728 := (iff #740 #766)
#729 := [rewrite]: #728
#746 := (iff #806 #740)
#744 := (iff #822 #766)
#773 := (+ -1::Int #12)
#762 := (= #773 0::Int)
#763 := (iff #762 #766)
#767 := [rewrite]: #763
#742 := (iff #822 #762)
#739 := (= #821 #773)
#769 := (+ #12 -1::Int)
#774 := (= #769 #773)
#770 := [rewrite]: #774
#760 := (= #821 #769)
#759 := (= #816 -1::Int)
#783 := (= #820 -1::Int)
#777 := [rewrite]: #783
#757 := (= #816 #820)
#755 := (= #815 1::Int)
#750 := (div -1::Int -1::Int)
#753 := (= #750 1::Int)
#754 := [rewrite]: #753
#751 := (= #815 #750)
#752 := [monotonicity #777 #777]: #751
#756 := [trans #752 #754]: #755
#758 := [monotonicity #756]: #757
#749 := [trans #758 #777]: #759
#738 := [monotonicity #749]: #760
#741 := [trans #738 #770]: #739
#743 := [monotonicity #741]: #742
#745 := [trans #743 #767]: #744
#747 := (iff #665 #766)
#764 := (iff #665 #762)
#775 := (= #664 #773)
#771 := (= #664 #769)
#784 := (= #823 -1::Int)
#781 := (= #823 #820)
#791 := (= #817 1::Int)
#780 := [rewrite]: #791
#782 := [monotonicity #780]: #781
#768 := [trans #782 #777]: #784
#772 := [monotonicity #768]: #771
#761 := [trans #772 #770]: #775
#765 := [monotonicity #761]: #764
#748 := [trans #765 #767]: #747
#790 := (iff #805 true)
#779 := (or true false)
#788 := (iff #779 true)
#789 := [rewrite]: #788
#776 := (iff #805 #779)
#785 := (iff #809 false)
#489 := (not true)
#850 := (iff #489 false)
#836 := [rewrite]: #850
#794 := (iff #809 #489)
#704 := (iff #808 true)
#692 := (or false true)
#702 := (iff #692 true)
#703 := [rewrite]: #702
#700 := (iff #808 #692)
#848 := (iff #841 true)
#488 := [rewrite]: #848
#686 := (iff #666 false)
#687 := [rewrite]: #686
#701 := [monotonicity #687 #488]: #700
#797 := [trans #701 #703]: #704
#798 := [monotonicity #797]: #794
#787 := [trans #798 #836]: #785
#698 := (iff #811 true)
#792 := (not false)
#681 := (iff #792 true)
#696 := [rewrite]: #681
#793 := (iff #811 #792)
#795 := (iff #810 false)
#646 := (or false false)
#802 := (iff #646 false)
#803 := [rewrite]: #802
#688 := (iff #810 #646)
#647 := [monotonicity #687 #687]: #688
#697 := [trans #647 #803]: #795
#796 := [monotonicity #697]: #793
#699 := [trans #796 #696]: #698
#778 := [monotonicity #699 #787]: #776
#786 := [trans #778 #789]: #790
#732 := [monotonicity #786 #748 #745]: #746
#733 := [trans #732 #729]: #730
#801 := (iff #807 false)
#799 := (iff #807 #646)
#643 := (iff #813 false)
#645 := [rewrite]: #643
#800 := [monotonicity #645 #645]: #799
#804 := [trans #800 #803]: #801
#736 := [monotonicity #804 #733]: #735
#711 := [trans #736 #737]: #710
#723 := [monotonicity #711]: #718
#721 := [trans #723 #720]: #718
#717 := [quant-inst #10 #10]: #716
#724 := [mp #717 #721]: #605
#722 := [unit-resolution #724 #889]: #766
#727 := [monotonicity #722]: #15
#16 := (not #15)
#85 := [asserted]: #16
[unit-resolution #85 #727]: false
unsat
0a93bcd756c41eafe5e87939721bc016585791fd 318 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 3::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 3::Int)
decl f5 :: (-> S4 Int Int)
#12 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 3::Int)
#13 := (f5 #11 1::Int)
#14 := (f3 f4 #13)
#16 := (= #14 #15)
#754 := (= #13 3::Int)
#25 := (:var 0 Int)
#36 := (:var 1 Int)
#37 := (f6 f7 #36)
#38 := (f5 #37 #25)
#884 := (pattern #38)
#24 := 0::Int
#188 := -1::Int
#192 := (* -1::Int #25)
#189 := (* -1::Int #36)
#195 := (div #189 #192)
#367 := (* -1::Int #195)
#368 := (+ #38 #367)
#369 := (= #368 0::Int)
#48 := (div #36 #25)
#364 := (* -1::Int #48)
#365 := (+ #38 #364)
#366 := (= #365 0::Int)
#227 := (>= #36 0::Int)
#220 := (<= #25 0::Int)
#327 := (or #220 #227)
#328 := (not #327)
#216 := (<= #36 0::Int)
#325 := (or #216 #220)
#326 := (not #325)
#331 := (or #326 #328)
#370 := (ite #331 #366 #369)
#363 := (= #38 0::Int)
#40 := (= #25 0::Int)
#39 := (= #36 0::Int)
#41 := (or #39 #40)
#371 := (ite #41 #363 #370)
#885 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #884) #371)
#374 := (forall (vars (?v0 Int) (?v1 Int)) #371)
#888 := (iff #374 #885)
#886 := (iff #371 #371)
#887 := [refl]: #886
#889 := [quant-intro #887]: #888
#334 := (ite #331 #48 #195)
#337 := (ite #41 0::Int #334)
#340 := (= #38 #337)
#343 := (forall (vars (?v0 Int) (?v1 Int)) #340)
#375 := (iff #343 #374)
#372 := (iff #340 #371)
#373 := [rewrite]: #372
#376 := [quant-intro #373]: #375
#228 := (not #227)
#221 := (not #220)
#231 := (and #221 #228)
#217 := (not #216)
#224 := (and #217 #221)
#234 := (or #224 #231)
#237 := (ite #234 #48 #195)
#240 := (ite #41 0::Int #237)
#243 := (= #38 #240)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#344 := (iff #246 #343)
#341 := (iff #243 #340)
#338 := (= #240 #337)
#335 := (= #237 #334)
#332 := (iff #234 #331)
#329 := (iff #231 #328)
#330 := [rewrite]: #329
#310 := (iff #224 #326)
#311 := [rewrite]: #310
#333 := [monotonicity #311 #330]: #332
#336 := [monotonicity #333]: #335
#339 := [monotonicity #336]: #338
#342 := [monotonicity #339]: #341
#345 := [quant-intro #342]: #344
#306 := (~ #246 #246)
#319 := (~ #243 #243)
#320 := [refl]: #319
#307 := [nnf-pos #320]: #306
#50 := (- #25)
#49 := (- #36)
#51 := (div #49 #50)
#43 := (< 0::Int #25)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#52 := (ite #47 #48 #51)
#53 := (ite #41 0::Int #52)
#54 := (= #38 #53)
#55 := (forall (vars (?v0 Int) (?v1 Int)) #54)
#249 := (iff #55 #246)
#182 := (and #43 #45)
#185 := (or #44 #182)
#198 := (ite #185 #48 #195)
#176 := (= 0::Int #25)
#173 := (= 0::Int #36)
#179 := (or #173 #176)
#201 := (ite #179 0::Int #198)
#204 := (= #38 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#247 := (iff #207 #246)
#244 := (iff #204 #243)
#241 := (= #201 #240)
#238 := (= #198 #237)
#235 := (iff #185 #234)
#232 := (iff #182 #231)
#229 := (iff #45 #228)
#230 := [rewrite]: #229
#222 := (iff #43 #221)
#223 := [rewrite]: #222
#233 := [monotonicity #223 #230]: #232
#225 := (iff #44 #224)
#218 := (iff #42 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#236 := [monotonicity #226 #233]: #235
#239 := [monotonicity #236]: #238
#214 := (iff #179 #41)
#212 := (iff #176 #40)
#213 := [rewrite]: #212
#210 := (iff #173 #39)
#211 := [rewrite]: #210
#215 := [monotonicity #211 #213]: #214
#242 := [monotonicity #215 #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#208 := (iff #55 #207)
#205 := (iff #54 #204)
#202 := (= #53 #201)
#199 := (= #52 #198)
#196 := (= #51 #195)
#193 := (= #50 #192)
#194 := [rewrite]: #193
#190 := (= #49 #189)
#191 := [rewrite]: #190
#197 := [monotonicity #191 #194]: #196
#186 := (iff #47 #185)
#183 := (iff #46 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#200 := [monotonicity #187 #197]: #199
#180 := (iff #41 #179)
#177 := (iff #40 #176)
#178 := [rewrite]: #177
#174 := (iff #39 #173)
#175 := [rewrite]: #174
#181 := [monotonicity #175 #178]: #180
#203 := [monotonicity #181 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#250 := [trans #209 #248]: #249
#172 := [asserted]: #55
#251 := [mp #172 #250]: #246
#321 := [mp~ #251 #307]: #246
#346 := [mp #321 #345]: #343
#377 := [mp #346 #376]: #374
#890 := [mp #377 #889]: #885
#726 := (not #885)
#727 := (or #726 #754)
#821 := (* -1::Int 1::Int)
#816 := (* -1::Int 3::Int)
#817 := (div #816 #821)
#822 := (* -1::Int #817)
#823 := (+ #13 #822)
#818 := (= #823 0::Int)
#824 := (div 3::Int 1::Int)
#665 := (* -1::Int #824)
#666 := (+ #13 #665)
#667 := (= #666 0::Int)
#842 := (>= 3::Int 0::Int)
#809 := (<= 1::Int 0::Int)
#810 := (or #809 #842)
#811 := (not #810)
#812 := (<= 3::Int 0::Int)
#806 := (or #812 #809)
#807 := (not #806)
#813 := (or #807 #811)
#814 := (ite #813 #667 #818)
#808 := (= #13 0::Int)
#815 := (= 1::Int 0::Int)
#644 := (= 3::Int 0::Int)
#646 := (or #644 #815)
#647 := (ite #646 #808 #814)
#723 := (or #726 #647)
#708 := (iff #723 #727)
#709 := (iff #727 #727)
#690 := [rewrite]: #709
#722 := (iff #647 #754)
#718 := (ite false #808 #754)
#720 := (iff #718 #754)
#721 := [rewrite]: #720
#719 := (iff #647 #718)
#606 := (iff #814 #754)
#1 := true
#732 := (ite true #754 #754)
#712 := (iff #732 #754)
#713 := [rewrite]: #712
#738 := (iff #814 #732)
#736 := (iff #818 #754)
#774 := -3::Int
#767 := (+ -3::Int #13)
#751 := (= #767 0::Int)
#755 := (iff #751 #754)
#756 := [rewrite]: #755
#734 := (iff #818 #751)
#730 := (= #823 #767)
#763 := (+ #13 -3::Int)
#764 := (= #763 #767)
#768 := [rewrite]: #764
#733 := (= #823 #763)
#741 := (= #822 -3::Int)
#775 := (= #816 -3::Int)
#771 := [rewrite]: #775
#745 := (= #822 #816)
#743 := (= #817 3::Int)
#750 := (div -3::Int -1::Int)
#740 := (= #750 3::Int)
#742 := [rewrite]: #740
#761 := (= #817 #750)
#759 := (= #821 -1::Int)
#760 := [rewrite]: #759
#739 := [monotonicity #771 #760]: #761
#744 := [trans #739 #742]: #743
#746 := [monotonicity #744]: #745
#747 := [trans #746 #771]: #741
#729 := [monotonicity #747]: #733
#731 := [trans #729 #768]: #730
#735 := [monotonicity #731]: #734
#737 := [trans #735 #756]: #736
#757 := (iff #667 #754)
#752 := (iff #667 #751)
#748 := (= #666 #767)
#765 := (= #666 #763)
#776 := (= #665 -3::Int)
#772 := (= #665 #816)
#769 := (= #824 3::Int)
#770 := [rewrite]: #769
#773 := [monotonicity #770]: #772
#762 := [trans #773 #771]: #776
#766 := [monotonicity #762]: #765
#749 := [trans #766 #768]: #748
#753 := [monotonicity #749]: #752
#758 := [trans #753 #756]: #757
#778 := (iff #813 true)
#792 := (or true false)
#783 := (iff #792 true)
#784 := [rewrite]: #783
#781 := (iff #813 #792)
#791 := (iff #811 false)
#490 := (not true)
#851 := (iff #490 false)
#837 := [rewrite]: #851
#789 := (iff #811 #490)
#777 := (iff #810 true)
#795 := (or false true)
#788 := (iff #795 true)
#780 := [rewrite]: #788
#799 := (iff #810 #795)
#849 := (iff #842 true)
#489 := [rewrite]: #849
#794 := (iff #809 false)
#797 := [rewrite]: #794
#786 := [monotonicity #797 #489]: #799
#779 := [trans #786 #780]: #777
#790 := [monotonicity #779]: #789
#787 := [trans #790 #837]: #791
#705 := (iff #807 true)
#693 := (not false)
#703 := (iff #693 true)
#704 := [rewrite]: #703
#701 := (iff #807 #693)
#699 := (iff #806 false)
#802 := (or false false)
#688 := (iff #802 false)
#689 := [rewrite]: #688
#682 := (iff #806 #802)
#698 := (iff #812 false)
#793 := [rewrite]: #698
#697 := [monotonicity #793 #797]: #682
#700 := [trans #697 #689]: #699
#702 := [monotonicity #700]: #701
#798 := [trans #702 #704]: #705
#782 := [monotonicity #798 #787]: #781
#785 := [trans #782 #784]: #778
#711 := [monotonicity #785 #758 #737]: #738
#717 := [trans #711 #713]: #606
#648 := (iff #646 false)
#805 := (iff #646 #802)
#803 := (iff #815 false)
#804 := [rewrite]: #803
#800 := (iff #644 false)
#801 := [rewrite]: #800
#687 := [monotonicity #801 #804]: #805
#796 := [trans #687 #689]: #648
#724 := [monotonicity #796 #717]: #719
#725 := [trans #724 #721]: #722
#654 := [monotonicity #725]: #708
#714 := [trans #654 #690]: #708
#728 := [quant-inst #10 #12]: #723
#715 := [mp #728 #714]: #727
#684 := [unit-resolution #715 #890]: #754
#691 := [monotonicity #684]: #16
#17 := (not #16)
#86 := [asserted]: #17
[unit-resolution #86 #691]: false
unsat
a120f065741062bd8358dab2e8b4f52695deae0b 386 0
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#14 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#11 := f10
decl f9 :: S6
#10 := f9
#12 := (f8 f9 f10)
decl f7 :: S5
#9 := f7
#13 := (f6 f7 #12)
#15 := (f5 #13 1::Int)
decl f4 :: S2
#8 := f4
#16 := (f3 f4 #15)
#87 := (= f10 #16)
#458 := (f3 f4 #12)
#676 := (= #458 #16)
#670 := (= #16 #458)
#738 := (= #15 #12)
#852 := (div #12 1::Int)
#667 := (= #852 #12)
#605 := (= #12 #852)
#24 := 0::Int
#195 := -1::Int
#847 := (* -1::Int #852)
#639 := (+ #12 #847)
#645 := (<= #639 0::Int)
#638 := (= #639 0::Int)
#1 := true
#84 := [true-axiom]: true
#595 := (or false #638)
#596 := [th-lemma arith]: #595
#597 := [unit-resolution #596 #84]: #638
#598 := (not #638)
#599 := (or #598 #645)
#600 := [th-lemma arith triangle-eq]: #599
#601 := [unit-resolution #600 #597]: #645
#488 := (>= #639 0::Int)
#602 := (or #598 #488)
#603 := [th-lemma arith triangle-eq]: #602
#604 := [unit-resolution #603 #597]: #488
#594 := [th-lemma arith eq-propagate 1 1 #604 #601]: #605
#585 := [symm #594]: #667
#611 := (= #15 #852)
#853 := (+ #15 #847)
#797 := (<= #853 0::Int)
#491 := (= #853 0::Int)
#569 := (= #12 0::Int)
#783 := (not #569)
#722 := (= 0::Int #12)
#661 := [hypothesis]: #569
#737 := [symm #661]: #722
#567 := (= #15 0::Int)
#716 := (or #783 #567)
#521 := (* -1::Int #12)
#651 := (div #521 -1::Int)
#807 := (* -1::Int #651)
#811 := (+ #15 #807)
#694 := (= #811 0::Int)
#857 := (<= #12 0::Int)
#837 := (not #857)
#854 := (>= #12 0::Int)
#672 := (not #854)
#819 := (or #672 #837)
#655 := (ite #819 #491 #694)
#800 := (ite #569 #567 #655)
#25 := (:var 0 Int)
#36 := (:var 1 Int)
#37 := (f6 f7 #36)
#38 := (f5 #37 #25)
#891 := (pattern #38)
#199 := (* -1::Int #25)
#196 := (* -1::Int #36)
#202 := (div #196 #199)
#374 := (* -1::Int #202)
#375 := (+ #38 #374)
#376 := (= #375 0::Int)
#48 := (div #36 #25)
#371 := (* -1::Int #48)
#372 := (+ #38 #371)
#373 := (= #372 0::Int)
#234 := (>= #36 0::Int)
#227 := (<= #25 0::Int)
#334 := (or #227 #234)
#335 := (not #334)
#223 := (<= #36 0::Int)
#332 := (or #223 #227)
#333 := (not #332)
#338 := (or #333 #335)
#377 := (ite #338 #373 #376)
#370 := (= #38 0::Int)
#40 := (= #25 0::Int)
#39 := (= #36 0::Int)
#41 := (or #39 #40)
#378 := (ite #41 #370 #377)
#892 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #891) #378)
#381 := (forall (vars (?v0 Int) (?v1 Int)) #378)
#895 := (iff #381 #892)
#893 := (iff #378 #378)
#894 := [refl]: #893
#896 := [quant-intro #894]: #895
#341 := (ite #338 #48 #202)
#344 := (ite #41 0::Int #341)
#347 := (= #38 #344)
#350 := (forall (vars (?v0 Int) (?v1 Int)) #347)
#382 := (iff #350 #381)
#379 := (iff #347 #378)
#380 := [rewrite]: #379
#383 := [quant-intro #380]: #382
#235 := (not #234)
#228 := (not #227)
#238 := (and #228 #235)
#224 := (not #223)
#231 := (and #224 #228)
#241 := (or #231 #238)
#244 := (ite #241 #48 #202)
#247 := (ite #41 0::Int #244)
#250 := (= #38 #247)
#253 := (forall (vars (?v0 Int) (?v1 Int)) #250)
#351 := (iff #253 #350)
#348 := (iff #250 #347)
#345 := (= #247 #344)
#342 := (= #244 #341)
#339 := (iff #241 #338)
#336 := (iff #238 #335)
#337 := [rewrite]: #336
#317 := (iff #231 #333)
#318 := [rewrite]: #317
#340 := [monotonicity #318 #337]: #339
#343 := [monotonicity #340]: #342
#346 := [monotonicity #343]: #345
#349 := [monotonicity #346]: #348
#352 := [quant-intro #349]: #351
#313 := (~ #253 #253)
#326 := (~ #250 #250)
#327 := [refl]: #326
#314 := [nnf-pos #327]: #313
#50 := (- #25)
#49 := (- #36)
#51 := (div #49 #50)
#43 := (< 0::Int #25)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#52 := (ite #47 #48 #51)
#53 := (ite #41 0::Int #52)
#54 := (= #38 #53)
#55 := (forall (vars (?v0 Int) (?v1 Int)) #54)
#256 := (iff #55 #253)
#189 := (and #43 #45)
#192 := (or #44 #189)
#205 := (ite #192 #48 #202)
#183 := (= 0::Int #25)
#180 := (= 0::Int #36)
#186 := (or #180 #183)
#208 := (ite #186 0::Int #205)
#211 := (= #38 #208)
#214 := (forall (vars (?v0 Int) (?v1 Int)) #211)
#254 := (iff #214 #253)
#251 := (iff #211 #250)
#248 := (= #208 #247)
#245 := (= #205 #244)
#242 := (iff #192 #241)
#239 := (iff #189 #238)
#236 := (iff #45 #235)
#237 := [rewrite]: #236
#229 := (iff #43 #228)
#230 := [rewrite]: #229
#240 := [monotonicity #230 #237]: #239
#232 := (iff #44 #231)
#225 := (iff #42 #224)
#226 := [rewrite]: #225
#233 := [monotonicity #226 #230]: #232
#243 := [monotonicity #233 #240]: #242
#246 := [monotonicity #243]: #245
#221 := (iff #186 #41)
#219 := (iff #183 #40)
#220 := [rewrite]: #219
#217 := (iff #180 #39)
#218 := [rewrite]: #217
#222 := [monotonicity #218 #220]: #221
#249 := [monotonicity #222 #246]: #248
#252 := [monotonicity #249]: #251
#255 := [quant-intro #252]: #254
#215 := (iff #55 #214)
#212 := (iff #54 #211)
#209 := (= #53 #208)
#206 := (= #52 #205)
#203 := (= #51 #202)
#200 := (= #50 #199)
#201 := [rewrite]: #200
#197 := (= #49 #196)
#198 := [rewrite]: #197
#204 := [monotonicity #198 #201]: #203
#193 := (iff #47 #192)
#190 := (iff #46 #189)
#191 := [rewrite]: #190
#194 := [monotonicity #191]: #193
#207 := [monotonicity #194 #204]: #206
#187 := (iff #41 #186)
#184 := (iff #40 #183)
#185 := [rewrite]: #184
#181 := (iff #39 #180)
#182 := [rewrite]: #181
#188 := [monotonicity #182 #185]: #187
#210 := [monotonicity #188 #207]: #209
#213 := [monotonicity #210]: #212
#216 := [quant-intro #213]: #215
#257 := [trans #216 #255]: #256
#179 := [asserted]: #55
#258 := [mp #179 #257]: #253
#328 := [mp~ #258 #314]: #253
#353 := [mp #328 #352]: #350
#384 := [mp #353 #383]: #381
#897 := [mp #384 #896]: #892
#689 := (not #892)
#704 := (or #689 #800)
#861 := (* -1::Int 1::Int)
#848 := (div #521 #861)
#849 := (* -1::Int #848)
#850 := (+ #15 #849)
#851 := (= #850 0::Int)
#856 := (<= 1::Int 0::Int)
#496 := (or #856 #854)
#497 := (not #496)
#855 := (or #857 #856)
#858 := (not #855)
#844 := (or #858 #497)
#845 := (ite #844 #491 #851)
#568 := (= 1::Int 0::Int)
#570 := (or #569 #568)
#464 := (ite #570 #567 #845)
#706 := (or #689 #464)
#700 := (iff #706 #704)
#709 := (iff #704 #704)
#710 := [rewrite]: #709
#801 := (iff #464 #800)
#803 := (iff #845 #655)
#695 := (iff #851 #694)
#809 := (= #850 #811)
#808 := (= #849 #807)
#653 := (= #848 #651)
#815 := (= #861 -1::Int)
#822 := [rewrite]: #815
#654 := [monotonicity #822]: #653
#810 := [monotonicity #654]: #808
#812 := [monotonicity #810]: #809
#696 := [monotonicity #812]: #695
#820 := (iff #844 #819)
#816 := (or #837 #672)
#813 := (iff #816 #819)
#814 := [rewrite]: #813
#817 := (iff #844 #816)
#673 := (iff #497 #672)
#825 := (iff #496 #854)
#828 := (or false #854)
#829 := (iff #828 #854)
#830 := [rewrite]: #829
#823 := (iff #496 #828)
#554 := (iff #856 false)
#555 := [rewrite]: #554
#824 := [monotonicity #555]: #823
#831 := [trans #824 #830]: #825
#674 := [monotonicity #831]: #673
#826 := (iff #858 #837)
#836 := (iff #855 #857)
#556 := (or #857 false)
#550 := (iff #556 #857)
#832 := [rewrite]: #550
#834 := (iff #855 #556)
#835 := [monotonicity #555]: #834
#833 := [trans #835 #832]: #836
#827 := [monotonicity #833]: #826
#818 := [monotonicity #827 #674]: #817
#821 := [trans #818 #814]: #820
#705 := [monotonicity #821 #696]: #803
#843 := (iff #570 #569)
#563 := (or #569 false)
#842 := (iff #563 #569)
#839 := [rewrite]: #842
#564 := (iff #570 #563)
#840 := (iff #568 false)
#841 := [rewrite]: #840
#838 := [monotonicity #841]: #564
#553 := [trans #838 #839]: #843
#804 := [monotonicity #553 #705]: #801
#708 := [monotonicity #804]: #700
#711 := [trans #708 #710]: #700
#707 := [quant-inst #12 #14]: #706
#712 := [mp #707 #711]: #704
#691 := [unit-resolution #712 #897]: #800
#778 := (not #800)
#769 := (or #778 #783 #567)
#770 := [def-axiom]: #769
#697 := [unit-resolution #770 #691]: #716
#721 := [unit-resolution #697 #661]: #567
#714 := [trans #721 #737]: #738
#675 := [monotonicity #714]: #670
#677 := [symm #675]: #676
#542 := (= f10 #458)
#19 := (:var 0 S3)
#20 := (f8 f9 #19)
#871 := (pattern #20)
#21 := (f3 f4 #20)
#94 := (= #19 #21)
#872 := (forall (vars (?v0 S3)) (:pat #871) #94)
#98 := (forall (vars (?v0 S3)) #94)
#875 := (iff #98 #872)
#873 := (iff #94 #94)
#874 := [refl]: #873
#876 := [quant-intro #874]: #875
#321 := (~ #98 #98)
#319 := (~ #94 #94)
#320 := [refl]: #319
#322 := [nnf-pos #320]: #321
#22 := (= #21 #19)
#23 := (forall (vars (?v0 S3)) #22)
#99 := (iff #23 #98)
#96 := (iff #22 #94)
#97 := [rewrite]: #96
#100 := [quant-intro #97]: #99
#93 := [asserted]: #23
#103 := [mp #93 #100]: #98
#307 := [mp~ #103 #322]: #98
#877 := [mp #307 #876]: #872
#535 := (not #872)
#546 := (or #535 #542)
#547 := [quant-inst #11]: #546
#669 := [unit-resolution #547 #877]: #542
#678 := [trans #669 #677]: #87
#90 := (not #87)
#17 := (= #16 f10)
#18 := (not #17)
#91 := (iff #18 #90)
#88 := (iff #17 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#86 := [asserted]: #18
#95 := [mp #86 #92]: #90
#679 := [unit-resolution #95 #678]: false
#680 := [lemma #679]: #783
#713 := (or #569 #491)
#787 := (not #819)
#776 := (not #491)
#717 := [hypothesis]: #776
#723 := [hypothesis]: #783
#698 := (or #569 #655)
#772 := (or #778 #569 #655)
#773 := [def-axiom]: #772
#657 := [unit-resolution #773 #691]: #698
#688 := [unit-resolution #657 #723]: #655
#789 := (not #655)
#790 := (or #789 #787 #491)
#791 := [def-axiom]: #790
#690 := [unit-resolution #791 #688 #717]: #787
#793 := (or #819 #857)
#795 := [def-axiom]: #793
#692 := [unit-resolution #795 #690]: #857
#802 := (or #819 #854)
#806 := [def-axiom]: #802
#699 := [unit-resolution #806 #690]: #854
#701 := (or #569 #837 #672)
#702 := [th-lemma arith triangle-eq]: #701
#703 := [unit-resolution #702 #723 #699 #692]: false
#693 := [lemma #703]: #713
#617 := [unit-resolution #693 #680]: #491
#620 := (or #776 #797)
#621 := [th-lemma arith triangle-eq]: #620
#607 := [unit-resolution #621 #617]: #797
#798 := (>= #853 0::Int)
#609 := (or #776 #798)
#610 := [th-lemma arith triangle-eq]: #609
#608 := [unit-resolution #610 #617]: #798
#593 := [th-lemma arith eq-propagate 1 1 #608 #607]: #611
#586 := [trans #593 #585]: #738
#587 := [monotonicity #586]: #670
#588 := [symm #587]: #676
#589 := [trans #669 #588]: #87
[unit-resolution #95 #589]: false
unsat
fa7182dc645244698a32bbbaa9910ba3ddf6ee99 305 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#12 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 0::Int)
#13 := (f5 #11 3::Int)
#14 := (f3 f4 #13)
#16 := (= #14 #15)
#813 := (= #13 0::Int)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f6 f7 #35)
#37 := (f5 #36 #24)
#884 := (pattern #37)
#187 := -1::Int
#191 := (* -1::Int #24)
#188 := (* -1::Int #35)
#194 := (div #188 #191)
#366 := (* -1::Int #194)
#367 := (+ #37 #366)
#368 := (= #367 0::Int)
#47 := (div #35 #24)
#363 := (* -1::Int #47)
#364 := (+ #37 #363)
#365 := (= #364 0::Int)
#226 := (>= #35 0::Int)
#219 := (<= #24 0::Int)
#326 := (or #219 #226)
#327 := (not #326)
#215 := (<= #35 0::Int)
#324 := (or #215 #219)
#325 := (not #324)
#330 := (or #325 #327)
#369 := (ite #330 #365 #368)
#362 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#370 := (ite #40 #362 #369)
#885 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #884) #370)
#373 := (forall (vars (?v0 Int) (?v1 Int)) #370)
#888 := (iff #373 #885)
#886 := (iff #370 #370)
#887 := [refl]: #886
#889 := [quant-intro #887]: #888
#333 := (ite #330 #47 #194)
#336 := (ite #40 0::Int #333)
#339 := (= #37 #336)
#342 := (forall (vars (?v0 Int) (?v1 Int)) #339)
#374 := (iff #342 #373)
#371 := (iff #339 #370)
#372 := [rewrite]: #371
#375 := [quant-intro #372]: #374
#227 := (not #226)
#220 := (not #219)
#230 := (and #220 #227)
#216 := (not #215)
#223 := (and #216 #220)
#233 := (or #223 #230)
#236 := (ite #233 #47 #194)
#239 := (ite #40 0::Int #236)
#242 := (= #37 #239)
#245 := (forall (vars (?v0 Int) (?v1 Int)) #242)
#343 := (iff #245 #342)
#340 := (iff #242 #339)
#337 := (= #239 #336)
#334 := (= #236 #333)
#331 := (iff #233 #330)
#328 := (iff #230 #327)
#329 := [rewrite]: #328
#309 := (iff #223 #325)
#310 := [rewrite]: #309
#332 := [monotonicity #310 #329]: #331
#335 := [monotonicity #332]: #334
#338 := [monotonicity #335]: #337
#341 := [monotonicity #338]: #340
#344 := [quant-intro #341]: #343
#305 := (~ #245 #245)
#318 := (~ #242 #242)
#319 := [refl]: #318
#306 := [nnf-pos #319]: #305
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (ite #46 #47 #50)
#52 := (ite #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#248 := (iff #54 #245)
#181 := (and #42 #44)
#184 := (or #43 #181)
#197 := (ite #184 #47 #194)
#175 := (= 0::Int #24)
#172 := (= 0::Int #35)
#178 := (or #172 #175)
#200 := (ite #178 0::Int #197)
#203 := (= #37 #200)
#206 := (forall (vars (?v0 Int) (?v1 Int)) #203)
#246 := (iff #206 #245)
#243 := (iff #203 #242)
#240 := (= #200 #239)
#237 := (= #197 #236)
#234 := (iff #184 #233)
#231 := (iff #181 #230)
#228 := (iff #44 #227)
#229 := [rewrite]: #228
#221 := (iff #42 #220)
#222 := [rewrite]: #221
#232 := [monotonicity #222 #229]: #231
#224 := (iff #43 #223)
#217 := (iff #41 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#235 := [monotonicity #225 #232]: #234
#238 := [monotonicity #235]: #237
#213 := (iff #178 #40)
#211 := (iff #175 #39)
#212 := [rewrite]: #211
#209 := (iff #172 #38)
#210 := [rewrite]: #209
#214 := [monotonicity #210 #212]: #213
#241 := [monotonicity #214 #238]: #240
#244 := [monotonicity #241]: #243
#247 := [quant-intro #244]: #246
#207 := (iff #54 #206)
#204 := (iff #53 #203)
#201 := (= #52 #200)
#198 := (= #51 #197)
#195 := (= #50 #194)
#192 := (= #49 #191)
#193 := [rewrite]: #192
#189 := (= #48 #188)
#190 := [rewrite]: #189
#196 := [monotonicity #190 #193]: #195
#185 := (iff #46 #184)
#182 := (iff #45 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#199 := [monotonicity #186 #196]: #198
#179 := (iff #40 #178)
#176 := (iff #39 #175)
#177 := [rewrite]: #176
#173 := (iff #38 #172)
#174 := [rewrite]: #173
#180 := [monotonicity #174 #177]: #179
#202 := [monotonicity #180 #199]: #201
#205 := [monotonicity #202]: #204
#208 := [quant-intro #205]: #207
#249 := [trans #208 #247]: #248
#171 := [asserted]: #54
#250 := [mp #171 #249]: #245
#320 := [mp~ #250 #306]: #245
#345 := [mp #320 #344]: #342
#376 := [mp #345 #375]: #373
#890 := [mp #376 #889]: #885
#732 := (not #885)
#738 := (or #732 #813)
#819 := (* -1::Int 3::Int)
#820 := (* -1::Int 0::Int)
#821 := (div #820 #819)
#816 := (* -1::Int #821)
#817 := (+ #13 #816)
#822 := (= #817 0::Int)
#823 := (div 0::Int 3::Int)
#818 := (* -1::Int #823)
#824 := (+ #13 #818)
#665 := (= #824 0::Int)
#841 := (>= 0::Int 0::Int)
#666 := (<= 3::Int 0::Int)
#667 := (or #666 #841)
#809 := (not #667)
#810 := (<= 0::Int 0::Int)
#811 := (or #810 #666)
#812 := (not #811)
#806 := (or #812 #809)
#807 := (ite #806 #665 #822)
#814 := (= 3::Int 0::Int)
#808 := (= 0::Int 0::Int)
#815 := (or #808 #814)
#644 := (ite #815 #813 #807)
#711 := (or #732 #644)
#713 := (iff #711 #738)
#717 := (iff #738 #738)
#718 := [rewrite]: #717
#736 := (iff #644 #813)
#1 := true
#729 := (ite true #813 #813)
#734 := (iff #729 #813)
#735 := [rewrite]: #734
#730 := (iff #644 #729)
#747 := (iff #807 #813)
#743 := (ite false #813 #813)
#746 := (iff #743 #813)
#741 := [rewrite]: #746
#744 := (iff #807 #743)
#740 := (iff #822 #813)
#761 := (= #817 #13)
#773 := (+ #13 0::Int)
#771 := (= #773 #13)
#776 := [rewrite]: #771
#760 := (= #817 #773)
#758 := (= #816 0::Int)
#785 := (= #820 0::Int)
#769 := [rewrite]: #785
#756 := (= #816 #820)
#754 := (= #821 0::Int)
#767 := -3::Int
#748 := (div 0::Int -3::Int)
#752 := (= #748 0::Int)
#753 := [rewrite]: #752
#749 := (= #821 #748)
#764 := (= #819 -3::Int)
#768 := [rewrite]: #764
#751 := [monotonicity #769 #768]: #749
#755 := [trans #751 #753]: #754
#757 := [monotonicity #755]: #756
#759 := [trans #757 #769]: #758
#750 := [monotonicity #759]: #760
#739 := [trans #750 #776]: #761
#742 := [monotonicity #739]: #740
#765 := (iff #665 #813)
#762 := (= #824 #13)
#774 := (= #824 #773)
#770 := (= #818 0::Int)
#784 := (= #818 #820)
#782 := (= #823 0::Int)
#783 := [rewrite]: #782
#778 := [monotonicity #783]: #784
#772 := [trans #778 #769]: #770
#775 := [monotonicity #772]: #774
#763 := [trans #775 #776]: #762
#766 := [monotonicity #763]: #765
#792 := (iff #806 false)
#779 := (or false false)
#791 := (iff #779 false)
#787 := [rewrite]: #791
#789 := (iff #806 #779)
#780 := (iff #809 false)
#489 := (not true)
#848 := (iff #489 false)
#851 := [rewrite]: #848
#786 := (iff #809 #489)
#795 := (iff #667 true)
#702 := (or false true)
#705 := (iff #702 true)
#798 := [rewrite]: #705
#703 := (iff #667 #702)
#847 := (iff #841 true)
#849 := [rewrite]: #847
#698 := (iff #666 false)
#793 := [rewrite]: #698
#704 := [monotonicity #793 #849]: #703
#799 := [trans #704 #798]: #795
#788 := [monotonicity #799]: #786
#777 := [trans #788 #851]: #780
#693 := (iff #812 false)
#699 := (iff #812 #489)
#682 := (iff #811 true)
#803 := (or true false)
#805 := (iff #803 true)
#687 := [rewrite]: #805
#794 := (iff #811 #803)
#648 := (iff #810 true)
#796 := [rewrite]: #648
#797 := [monotonicity #796 #793]: #794
#697 := [trans #797 #687]: #682
#700 := [monotonicity #697]: #699
#701 := [trans #700 #851]: #693
#790 := [monotonicity #701 #777]: #789
#781 := [trans #790 #787]: #792
#745 := [monotonicity #781 #766 #742]: #744
#733 := [trans #745 #741]: #747
#688 := (iff #815 true)
#804 := (iff #815 #803)
#800 := (iff #814 false)
#801 := [rewrite]: #800
#646 := (iff #808 true)
#647 := [rewrite]: #646
#802 := [monotonicity #647 #801]: #804
#689 := [trans #802 #687]: #688
#731 := [monotonicity #689 #733]: #730
#737 := [trans #731 #735]: #736
#606 := [monotonicity #737]: #713
#719 := [trans #606 #718]: #713
#712 := [quant-inst #10 #12]: #711
#724 := [mp #712 #719]: #738
#721 := [unit-resolution #724 #890]: #813
#722 := [monotonicity #721]: #16
#17 := (not #16)
#85 := [asserted]: #17
[unit-resolution #85 #722]: false
unsat
30b8b8c7c2003682f026b61d7ed1d6dcdfdd31f7 322 0
#2 := false
decl f3 :: (-> S2 Int S3)
#15 := 0::Int
decl f4 :: S2
#8 := f4
#16 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#12 := 3::Int
decl f6 :: (-> S5 Int S4)
#10 := 1::Int
decl f7 :: S5
#9 := f7
#11 := (f6 f7 1::Int)
#13 := (f5 #11 3::Int)
#14 := (f3 f4 #13)
#17 := (= #14 #16)
#808 := (= #13 0::Int)
#25 := (:var 0 Int)
#36 := (:var 1 Int)
#37 := (f6 f7 #36)
#38 := (f5 #37 #25)
#884 := (pattern #38)
#188 := -1::Int
#192 := (* -1::Int #25)
#189 := (* -1::Int #36)
#195 := (div #189 #192)
#367 := (* -1::Int #195)
#368 := (+ #38 #367)
#369 := (= #368 0::Int)
#48 := (div #36 #25)
#364 := (* -1::Int #48)
#365 := (+ #38 #364)
#366 := (= #365 0::Int)
#227 := (>= #36 0::Int)
#220 := (<= #25 0::Int)
#327 := (or #220 #227)
#328 := (not #327)
#216 := (<= #36 0::Int)
#325 := (or #216 #220)
#326 := (not #325)
#331 := (or #326 #328)
#370 := (ite #331 #366 #369)
#363 := (= #38 0::Int)
#40 := (= #25 0::Int)
#39 := (= #36 0::Int)
#41 := (or #39 #40)
#371 := (ite #41 #363 #370)
#885 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #884) #371)
#374 := (forall (vars (?v0 Int) (?v1 Int)) #371)
#888 := (iff #374 #885)
#886 := (iff #371 #371)
#887 := [refl]: #886
#889 := [quant-intro #887]: #888
#334 := (ite #331 #48 #195)
#337 := (ite #41 0::Int #334)
#340 := (= #38 #337)
#343 := (forall (vars (?v0 Int) (?v1 Int)) #340)
#375 := (iff #343 #374)
#372 := (iff #340 #371)
#373 := [rewrite]: #372
#376 := [quant-intro #373]: #375
#228 := (not #227)
#221 := (not #220)
#231 := (and #221 #228)
#217 := (not #216)
#224 := (and #217 #221)
#234 := (or #224 #231)
#237 := (ite #234 #48 #195)
#240 := (ite #41 0::Int #237)
#243 := (= #38 #240)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#344 := (iff #246 #343)
#341 := (iff #243 #340)
#338 := (= #240 #337)
#335 := (= #237 #334)
#332 := (iff #234 #331)
#329 := (iff #231 #328)
#330 := [rewrite]: #329
#310 := (iff #224 #326)
#311 := [rewrite]: #310
#333 := [monotonicity #311 #330]: #332
#336 := [monotonicity #333]: #335
#339 := [monotonicity #336]: #338
#342 := [monotonicity #339]: #341
#345 := [quant-intro #342]: #344
#306 := (~ #246 #246)
#319 := (~ #243 #243)
#320 := [refl]: #319
#307 := [nnf-pos #320]: #306
#50 := (- #25)
#49 := (- #36)
#51 := (div #49 #50)
#43 := (< 0::Int #25)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#52 := (ite #47 #48 #51)
#53 := (ite #41 0::Int #52)
#54 := (= #38 #53)
#55 := (forall (vars (?v0 Int) (?v1 Int)) #54)
#249 := (iff #55 #246)
#182 := (and #43 #45)
#185 := (or #44 #182)
#198 := (ite #185 #48 #195)
#176 := (= 0::Int #25)
#173 := (= 0::Int #36)
#179 := (or #173 #176)
#201 := (ite #179 0::Int #198)
#204 := (= #38 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#247 := (iff #207 #246)
#244 := (iff #204 #243)
#241 := (= #201 #240)
#238 := (= #198 #237)
#235 := (iff #185 #234)
#232 := (iff #182 #231)
#229 := (iff #45 #228)
#230 := [rewrite]: #229
#222 := (iff #43 #221)
#223 := [rewrite]: #222
#233 := [monotonicity #223 #230]: #232
#225 := (iff #44 #224)
#218 := (iff #42 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#236 := [monotonicity #226 #233]: #235
#239 := [monotonicity #236]: #238
#214 := (iff #179 #41)
#212 := (iff #176 #40)
#213 := [rewrite]: #212
#210 := (iff #173 #39)
#211 := [rewrite]: #210
#215 := [monotonicity #211 #213]: #214
#242 := [monotonicity #215 #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#208 := (iff #55 #207)
#205 := (iff #54 #204)
#202 := (= #53 #201)
#199 := (= #52 #198)
#196 := (= #51 #195)
#193 := (= #50 #192)
#194 := [rewrite]: #193
#190 := (= #49 #189)
#191 := [rewrite]: #190
#197 := [monotonicity #191 #194]: #196
#186 := (iff #47 #185)
#183 := (iff #46 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#200 := [monotonicity #187 #197]: #199
#180 := (iff #41 #179)
#177 := (iff #40 #176)
#178 := [rewrite]: #177
#174 := (iff #39 #173)
#175 := [rewrite]: #174
#181 := [monotonicity #175 #178]: #180
#203 := [monotonicity #181 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#250 := [trans #209 #248]: #249
#172 := [asserted]: #55
#251 := [mp #172 #250]: #246
#321 := [mp~ #251 #307]: #246
#346 := [mp #321 #345]: #343
#377 := [mp #346 #376]: #374
#890 := [mp #377 #889]: #885
#709 := (not #885)
#690 := (or #709 #808)
#820 := (* -1::Int 3::Int)
#821 := (* -1::Int 1::Int)
#816 := (div #821 #820)
#817 := (* -1::Int #816)
#822 := (+ #13 #817)
#823 := (= #822 0::Int)
#818 := (div 1::Int 3::Int)
#824 := (* -1::Int #818)
#665 := (+ #13 #824)
#666 := (= #665 0::Int)
#667 := (>= 1::Int 0::Int)
#809 := (<= 3::Int 0::Int)
#810 := (or #809 #667)
#811 := (not #810)
#812 := (<= 1::Int 0::Int)
#806 := (or #812 #809)
#807 := (not #806)
#813 := (or #807 #811)
#814 := (ite #813 #666 #823)
#815 := (= 3::Int 0::Int)
#644 := (= 1::Int 0::Int)
#646 := (or #644 #815)
#647 := (ite #646 #808 #814)
#714 := (or #709 #647)
#710 := (iff #714 #690)
#684 := (iff #690 #690)
#691 := [rewrite]: #684
#708 := (iff #647 #808)
#725 := (ite false #808 #808)
#723 := (iff #725 #808)
#728 := [rewrite]: #723
#726 := (iff #647 #725)
#721 := (iff #814 #808)
#738 := (= #13 1::Int)
#1 := true
#717 := (ite true #808 #738)
#724 := (iff #717 #808)
#720 := [rewrite]: #724
#718 := (iff #814 #717)
#713 := (iff #823 #738)
#729 := (+ -1::Int #13)
#736 := (= #729 0::Int)
#711 := (iff #736 #738)
#712 := [rewrite]: #711
#737 := (iff #823 #736)
#734 := (= #822 #729)
#741 := (+ #13 -1::Int)
#730 := (= #741 #729)
#731 := [rewrite]: #730
#747 := (= #822 #741)
#745 := (= #817 -1::Int)
#754 := (= #821 -1::Int)
#755 := [rewrite]: #754
#743 := (= #817 #821)
#740 := (= #816 1::Int)
#756 := -3::Int
#759 := (div -1::Int -3::Int)
#761 := (= #759 1::Int)
#739 := [rewrite]: #761
#760 := (= #816 #759)
#757 := (= #820 -3::Int)
#758 := [rewrite]: #757
#750 := [monotonicity #755 #758]: #760
#742 := [trans #750 #739]: #740
#744 := [monotonicity #742]: #743
#746 := [trans #744 #755]: #745
#733 := [monotonicity #746]: #747
#735 := [trans #733 #731]: #734
#732 := [monotonicity #735]: #737
#606 := [trans #732 #712]: #713
#752 := (iff #666 #808)
#749 := (= #665 #13)
#766 := (+ #13 0::Int)
#768 := (= #766 #13)
#748 := [rewrite]: #768
#767 := (= #665 #766)
#763 := (= #824 0::Int)
#774 := (* -1::Int 0::Int)
#776 := (= #774 0::Int)
#762 := [rewrite]: #776
#775 := (= #824 #774)
#772 := (= #818 0::Int)
#773 := [rewrite]: #772
#771 := [monotonicity #773]: #775
#765 := [trans #771 #762]: #763
#764 := [monotonicity #765]: #767
#751 := [trans #764 #748]: #749
#753 := [monotonicity #751]: #752
#769 := (iff #813 true)
#782 := (or true false)
#778 := (iff #782 true)
#785 := [rewrite]: #778
#783 := (iff #813 #782)
#792 := (iff #811 false)
#490 := (not true)
#851 := (iff #490 false)
#837 := [rewrite]: #851
#791 := (iff #811 #490)
#789 := (iff #810 true)
#786 := (or false true)
#777 := (iff #786 true)
#779 := [rewrite]: #777
#788 := (iff #810 #786)
#795 := (iff #667 true)
#799 := [rewrite]: #795
#794 := (iff #809 false)
#797 := [rewrite]: #794
#780 := [monotonicity #797 #799]: #788
#790 := [trans #780 #779]: #789
#787 := [monotonicity #790]: #791
#781 := [trans #787 #837]: #792
#705 := (iff #807 true)
#693 := (not false)
#703 := (iff #693 true)
#704 := [rewrite]: #703
#701 := (iff #807 #693)
#699 := (iff #806 false)
#802 := (or false false)
#688 := (iff #802 false)
#689 := [rewrite]: #688
#682 := (iff #806 #802)
#698 := (iff #812 false)
#793 := [rewrite]: #698
#697 := [monotonicity #793 #797]: #682
#700 := [trans #697 #689]: #699
#702 := [monotonicity #700]: #701
#798 := [trans #702 #704]: #705
#784 := [monotonicity #798 #781]: #783
#770 := [trans #784 #785]: #769
#719 := [monotonicity #770 #753 #606]: #718
#722 := [trans #719 #720]: #721
#648 := (iff #646 false)
#805 := (iff #646 #802)
#803 := (iff #815 false)
#804 := [rewrite]: #803
#800 := (iff #644 false)
#801 := [rewrite]: #800
#687 := [monotonicity #801 #804]: #805
#796 := [trans #687 #689]: #648
#727 := [monotonicity #796 #722]: #726
#654 := [trans #727 #728]: #708
#716 := [monotonicity #654]: #710
#650 := [trans #716 #691]: #710
#715 := [quant-inst #10 #12]: #714
#681 := [mp #715 #650]: #690
#685 := [unit-resolution #681 #890]: #808
#692 := [monotonicity #685]: #17
#18 := (not #17)
#86 := [asserted]: #18
[unit-resolution #86 #692]: false
unsat
eed23a962a9be5f7206f850271a55f051364feed 312 0
#2 := false
decl f3 :: (-> S2 Int S3)
#14 := 1::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
#10 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 3::Int)
#12 := (f5 #11 3::Int)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#749 := (= #12 1::Int)
#25 := (:var 0 Int)
#36 := (:var 1 Int)
#37 := (f6 f7 #36)
#38 := (f5 #37 #25)
#884 := (pattern #38)
#24 := 0::Int
#188 := -1::Int
#192 := (* -1::Int #25)
#189 := (* -1::Int #36)
#195 := (div #189 #192)
#367 := (* -1::Int #195)
#368 := (+ #38 #367)
#369 := (= #368 0::Int)
#48 := (div #36 #25)
#364 := (* -1::Int #48)
#365 := (+ #38 #364)
#366 := (= #365 0::Int)
#227 := (>= #36 0::Int)
#220 := (<= #25 0::Int)
#327 := (or #220 #227)
#328 := (not #327)
#216 := (<= #36 0::Int)
#325 := (or #216 #220)
#326 := (not #325)
#331 := (or #326 #328)
#370 := (ite #331 #366 #369)
#363 := (= #38 0::Int)
#40 := (= #25 0::Int)
#39 := (= #36 0::Int)
#41 := (or #39 #40)
#371 := (ite #41 #363 #370)
#885 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #884) #371)
#374 := (forall (vars (?v0 Int) (?v1 Int)) #371)
#888 := (iff #374 #885)
#886 := (iff #371 #371)
#887 := [refl]: #886
#889 := [quant-intro #887]: #888
#334 := (ite #331 #48 #195)
#337 := (ite #41 0::Int #334)
#340 := (= #38 #337)
#343 := (forall (vars (?v0 Int) (?v1 Int)) #340)
#375 := (iff #343 #374)
#372 := (iff #340 #371)
#373 := [rewrite]: #372
#376 := [quant-intro #373]: #375
#228 := (not #227)
#221 := (not #220)
#231 := (and #221 #228)
#217 := (not #216)
#224 := (and #217 #221)
#234 := (or #224 #231)
#237 := (ite #234 #48 #195)
#240 := (ite #41 0::Int #237)
#243 := (= #38 #240)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#344 := (iff #246 #343)
#341 := (iff #243 #340)
#338 := (= #240 #337)
#335 := (= #237 #334)
#332 := (iff #234 #331)
#329 := (iff #231 #328)
#330 := [rewrite]: #329
#310 := (iff #224 #326)
#311 := [rewrite]: #310
#333 := [monotonicity #311 #330]: #332
#336 := [monotonicity #333]: #335
#339 := [monotonicity #336]: #338
#342 := [monotonicity #339]: #341
#345 := [quant-intro #342]: #344
#306 := (~ #246 #246)
#319 := (~ #243 #243)
#320 := [refl]: #319
#307 := [nnf-pos #320]: #306
#50 := (- #25)
#49 := (- #36)
#51 := (div #49 #50)
#43 := (< 0::Int #25)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#52 := (ite #47 #48 #51)
#53 := (ite #41 0::Int #52)
#54 := (= #38 #53)
#55 := (forall (vars (?v0 Int) (?v1 Int)) #54)
#249 := (iff #55 #246)
#182 := (and #43 #45)
#185 := (or #44 #182)
#198 := (ite #185 #48 #195)
#176 := (= 0::Int #25)
#173 := (= 0::Int #36)
#179 := (or #173 #176)
#201 := (ite #179 0::Int #198)
#204 := (= #38 #201)
#207 := (forall (vars (?v0 Int) (?v1 Int)) #204)
#247 := (iff #207 #246)
#244 := (iff #204 #243)
#241 := (= #201 #240)
#238 := (= #198 #237)
#235 := (iff #185 #234)
#232 := (iff #182 #231)
#229 := (iff #45 #228)
#230 := [rewrite]: #229
#222 := (iff #43 #221)
#223 := [rewrite]: #222
#233 := [monotonicity #223 #230]: #232
#225 := (iff #44 #224)
#218 := (iff #42 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#236 := [monotonicity #226 #233]: #235
#239 := [monotonicity #236]: #238
#214 := (iff #179 #41)
#212 := (iff #176 #40)
#213 := [rewrite]: #212
#210 := (iff #173 #39)
#211 := [rewrite]: #210
#215 := [monotonicity #211 #213]: #214
#242 := [monotonicity #215 #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#208 := (iff #55 #207)
#205 := (iff #54 #204)
#202 := (= #53 #201)
#199 := (= #52 #198)
#196 := (= #51 #195)
#193 := (= #50 #192)
#194 := [rewrite]: #193
#190 := (= #49 #189)
#191 := [rewrite]: #190
#197 := [monotonicity #191 #194]: #196
#186 := (iff #47 #185)
#183 := (iff #46 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#200 := [monotonicity #187 #197]: #199
#180 := (iff #41 #179)
#177 := (iff #40 #176)
#178 := [rewrite]: #177
#174 := (iff #39 #173)
#175 := [rewrite]: #174
#181 := [monotonicity #175 #178]: #180
#203 := [monotonicity #181 #200]: #202
#206 := [monotonicity #203]: #205
#209 := [quant-intro #206]: #208
#250 := [trans #209 #248]: #249
#172 := [asserted]: #55
#251 := [mp #172 #250]: #246
#321 := [mp~ #251 #307]: #246
#346 := [mp #321 #345]: #343
#377 := [mp #346 #376]: #374
#890 := [mp #377 #889]: #885
#721 := (not #885)
#722 := (or #721 #749)
#821 := (* -1::Int 3::Int)
#816 := (div #821 #821)
#817 := (* -1::Int #816)
#822 := (+ #12 #817)
#823 := (= #822 0::Int)
#818 := (div 3::Int 3::Int)
#824 := (* -1::Int #818)
#665 := (+ #12 #824)
#666 := (= #665 0::Int)
#667 := (>= 3::Int 0::Int)
#809 := (<= 3::Int 0::Int)
#810 := (or #809 #667)
#811 := (not #810)
#812 := (or #809 #809)
#806 := (not #812)
#807 := (or #806 #811)
#813 := (ite #807 #666 #823)
#814 := (= #12 0::Int)
#808 := (= 3::Int 0::Int)
#815 := (or #808 #808)
#644 := (ite #815 #814 #813)
#725 := (or #721 #644)
#727 := (iff #725 #722)
#728 := (iff #722 #722)
#708 := [rewrite]: #728
#724 := (iff #644 #749)
#713 := (ite false #814 #749)
#718 := (iff #713 #749)
#719 := [rewrite]: #718
#606 := (iff #644 #713)
#711 := (iff #813 #749)
#1 := true
#735 := (ite true #749 #749)
#732 := (iff #735 #749)
#738 := [rewrite]: #732
#736 := (iff #813 #735)
#731 := (iff #823 #749)
#762 := (+ -1::Int #12)
#764 := (= #762 0::Int)
#751 := (iff #764 #749)
#752 := [rewrite]: #751
#729 := (iff #823 #764)
#747 := (= #822 #762)
#775 := (+ #12 -1::Int)
#763 := (= #775 #762)
#765 := [rewrite]: #763
#746 := (= #822 #775)
#744 := (= #817 -1::Int)
#778 := (* -1::Int 1::Int)
#770 := (= #778 -1::Int)
#772 := [rewrite]: #770
#742 := (= #817 #778)
#739 := (= #816 1::Int)
#755 := -3::Int
#758 := (div -3::Int -3::Int)
#750 := (= #758 1::Int)
#761 := [rewrite]: #750
#759 := (= #816 #758)
#756 := (= #821 -3::Int)
#757 := [rewrite]: #756
#760 := [monotonicity #757 #757]: #759
#740 := [trans #760 #761]: #739
#743 := [monotonicity #740]: #742
#745 := [trans #743 #772]: #744
#741 := [monotonicity #745]: #746
#733 := [trans #741 #765]: #747
#730 := [monotonicity #733]: #729
#734 := [trans #730 #752]: #731
#753 := (iff #666 #749)
#768 := (iff #666 #764)
#766 := (= #665 #762)
#771 := (= #665 #775)
#773 := (= #824 -1::Int)
#785 := (= #824 #778)
#783 := (= #818 1::Int)
#784 := [rewrite]: #783
#769 := [monotonicity #784]: #785
#774 := [trans #769 #772]: #773
#776 := [monotonicity #774]: #771
#767 := [trans #776 #765]: #766
#748 := [monotonicity #767]: #768
#754 := [trans #748 #752]: #753
#781 := (iff #807 true)
#789 := (or true false)
#787 := (iff #789 true)
#792 := [rewrite]: #787
#790 := (iff #807 #789)
#777 := (iff #811 false)
#490 := (not true)
#851 := (iff #490 false)
#837 := [rewrite]: #851
#788 := (iff #811 #490)
#799 := (iff #810 true)
#703 := (or false true)
#798 := (iff #703 true)
#795 := [rewrite]: #798
#704 := (iff #810 #703)
#701 := (iff #667 true)
#702 := [rewrite]: #701
#688 := (iff #809 false)
#689 := [rewrite]: #688
#705 := [monotonicity #689 #702]: #704
#786 := [trans #705 #795]: #799
#780 := [monotonicity #786]: #788
#779 := [trans #780 #837]: #777
#700 := (iff #806 true)
#794 := (not false)
#697 := (iff #794 true)
#699 := [rewrite]: #697
#797 := (iff #806 #794)
#698 := (iff #812 false)
#800 := (or false false)
#804 := (iff #800 false)
#802 := [rewrite]: #804
#648 := (iff #812 #800)
#796 := [monotonicity #689 #689]: #648
#793 := [trans #796 #802]: #698
#682 := [monotonicity #793]: #797
#693 := [trans #682 #699]: #700
#791 := [monotonicity #693 #779]: #790
#782 := [trans #791 #792]: #781
#737 := [monotonicity #782 #754 #734]: #736
#712 := [trans #737 #738]: #711
#805 := (iff #815 false)
#801 := (iff #815 #800)
#646 := (iff #808 false)
#647 := [rewrite]: #646
#803 := [monotonicity #647 #647]: #801
#687 := [trans #803 #802]: #805
#717 := [monotonicity #687 #712]: #606
#720 := [trans #717 #719]: #724
#723 := [monotonicity #720]: #727
#654 := [trans #723 #708]: #727
#726 := [quant-inst #10 #10]: #725
#709 := [mp #726 #654]: #722
#715 := [unit-resolution #709 #890]: #749
#710 := [monotonicity #715]: #16
#17 := (not #16)
#86 := [asserted]: #17
[unit-resolution #86 #710]: false
unsat
14f833dd4fb04a0cdd005cf364c1d2d23fdad718 467 0
#2 := false
#23 := 0::Int
#13 := 3::Int
decl f6 :: (-> S4 S5 Int)
decl f8 :: S5
#10 := f8
decl f7 :: S4
#9 := f7
#11 := (f6 f7 f8)
#814 := (mod #11 3::Int)
#88 := -1::Int
#760 := (* -1::Int #814)
#530 := (div #11 3::Int)
#556 := -3::Int
#758 := (* -3::Int #530)
#761 := (+ #758 #760)
#762 := (+ #11 #761)
#757 := (= #762 0::Int)
#1 := true
#83 := [true-axiom]: true
#726 := (or false #757)
#727 := [th-lemma arith]: #726
#728 := [unit-resolution #727 #83]: #757
#766 := (>= #762 0::Int)
#669 := (not #766)
#767 := (>= #814 0::Int)
#671 := (or false #767)
#672 := [th-lemma arith]: #671
#677 := [unit-resolution #672 #83]: #767
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#8 := f5
#12 := (f4 f5 #11)
#14 := (f3 #12 3::Int)
#91 := (* -1::Int #14)
#92 := (+ #11 #91)
#90 := (>= #92 0::Int)
#94 := (not #90)
#15 := (<= #14 #11)
#16 := (not #15)
#95 := (iff #16 #94)
#89 := (iff #15 #90)
#93 := [rewrite]: #89
#96 := [monotonicity #93]: #95
#85 := [asserted]: #16
#97 := [mp #85 #96]: #94
#865 := (* -1::Int #530)
#867 := (+ #14 #865)
#696 := (<= #867 0::Int)
#524 := (= #867 0::Int)
#546 := (* -1::Int #11)
#836 := (div #546 -3::Int)
#834 := (* -1::Int #836)
#839 := (+ #14 #834)
#830 := (= #839 0::Int)
#868 := (<= #11 0::Int)
#498 := (not #868)
#654 := (>= #11 0::Int)
#572 := (not #654)
#840 := (or #572 #498)
#831 := (ite #840 #524 #830)
#522 := (= #11 0::Int)
#713 := (not #522)
#824 := (<= #14 0::Int)
#872 := (= #14 0::Int)
#747 := [hypothesis]: #522
#720 := (or #713 #872)
#833 := (ite #522 #872 #831)
#24 := (:var 0 Int)
#35 := (:var 1 Int)
#36 := (f4 f5 #35)
#37 := (f3 #36 #24)
#893 := (pattern #37)
#200 := (* -1::Int #24)
#197 := (* -1::Int #35)
#203 := (div #197 #200)
#375 := (* -1::Int #203)
#376 := (+ #37 #375)
#377 := (= #376 0::Int)
#47 := (div #35 #24)
#372 := (* -1::Int #47)
#373 := (+ #37 #372)
#374 := (= #373 0::Int)
#235 := (>= #35 0::Int)
#228 := (<= #24 0::Int)
#335 := (or #228 #235)
#336 := (not #335)
#224 := (<= #35 0::Int)
#333 := (or #224 #228)
#334 := (not #333)
#339 := (or #334 #336)
#378 := (ite #339 #374 #377)
#371 := (= #37 0::Int)
#39 := (= #24 0::Int)
#38 := (= #35 0::Int)
#40 := (or #38 #39)
#379 := (ite #40 #371 #378)
#894 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #893) #379)
#382 := (forall (vars (?v0 Int) (?v1 Int)) #379)
#897 := (iff #382 #894)
#895 := (iff #379 #379)
#896 := [refl]: #895
#898 := [quant-intro #896]: #897
#342 := (ite #339 #47 #203)
#345 := (ite #40 0::Int #342)
#348 := (= #37 #345)
#351 := (forall (vars (?v0 Int) (?v1 Int)) #348)
#383 := (iff #351 #382)
#380 := (iff #348 #379)
#381 := [rewrite]: #380
#384 := [quant-intro #381]: #383
#236 := (not #235)
#229 := (not #228)
#239 := (and #229 #236)
#225 := (not #224)
#232 := (and #225 #229)
#242 := (or #232 #239)
#245 := (ite #242 #47 #203)
#248 := (ite #40 0::Int #245)
#251 := (= #37 #248)
#254 := (forall (vars (?v0 Int) (?v1 Int)) #251)
#352 := (iff #254 #351)
#349 := (iff #251 #348)
#346 := (= #248 #345)
#343 := (= #245 #342)
#340 := (iff #242 #339)
#337 := (iff #239 #336)
#338 := [rewrite]: #337
#318 := (iff #232 #334)
#319 := [rewrite]: #318
#341 := [monotonicity #319 #338]: #340
#344 := [monotonicity #341]: #343
#347 := [monotonicity #344]: #346
#350 := [monotonicity #347]: #349
#353 := [quant-intro #350]: #352
#314 := (~ #254 #254)
#327 := (~ #251 #251)
#328 := [refl]: #327
#315 := [nnf-pos #328]: #314
#49 := (- #24)
#48 := (- #35)
#50 := (div #48 #49)
#42 := (< 0::Int #24)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#51 := (ite #46 #47 #50)
#52 := (ite #40 0::Int #51)
#53 := (= #37 #52)
#54 := (forall (vars (?v0 Int) (?v1 Int)) #53)
#257 := (iff #54 #254)
#191 := (and #42 #44)
#194 := (or #43 #191)
#206 := (ite #194 #47 #203)
#185 := (= 0::Int #24)
#182 := (= 0::Int #35)
#188 := (or #182 #185)
#209 := (ite #188 0::Int #206)
#212 := (= #37 #209)
#215 := (forall (vars (?v0 Int) (?v1 Int)) #212)
#255 := (iff #215 #254)
#252 := (iff #212 #251)
#249 := (= #209 #248)
#246 := (= #206 #245)
#243 := (iff #194 #242)
#240 := (iff #191 #239)
#237 := (iff #44 #236)
#238 := [rewrite]: #237
#230 := (iff #42 #229)
#231 := [rewrite]: #230
#241 := [monotonicity #231 #238]: #240
#233 := (iff #43 #232)
#226 := (iff #41 #225)
#227 := [rewrite]: #226
#234 := [monotonicity #227 #231]: #233
#244 := [monotonicity #234 #241]: #243
#247 := [monotonicity #244]: #246
#222 := (iff #188 #40)
#220 := (iff #185 #39)
#221 := [rewrite]: #220
#218 := (iff #182 #38)
#219 := [rewrite]: #218
#223 := [monotonicity #219 #221]: #222
#250 := [monotonicity #223 #247]: #249
#253 := [monotonicity #250]: #252
#256 := [quant-intro #253]: #255
#216 := (iff #54 #215)
#213 := (iff #53 #212)
#210 := (= #52 #209)
#207 := (= #51 #206)
#204 := (= #50 #203)
#201 := (= #49 #200)
#202 := [rewrite]: #201
#198 := (= #48 #197)
#199 := [rewrite]: #198
#205 := [monotonicity #199 #202]: #204
#195 := (iff #46 #194)
#192 := (iff #45 #191)
#193 := [rewrite]: #192
#196 := [monotonicity #193]: #195
#208 := [monotonicity #196 #205]: #207
#189 := (iff #40 #188)
#186 := (iff #39 #185)
#187 := [rewrite]: #186
#183 := (iff #38 #182)
#184 := [rewrite]: #183
#190 := [monotonicity #184 #187]: #189
#211 := [monotonicity #190 #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#258 := [trans #217 #256]: #257
#181 := [asserted]: #54
#259 := [mp #181 #258]: #254
#329 := [mp~ #259 #315]: #254
#354 := [mp #329 #353]: #351
#385 := [mp #354 #384]: #382
#899 := [mp #385 #898]: #894
#676 := (not #894)
#818 := (or #676 #833)
#545 := (* -1::Int 3::Int)
#477 := (div #546 #545)
#550 := (* -1::Int #477)
#547 := (+ #14 #550)
#551 := (= #547 0::Int)
#861 := (<= 3::Int 0::Int)
#535 := (or #861 #654)
#536 := (not #535)
#869 := (or #868 #861)
#870 := (not #869)
#871 := (or #870 #536)
#866 := (ite #871 #524 #551)
#862 := (= 3::Int 0::Int)
#527 := (or #522 #862)
#863 := (ite #527 #872 #866)
#819 := (or #676 #863)
#821 := (iff #819 #818)
#816 := (iff #818 #818)
#822 := [rewrite]: #816
#674 := (iff #863 #833)
#832 := (iff #866 #831)
#825 := (iff #551 #830)
#828 := (= #547 #839)
#838 := (= #550 #834)
#837 := (= #477 #836)
#557 := (= #545 -3::Int)
#558 := [rewrite]: #557
#552 := [monotonicity #558]: #837
#835 := [monotonicity #552]: #838
#829 := [monotonicity #835]: #828
#826 := [monotonicity #829]: #825
#845 := (iff #871 #840)
#843 := (or #498 #572)
#844 := (iff #843 #840)
#841 := [rewrite]: #844
#565 := (iff #871 #843)
#465 := (iff #536 #572)
#570 := (iff #535 #654)
#857 := (or false #654)
#847 := (iff #857 #654)
#569 := [rewrite]: #847
#860 := (iff #535 #857)
#851 := (iff #861 false)
#852 := [rewrite]: #851
#846 := [monotonicity #852]: #860
#571 := [trans #846 #569]: #570
#842 := [monotonicity #571]: #465
#499 := (iff #870 #498)
#856 := (iff #869 #868)
#853 := (or #868 false)
#855 := (iff #853 #868)
#493 := [rewrite]: #855
#854 := (iff #869 #853)
#849 := [monotonicity #852]: #854
#858 := [trans #849 #493]: #856
#859 := [monotonicity #858]: #499
#566 := [monotonicity #859 #842]: #565
#555 := [trans #566 #841]: #845
#827 := [monotonicity #555 #826]: #832
#514 := (iff #527 #522)
#507 := (or #522 false)
#512 := (iff #507 #522)
#513 := [rewrite]: #512
#848 := (iff #527 #507)
#523 := (iff #862 false)
#864 := [rewrite]: #523
#511 := [monotonicity #864]: #848
#850 := [trans #511 #513]: #514
#675 := [monotonicity #850 #827]: #674
#815 := [monotonicity #675]: #821
#823 := [trans #815 #822]: #821
#820 := [quant-inst #11 #13]: #819
#817 := [mp #820 #823]: #818
#735 := [unit-resolution #817 #899]: #833
#712 := (not #833)
#714 := (or #712 #713 #872)
#807 := [def-axiom]: #714
#721 := [unit-resolution #807 #735]: #720
#722 := [unit-resolution #721 #747]: #872
#795 := (not #872)
#615 := (or #795 #824)
#765 := [th-lemma arith triangle-eq]: #615
#681 := [unit-resolution #765 #722]: #824
#682 := (or #713 #654)
#683 := [th-lemma arith triangle-eq]: #682
#684 := [unit-resolution #683 #747]: #654
#685 := [th-lemma arith farkas -1 1 1 #684 #97 #681]: false
#686 := [lemma #685]: #713
#736 := (or #522 #831)
#804 := (or #712 #522 #831)
#808 := [def-axiom]: #804
#732 := [unit-resolution #808 #735]: #736
#658 := [unit-resolution #732 #686]: #831
decl f9 :: (-> S6 Int S5)
decl f10 :: S6
#17 := f10
#459 := (f9 f10 #11)
#798 := (f6 f7 #459)
#799 := (= #798 0::Int)
#703 := (not #799)
#704 := (iff #713 #703)
#694 := (iff #522 #799)
#690 := (iff #799 #522)
#700 := (= #798 #11)
#725 := (= #459 f8)
#544 := (= f8 #459)
#18 := (:var 0 S5)
#19 := (f6 f7 #18)
#873 := (pattern #19)
#20 := (f9 f10 #19)
#87 := (= #18 #20)
#874 := (forall (vars (?v0 S5)) (:pat #873) #87)
#100 := (forall (vars (?v0 S5)) #87)
#877 := (iff #100 #874)
#875 := (iff #87 #87)
#876 := [refl]: #875
#878 := [quant-intro #876]: #877
#322 := (~ #100 #100)
#320 := (~ #87 #87)
#321 := [refl]: #320
#323 := [nnf-pos #321]: #322
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S5)) #21)
#101 := (iff #22 #100)
#98 := (iff #21 #87)
#99 := [rewrite]: #98
#102 := [quant-intro #99]: #101
#86 := [asserted]: #22
#105 := [mp #86 #102]: #100
#308 := [mp~ #105 #323]: #100
#879 := [mp #308 #878]: #874
#537 := (not #874)
#548 := (or #537 #544)
#549 := [quant-inst #10]: #548
#719 := [unit-resolution #549 #879]: #544
#693 := [symm #719]: #725
#659 := [monotonicity #693]: #700
#692 := [monotonicity #659]: #690
#701 := [symm #692]: #694
#705 := [monotonicity #701]: #704
#660 := [mp #686 #705]: #703
#796 := (or #654 #799)
#26 := (f9 f10 #24)
#880 := (pattern #26)
#121 := (>= #24 0::Int)
#27 := (f6 f7 #26)
#32 := (= #27 0::Int)
#170 := (or #32 #121)
#887 := (forall (vars (?v0 Int)) (:pat #880) #170)
#175 := (forall (vars (?v0 Int)) #170)
#890 := (iff #175 #887)
#888 := (iff #170 #170)
#889 := [refl]: #888
#891 := [quant-intro #889]: #890
#312 := (~ #175 #175)
#324 := (~ #170 #170)
#325 := [refl]: #324
#313 := [nnf-pos #325]: #312
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#178 := (iff #34 #175)
#141 := (= 0::Int #27)
#147 := (not #31)
#148 := (or #147 #141)
#153 := (forall (vars (?v0 Int)) #148)
#176 := (iff #153 #175)
#173 := (iff #148 #170)
#167 := (or #121 #32)
#171 := (iff #167 #170)
#172 := [rewrite]: #171
#168 := (iff #148 #167)
#165 := (iff #141 #32)
#166 := [rewrite]: #165
#163 := (iff #147 #121)
#123 := (not #121)
#158 := (not #123)
#161 := (iff #158 #121)
#162 := [rewrite]: #161
#159 := (iff #147 #158)
#156 := (iff #31 #123)
#157 := [rewrite]: #156
#160 := [monotonicity #157]: #159
#164 := [trans #160 #162]: #163
#169 := [monotonicity #164 #166]: #168
#174 := [trans #169 #172]: #173
#177 := [quant-intro #174]: #176
#154 := (iff #34 #153)
#151 := (iff #33 #148)
#144 := (implies #31 #141)
#149 := (iff #144 #148)
#150 := [rewrite]: #149
#145 := (iff #33 #144)
#142 := (iff #32 #141)
#143 := [rewrite]: #142
#146 := [monotonicity #143]: #145
#152 := [trans #146 #150]: #151
#155 := [quant-intro #152]: #154
#179 := [trans #155 #177]: #178
#140 := [asserted]: #34
#180 := [mp #140 #179]: #175
#326 := [mp~ #180 #313]: #175
#892 := [mp #326 #891]: #887
#791 := (not #887)
#792 := (or #791 #654 #799)
#800 := (or #799 #654)
#793 := (or #791 #800)
#783 := (iff #793 #792)
#794 := (or #791 #796)
#781 := (iff #794 #792)
#782 := [rewrite]: #781
#778 := (iff #793 #794)
#801 := (iff #800 #796)
#790 := [rewrite]: #801
#779 := [monotonicity #790]: #778
#784 := [trans #779 #782]: #783
#787 := [quant-inst #11]: #793
#780 := [mp #787 #784]: #792
#695 := [unit-resolution #780 #892]: #796
#661 := [unit-resolution #695 #660]: #654
#662 := (or #522 #498 #572)
#664 := [th-lemma arith triangle-eq]: #662
#665 := [unit-resolution #664 #661 #686]: #498
#809 := (or #840 #868)
#810 := [def-axiom]: #809
#666 := [unit-resolution #810 #665]: #840
#812 := (not #840)
#707 := (not #831)
#802 := (or #707 #812 #524)
#803 := [def-axiom]: #802
#667 := [unit-resolution #803 #666 #658]: #524
#706 := (not #524)
#699 := (or #706 #696)
#723 := [th-lemma arith triangle-eq]: #699
#668 := [unit-resolution #723 #667]: #696
#670 := (not #696)
#652 := (not #767)
#640 := (or #669 #572 #652 #670 #90)
#641 := [th-lemma arith assign-bounds 2 1 3 3]: #640
#642 := [unit-resolution #641 #661 #668 #97 #677]: #669
#733 := (not #757)
#729 := (or #733 #766)
#730 := [th-lemma arith triangle-eq]: #729
[unit-resolution #730 #642 #728]: false
unsat
007f39662e30c666548c8884f07065be331edd50 644 0
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#14 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#11 := f10
decl f9 :: S6
#10 := f9
#12 := (f8 f9 f10)
decl f7 :: S5
#9 := f7
#13 := (f6 f7 #12)
#15 := (f5 #13 3::Int)
decl f4 :: S2
#8 := f4
#16 := (f3 f4 #15)
#90 := (= f10 #16)
#18 := 0::Int
#19 := (f3 f4 0::Int)
#938 := (= #19 #16)
#936 := (= #16 #19)
#826 := (= #15 0::Int)
#829 := (= #12 0::Int)
#874 := (f8 f9 #19)
#873 := (= #874 0::Int)
#28 := (:var 0 Int)
#30 := (f3 f4 #28)
#896 := (pattern #30)
#137 := (>= #28 0::Int)
#138 := (not #137)
#31 := (f8 f9 #30)
#119 := (= #28 #31)
#144 := (or #119 #138)
#897 := (forall (vars (?v0 Int)) (:pat #896) #144)
#149 := (forall (vars (?v0 Int)) #144)
#900 := (iff #149 #897)
#898 := (iff #144 #144)
#899 := [refl]: #898
#901 := [quant-intro #899]: #900
#326 := (~ #149 #149)
#325 := (~ #144 #144)
#322 := [refl]: #325
#327 := [nnf-pos #322]: #326
#32 := (= #31 #28)
#29 := (<= 0::Int #28)
#33 := (implies #29 #32)
#34 := (forall (vars (?v0 Int)) #33)
#152 := (iff #34 #149)
#126 := (not #29)
#127 := (or #126 #119)
#132 := (forall (vars (?v0 Int)) #127)
#150 := (iff #132 #149)
#147 := (iff #127 #144)
#141 := (or #138 #119)
#145 := (iff #141 #144)
#146 := [rewrite]: #145
#142 := (iff #127 #141)
#139 := (iff #126 #138)
#135 := (iff #29 #137)
#136 := [rewrite]: #135
#140 := [monotonicity #136]: #139
#143 := [monotonicity #140]: #142
#148 := [trans #143 #146]: #147
#151 := [quant-intro #148]: #150
#133 := (iff #34 #132)
#130 := (iff #33 #127)
#123 := (implies #29 #119)
#128 := (iff #123 #127)
#129 := [rewrite]: #128
#124 := (iff #33 #123)
#121 := (iff #32 #119)
#122 := [rewrite]: #121
#125 := [monotonicity #122]: #124
#131 := [trans #125 #129]: #130
#134 := [quant-intro #131]: #133
#153 := [trans #134 #151]: #152
#118 := [asserted]: #34
#154 := [mp #118 #153]: #149
#323 := [mp~ #154 #327]: #149
#902 := [mp #323 #901]: #897
#887 := (not #897)
#572 := (or #887 #873)
#509 := (>= 0::Int 0::Int)
#872 := (not #509)
#514 := (= 0::Int #874)
#515 := (or #514 #872)
#573 := (or #887 #515)
#852 := (iff #573 #572)
#568 := (iff #572 #572)
#850 := [rewrite]: #568
#861 := (iff #515 #873)
#581 := (or #873 false)
#860 := (iff #581 #873)
#857 := [rewrite]: #860
#582 := (iff #515 #581)
#858 := (iff #872 false)
#1 := true
#585 := (not true)
#588 := (iff #585 false)
#481 := [rewrite]: #588
#586 := (iff #872 #585)
#862 := (iff #509 true)
#863 := [rewrite]: #862
#587 := [monotonicity #863]: #586
#859 := [trans #587 #481]: #858
#875 := (iff #514 #873)
#876 := [rewrite]: #875
#856 := [monotonicity #876 #859]: #582
#571 := [trans #856 #857]: #861
#853 := [monotonicity #571]: #852
#854 := [trans #853 #850]: #852
#574 := [quant-inst #18]: #573
#851 := [mp #574 #854]: #572
#929 := [unit-resolution #851 #902]: #873
#932 := (= #12 #874)
#20 := (= f10 #19)
#567 := (f3 f4 #12)
#924 := (= #567 #19)
#480 := (= #19 #567)
#478 := (= 0::Int #12)
#551 := (f8 f9 #16)
#633 := (= #551 #12)
#504 := (= #12 #551)
#104 := (not #20)
#577 := [hypothesis]: #104
#562 := (or #90 #20)
#105 := (iff #90 #104)
#17 := (= #16 f10)
#21 := (iff #17 #20)
#22 := (not #21)
#108 := (iff #22 #105)
#96 := (iff #20 #90)
#101 := (not #96)
#106 := (iff #101 #105)
#107 := [rewrite]: #106
#102 := (iff #22 #101)
#99 := (iff #21 #96)
#93 := (iff #90 #20)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #21 #93)
#91 := (iff #17 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [monotonicity #100]: #102
#109 := [trans #103 #107]: #108
#89 := [asserted]: #22
#112 := [mp #89 #109]: #105
#475 := (not #105)
#560 := (or #90 #20 #475)
#561 := [def-axiom]: #560
#553 := [unit-resolution #561 #112]: #562
#569 := [unit-resolution #553 #577]: #90
#505 := [monotonicity #569]: #504
#484 := [symm #505]: #633
#489 := (= 0::Int #551)
#552 := (= #15 #551)
#881 := (>= #15 0::Int)
#564 := (not #90)
#635 := (or #881 #564)
#885 := (= #551 0::Int)
#637 := (iff #885 #829)
#630 := [hypothesis]: #90
#632 := [symm #630]: #17
#636 := [monotonicity #632]: #633
#641 := [monotonicity #636]: #637
#883 := (not #881)
#654 := [hypothesis]: #883
#539 := (or #881 #885)
#36 := (= #31 0::Int)
#185 := (or #36 #137)
#903 := (forall (vars (?v0 Int)) (:pat #896) #185)
#190 := (forall (vars (?v0 Int)) #185)
#906 := (iff #190 #903)
#904 := (iff #185 #185)
#905 := [refl]: #904
#907 := [quant-intro #905]: #906
#328 := (~ #190 #190)
#340 := (~ #185 #185)
#341 := [refl]: #340
#329 := [nnf-pos #341]: #328
#35 := (< #28 0::Int)
#37 := (implies #35 #36)
#38 := (forall (vars (?v0 Int)) #37)
#193 := (iff #38 #190)
#156 := (= 0::Int #31)
#162 := (not #35)
#163 := (or #162 #156)
#168 := (forall (vars (?v0 Int)) #163)
#191 := (iff #168 #190)
#188 := (iff #163 #185)
#182 := (or #137 #36)
#186 := (iff #182 #185)
#187 := [rewrite]: #186
#183 := (iff #163 #182)
#180 := (iff #156 #36)
#181 := [rewrite]: #180
#178 := (iff #162 #137)
#173 := (not #138)
#176 := (iff #173 #137)
#177 := [rewrite]: #176
#174 := (iff #162 #173)
#171 := (iff #35 #138)
#172 := [rewrite]: #171
#175 := [monotonicity #172]: #174
#179 := [trans #175 #177]: #178
#184 := [monotonicity #179 #181]: #183
#189 := [trans #184 #187]: #188
#192 := [quant-intro #189]: #191
#169 := (iff #38 #168)
#166 := (iff #37 #163)
#159 := (implies #35 #156)
#164 := (iff #159 #163)
#165 := [rewrite]: #164
#160 := (iff #37 #159)
#157 := (iff #36 #156)
#158 := [rewrite]: #157
#161 := [monotonicity #158]: #160
#167 := [trans #161 #165]: #166
#170 := [quant-intro #167]: #169
#194 := [trans #170 #192]: #193
#155 := [asserted]: #38
#195 := [mp #155 #194]: #190
#342 := [mp~ #195 #329]: #190
#908 := [mp #342 #907]: #903
#864 := (not #903)
#527 := (or #864 #881 #885)
#886 := (or #885 #881)
#528 := (or #864 #886)
#870 := (iff #528 #527)
#530 := (or #864 #539)
#868 := (iff #530 #527)
#869 := [rewrite]: #868
#866 := (iff #528 #530)
#880 := (iff #886 #539)
#523 := [rewrite]: #880
#867 := [monotonicity #523]: #866
#865 := [trans #867 #869]: #870
#529 := [quant-inst #15]: #528
#871 := [mp #529 #865]: #527
#650 := [unit-resolution #871 #908]: #539
#640 := [unit-resolution #650 #654]: #885
#634 := [mp #640 #641]: #829
#747 := (not #829)
#753 := (not #826)
#652 := (or #753 #881)
#655 := [th-lemma arith triangle-eq]: #652
#643 := [unit-resolution #655 #654]: #753
#648 := (or #747 #826)
#795 := -3::Int
#212 := -1::Int
#849 := (* -1::Int #12)
#799 := (div #849 -3::Int)
#801 := (* -1::Int #799)
#790 := (+ #15 #801)
#789 := (= #790 0::Int)
#835 := (div #12 3::Int)
#836 := (* -1::Int #835)
#837 := (+ #15 #836)
#831 := (= #837 0::Int)
#840 := (<= #12 0::Int)
#730 := (not #840)
#832 := (>= #12 0::Int)
#815 := (not #832)
#808 := (or #815 #730)
#774 := (ite #808 #831 #789)
#778 := (ite #829 #826 #774)
#39 := (:var 1 Int)
#40 := (f6 f7 #39)
#41 := (f5 #40 #28)
#909 := (pattern #41)
#216 := (* -1::Int #28)
#213 := (* -1::Int #39)
#219 := (div #213 #216)
#391 := (* -1::Int #219)
#392 := (+ #41 #391)
#393 := (= #392 0::Int)
#51 := (div #39 #28)
#388 := (* -1::Int #51)
#389 := (+ #41 #388)
#390 := (= #389 0::Int)
#251 := (>= #39 0::Int)
#244 := (<= #28 0::Int)
#351 := (or #244 #251)
#352 := (not #351)
#240 := (<= #39 0::Int)
#349 := (or #240 #244)
#350 := (not #349)
#355 := (or #350 #352)
#394 := (ite #355 #390 #393)
#387 := (= #41 0::Int)
#43 := (= #28 0::Int)
#42 := (= #39 0::Int)
#44 := (or #42 #43)
#395 := (ite #44 #387 #394)
#910 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #909) #395)
#398 := (forall (vars (?v0 Int) (?v1 Int)) #395)
#913 := (iff #398 #910)
#911 := (iff #395 #395)
#912 := [refl]: #911
#914 := [quant-intro #912]: #913
#358 := (ite #355 #51 #219)
#361 := (ite #44 0::Int #358)
#364 := (= #41 #361)
#367 := (forall (vars (?v0 Int) (?v1 Int)) #364)
#399 := (iff #367 #398)
#396 := (iff #364 #395)
#397 := [rewrite]: #396
#400 := [quant-intro #397]: #399
#252 := (not #251)
#245 := (not #244)
#255 := (and #245 #252)
#241 := (not #240)
#248 := (and #241 #245)
#258 := (or #248 #255)
#261 := (ite #258 #51 #219)
#264 := (ite #44 0::Int #261)
#267 := (= #41 #264)
#270 := (forall (vars (?v0 Int) (?v1 Int)) #267)
#368 := (iff #270 #367)
#365 := (iff #267 #364)
#362 := (= #264 #361)
#359 := (= #261 #358)
#356 := (iff #258 #355)
#353 := (iff #255 #352)
#354 := [rewrite]: #353
#334 := (iff #248 #350)
#335 := [rewrite]: #334
#357 := [monotonicity #335 #354]: #356
#360 := [monotonicity #357]: #359
#363 := [monotonicity #360]: #362
#366 := [monotonicity #363]: #365
#369 := [quant-intro #366]: #368
#330 := (~ #270 #270)
#343 := (~ #267 #267)
#344 := [refl]: #343
#331 := [nnf-pos #344]: #330
#53 := (- #28)
#52 := (- #39)
#54 := (div #52 #53)
#46 := (< 0::Int #28)
#48 := (< #39 0::Int)
#49 := (and #48 #46)
#45 := (< 0::Int #39)
#47 := (and #45 #46)
#50 := (or #47 #49)
#55 := (ite #50 #51 #54)
#56 := (ite #44 0::Int #55)
#57 := (= #41 #56)
#58 := (forall (vars (?v0 Int) (?v1 Int)) #57)
#273 := (iff #58 #270)
#206 := (and #46 #48)
#209 := (or #47 #206)
#222 := (ite #209 #51 #219)
#200 := (= 0::Int #28)
#197 := (= 0::Int #39)
#203 := (or #197 #200)
#225 := (ite #203 0::Int #222)
#228 := (= #41 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#271 := (iff #231 #270)
#268 := (iff #228 #267)
#265 := (= #225 #264)
#262 := (= #222 #261)
#259 := (iff #209 #258)
#256 := (iff #206 #255)
#253 := (iff #48 #252)
#254 := [rewrite]: #253
#246 := (iff #46 #245)
#247 := [rewrite]: #246
#257 := [monotonicity #247 #254]: #256
#249 := (iff #47 #248)
#242 := (iff #45 #241)
#243 := [rewrite]: #242
#250 := [monotonicity #243 #247]: #249
#260 := [monotonicity #250 #257]: #259
#263 := [monotonicity #260]: #262
#238 := (iff #203 #44)
#236 := (iff #200 #43)
#237 := [rewrite]: #236
#234 := (iff #197 #42)
#235 := [rewrite]: #234
#239 := [monotonicity #235 #237]: #238
#266 := [monotonicity #239 #263]: #265
#269 := [monotonicity #266]: #268
#272 := [quant-intro #269]: #271
#232 := (iff #58 #231)
#229 := (iff #57 #228)
#226 := (= #56 #225)
#223 := (= #55 #222)
#220 := (= #54 #219)
#217 := (= #53 #216)
#218 := [rewrite]: #217
#214 := (= #52 #213)
#215 := [rewrite]: #214
#221 := [monotonicity #215 #218]: #220
#210 := (iff #50 #209)
#207 := (iff #49 #206)
#208 := [rewrite]: #207
#211 := [monotonicity #208]: #210
#224 := [monotonicity #211 #221]: #223
#204 := (iff #44 #203)
#201 := (iff #43 #200)
#202 := [rewrite]: #201
#198 := (iff #42 #197)
#199 := [rewrite]: #198
#205 := [monotonicity #199 #202]: #204
#227 := [monotonicity #205 #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#274 := [trans #233 #272]: #273
#196 := [asserted]: #58
#275 := [mp #196 #274]: #270
#345 := [mp~ #275 #331]: #270
#370 := [mp #345 #369]: #367
#401 := [mp #370 #400]: #398
#915 := [mp #401 #914]: #910
#781 := (not #910)
#782 := (or #781 #778)
#843 := (* -1::Int 3::Int)
#690 := (div #849 #843)
#691 := (* -1::Int #690)
#692 := (+ #15 #691)
#834 := (= #692 0::Int)
#838 := (<= 3::Int 0::Int)
#839 := (or #838 #832)
#833 := (not #839)
#669 := (or #840 #838)
#671 := (not #669)
#672 := (or #671 #833)
#825 := (ite #672 #831 #834)
#828 := (= 3::Int 0::Int)
#827 := (or #829 #828)
#830 := (ite #827 #826 #825)
#783 := (or #781 #830)
#785 := (iff #783 #782)
#786 := (iff #782 #782)
#764 := [rewrite]: #786
#779 := (iff #830 #778)
#776 := (iff #825 #774)
#793 := (iff #834 #789)
#791 := (= #692 #790)
#787 := (= #691 #801)
#800 := (= #690 #799)
#797 := (= #843 -3::Int)
#798 := [rewrite]: #797
#796 := [monotonicity #798]: #800
#788 := [monotonicity #796]: #787
#792 := [monotonicity #788]: #791
#773 := [monotonicity #792]: #793
#810 := (iff #672 #808)
#817 := (or #730 #815)
#809 := (iff #817 #808)
#803 := [rewrite]: #809
#806 := (iff #672 #817)
#816 := (iff #833 #815)
#804 := (iff #839 #832)
#824 := (or false #832)
#805 := (iff #824 #832)
#802 := [rewrite]: #805
#811 := (iff #839 #824)
#707 := (iff #838 false)
#722 := [rewrite]: #707
#813 := [monotonicity #722]: #811
#814 := [trans #813 #802]: #804
#812 := [monotonicity #814]: #816
#823 := (iff #671 #730)
#728 := (iff #669 #840)
#724 := (or #840 false)
#726 := (iff #724 #840)
#727 := [rewrite]: #726
#725 := (iff #669 #724)
#718 := [monotonicity #722]: #725
#729 := [trans #718 #727]: #728
#820 := [monotonicity #729]: #823
#807 := [monotonicity #820 #812]: #806
#794 := [trans #807 #803]: #810
#777 := [monotonicity #794 #773]: #776
#819 := (iff #827 #829)
#714 := (or #829 false)
#723 := (iff #714 #829)
#818 := [rewrite]: #723
#673 := (iff #827 #714)
#712 := (iff #828 false)
#713 := [rewrite]: #712
#821 := [monotonicity #713]: #673
#822 := [trans #821 #818]: #819
#780 := [monotonicity #822 #777]: #779
#775 := [monotonicity #780]: #785
#765 := [trans #775 #764]: #785
#784 := [quant-inst #12 #14]: #783
#767 := [mp #784 #765]: #782
#646 := [unit-resolution #767 #915]: #778
#746 := (not #778)
#750 := (or #746 #747 #826)
#751 := [def-axiom]: #750
#649 := [unit-resolution #751 #646]: #648
#645 := [unit-resolution #649 #643]: #747
#642 := [unit-resolution #645 #634]: false
#638 := [lemma #642]: #635
#578 := [unit-resolution #638 #569]: #881
#884 := (or #552 #883)
#882 := (or #887 #552 #883)
#888 := (or #887 #884)
#538 := (iff #888 #882)
#543 := [rewrite]: #538
#878 := [quant-inst #15]: #888
#879 := [mp #878 #543]: #882
#579 := [unit-resolution #879 #902]: #884
#570 := [unit-resolution #579 #578]: #552
#487 := (= 0::Int #15)
#644 := (* -1::Int #15)
#647 := (+ #12 #644)
#653 := (>= #647 0::Int)
#665 := (= #12 #15)
#507 := (= #551 #15)
#503 := [symm #570]: #507
#508 := [trans #505 #503]: #665
#490 := (not #665)
#494 := (or #490 #653)
#495 := [th-lemma arith triangle-eq]: #494
#498 := [unit-resolution #495 #508]: #653
#499 := (not #653)
#500 := (or #832 #883 #499)
#492 := [th-lemma arith assign-bounds 1 1]: #500
#501 := [unit-resolution #492 #578 #498]: #832
#651 := (<= #647 0::Int)
#485 := (or #490 #651)
#482 := [th-lemma arith triangle-eq]: #485
#483 := [unit-resolution #482 #508]: #651
#519 := (not #651)
#496 := (or #826 #519 #815 #883)
#620 := (* -3::Int #835)
#755 := (mod #12 3::Int)
#619 := (* -1::Int #755)
#621 := (+ #619 #620)
#622 := (+ #12 #621)
#618 := (= #622 0::Int)
#87 := [true-axiom]: true
#580 := (or false #618)
#547 := [th-lemma arith]: #580
#549 := [unit-resolution #547 #87]: #618
#604 := (>= #622 0::Int)
#520 := (not #604)
#605 := (>= #755 0::Int)
#550 := (or false #605)
#541 := [th-lemma arith]: #550
#554 := [unit-resolution #541 #87]: #605
#768 := (<= #15 0::Int)
#557 := (not #768)
#555 := [hypothesis]: #881
#556 := [hypothesis]: #753
#558 := (or #826 #557 #883)
#548 := [th-lemma arith triangle-eq]: #558
#559 := [unit-resolution #548 #556 #555]: #557
#542 := [hypothesis]: #651
#756 := (<= #837 0::Int)
#544 := [unit-resolution #649 #556]: #747
#545 := (or #829 #774)
#752 := (or #746 #829 #774)
#748 := [def-axiom]: #752
#524 := [unit-resolution #748 #646]: #545
#526 := [unit-resolution #524 #544]: #774
#531 := [hypothesis]: #832
#532 := (or #829 #730 #815)
#533 := [th-lemma arith triangle-eq]: #532
#534 := [unit-resolution #533 #544 #531]: #730
#771 := (or #808 #840)
#766 := [def-axiom]: #771
#535 := [unit-resolution #766 #534]: #808
#772 := (not #808)
#757 := (not #774)
#763 := (or #757 #772 #831)
#736 := [def-axiom]: #763
#536 := [unit-resolution #736 #535 #526]: #831
#631 := (not #831)
#525 := (or #631 #756)
#537 := [th-lemma arith triangle-eq]: #525
#518 := [unit-resolution #537 #536]: #756
#522 := (not #756)
#521 := (not #605)
#510 := (or #520 #521 #768 #519 #522)
#512 := [th-lemma arith assign-bounds 1 2 1 3]: #510
#513 := [unit-resolution #512 #518 #542 #559 #554]: #520
#516 := (not #618)
#511 := (or #516 #604)
#517 := [th-lemma arith triangle-eq]: #511
#491 := [unit-resolution #517 #513 #549]: false
#497 := [lemma #491]: #496
#486 := [unit-resolution #497 #483 #501 #578]: #826
#488 := [symm #486]: #487
#476 := [trans #488 #570]: #489
#479 := [trans #476 #484]: #478
#923 := [monotonicity #479]: #480
#925 := [symm #923]: #924
#546 := (= f10 #567)
#23 := (:var 0 S3)
#24 := (f8 f9 #23)
#889 := (pattern #24)
#25 := (f3 f4 #24)
#111 := (= #23 #25)
#890 := (forall (vars (?v0 S3)) (:pat #889) #111)
#115 := (forall (vars (?v0 S3)) #111)
#893 := (iff #115 #890)
#891 := (iff #111 #111)
#892 := [refl]: #891
#894 := [quant-intro #892]: #893
#338 := (~ #115 #115)
#336 := (~ #111 #111)
#337 := [refl]: #336
#339 := [nnf-pos #337]: #338
#26 := (= #25 #23)
#27 := (forall (vars (?v0 S3)) #26)
#116 := (iff #27 #115)
#113 := (iff #26 #111)
#114 := [rewrite]: #113
#117 := [quant-intro #114]: #116
#110 := [asserted]: #27
#120 := [mp #110 #117]: #115
#324 := [mp~ #120 #339]: #115
#895 := [mp #324 #894]: #890
#540 := (not #890)
#670 := (or #540 #546)
#877 := [quant-inst #11]: #670
#477 := [unit-resolution #877 #895]: #546
#926 := [trans #477 #925]: #20
#927 := [unit-resolution #577 #926]: false
#928 := [lemma #927]: #20
#933 := [monotonicity #928]: #932
#934 := [trans #933 #929]: #829
#935 := [unit-resolution #649 #934]: #826
#937 := [monotonicity #935]: #936
#939 := [symm #937]: #938
#940 := [trans #928 #939]: #90
#566 := (or #564 #104)
#565 := (or #564 #104 #475)
#493 := [def-axiom]: #565
#563 := [unit-resolution #493 #112]: #566
#502 := [unit-resolution #563 #928]: #564
[unit-resolution #502 #940]: false
unsat
def579ba90bce689eaa18e94c9b7ab7ad2dc94d2 286 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 0::Int
decl f4 :: S2
#8 := f4
#14 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 0::Int)
#12 := (f5 #11 0::Int)
#13 := (f3 f4 #12)
#15 := (= #13 #14)
#811 := (= #12 0::Int)
#23 := (:var 0 Int)
#35 := (:var 1 Int)
#55 := (f6 f7 #35)
#56 := (f5 #55 #23)
#890 := (pattern #56)
#186 := -1::Int
#190 := (* -1::Int #23)
#187 := (* -1::Int #35)
#251 := (mod #187 #190)
#381 := (+ #56 #251)
#382 := (= #381 0::Int)
#57 := (mod #35 #23)
#378 := (* -1::Int #57)
#379 := (+ #56 #378)
#380 := (= #379 0::Int)
#225 := (>= #35 0::Int)
#218 := (<= #23 0::Int)
#325 := (or #218 #225)
#326 := (not #325)
#214 := (<= #35 0::Int)
#323 := (or #214 #218)
#324 := (not #323)
#329 := (or #324 #326)
#383 := (ite #329 #380 #382)
#377 := (= #56 0::Int)
#38 := (= #35 0::Int)
#384 := (ite #38 #377 #383)
#376 := (= #35 #56)
#39 := (= #23 0::Int)
#385 := (ite #39 #376 #384)
#891 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #890) #385)
#388 := (forall (vars (?v0 Int) (?v1 Int)) #385)
#894 := (iff #388 #891)
#892 := (iff #385 #385)
#893 := [refl]: #892
#895 := [quant-intro #893]: #894
#257 := (* -1::Int #251)
#345 := (ite #329 #57 #257)
#348 := (ite #38 0::Int #345)
#351 := (ite #39 #35 #348)
#354 := (= #56 #351)
#357 := (forall (vars (?v0 Int) (?v1 Int)) #354)
#389 := (iff #357 #388)
#386 := (iff #354 #385)
#387 := [rewrite]: #386
#390 := [quant-intro #387]: #389
#226 := (not #225)
#219 := (not #218)
#229 := (and #219 #226)
#215 := (not #214)
#222 := (and #215 #219)
#232 := (or #222 #229)
#277 := (ite #232 #57 #257)
#280 := (ite #38 0::Int #277)
#283 := (ite #39 #35 #280)
#286 := (= #56 #283)
#289 := (forall (vars (?v0 Int) (?v1 Int)) #286)
#358 := (iff #289 #357)
#355 := (iff #286 #354)
#352 := (= #283 #351)
#349 := (= #280 #348)
#346 := (= #277 #345)
#330 := (iff #232 #329)
#327 := (iff #229 #326)
#328 := [rewrite]: #327
#308 := (iff #222 #324)
#309 := [rewrite]: #308
#331 := [monotonicity #309 #328]: #330
#347 := [monotonicity #331]: #346
#350 := [monotonicity #347]: #349
#353 := [monotonicity #350]: #352
#356 := [monotonicity #353]: #355
#359 := [quant-intro #356]: #358
#306 := (~ #289 #289)
#320 := (~ #286 #286)
#321 := [refl]: #320
#307 := [nnf-pos #321]: #306
#49 := (- #23)
#48 := (- #35)
#58 := (mod #48 #49)
#59 := (- #58)
#42 := (< 0::Int #23)
#44 := (< #35 0::Int)
#45 := (and #44 #42)
#41 := (< 0::Int #35)
#43 := (and #41 #42)
#46 := (or #43 #45)
#60 := (ite #46 #57 #59)
#61 := (ite #38 0::Int #60)
#62 := (ite #39 #35 #61)
#63 := (= #56 #62)
#64 := (forall (vars (?v0 Int) (?v1 Int)) #63)
#292 := (iff #64 #289)
#180 := (and #42 #44)
#183 := (or #43 #180)
#262 := (ite #183 #57 #257)
#171 := (= 0::Int #35)
#265 := (ite #171 0::Int #262)
#174 := (= 0::Int #23)
#268 := (ite #174 #35 #265)
#271 := (= #56 #268)
#274 := (forall (vars (?v0 Int) (?v1 Int)) #271)
#290 := (iff #274 #289)
#287 := (iff #271 #286)
#284 := (= #268 #283)
#281 := (= #265 #280)
#278 := (= #262 #277)
#233 := (iff #183 #232)
#230 := (iff #180 #229)
#227 := (iff #44 #226)
#228 := [rewrite]: #227
#220 := (iff #42 #219)
#221 := [rewrite]: #220
#231 := [monotonicity #221 #228]: #230
#223 := (iff #43 #222)
#216 := (iff #41 #215)
#217 := [rewrite]: #216
#224 := [monotonicity #217 #221]: #223
#234 := [monotonicity #224 #231]: #233
#279 := [monotonicity #234]: #278
#208 := (iff #171 #38)
#209 := [rewrite]: #208
#282 := [monotonicity #209 #279]: #281
#210 := (iff #174 #39)
#211 := [rewrite]: #210
#285 := [monotonicity #211 #282]: #284
#288 := [monotonicity #285]: #287
#291 := [quant-intro #288]: #290
#275 := (iff #64 #274)
#272 := (iff #63 #271)
#269 := (= #62 #268)
#266 := (= #61 #265)
#263 := (= #60 #262)
#260 := (= #59 #257)
#254 := (- #251)
#258 := (= #254 #257)
#259 := [rewrite]: #258
#255 := (= #59 #254)
#252 := (= #58 #251)
#191 := (= #49 #190)
#192 := [rewrite]: #191
#188 := (= #48 #187)
#189 := [rewrite]: #188
#253 := [monotonicity #189 #192]: #252
#256 := [monotonicity #253]: #255
#261 := [trans #256 #259]: #260
#184 := (iff #46 #183)
#181 := (iff #45 #180)
#182 := [rewrite]: #181
#185 := [monotonicity #182]: #184
#264 := [monotonicity #185 #261]: #263
#172 := (iff #38 #171)
#173 := [rewrite]: #172
#267 := [monotonicity #173 #264]: #266
#175 := (iff #39 #174)
#176 := [rewrite]: #175
#270 := [monotonicity #176 #267]: #269
#273 := [monotonicity #270]: #272
#276 := [quant-intro #273]: #275
#293 := [trans #276 #291]: #292
#250 := [asserted]: #64
#294 := [mp #250 #293]: #289
#322 := [mp~ #294 #307]: #289
#360 := [mp #322 #359]: #357
#391 := [mp #360 #390]: #388
#896 := [mp #391 #895]: #891
#767 := (not #891)
#747 := (or #767 #811)
#818 := (* -1::Int 0::Int)
#819 := (mod #818 #818)
#820 := (+ #12 #819)
#815 := (= #820 0::Int)
#816 := (mod 0::Int 0::Int)
#821 := (* -1::Int #816)
#822 := (+ #12 #821)
#817 := (= #822 0::Int)
#840 := (>= 0::Int 0::Int)
#823 := (<= 0::Int 0::Int)
#664 := (or #823 #840)
#665 := (not #664)
#666 := (or #823 #823)
#808 := (not #666)
#809 := (or #808 #665)
#810 := (ite #809 #817 #815)
#805 := (= 0::Int 0::Int)
#806 := (ite #805 #811 #810)
#812 := (= 0::Int #12)
#813 := (ite #805 #812 #806)
#748 := (or #767 #813)
#751 := (iff #748 #747)
#753 := (iff #747 #747)
#754 := [rewrite]: #753
#766 := (iff #813 #811)
#1 := true
#775 := (ite true #811 #811)
#764 := (iff #775 #811)
#765 := [rewrite]: #764
#761 := (iff #813 #775)
#774 := (iff #806 #811)
#776 := (+ #12 #816)
#789 := (= #776 0::Int)
#768 := (ite true #811 #789)
#772 := (iff #768 #811)
#773 := [rewrite]: #772
#769 := (iff #806 #768)
#777 := (iff #810 #789)
#791 := (ite false #817 #789)
#782 := (iff #791 #789)
#783 := [rewrite]: #782
#780 := (iff #810 #791)
#790 := (iff #815 #789)
#778 := (= #820 #776)
#787 := (= #819 #816)
#798 := (= #818 0::Int)
#785 := [rewrite]: #798
#779 := [monotonicity #785 #785]: #787
#788 := [monotonicity #779]: #778
#786 := [monotonicity #788]: #790
#797 := (iff #809 false)
#700 := (or false false)
#703 := (iff #700 false)
#704 := [rewrite]: #703
#701 := (iff #809 #700)
#699 := (iff #665 false)
#488 := (not true)
#847 := (iff #488 false)
#850 := [rewrite]: #847
#696 := (iff #665 #488)
#796 := (iff #664 true)
#800 := (or true true)
#801 := (iff #800 true)
#804 := [rewrite]: #801
#792 := (iff #664 #800)
#846 := (iff #840 true)
#848 := [rewrite]: #846
#646 := (iff #823 true)
#799 := [rewrite]: #646
#793 := [monotonicity #799 #848]: #792
#681 := [trans #793 #804]: #796
#698 := [monotonicity #681]: #696
#692 := [trans #698 #850]: #699
#795 := (iff #808 false)
#688 := (iff #808 #488)
#686 := (iff #666 true)
#802 := (iff #666 #800)
#803 := [monotonicity #799 #799]: #802
#687 := [trans #803 #804]: #686
#647 := [monotonicity #687]: #688
#697 := [trans #647 #850]: #795
#702 := [monotonicity #697 #692]: #701
#794 := [trans #702 #704]: #797
#781 := [monotonicity #794 #786]: #780
#784 := [trans #781 #783]: #777
#807 := (iff #805 true)
#814 := [rewrite]: #807
#771 := [monotonicity #814 #784]: #769
#770 := [trans #771 #773]: #774
#643 := (iff #812 #811)
#645 := [rewrite]: #643
#762 := [monotonicity #814 #645 #770]: #761
#763 := [trans #762 #765]: #766
#752 := [monotonicity #763]: #751
#755 := [trans #752 #754]: #751
#750 := [quant-inst #10 #10]: #748
#756 := [mp #750 #755]: #747
#758 := [unit-resolution #756 #896]: #811
#759 := [monotonicity #758]: #15
#16 := (not #15)
#84 := [asserted]: #16
[unit-resolution #84 #759]: false
unsat
4544bd7f1d69a8c650d4127827c1814d67919bb5 334 0
#2 := false
decl f3 :: (-> S2 Int S3)
decl f5 :: (-> S4 Int Int)
#14 := 0::Int
decl f6 :: (-> S5 Int S4)
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#11 := f10
decl f9 :: S6
#10 := f9
#12 := (f8 f9 f10)
decl f7 :: S5
#9 := f7
#13 := (f6 f7 #12)
#15 := (f5 #13 0::Int)
decl f4 :: S2
#8 := f4
#16 := (f3 f4 #15)
#86 := (= f10 #16)
#457 := (f3 f4 #12)
#792 := (= #457 #16)
#791 := (= #16 #457)
#788 := (= #15 #12)
#838 := (= #12 #15)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#898 := (pattern #57)
#194 := -1::Int
#198 := (* -1::Int #24)
#195 := (* -1::Int #36)
#259 := (mod #195 #198)
#389 := (+ #57 #259)
#390 := (= #389 0::Int)
#58 := (mod #36 #24)
#386 := (* -1::Int #58)
#387 := (+ #57 #386)
#388 := (= #387 0::Int)
#233 := (>= #36 0::Int)
#226 := (<= #24 0::Int)
#333 := (or #226 #233)
#334 := (not #333)
#222 := (<= #36 0::Int)
#331 := (or #222 #226)
#332 := (not #331)
#337 := (or #332 #334)
#391 := (ite #337 #388 #390)
#385 := (= #57 0::Int)
#39 := (= #36 0::Int)
#392 := (ite #39 #385 #391)
#384 := (= #36 #57)
#40 := (= #24 0::Int)
#393 := (ite #40 #384 #392)
#899 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #898) #393)
#396 := (forall (vars (?v0 Int) (?v1 Int)) #393)
#902 := (iff #396 #899)
#900 := (iff #393 #393)
#901 := [refl]: #900
#903 := [quant-intro #901]: #902
#265 := (* -1::Int #259)
#353 := (ite #337 #58 #265)
#356 := (ite #39 0::Int #353)
#359 := (ite #40 #36 #356)
#362 := (= #57 #359)
#365 := (forall (vars (?v0 Int) (?v1 Int)) #362)
#397 := (iff #365 #396)
#394 := (iff #362 #393)
#395 := [rewrite]: #394
#398 := [quant-intro #395]: #397
#234 := (not #233)
#227 := (not #226)
#237 := (and #227 #234)
#223 := (not #222)
#230 := (and #223 #227)
#240 := (or #230 #237)
#285 := (ite #240 #58 #265)
#288 := (ite #39 0::Int #285)
#291 := (ite #40 #36 #288)
#294 := (= #57 #291)
#297 := (forall (vars (?v0 Int) (?v1 Int)) #294)
#366 := (iff #297 #365)
#363 := (iff #294 #362)
#360 := (= #291 #359)
#357 := (= #288 #356)
#354 := (= #285 #353)
#338 := (iff #240 #337)
#335 := (iff #237 #334)
#336 := [rewrite]: #335
#316 := (iff #230 #332)
#317 := [rewrite]: #316
#339 := [monotonicity #317 #336]: #338
#355 := [monotonicity #339]: #354
#358 := [monotonicity #355]: #357
#361 := [monotonicity #358]: #360
#364 := [monotonicity #361]: #363
#367 := [quant-intro #364]: #366
#314 := (~ #297 #297)
#328 := (~ #294 #294)
#329 := [refl]: #328
#315 := [nnf-pos #329]: #314
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (ite #47 #58 #60)
#62 := (ite #39 0::Int #61)
#63 := (ite #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#300 := (iff #65 #297)
#188 := (and #43 #45)
#191 := (or #44 #188)
#270 := (ite #191 #58 #265)
#179 := (= 0::Int #36)
#273 := (ite #179 0::Int #270)
#182 := (= 0::Int #24)
#276 := (ite #182 #36 #273)
#279 := (= #57 #276)
#282 := (forall (vars (?v0 Int) (?v1 Int)) #279)
#298 := (iff #282 #297)
#295 := (iff #279 #294)
#292 := (= #276 #291)
#289 := (= #273 #288)
#286 := (= #270 #285)
#241 := (iff #191 #240)
#238 := (iff #188 #237)
#235 := (iff #45 #234)
#236 := [rewrite]: #235
#228 := (iff #43 #227)
#229 := [rewrite]: #228
#239 := [monotonicity #229 #236]: #238
#231 := (iff #44 #230)
#224 := (iff #42 #223)
#225 := [rewrite]: #224
#232 := [monotonicity #225 #229]: #231
#242 := [monotonicity #232 #239]: #241
#287 := [monotonicity #242]: #286
#216 := (iff #179 #39)
#217 := [rewrite]: #216
#290 := [monotonicity #217 #287]: #289
#218 := (iff #182 #40)
#219 := [rewrite]: #218
#293 := [monotonicity #219 #290]: #292
#296 := [monotonicity #293]: #295
#299 := [quant-intro #296]: #298
#283 := (iff #65 #282)
#280 := (iff #64 #279)
#277 := (= #63 #276)
#274 := (= #62 #273)
#271 := (= #61 #270)
#268 := (= #60 #265)
#262 := (- #259)
#266 := (= #262 #265)
#267 := [rewrite]: #266
#263 := (= #60 #262)
#260 := (= #59 #259)
#199 := (= #50 #198)
#200 := [rewrite]: #199
#196 := (= #49 #195)
#197 := [rewrite]: #196
#261 := [monotonicity #197 #200]: #260
#264 := [monotonicity #261]: #263
#269 := [trans #264 #267]: #268
#192 := (iff #47 #191)
#189 := (iff #46 #188)
#190 := [rewrite]: #189
#193 := [monotonicity #190]: #192
#272 := [monotonicity #193 #269]: #271
#180 := (iff #39 #179)
#181 := [rewrite]: #180
#275 := [monotonicity #181 #272]: #274
#183 := (iff #40 #182)
#184 := [rewrite]: #183
#278 := [monotonicity #184 #275]: #277
#281 := [monotonicity #278]: #280
#284 := [quant-intro #281]: #283
#301 := [trans #284 #299]: #300
#258 := [asserted]: #65
#302 := [mp #258 #301]: #297
#330 := [mp~ #302 #315]: #297
#368 := [mp #330 #367]: #365
#399 := [mp #368 #398]: #396
#904 := [mp #399 #903]: #899
#806 := (not #899)
#793 := (or #806 #838)
#847 := (* -1::Int 0::Int)
#853 := (* -1::Int #12)
#491 := (mod #853 #847)
#854 := (+ #15 #491)
#856 := (= #854 0::Int)
#496 := (mod #12 0::Int)
#497 := (* -1::Int #496)
#857 := (+ #15 #497)
#855 := (= #857 0::Int)
#858 := (>= #12 0::Int)
#844 := (<= 0::Int 0::Int)
#845 := (or #844 #858)
#567 := (not #845)
#568 := (<= #12 0::Int)
#569 := (or #568 #844)
#570 := (not #569)
#463 := (or #570 #567)
#840 := (ite #463 #855 #856)
#841 := (= #15 0::Int)
#563 := (= #12 0::Int)
#564 := (ite #563 #841 #840)
#842 := (= 0::Int 0::Int)
#839 := (ite #842 #838 #564)
#795 := (or #806 #839)
#784 := (iff #795 #793)
#796 := (iff #793 #793)
#797 := [rewrite]: #796
#805 := (iff #839 #838)
#808 := (mod #853 0::Int)
#809 := (+ #15 #808)
#695 := (= #809 0::Int)
#706 := (ite #563 #841 #695)
#1 := true
#708 := (ite true #838 #706)
#711 := (iff #708 #838)
#712 := [rewrite]: #711
#709 := (iff #839 #708)
#707 := (iff #564 #706)
#689 := (iff #840 #695)
#803 := (ite false #855 #695)
#801 := (iff #803 #695)
#804 := [rewrite]: #801
#705 := (iff #840 #803)
#696 := (iff #856 #695)
#812 := (= #854 #809)
#810 := (= #491 #808)
#654 := (= #847 0::Int)
#807 := [rewrite]: #654
#811 := [monotonicity #807]: #810
#694 := [monotonicity #811]: #812
#655 := [monotonicity #694]: #696
#651 := (iff #463 false)
#814 := (or false false)
#815 := (iff #814 false)
#822 := [rewrite]: #815
#820 := (iff #463 #814)
#819 := (iff #567 false)
#837 := (not true)
#828 := (iff #837 false)
#823 := [rewrite]: #828
#817 := (iff #567 #837)
#674 := (iff #845 true)
#830 := (or true #858)
#672 := (iff #830 true)
#673 := [rewrite]: #672
#825 := (iff #845 #830)
#554 := (iff #844 true)
#555 := [rewrite]: #554
#831 := [monotonicity #555]: #825
#816 := [trans #831 #673]: #674
#818 := [monotonicity #816]: #817
#813 := [trans #818 #823]: #819
#824 := (iff #570 false)
#826 := (iff #570 #837)
#836 := (iff #569 true)
#556 := (or #568 true)
#550 := (iff #556 true)
#832 := [rewrite]: #550
#834 := (iff #569 #556)
#835 := [monotonicity #555]: #834
#833 := [trans #835 #832]: #836
#827 := [monotonicity #833]: #826
#829 := [trans #827 #823]: #824
#821 := [monotonicity #829 #813]: #820
#653 := [trans #821 #822]: #651
#800 := [monotonicity #653 #655]: #705
#704 := [trans #800 #804]: #689
#700 := [monotonicity #704]: #707
#843 := (iff #842 true)
#553 := [rewrite]: #843
#710 := [monotonicity #553 #700]: #709
#802 := [trans #710 #712]: #805
#786 := [monotonicity #802]: #784
#798 := [trans #786 #797]: #784
#787 := [quant-inst #12 #14]: #795
#794 := [mp #787 #798]: #793
#799 := [unit-resolution #794 #904]: #838
#789 := [symm #799]: #788
#785 := [monotonicity #789]: #791
#776 := [symm #785]: #792
#542 := (= f10 #457)
#19 := (:var 0 S3)
#20 := (f8 f9 #19)
#871 := (pattern #20)
#21 := (f3 f4 #20)
#93 := (= #19 #21)
#872 := (forall (vars (?v0 S3)) (:pat #871) #93)
#97 := (forall (vars (?v0 S3)) #93)
#875 := (iff #97 #872)
#873 := (iff #93 #93)
#874 := [refl]: #873
#876 := [quant-intro #874]: #875
#320 := (~ #97 #97)
#318 := (~ #93 #93)
#319 := [refl]: #318
#321 := [nnf-pos #319]: #320
#22 := (= #21 #19)
#23 := (forall (vars (?v0 S3)) #22)
#98 := (iff #23 #97)
#95 := (iff #22 #93)
#96 := [rewrite]: #95
#99 := [quant-intro #96]: #98
#92 := [asserted]: #23
#102 := [mp #92 #99]: #97
#306 := [mp~ #102 #321]: #97
#877 := [mp #306 #876]: #872
#535 := (not #872)
#546 := (or #535 #542)
#547 := [quant-inst #11]: #546
#790 := [unit-resolution #547 #877]: #542
#777 := [trans #790 #776]: #86
#89 := (not #86)
#17 := (= #16 f10)
#18 := (not #17)
#90 := (iff #18 #89)
#87 := (iff #17 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#85 := [asserted]: #18
#94 := [mp #85 #91]: #89
[unit-resolution #94 #777]: false
unsat
a5014a162e416bc201fb7db6aadb8a2975a31d13 316 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#12 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 0::Int)
#13 := (f5 #11 1::Int)
#14 := (f3 f4 #13)
#16 := (= #14 #15)
#812 := (= #13 0::Int)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#890 := (pattern #57)
#187 := -1::Int
#191 := (* -1::Int #24)
#188 := (* -1::Int #36)
#252 := (mod #188 #191)
#382 := (+ #57 #252)
#383 := (= #382 0::Int)
#58 := (mod #36 #24)
#379 := (* -1::Int #58)
#380 := (+ #57 #379)
#381 := (= #380 0::Int)
#226 := (>= #36 0::Int)
#219 := (<= #24 0::Int)
#326 := (or #219 #226)
#327 := (not #326)
#215 := (<= #36 0::Int)
#324 := (or #215 #219)
#325 := (not #324)
#330 := (or #325 #327)
#384 := (ite #330 #381 #383)
#378 := (= #57 0::Int)
#39 := (= #36 0::Int)
#385 := (ite #39 #378 #384)
#377 := (= #36 #57)
#40 := (= #24 0::Int)
#386 := (ite #40 #377 #385)
#891 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #890) #386)
#389 := (forall (vars (?v0 Int) (?v1 Int)) #386)
#894 := (iff #389 #891)
#892 := (iff #386 #386)
#893 := [refl]: #892
#895 := [quant-intro #893]: #894
#258 := (* -1::Int #252)
#346 := (ite #330 #58 #258)
#349 := (ite #39 0::Int #346)
#352 := (ite #40 #36 #349)
#355 := (= #57 #352)
#358 := (forall (vars (?v0 Int) (?v1 Int)) #355)
#390 := (iff #358 #389)
#387 := (iff #355 #386)
#388 := [rewrite]: #387
#391 := [quant-intro #388]: #390
#227 := (not #226)
#220 := (not #219)
#230 := (and #220 #227)
#216 := (not #215)
#223 := (and #216 #220)
#233 := (or #223 #230)
#278 := (ite #233 #58 #258)
#281 := (ite #39 0::Int #278)
#284 := (ite #40 #36 #281)
#287 := (= #57 #284)
#290 := (forall (vars (?v0 Int) (?v1 Int)) #287)
#359 := (iff #290 #358)
#356 := (iff #287 #355)
#353 := (= #284 #352)
#350 := (= #281 #349)
#347 := (= #278 #346)
#331 := (iff #233 #330)
#328 := (iff #230 #327)
#329 := [rewrite]: #328
#309 := (iff #223 #325)
#310 := [rewrite]: #309
#332 := [monotonicity #310 #329]: #331
#348 := [monotonicity #332]: #347
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#357 := [monotonicity #354]: #356
#360 := [quant-intro #357]: #359
#307 := (~ #290 #290)
#321 := (~ #287 #287)
#322 := [refl]: #321
#308 := [nnf-pos #322]: #307
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (ite #47 #58 #60)
#62 := (ite #39 0::Int #61)
#63 := (ite #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#293 := (iff #65 #290)
#181 := (and #43 #45)
#184 := (or #44 #181)
#263 := (ite #184 #58 #258)
#172 := (= 0::Int #36)
#266 := (ite #172 0::Int #263)
#175 := (= 0::Int #24)
#269 := (ite #175 #36 #266)
#272 := (= #57 #269)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#291 := (iff #275 #290)
#288 := (iff #272 #287)
#285 := (= #269 #284)
#282 := (= #266 #281)
#279 := (= #263 #278)
#234 := (iff #184 #233)
#231 := (iff #181 #230)
#228 := (iff #45 #227)
#229 := [rewrite]: #228
#221 := (iff #43 #220)
#222 := [rewrite]: #221
#232 := [monotonicity #222 #229]: #231
#224 := (iff #44 #223)
#217 := (iff #42 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#235 := [monotonicity #225 #232]: #234
#280 := [monotonicity #235]: #279
#209 := (iff #172 #39)
#210 := [rewrite]: #209
#283 := [monotonicity #210 #280]: #282
#211 := (iff #175 #40)
#212 := [rewrite]: #211
#286 := [monotonicity #212 #283]: #285
#289 := [monotonicity #286]: #288
#292 := [quant-intro #289]: #291
#276 := (iff #65 #275)
#273 := (iff #64 #272)
#270 := (= #63 #269)
#267 := (= #62 #266)
#264 := (= #61 #263)
#261 := (= #60 #258)
#255 := (- #252)
#259 := (= #255 #258)
#260 := [rewrite]: #259
#256 := (= #60 #255)
#253 := (= #59 #252)
#192 := (= #50 #191)
#193 := [rewrite]: #192
#189 := (= #49 #188)
#190 := [rewrite]: #189
#254 := [monotonicity #190 #193]: #253
#257 := [monotonicity #254]: #256
#262 := [trans #257 #260]: #261
#185 := (iff #47 #184)
#182 := (iff #46 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#265 := [monotonicity #186 #262]: #264
#173 := (iff #39 #172)
#174 := [rewrite]: #173
#268 := [monotonicity #174 #265]: #267
#176 := (iff #40 #175)
#177 := [rewrite]: #176
#271 := [monotonicity #177 #268]: #270
#274 := [monotonicity #271]: #273
#277 := [quant-intro #274]: #276
#294 := [trans #277 #292]: #293
#251 := [asserted]: #65
#295 := [mp #251 #294]: #290
#323 := [mp~ #295 #308]: #290
#361 := [mp #323 #360]: #358
#392 := [mp #361 #391]: #389
#896 := [mp #392 #895]: #891
#735 := (not #891)
#736 := (or #735 #812)
#819 := (* -1::Int 1::Int)
#820 := (* -1::Int 0::Int)
#815 := (mod #820 #819)
#816 := (+ #13 #815)
#821 := (= #816 0::Int)
#822 := (mod 0::Int 1::Int)
#817 := (* -1::Int #822)
#823 := (+ #13 #817)
#664 := (= #823 0::Int)
#841 := (>= 0::Int 0::Int)
#665 := (<= 1::Int 0::Int)
#666 := (or #665 #841)
#808 := (not #666)
#809 := (<= 0::Int 0::Int)
#810 := (or #809 #665)
#811 := (not #810)
#805 := (or #811 #808)
#806 := (ite #805 #664 #821)
#813 := (= 0::Int 0::Int)
#807 := (ite #813 #812 #806)
#814 := (= 0::Int #13)
#643 := (= 1::Int 0::Int)
#645 := (ite #643 #814 #807)
#731 := (or #735 #645)
#710 := (iff #731 #736)
#712 := (iff #736 #736)
#605 := [rewrite]: #712
#733 := (iff #645 #812)
#759 := (ite false #812 #812)
#738 := (iff #759 #812)
#739 := [rewrite]: #738
#729 := (iff #645 #759)
#732 := (iff #807 #812)
#1 := true
#743 := (ite true #812 #812)
#740 := (iff #743 #812)
#746 := [rewrite]: #740
#744 := (iff #807 #743)
#741 := (iff #806 #812)
#749 := (iff #806 #759)
#757 := (iff #821 #812)
#755 := (= #816 #13)
#771 := (+ #13 0::Int)
#774 := (= #771 #13)
#770 := [rewrite]: #774
#753 := (= #816 #771)
#751 := (= #815 0::Int)
#763 := (mod 0::Int -1::Int)
#748 := (= #763 0::Int)
#750 := [rewrite]: #748
#767 := (= #815 #763)
#765 := (= #819 -1::Int)
#766 := [rewrite]: #765
#777 := (= #820 0::Int)
#784 := [rewrite]: #777
#747 := [monotonicity #784 #766]: #767
#752 := [trans #747 #750]: #751
#754 := [monotonicity #752]: #753
#756 := [trans #754 #770]: #755
#758 := [monotonicity #756]: #757
#762 := (iff #664 #812)
#775 := (= #823 #13)
#772 := (= #823 #771)
#768 := (= #817 0::Int)
#782 := (= #817 #820)
#780 := (= #822 0::Int)
#781 := [rewrite]: #780
#783 := [monotonicity #781]: #782
#769 := [trans #783 #784]: #768
#773 := [monotonicity #769]: #772
#761 := [trans #773 #770]: #775
#764 := [monotonicity #761]: #762
#786 := (iff #805 false)
#776 := (or false false)
#789 := (iff #776 false)
#790 := [rewrite]: #789
#778 := (iff #805 #776)
#787 := (iff #808 false)
#489 := (not true)
#850 := (iff #489 false)
#836 := [rewrite]: #850
#798 := (iff #808 #489)
#797 := (iff #666 true)
#700 := (or false true)
#703 := (iff #700 true)
#704 := [rewrite]: #703
#701 := (iff #666 #700)
#848 := (iff #841 true)
#488 := [rewrite]: #848
#687 := (iff #665 false)
#688 := [rewrite]: #687
#702 := [monotonicity #688 #488]: #701
#794 := [trans #702 #704]: #797
#785 := [monotonicity #794]: #798
#779 := [trans #785 #836]: #787
#699 := (iff #811 false)
#696 := (iff #811 #489)
#796 := (iff #810 true)
#647 := (or true false)
#792 := (iff #647 true)
#793 := [rewrite]: #792
#795 := (iff #810 #647)
#804 := (iff #809 true)
#686 := [rewrite]: #804
#697 := [monotonicity #686 #688]: #795
#681 := [trans #697 #793]: #796
#698 := [monotonicity #681]: #696
#692 := [trans #698 #836]: #699
#788 := [monotonicity #692 #779]: #778
#791 := [trans #788 #790]: #786
#760 := [monotonicity #791 #764 #758]: #749
#742 := [trans #760 #739]: #741
#803 := (iff #813 true)
#801 := [rewrite]: #803
#745 := [monotonicity #801 #742]: #744
#728 := [trans #745 #746]: #732
#800 := (iff #814 #812)
#802 := [rewrite]: #800
#646 := (iff #643 false)
#799 := [rewrite]: #646
#730 := [monotonicity #799 #802 #728]: #729
#734 := [trans #730 #739]: #733
#711 := [monotonicity #734]: #710
#716 := [trans #711 #605]: #710
#737 := [quant-inst #10 #12]: #731
#717 := [mp #737 #716]: #736
#723 := [unit-resolution #717 #896]: #812
#719 := [monotonicity #723]: #16
#17 := (not #16)
#85 := [asserted]: #17
[unit-resolution #85 #719]: false
unsat
7d3574c960626fe960bfda1798915870024d0a96 317 0
#2 := false
decl f3 :: (-> S2 Int S3)
#14 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#10 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 1::Int)
#12 := (f5 #11 1::Int)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#806 := (= #12 0::Int)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#890 := (pattern #57)
#187 := -1::Int
#191 := (* -1::Int #24)
#188 := (* -1::Int #36)
#252 := (mod #188 #191)
#382 := (+ #57 #252)
#383 := (= #382 0::Int)
#58 := (mod #36 #24)
#379 := (* -1::Int #58)
#380 := (+ #57 #379)
#381 := (= #380 0::Int)
#226 := (>= #36 0::Int)
#219 := (<= #24 0::Int)
#326 := (or #219 #226)
#327 := (not #326)
#215 := (<= #36 0::Int)
#324 := (or #215 #219)
#325 := (not #324)
#330 := (or #325 #327)
#384 := (ite #330 #381 #383)
#378 := (= #57 0::Int)
#39 := (= #36 0::Int)
#385 := (ite #39 #378 #384)
#377 := (= #36 #57)
#40 := (= #24 0::Int)
#386 := (ite #40 #377 #385)
#891 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #890) #386)
#389 := (forall (vars (?v0 Int) (?v1 Int)) #386)
#894 := (iff #389 #891)
#892 := (iff #386 #386)
#893 := [refl]: #892
#895 := [quant-intro #893]: #894
#258 := (* -1::Int #252)
#346 := (ite #330 #58 #258)
#349 := (ite #39 0::Int #346)
#352 := (ite #40 #36 #349)
#355 := (= #57 #352)
#358 := (forall (vars (?v0 Int) (?v1 Int)) #355)
#390 := (iff #358 #389)
#387 := (iff #355 #386)
#388 := [rewrite]: #387
#391 := [quant-intro #388]: #390
#227 := (not #226)
#220 := (not #219)
#230 := (and #220 #227)
#216 := (not #215)
#223 := (and #216 #220)
#233 := (or #223 #230)
#278 := (ite #233 #58 #258)
#281 := (ite #39 0::Int #278)
#284 := (ite #40 #36 #281)
#287 := (= #57 #284)
#290 := (forall (vars (?v0 Int) (?v1 Int)) #287)
#359 := (iff #290 #358)
#356 := (iff #287 #355)
#353 := (= #284 #352)
#350 := (= #281 #349)
#347 := (= #278 #346)
#331 := (iff #233 #330)
#328 := (iff #230 #327)
#329 := [rewrite]: #328
#309 := (iff #223 #325)
#310 := [rewrite]: #309
#332 := [monotonicity #310 #329]: #331
#348 := [monotonicity #332]: #347
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#357 := [monotonicity #354]: #356
#360 := [quant-intro #357]: #359
#307 := (~ #290 #290)
#321 := (~ #287 #287)
#322 := [refl]: #321
#308 := [nnf-pos #322]: #307
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (ite #47 #58 #60)
#62 := (ite #39 0::Int #61)
#63 := (ite #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#293 := (iff #65 #290)
#181 := (and #43 #45)
#184 := (or #44 #181)
#263 := (ite #184 #58 #258)
#172 := (= 0::Int #36)
#266 := (ite #172 0::Int #263)
#175 := (= 0::Int #24)
#269 := (ite #175 #36 #266)
#272 := (= #57 #269)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#291 := (iff #275 #290)
#288 := (iff #272 #287)
#285 := (= #269 #284)
#282 := (= #266 #281)
#279 := (= #263 #278)
#234 := (iff #184 #233)
#231 := (iff #181 #230)
#228 := (iff #45 #227)
#229 := [rewrite]: #228
#221 := (iff #43 #220)
#222 := [rewrite]: #221
#232 := [monotonicity #222 #229]: #231
#224 := (iff #44 #223)
#217 := (iff #42 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#235 := [monotonicity #225 #232]: #234
#280 := [monotonicity #235]: #279
#209 := (iff #172 #39)
#210 := [rewrite]: #209
#283 := [monotonicity #210 #280]: #282
#211 := (iff #175 #40)
#212 := [rewrite]: #211
#286 := [monotonicity #212 #283]: #285
#289 := [monotonicity #286]: #288
#292 := [quant-intro #289]: #291
#276 := (iff #65 #275)
#273 := (iff #64 #272)
#270 := (= #63 #269)
#267 := (= #62 #266)
#264 := (= #61 #263)
#261 := (= #60 #258)
#255 := (- #252)
#259 := (= #255 #258)
#260 := [rewrite]: #259
#256 := (= #60 #255)
#253 := (= #59 #252)
#192 := (= #50 #191)
#193 := [rewrite]: #192
#189 := (= #49 #188)
#190 := [rewrite]: #189
#254 := [monotonicity #190 #193]: #253
#257 := [monotonicity #254]: #256
#262 := [trans #257 #260]: #261
#185 := (iff #47 #184)
#182 := (iff #46 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#265 := [monotonicity #186 #262]: #264
#173 := (iff #39 #172)
#174 := [rewrite]: #173
#268 := [monotonicity #174 #265]: #267
#176 := (iff #40 #175)
#177 := [rewrite]: #176
#271 := [monotonicity #177 #268]: #270
#274 := [monotonicity #271]: #273
#277 := [quant-intro #274]: #276
#294 := [trans #277 #292]: #293
#251 := [asserted]: #65
#295 := [mp #251 #294]: #290
#323 := [mp~ #295 #308]: #290
#361 := [mp #323 #360]: #358
#392 := [mp #361 #391]: #389
#896 := [mp #392 #895]: #891
#710 := (not #891)
#711 := (or #710 #806)
#819 := (* -1::Int 1::Int)
#820 := (mod #819 #819)
#815 := (+ #12 #820)
#816 := (= #815 0::Int)
#821 := (mod 1::Int 1::Int)
#822 := (* -1::Int #821)
#817 := (+ #12 #822)
#823 := (= #817 0::Int)
#664 := (>= 1::Int 0::Int)
#665 := (<= 1::Int 0::Int)
#666 := (or #665 #664)
#808 := (not #666)
#809 := (or #665 #665)
#810 := (not #809)
#811 := (or #810 #808)
#805 := (ite #811 #823 #816)
#812 := (= 1::Int 0::Int)
#813 := (ite #812 #806 #805)
#807 := (= 1::Int #12)
#814 := (ite #812 #807 #813)
#712 := (or #710 #814)
#716 := (iff #712 #711)
#718 := (iff #711 #711)
#723 := [rewrite]: #718
#731 := (iff #814 #806)
#799 := (= #12 1::Int)
#730 := (ite false #799 #806)
#735 := (iff #730 #806)
#736 := [rewrite]: #735
#733 := (iff #814 #730)
#728 := (iff #813 #806)
#744 := (ite false #806 #806)
#746 := (iff #744 #806)
#732 := [rewrite]: #746
#745 := (iff #813 #744)
#742 := (iff #805 #806)
#1 := true
#749 := (ite true #806 #806)
#739 := (iff #749 #806)
#741 := [rewrite]: #739
#760 := (iff #805 #749)
#758 := (iff #816 #806)
#756 := (= #815 #12)
#772 := (+ #12 0::Int)
#770 := (= #772 #12)
#775 := [rewrite]: #770
#754 := (= #815 #772)
#752 := (= #820 0::Int)
#767 := (mod -1::Int -1::Int)
#750 := (= #767 0::Int)
#751 := [rewrite]: #750
#747 := (= #820 #767)
#766 := (= #819 -1::Int)
#763 := [rewrite]: #766
#748 := [monotonicity #763 #763]: #747
#753 := [trans #748 #751]: #752
#755 := [monotonicity #753]: #754
#757 := [trans #755 #775]: #756
#759 := [monotonicity #757]: #758
#764 := (iff #823 #806)
#761 := (= #817 #12)
#773 := (= #817 #772)
#769 := (= #822 0::Int)
#782 := (* -1::Int 0::Int)
#784 := (= #782 0::Int)
#768 := [rewrite]: #784
#783 := (= #822 #782)
#780 := (= #821 0::Int)
#781 := [rewrite]: #780
#777 := [monotonicity #781]: #783
#771 := [trans #777 #768]: #769
#774 := [monotonicity #771]: #773
#762 := [trans #774 #775]: #761
#765 := [monotonicity #762]: #764
#786 := (iff #811 true)
#776 := (or true false)
#789 := (iff #776 true)
#790 := [rewrite]: #789
#778 := (iff #811 #776)
#787 := (iff #808 false)
#489 := (not true)
#850 := (iff #489 false)
#836 := [rewrite]: #850
#798 := (iff #808 #489)
#797 := (iff #666 true)
#700 := (or false true)
#703 := (iff #700 true)
#704 := [rewrite]: #703
#701 := (iff #666 #700)
#699 := (iff #664 true)
#692 := [rewrite]: #699
#802 := (iff #665 false)
#803 := [rewrite]: #802
#702 := [monotonicity #803 #692]: #701
#794 := [trans #702 #704]: #797
#785 := [monotonicity #794]: #798
#779 := [trans #785 #836]: #787
#696 := (iff #810 true)
#697 := (not false)
#796 := (iff #697 true)
#681 := [rewrite]: #796
#792 := (iff #810 #697)
#647 := (iff #809 false)
#801 := (or false false)
#687 := (iff #801 false)
#688 := [rewrite]: #687
#804 := (iff #809 #801)
#686 := [monotonicity #803 #803]: #804
#795 := [trans #686 #688]: #647
#793 := [monotonicity #795]: #792
#698 := [trans #793 #681]: #696
#788 := [monotonicity #698 #779]: #778
#791 := [trans #788 #790]: #786
#738 := [monotonicity #791 #765 #759]: #760
#743 := [trans #738 #741]: #742
#643 := (iff #812 false)
#645 := [rewrite]: #643
#740 := [monotonicity #645 #743]: #745
#729 := [trans #740 #732]: #728
#646 := (iff #807 #799)
#800 := [rewrite]: #646
#734 := [monotonicity #645 #800 #729]: #733
#737 := [trans #734 #736]: #731
#717 := [monotonicity #737]: #716
#719 := [trans #717 #723]: #716
#605 := [quant-inst #10 #10]: #712
#720 := [mp #605 #719]: #711
#724 := [unit-resolution #720 #896]: #806
#725 := [monotonicity #724]: #16
#17 := (not #16)
#85 := [asserted]: #17
[unit-resolution #85 #725]: false
unsat
e9cdda2176e690083a382501d00feb100ad9b5ea 328 0
#2 := false
decl f3 :: (-> S2 Int S3)
#15 := 0::Int
decl f4 :: S2
#8 := f4
#16 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#12 := 1::Int
decl f6 :: (-> S5 Int S4)
#10 := 3::Int
decl f7 :: S5
#9 := f7
#11 := (f6 f7 3::Int)
#13 := (f5 #11 1::Int)
#14 := (f3 f4 #13)
#17 := (= #14 #16)
#814 := (= #13 0::Int)
#25 := (:var 0 Int)
#37 := (:var 1 Int)
#57 := (f6 f7 #37)
#58 := (f5 #57 #25)
#891 := (pattern #58)
#188 := -1::Int
#192 := (* -1::Int #25)
#189 := (* -1::Int #37)
#253 := (mod #189 #192)
#383 := (+ #58 #253)
#384 := (= #383 0::Int)
#59 := (mod #37 #25)
#380 := (* -1::Int #59)
#381 := (+ #58 #380)
#382 := (= #381 0::Int)
#227 := (>= #37 0::Int)
#220 := (<= #25 0::Int)
#327 := (or #220 #227)
#328 := (not #327)
#216 := (<= #37 0::Int)
#325 := (or #216 #220)
#326 := (not #325)
#331 := (or #326 #328)
#385 := (ite #331 #382 #384)
#379 := (= #58 0::Int)
#40 := (= #37 0::Int)
#386 := (ite #40 #379 #385)
#378 := (= #37 #58)
#41 := (= #25 0::Int)
#387 := (ite #41 #378 #386)
#892 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #891) #387)
#390 := (forall (vars (?v0 Int) (?v1 Int)) #387)
#895 := (iff #390 #892)
#893 := (iff #387 #387)
#894 := [refl]: #893
#896 := [quant-intro #894]: #895
#259 := (* -1::Int #253)
#347 := (ite #331 #59 #259)
#350 := (ite #40 0::Int #347)
#353 := (ite #41 #37 #350)
#356 := (= #58 #353)
#359 := (forall (vars (?v0 Int) (?v1 Int)) #356)
#391 := (iff #359 #390)
#388 := (iff #356 #387)
#389 := [rewrite]: #388
#392 := [quant-intro #389]: #391
#228 := (not #227)
#221 := (not #220)
#231 := (and #221 #228)
#217 := (not #216)
#224 := (and #217 #221)
#234 := (or #224 #231)
#279 := (ite #234 #59 #259)
#282 := (ite #40 0::Int #279)
#285 := (ite #41 #37 #282)
#288 := (= #58 #285)
#291 := (forall (vars (?v0 Int) (?v1 Int)) #288)
#360 := (iff #291 #359)
#357 := (iff #288 #356)
#354 := (= #285 #353)
#351 := (= #282 #350)
#348 := (= #279 #347)
#332 := (iff #234 #331)
#329 := (iff #231 #328)
#330 := [rewrite]: #329
#310 := (iff #224 #326)
#311 := [rewrite]: #310
#333 := [monotonicity #311 #330]: #332
#349 := [monotonicity #333]: #348
#352 := [monotonicity #349]: #351
#355 := [monotonicity #352]: #354
#358 := [monotonicity #355]: #357
#361 := [quant-intro #358]: #360
#308 := (~ #291 #291)
#322 := (~ #288 #288)
#323 := [refl]: #322
#309 := [nnf-pos #323]: #308
#51 := (- #25)
#50 := (- #37)
#60 := (mod #50 #51)
#61 := (- #60)
#44 := (< 0::Int #25)
#46 := (< #37 0::Int)
#47 := (and #46 #44)
#43 := (< 0::Int #37)
#45 := (and #43 #44)
#48 := (or #45 #47)
#62 := (ite #48 #59 #61)
#63 := (ite #40 0::Int #62)
#64 := (ite #41 #37 #63)
#65 := (= #58 #64)
#66 := (forall (vars (?v0 Int) (?v1 Int)) #65)
#294 := (iff #66 #291)
#182 := (and #44 #46)
#185 := (or #45 #182)
#264 := (ite #185 #59 #259)
#173 := (= 0::Int #37)
#267 := (ite #173 0::Int #264)
#176 := (= 0::Int #25)
#270 := (ite #176 #37 #267)
#273 := (= #58 #270)
#276 := (forall (vars (?v0 Int) (?v1 Int)) #273)
#292 := (iff #276 #291)
#289 := (iff #273 #288)
#286 := (= #270 #285)
#283 := (= #267 #282)
#280 := (= #264 #279)
#235 := (iff #185 #234)
#232 := (iff #182 #231)
#229 := (iff #46 #228)
#230 := [rewrite]: #229
#222 := (iff #44 #221)
#223 := [rewrite]: #222
#233 := [monotonicity #223 #230]: #232
#225 := (iff #45 #224)
#218 := (iff #43 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#236 := [monotonicity #226 #233]: #235
#281 := [monotonicity #236]: #280
#210 := (iff #173 #40)
#211 := [rewrite]: #210
#284 := [monotonicity #211 #281]: #283
#212 := (iff #176 #41)
#213 := [rewrite]: #212
#287 := [monotonicity #213 #284]: #286
#290 := [monotonicity #287]: #289
#293 := [quant-intro #290]: #292
#277 := (iff #66 #276)
#274 := (iff #65 #273)
#271 := (= #64 #270)
#268 := (= #63 #267)
#265 := (= #62 #264)
#262 := (= #61 #259)
#256 := (- #253)
#260 := (= #256 #259)
#261 := [rewrite]: #260
#257 := (= #61 #256)
#254 := (= #60 #253)
#193 := (= #51 #192)
#194 := [rewrite]: #193
#190 := (= #50 #189)
#191 := [rewrite]: #190
#255 := [monotonicity #191 #194]: #254
#258 := [monotonicity #255]: #257
#263 := [trans #258 #261]: #262
#186 := (iff #48 #185)
#183 := (iff #47 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#266 := [monotonicity #187 #263]: #265
#174 := (iff #40 #173)
#175 := [rewrite]: #174
#269 := [monotonicity #175 #266]: #268
#177 := (iff #41 #176)
#178 := [rewrite]: #177
#272 := [monotonicity #178 #269]: #271
#275 := [monotonicity #272]: #274
#278 := [quant-intro #275]: #277
#295 := [trans #278 #293]: #294
#252 := [asserted]: #66
#296 := [mp #252 #295]: #291
#324 := [mp~ #296 #309]: #291
#362 := [mp #324 #361]: #359
#393 := [mp #362 #392]: #390
#897 := [mp #393 #896]: #892
#722 := (not #892)
#725 := (or #722 #814)
#820 := (* -1::Int 1::Int)
#821 := (* -1::Int 3::Int)
#816 := (mod #821 #820)
#817 := (+ #13 #816)
#822 := (= #817 0::Int)
#823 := (mod 3::Int 1::Int)
#818 := (* -1::Int #823)
#824 := (+ #13 #818)
#665 := (= #824 0::Int)
#666 := (>= 3::Int 0::Int)
#667 := (<= 1::Int 0::Int)
#809 := (or #667 #666)
#810 := (not #809)
#811 := (<= 3::Int 0::Int)
#812 := (or #811 #667)
#806 := (not #812)
#807 := (or #806 #810)
#813 := (ite #807 #665 #822)
#808 := (= 3::Int 0::Int)
#815 := (ite #808 #814 #813)
#644 := (= 3::Int #13)
#646 := (= 1::Int 0::Int)
#647 := (ite #646 #644 #815)
#726 := (or #722 #647)
#723 := (iff #726 #725)
#708 := (iff #725 #725)
#654 := [rewrite]: #708
#720 := (iff #647 #814)
#804 := (= #13 3::Int)
#606 := (ite false #804 #814)
#719 := (iff #606 #814)
#724 := [rewrite]: #719
#717 := (iff #647 #606)
#712 := (iff #815 #814)
#736 := (ite false #814 #814)
#738 := (iff #736 #814)
#711 := [rewrite]: #738
#737 := (iff #815 #736)
#734 := (iff #813 #814)
#1 := true
#747 := (ite true #814 #814)
#730 := (iff #747 #814)
#731 := [rewrite]: #730
#733 := (iff #813 #747)
#746 := (iff #822 #814)
#744 := (= #817 #13)
#765 := (+ #13 0::Int)
#764 := (= #765 #13)
#768 := [rewrite]: #764
#742 := (= #817 #765)
#739 := (= #816 0::Int)
#753 := -3::Int
#758 := (mod -3::Int -1::Int)
#750 := (= #758 0::Int)
#761 := [rewrite]: #750
#759 := (= #816 #758)
#756 := (= #820 -1::Int)
#757 := [rewrite]: #756
#754 := (= #821 -3::Int)
#755 := [rewrite]: #754
#760 := [monotonicity #755 #757]: #759
#740 := [trans #760 #761]: #739
#743 := [monotonicity #740]: #742
#745 := [trans #743 #768]: #744
#741 := [monotonicity #745]: #746
#751 := (iff #665 #814)
#748 := (= #824 #13)
#766 := (= #824 #765)
#762 := (= #818 0::Int)
#773 := (* -1::Int 0::Int)
#771 := (= #773 0::Int)
#776 := [rewrite]: #771
#774 := (= #818 #773)
#770 := (= #823 0::Int)
#772 := [rewrite]: #770
#775 := [monotonicity #772]: #774
#763 := [trans #775 #776]: #762
#767 := [monotonicity #763]: #766
#749 := [trans #767 #768]: #748
#752 := [monotonicity #749]: #751
#785 := (iff #807 true)
#781 := (or true false)
#784 := (iff #781 true)
#778 := [rewrite]: #784
#782 := (iff #807 #781)
#787 := (iff #810 false)
#490 := (not true)
#851 := (iff #490 false)
#837 := [rewrite]: #851
#790 := (iff #810 #490)
#779 := (iff #809 true)
#799 := (or false true)
#780 := (iff #799 true)
#777 := [rewrite]: #780
#786 := (iff #809 #799)
#798 := (iff #666 true)
#795 := [rewrite]: #798
#648 := (iff #667 false)
#796 := [rewrite]: #648
#788 := [monotonicity #796 #795]: #786
#789 := [trans #788 #777]: #779
#791 := [monotonicity #789]: #790
#792 := [trans #791 #837]: #787
#704 := (iff #806 true)
#700 := (not false)
#702 := (iff #700 true)
#703 := [rewrite]: #702
#693 := (iff #806 #700)
#697 := (iff #812 false)
#698 := (or false false)
#797 := (iff #698 false)
#682 := [rewrite]: #797
#793 := (iff #812 #698)
#688 := (iff #811 false)
#689 := [rewrite]: #688
#794 := [monotonicity #689 #796]: #793
#699 := [trans #794 #682]: #697
#701 := [monotonicity #699]: #693
#705 := [trans #701 #703]: #704
#783 := [monotonicity #705 #792]: #782
#769 := [trans #783 #778]: #785
#729 := [monotonicity #769 #752 #741]: #733
#735 := [trans #729 #731]: #734
#805 := (iff #808 false)
#687 := [rewrite]: #805
#732 := [monotonicity #687 #735]: #737
#713 := [trans #732 #711]: #712
#803 := (iff #644 #804)
#802 := [rewrite]: #803
#800 := (iff #646 false)
#801 := [rewrite]: #800
#718 := [monotonicity #801 #802 #713]: #717
#721 := [trans #718 #724]: #720
#728 := [monotonicity #721]: #723
#709 := [trans #728 #654]: #723
#727 := [quant-inst #10 #12]: #726
#690 := [mp #727 #709]: #725
#715 := [unit-resolution #690 #897]: #814
#710 := [monotonicity #715]: #17
#18 := (not #17)
#86 := [asserted]: #18
[unit-resolution #86 #710]: false
unsat
498414bdbc142ee84fb4637170090b972b5222e7 333 0
#2 := false
#17 := 0::Int
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#11 := f10
decl f9 :: S6
#10 := f9
#12 := (f8 f9 f10)
#819 := (>= #12 0::Int)
#701 := (not #819)
#808 := (= #12 0::Int)
#668 := (<= #12 0::Int)
#690 := (not #668)
#762 := (or #690 #808 #701)
#719 := (not #762)
decl f5 :: (-> S4 Int Int)
#14 := 1::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#13 := (f6 f7 #12)
#15 := (f5 #13 1::Int)
#807 := (= #15 0::Int)
#709 := (not #807)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#18 := (f3 f4 0::Int)
#16 := (f3 f4 #15)
#19 := (= #16 #18)
#692 := [hypothesis]: #807
#651 := [monotonicity #692]: #19
#20 := (not #19)
#87 := [asserted]: #20
#697 := [unit-resolution #87 #651]: false
#707 := [lemma #697]: #709
#708 := (or #719 #807)
#189 := -1::Int
#831 := (* -1::Int #12)
#770 := (mod #831 -1::Int)
#774 := (+ #15 #770)
#772 := (= #774 0::Int)
#743 := (ite #762 #807 #772)
#26 := (:var 0 Int)
#38 := (:var 1 Int)
#58 := (f6 f7 #38)
#59 := (f5 #58 #26)
#892 := (pattern #59)
#193 := (* -1::Int #26)
#190 := (* -1::Int #38)
#254 := (mod #190 #193)
#384 := (+ #59 #254)
#385 := (= #384 0::Int)
#60 := (mod #38 #26)
#381 := (* -1::Int #60)
#382 := (+ #59 #381)
#383 := (= #382 0::Int)
#228 := (>= #38 0::Int)
#221 := (<= #26 0::Int)
#328 := (or #221 #228)
#329 := (not #328)
#217 := (<= #38 0::Int)
#326 := (or #217 #221)
#327 := (not #326)
#332 := (or #327 #329)
#386 := (ite #332 #383 #385)
#380 := (= #59 0::Int)
#41 := (= #38 0::Int)
#387 := (ite #41 #380 #386)
#379 := (= #38 #59)
#42 := (= #26 0::Int)
#388 := (ite #42 #379 #387)
#893 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #892) #388)
#391 := (forall (vars (?v0 Int) (?v1 Int)) #388)
#896 := (iff #391 #893)
#894 := (iff #388 #388)
#895 := [refl]: #894
#897 := [quant-intro #895]: #896
#260 := (* -1::Int #254)
#348 := (ite #332 #60 #260)
#351 := (ite #41 0::Int #348)
#354 := (ite #42 #38 #351)
#357 := (= #59 #354)
#360 := (forall (vars (?v0 Int) (?v1 Int)) #357)
#392 := (iff #360 #391)
#389 := (iff #357 #388)
#390 := [rewrite]: #389
#393 := [quant-intro #390]: #392
#229 := (not #228)
#222 := (not #221)
#232 := (and #222 #229)
#218 := (not #217)
#225 := (and #218 #222)
#235 := (or #225 #232)
#280 := (ite #235 #60 #260)
#283 := (ite #41 0::Int #280)
#286 := (ite #42 #38 #283)
#289 := (= #59 #286)
#292 := (forall (vars (?v0 Int) (?v1 Int)) #289)
#361 := (iff #292 #360)
#358 := (iff #289 #357)
#355 := (= #286 #354)
#352 := (= #283 #351)
#349 := (= #280 #348)
#333 := (iff #235 #332)
#330 := (iff #232 #329)
#331 := [rewrite]: #330
#311 := (iff #225 #327)
#312 := [rewrite]: #311
#334 := [monotonicity #312 #331]: #333
#350 := [monotonicity #334]: #349
#353 := [monotonicity #350]: #352
#356 := [monotonicity #353]: #355
#359 := [monotonicity #356]: #358
#362 := [quant-intro #359]: #361
#309 := (~ #292 #292)
#323 := (~ #289 #289)
#324 := [refl]: #323
#310 := [nnf-pos #324]: #309
#52 := (- #26)
#51 := (- #38)
#61 := (mod #51 #52)
#62 := (- #61)
#45 := (< 0::Int #26)
#47 := (< #38 0::Int)
#48 := (and #47 #45)
#44 := (< 0::Int #38)
#46 := (and #44 #45)
#49 := (or #46 #48)
#63 := (ite #49 #60 #62)
#64 := (ite #41 0::Int #63)
#65 := (ite #42 #38 #64)
#66 := (= #59 #65)
#67 := (forall (vars (?v0 Int) (?v1 Int)) #66)
#295 := (iff #67 #292)
#183 := (and #45 #47)
#186 := (or #46 #183)
#265 := (ite #186 #60 #260)
#174 := (= 0::Int #38)
#268 := (ite #174 0::Int #265)
#177 := (= 0::Int #26)
#271 := (ite #177 #38 #268)
#274 := (= #59 #271)
#277 := (forall (vars (?v0 Int) (?v1 Int)) #274)
#293 := (iff #277 #292)
#290 := (iff #274 #289)
#287 := (= #271 #286)
#284 := (= #268 #283)
#281 := (= #265 #280)
#236 := (iff #186 #235)
#233 := (iff #183 #232)
#230 := (iff #47 #229)
#231 := [rewrite]: #230
#223 := (iff #45 #222)
#224 := [rewrite]: #223
#234 := [monotonicity #224 #231]: #233
#226 := (iff #46 #225)
#219 := (iff #44 #218)
#220 := [rewrite]: #219
#227 := [monotonicity #220 #224]: #226
#237 := [monotonicity #227 #234]: #236
#282 := [monotonicity #237]: #281
#211 := (iff #174 #41)
#212 := [rewrite]: #211
#285 := [monotonicity #212 #282]: #284
#213 := (iff #177 #42)
#214 := [rewrite]: #213
#288 := [monotonicity #214 #285]: #287
#291 := [monotonicity #288]: #290
#294 := [quant-intro #291]: #293
#278 := (iff #67 #277)
#275 := (iff #66 #274)
#272 := (= #65 #271)
#269 := (= #64 #268)
#266 := (= #63 #265)
#263 := (= #62 #260)
#257 := (- #254)
#261 := (= #257 #260)
#262 := [rewrite]: #261
#258 := (= #62 #257)
#255 := (= #61 #254)
#194 := (= #52 #193)
#195 := [rewrite]: #194
#191 := (= #51 #190)
#192 := [rewrite]: #191
#256 := [monotonicity #192 #195]: #255
#259 := [monotonicity #256]: #258
#264 := [trans #259 #262]: #263
#187 := (iff #49 #186)
#184 := (iff #48 #183)
#185 := [rewrite]: #184
#188 := [monotonicity #185]: #187
#267 := [monotonicity #188 #264]: #266
#175 := (iff #41 #174)
#176 := [rewrite]: #175
#270 := [monotonicity #176 #267]: #269
#178 := (iff #42 #177)
#179 := [rewrite]: #178
#273 := [monotonicity #179 #270]: #272
#276 := [monotonicity #273]: #275
#279 := [quant-intro #276]: #278
#296 := [trans #279 #294]: #295
#253 := [asserted]: #67
#297 := [mp #253 #296]: #292
#325 := [mp~ #297 #310]: #292
#363 := [mp #325 #362]: #360
#394 := [mp #363 #393]: #391
#898 := [mp #394 #897]: #893
#742 := (not #893)
#748 := (or #742 #743)
#827 := (* -1::Int 1::Int)
#820 := (mod #831 #827)
#821 := (+ #15 #820)
#822 := (= #821 0::Int)
#817 := (mod #12 1::Int)
#818 := (* -1::Int #817)
#823 := (+ #15 #818)
#824 := (= #823 0::Int)
#825 := (<= 1::Int 0::Int)
#666 := (or #825 #819)
#667 := (not #666)
#810 := (or #668 #825)
#811 := (not #810)
#812 := (or #811 #667)
#813 := (ite #812 #824 #822)
#814 := (ite #808 #807 #813)
#815 := (= #12 #15)
#809 := (= 1::Int 0::Int)
#816 := (ite #809 #815 #814)
#734 := (or #742 #816)
#731 := (iff #734 #748)
#735 := (iff #748 #748)
#736 := [rewrite]: #735
#746 := (iff #816 #743)
#703 := (or #690 #701)
#749 := (or #703 #808)
#750 := (ite #749 #807 #772)
#744 := (iff #750 #743)
#740 := (iff #749 #762)
#741 := [rewrite]: #740
#745 := [monotonicity #741]: #744
#761 := (iff #816 #750)
#756 := (ite false #815 #750)
#759 := (iff #756 #750)
#760 := [rewrite]: #759
#757 := (iff #816 #756)
#754 := (iff #814 #750)
#764 := (ite #703 #807 #772)
#768 := (ite #808 #807 #764)
#752 := (iff #768 #750)
#753 := [rewrite]: #752
#765 := (iff #814 #768)
#766 := (iff #813 #764)
#777 := (iff #822 #772)
#775 := (= #821 #774)
#771 := (= #820 #770)
#779 := (= #827 -1::Int)
#786 := [rewrite]: #779
#773 := [monotonicity #786]: #771
#776 := [monotonicity #773]: #775
#763 := [monotonicity #776]: #777
#784 := (iff #824 #807)
#782 := (= #823 #15)
#790 := (+ #15 0::Int)
#788 := (= #790 #15)
#793 := [rewrite]: #788
#791 := (= #823 #790)
#778 := (= #818 0::Int)
#796 := (* -1::Int 0::Int)
#789 := (= #796 0::Int)
#781 := [rewrite]: #789
#800 := (= #818 #796)
#706 := (= #817 0::Int)
#799 := [rewrite]: #706
#787 := [monotonicity #799]: #800
#780 := [trans #787 #781]: #778
#792 := [monotonicity #780]: #791
#783 := [trans #792 #793]: #782
#785 := [monotonicity #783]: #784
#704 := (iff #812 #703)
#694 := (iff #667 #701)
#698 := (iff #666 #819)
#699 := (or false #819)
#798 := (iff #699 #819)
#683 := [rewrite]: #798
#794 := (iff #666 #699)
#648 := (iff #825 false)
#801 := [rewrite]: #648
#795 := [monotonicity #801]: #794
#700 := [trans #795 #683]: #698
#702 := [monotonicity #700]: #694
#649 := (iff #811 #690)
#688 := (iff #810 #668)
#802 := (or #668 false)
#803 := (iff #802 #668)
#806 := [rewrite]: #803
#804 := (iff #810 #802)
#805 := [monotonicity #801]: #804
#689 := [trans #805 #806]: #688
#797 := [monotonicity #689]: #649
#705 := [monotonicity #797 #702]: #704
#767 := [monotonicity #705 #785 #763]: #766
#769 := [monotonicity #767]: #765
#755 := [trans #769 #753]: #754
#645 := (iff #809 false)
#647 := [rewrite]: #645
#758 := [monotonicity #647 #755]: #757
#751 := [trans #758 #760]: #761
#747 := [trans #751 #745]: #746
#732 := [monotonicity #747]: #731
#737 := [trans #732 #736]: #731
#730 := [quant-inst #12 #14]: #734
#738 := [mp #730 #737]: #748
#687 := [unit-resolution #738 #898]: #743
#726 := (not #743)
#727 := (or #726 #719 #807)
#728 := [def-axiom]: #727
#663 := [unit-resolution #728 #687]: #708
#664 := [unit-resolution #663 #707]: #719
#607 := (or #762 #819)
#718 := [def-axiom]: #607
#669 := [unit-resolution #718 #664]: #819
#733 := (or #762 #668)
#739 := [def-axiom]: #733
#670 := [unit-resolution #739 #664]: #668
#712 := (not #808)
#713 := (or #762 #712)
#714 := [def-axiom]: #713
#671 := [unit-resolution #714 #664]: #712
#672 := (or #808 #690 #701)
#673 := [th-lemma arith triangle-eq]: #672
[unit-resolution #673 #671 #670 #669]: false
unsat
dd78f268b55a55e93289d874a56aaf5db4a02d03 317 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#12 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 0::Int)
#13 := (f5 #11 3::Int)
#14 := (f3 f4 #13)
#16 := (= #14 #15)
#807 := (= #13 0::Int)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#891 := (pattern #57)
#187 := -1::Int
#191 := (* -1::Int #24)
#188 := (* -1::Int #36)
#252 := (mod #188 #191)
#382 := (+ #57 #252)
#383 := (= #382 0::Int)
#58 := (mod #36 #24)
#379 := (* -1::Int #58)
#380 := (+ #57 #379)
#381 := (= #380 0::Int)
#226 := (>= #36 0::Int)
#219 := (<= #24 0::Int)
#326 := (or #219 #226)
#327 := (not #326)
#215 := (<= #36 0::Int)
#324 := (or #215 #219)
#325 := (not #324)
#330 := (or #325 #327)
#384 := (ite #330 #381 #383)
#378 := (= #57 0::Int)
#39 := (= #36 0::Int)
#385 := (ite #39 #378 #384)
#377 := (= #36 #57)
#40 := (= #24 0::Int)
#386 := (ite #40 #377 #385)
#892 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #891) #386)
#389 := (forall (vars (?v0 Int) (?v1 Int)) #386)
#895 := (iff #389 #892)
#893 := (iff #386 #386)
#894 := [refl]: #893
#896 := [quant-intro #894]: #895
#258 := (* -1::Int #252)
#346 := (ite #330 #58 #258)
#349 := (ite #39 0::Int #346)
#352 := (ite #40 #36 #349)
#355 := (= #57 #352)
#358 := (forall (vars (?v0 Int) (?v1 Int)) #355)
#390 := (iff #358 #389)
#387 := (iff #355 #386)
#388 := [rewrite]: #387
#391 := [quant-intro #388]: #390
#227 := (not #226)
#220 := (not #219)
#230 := (and #220 #227)
#216 := (not #215)
#223 := (and #216 #220)
#233 := (or #223 #230)
#278 := (ite #233 #58 #258)
#281 := (ite #39 0::Int #278)
#284 := (ite #40 #36 #281)
#287 := (= #57 #284)
#290 := (forall (vars (?v0 Int) (?v1 Int)) #287)
#359 := (iff #290 #358)
#356 := (iff #287 #355)
#353 := (= #284 #352)
#350 := (= #281 #349)
#347 := (= #278 #346)
#331 := (iff #233 #330)
#328 := (iff #230 #327)
#329 := [rewrite]: #328
#309 := (iff #223 #325)
#310 := [rewrite]: #309
#332 := [monotonicity #310 #329]: #331
#348 := [monotonicity #332]: #347
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#357 := [monotonicity #354]: #356
#360 := [quant-intro #357]: #359
#307 := (~ #290 #290)
#321 := (~ #287 #287)
#322 := [refl]: #321
#308 := [nnf-pos #322]: #307
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (ite #47 #58 #60)
#62 := (ite #39 0::Int #61)
#63 := (ite #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#293 := (iff #65 #290)
#181 := (and #43 #45)
#184 := (or #44 #181)
#263 := (ite #184 #58 #258)
#172 := (= 0::Int #36)
#266 := (ite #172 0::Int #263)
#175 := (= 0::Int #24)
#269 := (ite #175 #36 #266)
#272 := (= #57 #269)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#291 := (iff #275 #290)
#288 := (iff #272 #287)
#285 := (= #269 #284)
#282 := (= #266 #281)
#279 := (= #263 #278)
#234 := (iff #184 #233)
#231 := (iff #181 #230)
#228 := (iff #45 #227)
#229 := [rewrite]: #228
#221 := (iff #43 #220)
#222 := [rewrite]: #221
#232 := [monotonicity #222 #229]: #231
#224 := (iff #44 #223)
#217 := (iff #42 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#235 := [monotonicity #225 #232]: #234
#280 := [monotonicity #235]: #279
#209 := (iff #172 #39)
#210 := [rewrite]: #209
#283 := [monotonicity #210 #280]: #282
#211 := (iff #175 #40)
#212 := [rewrite]: #211
#286 := [monotonicity #212 #283]: #285
#289 := [monotonicity #286]: #288
#292 := [quant-intro #289]: #291
#276 := (iff #65 #275)
#273 := (iff #64 #272)
#270 := (= #63 #269)
#267 := (= #62 #266)
#264 := (= #61 #263)
#261 := (= #60 #258)
#255 := (- #252)
#259 := (= #255 #258)
#260 := [rewrite]: #259
#256 := (= #60 #255)
#253 := (= #59 #252)
#192 := (= #50 #191)
#193 := [rewrite]: #192
#189 := (= #49 #188)
#190 := [rewrite]: #189
#254 := [monotonicity #190 #193]: #253
#257 := [monotonicity #254]: #256
#262 := [trans #257 #260]: #261
#185 := (iff #47 #184)
#182 := (iff #46 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#265 := [monotonicity #186 #262]: #264
#173 := (iff #39 #172)
#174 := [rewrite]: #173
#268 := [monotonicity #174 #265]: #267
#176 := (iff #40 #175)
#177 := [rewrite]: #176
#271 := [monotonicity #177 #268]: #270
#274 := [monotonicity #271]: #273
#277 := [quant-intro #274]: #276
#294 := [trans #277 #292]: #293
#251 := [asserted]: #65
#295 := [mp #251 #294]: #290
#323 := [mp~ #295 #308]: #290
#361 := [mp #323 #360]: #358
#392 := [mp #361 #391]: #389
#897 := [mp #392 #896]: #892
#736 := (not #892)
#737 := (or #736 #807)
#819 := (* -1::Int 3::Int)
#820 := (* -1::Int 0::Int)
#821 := (mod #820 #819)
#816 := (+ #13 #821)
#817 := (= #816 0::Int)
#822 := (mod 0::Int 3::Int)
#823 := (* -1::Int #822)
#818 := (+ #13 #823)
#824 := (= #818 0::Int)
#841 := (>= 0::Int 0::Int)
#665 := (<= 3::Int 0::Int)
#666 := (or #665 #841)
#667 := (not #666)
#809 := (<= 0::Int 0::Int)
#810 := (or #809 #665)
#811 := (not #810)
#812 := (or #811 #667)
#806 := (ite #812 #824 #817)
#813 := (= 0::Int 0::Int)
#814 := (ite #813 #807 #806)
#808 := (= 0::Int #13)
#815 := (= 3::Int 0::Int)
#644 := (ite #815 #808 #814)
#732 := (or #736 #644)
#711 := (iff #732 #737)
#713 := (iff #737 #737)
#606 := [rewrite]: #713
#734 := (iff #644 #807)
#760 := (ite false #807 #807)
#739 := (iff #760 #807)
#740 := [rewrite]: #739
#730 := (iff #644 #760)
#733 := (iff #814 #807)
#1 := true
#744 := (ite true #807 #807)
#741 := (iff #744 #807)
#747 := [rewrite]: #741
#745 := (iff #814 #744)
#742 := (iff #806 #807)
#750 := (iff #806 #760)
#758 := (iff #817 #807)
#756 := (= #816 #13)
#770 := (+ #13 0::Int)
#774 := (= #770 #13)
#775 := [rewrite]: #774
#754 := (= #816 #770)
#752 := (= #821 0::Int)
#765 := -3::Int
#764 := (mod 0::Int -3::Int)
#749 := (= #764 0::Int)
#751 := [rewrite]: #749
#768 := (= #821 #764)
#766 := (= #819 -3::Int)
#767 := [rewrite]: #766
#784 := (= #820 0::Int)
#778 := [rewrite]: #784
#748 := [monotonicity #778 #767]: #768
#753 := [trans #748 #751]: #752
#755 := [monotonicity #753]: #754
#757 := [trans #755 #775]: #756
#759 := [monotonicity #757]: #758
#762 := (iff #824 #807)
#771 := (= #818 #13)
#772 := (= #818 #770)
#785 := (= #823 0::Int)
#782 := (= #823 #820)
#792 := (= #822 0::Int)
#781 := [rewrite]: #792
#783 := [monotonicity #781]: #782
#769 := [trans #783 #778]: #785
#773 := [monotonicity #769]: #772
#776 := [trans #773 #775]: #771
#763 := [monotonicity #776]: #762
#791 := (iff #812 false)
#780 := (or false false)
#789 := (iff #780 false)
#790 := [rewrite]: #789
#777 := (iff #812 #780)
#786 := (iff #667 false)
#489 := (not true)
#848 := (iff #489 false)
#851 := [rewrite]: #848
#795 := (iff #667 #489)
#705 := (iff #666 true)
#693 := (or false true)
#703 := (iff #693 true)
#704 := [rewrite]: #703
#701 := (iff #666 #693)
#847 := (iff #841 true)
#849 := [rewrite]: #847
#687 := (iff #665 false)
#688 := [rewrite]: #687
#702 := [monotonicity #688 #849]: #701
#798 := [trans #702 #704]: #705
#799 := [monotonicity #798]: #795
#788 := [trans #799 #851]: #786
#699 := (iff #811 false)
#682 := (iff #811 #489)
#794 := (iff #810 true)
#689 := (or true false)
#698 := (iff #689 true)
#793 := [rewrite]: #698
#648 := (iff #810 #689)
#802 := (iff #809 true)
#805 := [rewrite]: #802
#796 := [monotonicity #805 #688]: #648
#797 := [trans #796 #793]: #794
#697 := [monotonicity #797]: #682
#700 := [trans #697 #851]: #699
#779 := [monotonicity #700 #788]: #777
#787 := [trans #779 #790]: #791
#761 := [monotonicity #787 #763 #759]: #750
#743 := [trans #761 #740]: #742
#803 := (iff #813 true)
#804 := [rewrite]: #803
#746 := [monotonicity #804 #743]: #745
#729 := [trans #746 #747]: #733
#800 := (iff #808 #807)
#801 := [rewrite]: #800
#646 := (iff #815 false)
#647 := [rewrite]: #646
#731 := [monotonicity #647 #801 #729]: #730
#735 := [trans #731 #740]: #734
#712 := [monotonicity #735]: #711
#717 := [trans #712 #606]: #711
#738 := [quant-inst #10 #12]: #732
#718 := [mp #738 #717]: #737
#724 := [unit-resolution #718 #897]: #807
#720 := [monotonicity #724]: #16
#17 := (not #16)
#85 := [asserted]: #17
[unit-resolution #85 #720]: false
unsat
e14d183d09c6b042e6338ab8deb492b16b39b14c 343 0
#2 := false
decl f3 :: (-> S2 Int S3)
#10 := 1::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 1::Int)
decl f5 :: (-> S4 Int Int)
#12 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 1::Int)
#13 := (f5 #11 3::Int)
#14 := (f3 f4 #13)
#16 := (= #14 #15)
#804 := (= #13 1::Int)
#25 := (:var 0 Int)
#37 := (:var 1 Int)
#57 := (f6 f7 #37)
#58 := (f5 #57 #25)
#891 := (pattern #58)
#24 := 0::Int
#188 := -1::Int
#192 := (* -1::Int #25)
#189 := (* -1::Int #37)
#253 := (mod #189 #192)
#383 := (+ #58 #253)
#384 := (= #383 0::Int)
#59 := (mod #37 #25)
#380 := (* -1::Int #59)
#381 := (+ #58 #380)
#382 := (= #381 0::Int)
#227 := (>= #37 0::Int)
#220 := (<= #25 0::Int)
#327 := (or #220 #227)
#328 := (not #327)
#216 := (<= #37 0::Int)
#325 := (or #216 #220)
#326 := (not #325)
#331 := (or #326 #328)
#385 := (ite #331 #382 #384)
#379 := (= #58 0::Int)
#40 := (= #37 0::Int)
#386 := (ite #40 #379 #385)
#378 := (= #37 #58)
#41 := (= #25 0::Int)
#387 := (ite #41 #378 #386)
#892 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #891) #387)
#390 := (forall (vars (?v0 Int) (?v1 Int)) #387)
#895 := (iff #390 #892)
#893 := (iff #387 #387)
#894 := [refl]: #893
#896 := [quant-intro #894]: #895
#259 := (* -1::Int #253)
#347 := (ite #331 #59 #259)
#350 := (ite #40 0::Int #347)
#353 := (ite #41 #37 #350)
#356 := (= #58 #353)
#359 := (forall (vars (?v0 Int) (?v1 Int)) #356)
#391 := (iff #359 #390)
#388 := (iff #356 #387)
#389 := [rewrite]: #388
#392 := [quant-intro #389]: #391
#228 := (not #227)
#221 := (not #220)
#231 := (and #221 #228)
#217 := (not #216)
#224 := (and #217 #221)
#234 := (or #224 #231)
#279 := (ite #234 #59 #259)
#282 := (ite #40 0::Int #279)
#285 := (ite #41 #37 #282)
#288 := (= #58 #285)
#291 := (forall (vars (?v0 Int) (?v1 Int)) #288)
#360 := (iff #291 #359)
#357 := (iff #288 #356)
#354 := (= #285 #353)
#351 := (= #282 #350)
#348 := (= #279 #347)
#332 := (iff #234 #331)
#329 := (iff #231 #328)
#330 := [rewrite]: #329
#310 := (iff #224 #326)
#311 := [rewrite]: #310
#333 := [monotonicity #311 #330]: #332
#349 := [monotonicity #333]: #348
#352 := [monotonicity #349]: #351
#355 := [monotonicity #352]: #354
#358 := [monotonicity #355]: #357
#361 := [quant-intro #358]: #360
#308 := (~ #291 #291)
#322 := (~ #288 #288)
#323 := [refl]: #322
#309 := [nnf-pos #323]: #308
#51 := (- #25)
#50 := (- #37)
#60 := (mod #50 #51)
#61 := (- #60)
#44 := (< 0::Int #25)
#46 := (< #37 0::Int)
#47 := (and #46 #44)
#43 := (< 0::Int #37)
#45 := (and #43 #44)
#48 := (or #45 #47)
#62 := (ite #48 #59 #61)
#63 := (ite #40 0::Int #62)
#64 := (ite #41 #37 #63)
#65 := (= #58 #64)
#66 := (forall (vars (?v0 Int) (?v1 Int)) #65)
#294 := (iff #66 #291)
#182 := (and #44 #46)
#185 := (or #45 #182)
#264 := (ite #185 #59 #259)
#173 := (= 0::Int #37)
#267 := (ite #173 0::Int #264)
#176 := (= 0::Int #25)
#270 := (ite #176 #37 #267)
#273 := (= #58 #270)
#276 := (forall (vars (?v0 Int) (?v1 Int)) #273)
#292 := (iff #276 #291)
#289 := (iff #273 #288)
#286 := (= #270 #285)
#283 := (= #267 #282)
#280 := (= #264 #279)
#235 := (iff #185 #234)
#232 := (iff #182 #231)
#229 := (iff #46 #228)
#230 := [rewrite]: #229
#222 := (iff #44 #221)
#223 := [rewrite]: #222
#233 := [monotonicity #223 #230]: #232
#225 := (iff #45 #224)
#218 := (iff #43 #217)
#219 := [rewrite]: #218
#226 := [monotonicity #219 #223]: #225
#236 := [monotonicity #226 #233]: #235
#281 := [monotonicity #236]: #280
#210 := (iff #173 #40)
#211 := [rewrite]: #210
#284 := [monotonicity #211 #281]: #283
#212 := (iff #176 #41)
#213 := [rewrite]: #212
#287 := [monotonicity #213 #284]: #286
#290 := [monotonicity #287]: #289
#293 := [quant-intro #290]: #292
#277 := (iff #66 #276)
#274 := (iff #65 #273)
#271 := (= #64 #270)
#268 := (= #63 #267)
#265 := (= #62 #264)
#262 := (= #61 #259)
#256 := (- #253)
#260 := (= #256 #259)
#261 := [rewrite]: #260
#257 := (= #61 #256)
#254 := (= #60 #253)
#193 := (= #51 #192)
#194 := [rewrite]: #193
#190 := (= #50 #189)
#191 := [rewrite]: #190
#255 := [monotonicity #191 #194]: #254
#258 := [monotonicity #255]: #257
#263 := [trans #258 #261]: #262
#186 := (iff #48 #185)
#183 := (iff #47 #182)
#184 := [rewrite]: #183
#187 := [monotonicity #184]: #186
#266 := [monotonicity #187 #263]: #265
#174 := (iff #40 #173)
#175 := [rewrite]: #174
#269 := [monotonicity #175 #266]: #268
#177 := (iff #41 #176)
#178 := [rewrite]: #177
#272 := [monotonicity #178 #269]: #271
#275 := [monotonicity #272]: #274
#278 := [quant-intro #275]: #277
#295 := [trans #278 #293]: #294
#252 := [asserted]: #66
#296 := [mp #252 #295]: #291
#324 := [mp~ #296 #309]: #291
#362 := [mp #324 #361]: #359
#393 := [mp #362 #392]: #390
#897 := [mp #393 #896]: #892
#716 := (not #892)
#684 := (or #716 #804)
#821 := (* -1::Int 3::Int)
#816 := (* -1::Int 1::Int)
#817 := (mod #816 #821)
#822 := (+ #13 #817)
#823 := (= #822 0::Int)
#818 := (mod 1::Int 3::Int)
#824 := (* -1::Int #818)
#665 := (+ #13 #824)
#666 := (= #665 0::Int)
#842 := (>= 1::Int 0::Int)
#667 := (<= 3::Int 0::Int)
#809 := (or #667 #842)
#810 := (not #809)
#811 := (<= 1::Int 0::Int)
#812 := (or #811 #667)
#806 := (not #812)
#807 := (or #806 #810)
#813 := (ite #807 #666 #823)
#814 := (= #13 0::Int)
#808 := (= 1::Int 0::Int)
#815 := (ite #808 #814 #813)
#644 := (= 1::Int #13)
#646 := (= 3::Int 0::Int)
#647 := (ite #646 #644 #815)
#691 := (or #716 #647)
#681 := (iff #691 #684)
#685 := (iff #684 #684)
#692 := [rewrite]: #685
#715 := (iff #647 #804)
#708 := (ite false #804 #804)
#690 := (iff #708 #804)
#714 := [rewrite]: #690
#654 := (iff #647 #708)
#723 := (iff #815 #804)
#721 := (ite false #814 #804)
#726 := (iff #721 #804)
#727 := [rewrite]: #726
#722 := (iff #815 #721)
#724 := (iff #813 #804)
#736 := -2::Int
#737 := (= #13 -2::Int)
#1 := true
#713 := (ite true #804 #737)
#718 := (iff #713 #804)
#719 := [rewrite]: #718
#606 := (iff #813 #713)
#711 := (iff #823 #737)
#761 := 2::Int
#741 := (+ 2::Int #13)
#731 := (= #741 0::Int)
#732 := (iff #731 #737)
#738 := [rewrite]: #732
#734 := (iff #823 #731)
#729 := (= #822 #741)
#744 := (+ #13 2::Int)
#747 := (= #744 #741)
#733 := [rewrite]: #747
#745 := (= #822 #744)
#742 := (= #817 2::Int)
#756 := -3::Int
#759 := (mod -1::Int -3::Int)
#739 := (= #759 2::Int)
#740 := [rewrite]: #739
#760 := (= #817 #759)
#757 := (= #821 -3::Int)
#758 := [rewrite]: #757
#773 := (= #816 -1::Int)
#774 := [rewrite]: #773
#750 := [monotonicity #774 #758]: #760
#743 := [trans #750 #740]: #742
#746 := [monotonicity #743]: #745
#730 := [trans #746 #733]: #729
#735 := [monotonicity #730]: #734
#712 := [trans #735 #738]: #711
#754 := (iff #666 #804)
#765 := (+ -1::Int #13)
#748 := (= #765 0::Int)
#752 := (iff #748 #804)
#753 := [rewrite]: #752
#749 := (iff #666 #748)
#764 := (= #665 #765)
#776 := (+ #13 -1::Int)
#766 := (= #776 #765)
#767 := [rewrite]: #766
#762 := (= #665 #776)
#775 := (= #824 -1::Int)
#770 := (= #824 #816)
#785 := (= #818 1::Int)
#769 := [rewrite]: #785
#772 := [monotonicity #769]: #770
#771 := [trans #772 #774]: #775
#763 := [monotonicity #771]: #762
#768 := [trans #763 #767]: #764
#751 := [monotonicity #768]: #749
#755 := [trans #751 #753]: #754
#784 := (iff #807 true)
#787 := (or true false)
#782 := (iff #787 true)
#783 := [rewrite]: #782
#792 := (iff #807 #787)
#790 := (iff #810 false)
#490 := (not true)
#851 := (iff #490 false)
#837 := [rewrite]: #851
#779 := (iff #810 #490)
#780 := (iff #809 true)
#798 := (or false true)
#786 := (iff #798 true)
#788 := [rewrite]: #786
#795 := (iff #809 #798)
#849 := (iff #842 true)
#489 := [rewrite]: #849
#648 := (iff #667 false)
#796 := [rewrite]: #648
#799 := [monotonicity #796 #489]: #795
#777 := [trans #799 #788]: #780
#789 := [monotonicity #777]: #779
#791 := [trans #789 #837]: #790
#704 := (iff #806 true)
#700 := (not false)
#702 := (iff #700 true)
#703 := [rewrite]: #702
#693 := (iff #806 #700)
#697 := (iff #812 false)
#698 := (or false false)
#797 := (iff #698 false)
#682 := [rewrite]: #797
#793 := (iff #812 #698)
#688 := (iff #811 false)
#689 := [rewrite]: #688
#794 := [monotonicity #689 #796]: #793
#699 := [trans #794 #682]: #697
#701 := [monotonicity #699]: #693
#705 := [trans #701 #703]: #704
#781 := [monotonicity #705 #791]: #792
#778 := [trans #781 #783]: #784
#717 := [monotonicity #778 #755 #712]: #606
#720 := [trans #717 #719]: #724
#805 := (iff #808 false)
#687 := [rewrite]: #805
#725 := [monotonicity #687 #720]: #722
#728 := [trans #725 #727]: #723
#803 := (iff #644 #804)
#802 := [rewrite]: #803
#800 := (iff #646 false)
#801 := [rewrite]: #800
#709 := [monotonicity #801 #802 #728]: #654
#710 := [trans #709 #714]: #715
#683 := [monotonicity #710]: #681
#694 := [trans #683 #692]: #681
#650 := [quant-inst #10 #12]: #691
#695 := [mp #650 #694]: #684
#686 := [unit-resolution #695 #897]: #804
#707 := [monotonicity #686]: #16
#17 := (not #16)
#86 := [asserted]: #17
[unit-resolution #86 #707]: false
unsat
958d3f7cb567adebadc6dbc4451d5cffa3fe139d 318 0
#2 := false
decl f3 :: (-> S2 Int S3)
#14 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 0::Int)
decl f5 :: (-> S4 Int Int)
#10 := 3::Int
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#11 := (f6 f7 3::Int)
#12 := (f5 #11 3::Int)
#13 := (f3 f4 #12)
#16 := (= #13 #15)
#806 := (= #12 0::Int)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f6 f7 #36)
#57 := (f5 #56 #24)
#891 := (pattern #57)
#187 := -1::Int
#191 := (* -1::Int #24)
#188 := (* -1::Int #36)
#252 := (mod #188 #191)
#382 := (+ #57 #252)
#383 := (= #382 0::Int)
#58 := (mod #36 #24)
#379 := (* -1::Int #58)
#380 := (+ #57 #379)
#381 := (= #380 0::Int)
#226 := (>= #36 0::Int)
#219 := (<= #24 0::Int)
#326 := (or #219 #226)
#327 := (not #326)
#215 := (<= #36 0::Int)
#324 := (or #215 #219)
#325 := (not #324)
#330 := (or #325 #327)
#384 := (ite #330 #381 #383)
#378 := (= #57 0::Int)
#39 := (= #36 0::Int)
#385 := (ite #39 #378 #384)
#377 := (= #36 #57)
#40 := (= #24 0::Int)
#386 := (ite #40 #377 #385)
#892 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #891) #386)
#389 := (forall (vars (?v0 Int) (?v1 Int)) #386)
#895 := (iff #389 #892)
#893 := (iff #386 #386)
#894 := [refl]: #893
#896 := [quant-intro #894]: #895
#258 := (* -1::Int #252)
#346 := (ite #330 #58 #258)
#349 := (ite #39 0::Int #346)
#352 := (ite #40 #36 #349)
#355 := (= #57 #352)
#358 := (forall (vars (?v0 Int) (?v1 Int)) #355)
#390 := (iff #358 #389)
#387 := (iff #355 #386)
#388 := [rewrite]: #387
#391 := [quant-intro #388]: #390
#227 := (not #226)
#220 := (not #219)
#230 := (and #220 #227)
#216 := (not #215)
#223 := (and #216 #220)
#233 := (or #223 #230)
#278 := (ite #233 #58 #258)
#281 := (ite #39 0::Int #278)
#284 := (ite #40 #36 #281)
#287 := (= #57 #284)
#290 := (forall (vars (?v0 Int) (?v1 Int)) #287)
#359 := (iff #290 #358)
#356 := (iff #287 #355)
#353 := (= #284 #352)
#350 := (= #281 #349)
#347 := (= #278 #346)
#331 := (iff #233 #330)
#328 := (iff #230 #327)
#329 := [rewrite]: #328
#309 := (iff #223 #325)
#310 := [rewrite]: #309
#332 := [monotonicity #310 #329]: #331
#348 := [monotonicity #332]: #347
#351 := [monotonicity #348]: #350
#354 := [monotonicity #351]: #353
#357 := [monotonicity #354]: #356
#360 := [quant-intro #357]: #359
#307 := (~ #290 #290)
#321 := (~ #287 #287)
#322 := [refl]: #321
#308 := [nnf-pos #322]: #307
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (ite #47 #58 #60)
#62 := (ite #39 0::Int #61)
#63 := (ite #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#293 := (iff #65 #290)
#181 := (and #43 #45)
#184 := (or #44 #181)
#263 := (ite #184 #58 #258)
#172 := (= 0::Int #36)
#266 := (ite #172 0::Int #263)
#175 := (= 0::Int #24)
#269 := (ite #175 #36 #266)
#272 := (= #57 #269)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#291 := (iff #275 #290)
#288 := (iff #272 #287)
#285 := (= #269 #284)
#282 := (= #266 #281)
#279 := (= #263 #278)
#234 := (iff #184 #233)
#231 := (iff #181 #230)
#228 := (iff #45 #227)
#229 := [rewrite]: #228
#221 := (iff #43 #220)
#222 := [rewrite]: #221
#232 := [monotonicity #222 #229]: #231
#224 := (iff #44 #223)
#217 := (iff #42 #216)
#218 := [rewrite]: #217
#225 := [monotonicity #218 #222]: #224
#235 := [monotonicity #225 #232]: #234
#280 := [monotonicity #235]: #279
#209 := (iff #172 #39)
#210 := [rewrite]: #209
#283 := [monotonicity #210 #280]: #282
#211 := (iff #175 #40)
#212 := [rewrite]: #211
#286 := [monotonicity #212 #283]: #285
#289 := [monotonicity #286]: #288
#292 := [quant-intro #289]: #291
#276 := (iff #65 #275)
#273 := (iff #64 #272)
#270 := (= #63 #269)
#267 := (= #62 #266)
#264 := (= #61 #263)
#261 := (= #60 #258)
#255 := (- #252)
#259 := (= #255 #258)
#260 := [rewrite]: #259
#256 := (= #60 #255)
#253 := (= #59 #252)
#192 := (= #50 #191)
#193 := [rewrite]: #192
#189 := (= #49 #188)
#190 := [rewrite]: #189
#254 := [monotonicity #190 #193]: #253
#257 := [monotonicity #254]: #256
#262 := [trans #257 #260]: #261
#185 := (iff #47 #184)
#182 := (iff #46 #181)
#183 := [rewrite]: #182
#186 := [monotonicity #183]: #185
#265 := [monotonicity #186 #262]: #264
#173 := (iff #39 #172)
#174 := [rewrite]: #173
#268 := [monotonicity #174 #265]: #267
#176 := (iff #40 #175)
#177 := [rewrite]: #176
#271 := [monotonicity #177 #268]: #270
#274 := [monotonicity #271]: #273
#277 := [quant-intro #274]: #276
#294 := [trans #277 #292]: #293
#251 := [asserted]: #65
#295 := [mp #251 #294]: #290
#323 := [mp~ #295 #308]: #290
#361 := [mp #323 #360]: #358
#392 := [mp #361 #391]: #389
#897 := [mp #392 #896]: #892
#711 := (not #892)
#712 := (or #711 #806)
#819 := (* -1::Int 3::Int)
#820 := (mod #819 #819)
#821 := (+ #12 #820)
#816 := (= #821 0::Int)
#817 := (mod 3::Int 3::Int)
#822 := (* -1::Int #817)
#823 := (+ #12 #822)
#818 := (= #823 0::Int)
#824 := (>= 3::Int 0::Int)
#665 := (<= 3::Int 0::Int)
#666 := (or #665 #824)
#667 := (not #666)
#809 := (or #665 #665)
#810 := (not #809)
#811 := (or #810 #667)
#812 := (ite #811 #818 #816)
#807 := (= 3::Int 0::Int)
#813 := (ite #807 #806 #812)
#814 := (= 3::Int #12)
#808 := (ite #807 #814 #813)
#713 := (or #711 #808)
#717 := (iff #713 #712)
#719 := (iff #712 #712)
#724 := [rewrite]: #719
#732 := (iff #808 #806)
#647 := (= #12 3::Int)
#731 := (ite false #647 #806)
#736 := (iff #731 #806)
#737 := [rewrite]: #736
#734 := (iff #808 #731)
#729 := (iff #813 #806)
#745 := (ite false #806 #806)
#747 := (iff #745 #806)
#733 := [rewrite]: #747
#746 := (iff #813 #745)
#743 := (iff #812 #806)
#1 := true
#750 := (ite true #806 #806)
#740 := (iff #750 #806)
#742 := [rewrite]: #740
#761 := (iff #812 #750)
#759 := (iff #816 #806)
#757 := (= #821 #12)
#772 := (+ #12 0::Int)
#775 := (= #772 #12)
#771 := [rewrite]: #775
#755 := (= #821 #772)
#753 := (= #820 0::Int)
#766 := -3::Int
#768 := (mod -3::Int -3::Int)
#751 := (= #768 0::Int)
#752 := [rewrite]: #751
#748 := (= #820 #768)
#767 := (= #819 -3::Int)
#764 := [rewrite]: #767
#749 := [monotonicity #764 #764]: #748
#754 := [trans #749 #752]: #753
#756 := [monotonicity #754]: #755
#758 := [trans #756 #771]: #757
#760 := [monotonicity #758]: #759
#763 := (iff #818 #806)
#776 := (= #823 #12)
#773 := (= #823 #772)
#769 := (= #822 0::Int)
#782 := (* -1::Int 0::Int)
#778 := (= #782 0::Int)
#785 := [rewrite]: #778
#783 := (= #822 #782)
#792 := (= #817 0::Int)
#781 := [rewrite]: #792
#784 := [monotonicity #781]: #783
#770 := [trans #784 #785]: #769
#774 := [monotonicity #770]: #773
#762 := [trans #774 #771]: #776
#765 := [monotonicity #762]: #763
#791 := (iff #811 true)
#780 := (or true false)
#789 := (iff #780 true)
#790 := [rewrite]: #789
#777 := (iff #811 #780)
#786 := (iff #667 false)
#489 := (not true)
#848 := (iff #489 false)
#851 := [rewrite]: #848
#795 := (iff #667 #489)
#705 := (iff #666 true)
#693 := (or false true)
#703 := (iff #693 true)
#704 := [rewrite]: #703
#701 := (iff #666 #693)
#699 := (iff #824 true)
#700 := [rewrite]: #699
#801 := (iff #665 false)
#803 := [rewrite]: #801
#702 := [monotonicity #803 #700]: #701
#798 := [trans #702 #704]: #705
#799 := [monotonicity #798]: #795
#788 := [trans #799 #851]: #786
#682 := (iff #810 true)
#796 := (not false)
#794 := (iff #796 true)
#797 := [rewrite]: #794
#698 := (iff #810 #796)
#689 := (iff #809 false)
#804 := (or false false)
#687 := (iff #804 false)
#688 := [rewrite]: #687
#802 := (iff #809 #804)
#805 := [monotonicity #803 #803]: #802
#648 := [trans #805 #688]: #689
#793 := [monotonicity #648]: #698
#697 := [trans #793 #797]: #682
#779 := [monotonicity #697 #788]: #777
#787 := [trans #779 #790]: #791
#739 := [monotonicity #787 #765 #760]: #761
#744 := [trans #739 #742]: #743
#815 := (iff #807 false)
#644 := [rewrite]: #815
#741 := [monotonicity #644 #744]: #746
#730 := [trans #741 #733]: #729
#646 := (iff #814 #647)
#800 := [rewrite]: #646
#735 := [monotonicity #644 #800 #730]: #734
#738 := [trans #735 #737]: #732
#718 := [monotonicity #738]: #717
#720 := [trans #718 #724]: #717
#606 := [quant-inst #10 #10]: #713
#721 := [mp #606 #720]: #712
#725 := [unit-resolution #721 #897]: #806
#726 := [monotonicity #725]: #16
#17 := (not #16)
#85 := [asserted]: #17
[unit-resolution #85 #726]: false
unsat
8055ca42aa095bbb36b136f82a880cc3b8c48d4b 460 0
#2 := false
#13 := 3::Int
decl f6 :: (-> S4 S5 Int)
decl f8 :: S5
#10 := f8
decl f7 :: S4
#9 := f7
#11 := (f6 f7 f8)
#554 := (mod #11 3::Int)
#748 := (>= #554 3::Int)
#749 := (not #748)
#1 := true
#83 := [true-axiom]: true
#736 := (or false #749)
#732 := [th-lemma arith]: #736
#733 := [unit-resolution #732 #83]: #749
#23 := 0::Int
#199 := -1::Int
#533 := (* -1::Int #554)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#8 := f5
#12 := (f4 f5 #11)
#14 := (f3 #12 3::Int)
#868 := (+ #14 #533)
#815 := (<= #868 0::Int)
#870 := (= #868 0::Int)
#568 := -3::Int
#549 := (* -1::Int #11)
#847 := (mod #549 -3::Int)
#558 := (+ #14 #847)
#561 := (= #558 0::Int)
#539 := (<= #11 0::Int)
#856 := (not #539)
#527 := (>= #11 0::Int)
#860 := (not #527)
#574 := (or #860 #856)
#555 := (ite #574 #870 #561)
#869 := (= #14 0::Int)
#875 := (= #11 0::Int)
#838 := (ite #875 #869 #555)
#24 := (:var 0 Int)
#36 := (:var 1 Int)
#56 := (f4 f5 #36)
#57 := (f3 #56 #24)
#903 := (pattern #57)
#203 := (* -1::Int #24)
#200 := (* -1::Int #36)
#264 := (mod #200 #203)
#394 := (+ #57 #264)
#395 := (= #394 0::Int)
#58 := (mod #36 #24)
#391 := (* -1::Int #58)
#392 := (+ #57 #391)
#393 := (= #392 0::Int)
#238 := (>= #36 0::Int)
#231 := (<= #24 0::Int)
#338 := (or #231 #238)
#339 := (not #338)
#227 := (<= #36 0::Int)
#336 := (or #227 #231)
#337 := (not #336)
#342 := (or #337 #339)
#396 := (ite #342 #393 #395)
#390 := (= #57 0::Int)
#39 := (= #36 0::Int)
#397 := (ite #39 #390 #396)
#389 := (= #36 #57)
#40 := (= #24 0::Int)
#398 := (ite #40 #389 #397)
#904 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #903) #398)
#401 := (forall (vars (?v0 Int) (?v1 Int)) #398)
#907 := (iff #401 #904)
#905 := (iff #398 #398)
#906 := [refl]: #905
#908 := [quant-intro #906]: #907
#270 := (* -1::Int #264)
#358 := (ite #342 #58 #270)
#361 := (ite #39 0::Int #358)
#364 := (ite #40 #36 #361)
#367 := (= #57 #364)
#370 := (forall (vars (?v0 Int) (?v1 Int)) #367)
#402 := (iff #370 #401)
#399 := (iff #367 #398)
#400 := [rewrite]: #399
#403 := [quant-intro #400]: #402
#239 := (not #238)
#232 := (not #231)
#242 := (and #232 #239)
#228 := (not #227)
#235 := (and #228 #232)
#245 := (or #235 #242)
#290 := (ite #245 #58 #270)
#293 := (ite #39 0::Int #290)
#296 := (ite #40 #36 #293)
#299 := (= #57 #296)
#302 := (forall (vars (?v0 Int) (?v1 Int)) #299)
#371 := (iff #302 #370)
#368 := (iff #299 #367)
#365 := (= #296 #364)
#362 := (= #293 #361)
#359 := (= #290 #358)
#343 := (iff #245 #342)
#340 := (iff #242 #339)
#341 := [rewrite]: #340
#321 := (iff #235 #337)
#322 := [rewrite]: #321
#344 := [monotonicity #322 #341]: #343
#360 := [monotonicity #344]: #359
#363 := [monotonicity #360]: #362
#366 := [monotonicity #363]: #365
#369 := [monotonicity #366]: #368
#372 := [quant-intro #369]: #371
#319 := (~ #302 #302)
#333 := (~ #299 #299)
#334 := [refl]: #333
#320 := [nnf-pos #334]: #319
#50 := (- #24)
#49 := (- #36)
#59 := (mod #49 #50)
#60 := (- #59)
#43 := (< 0::Int #24)
#45 := (< #36 0::Int)
#46 := (and #45 #43)
#42 := (< 0::Int #36)
#44 := (and #42 #43)
#47 := (or #44 #46)
#61 := (ite #47 #58 #60)
#62 := (ite #39 0::Int #61)
#63 := (ite #40 #36 #62)
#64 := (= #57 #63)
#65 := (forall (vars (?v0 Int) (?v1 Int)) #64)
#305 := (iff #65 #302)
#193 := (and #43 #45)
#196 := (or #44 #193)
#275 := (ite #196 #58 #270)
#184 := (= 0::Int #36)
#278 := (ite #184 0::Int #275)
#187 := (= 0::Int #24)
#281 := (ite #187 #36 #278)
#284 := (= #57 #281)
#287 := (forall (vars (?v0 Int) (?v1 Int)) #284)
#303 := (iff #287 #302)
#300 := (iff #284 #299)
#297 := (= #281 #296)
#294 := (= #278 #293)
#291 := (= #275 #290)
#246 := (iff #196 #245)
#243 := (iff #193 #242)
#240 := (iff #45 #239)
#241 := [rewrite]: #240
#233 := (iff #43 #232)
#234 := [rewrite]: #233
#244 := [monotonicity #234 #241]: #243
#236 := (iff #44 #235)
#229 := (iff #42 #228)
#230 := [rewrite]: #229
#237 := [monotonicity #230 #234]: #236
#247 := [monotonicity #237 #244]: #246
#292 := [monotonicity #247]: #291
#221 := (iff #184 #39)
#222 := [rewrite]: #221
#295 := [monotonicity #222 #292]: #294
#223 := (iff #187 #40)
#224 := [rewrite]: #223
#298 := [monotonicity #224 #295]: #297
#301 := [monotonicity #298]: #300
#304 := [quant-intro #301]: #303
#288 := (iff #65 #287)
#285 := (iff #64 #284)
#282 := (= #63 #281)
#279 := (= #62 #278)
#276 := (= #61 #275)
#273 := (= #60 #270)
#267 := (- #264)
#271 := (= #267 #270)
#272 := [rewrite]: #271
#268 := (= #60 #267)
#265 := (= #59 #264)
#204 := (= #50 #203)
#205 := [rewrite]: #204
#201 := (= #49 #200)
#202 := [rewrite]: #201
#266 := [monotonicity #202 #205]: #265
#269 := [monotonicity #266]: #268
#274 := [trans #269 #272]: #273
#197 := (iff #47 #196)
#194 := (iff #46 #193)
#195 := [rewrite]: #194
#198 := [monotonicity #195]: #197
#277 := [monotonicity #198 #274]: #276
#185 := (iff #39 #184)
#186 := [rewrite]: #185
#280 := [monotonicity #186 #277]: #279
#188 := (iff #40 #187)
#189 := [rewrite]: #188
#283 := [monotonicity #189 #280]: #282
#286 := [monotonicity #283]: #285
#289 := [quant-intro #286]: #288
#306 := [trans #289 #304]: #305
#263 := [asserted]: #65
#307 := [mp #263 #306]: #302
#335 := [mp~ #307 #320]: #302
#373 := [mp #335 #372]: #370
#404 := [mp #373 #403]: #401
#909 := [mp #404 #908]: #904
#836 := (not #904)
#677 := (or #836 #838)
#548 := (* -1::Int 3::Int)
#480 := (mod #549 #548)
#553 := (+ #14 #480)
#550 := (= #553 0::Int)
#657 := (<= 3::Int 0::Int)
#864 := (or #657 #527)
#538 := (not #864)
#871 := (or #539 #657)
#872 := (not #871)
#873 := (or #872 #538)
#874 := (ite #873 #870 #550)
#865 := (ite #875 #869 #874)
#525 := (= #11 #14)
#530 := (= 3::Int 0::Int)
#866 := (ite #530 #525 #865)
#678 := (or #836 #866)
#821 := (iff #678 #677)
#823 := (iff #677 #677)
#824 := [rewrite]: #823
#835 := (iff #866 #838)
#832 := (ite false #525 #838)
#829 := (iff #832 #838)
#834 := [rewrite]: #829
#833 := (iff #866 #832)
#842 := (iff #865 #838)
#837 := (iff #874 #555)
#839 := (iff #550 #561)
#559 := (= #553 #558)
#844 := (= #480 #847)
#569 := (= #548 -3::Int)
#843 := [rewrite]: #569
#848 := [monotonicity #843]: #844
#560 := [monotonicity #848]: #559
#840 := [monotonicity #560]: #839
#845 := (iff #873 #574)
#850 := (or #856 #860)
#575 := (iff #850 #574)
#468 := [rewrite]: #575
#572 := (iff #873 #850)
#863 := (iff #538 #860)
#502 := (iff #864 #527)
#858 := (or false #527)
#861 := (iff #858 #527)
#501 := [rewrite]: #861
#496 := (iff #864 #858)
#510 := (iff #657 false)
#851 := [rewrite]: #510
#859 := [monotonicity #851]: #496
#862 := [trans #859 #501]: #502
#849 := [monotonicity #862]: #863
#857 := (iff #872 #856)
#854 := (iff #871 #539)
#514 := (or #539 false)
#517 := (iff #514 #539)
#853 := [rewrite]: #517
#515 := (iff #871 #514)
#516 := [monotonicity #851]: #515
#855 := [trans #516 #853]: #854
#852 := [monotonicity #855]: #857
#573 := [monotonicity #852 #849]: #572
#846 := [trans #573 #468]: #845
#841 := [monotonicity #846 #840]: #837
#831 := [monotonicity #841]: #842
#526 := (iff #530 false)
#867 := [rewrite]: #526
#828 := [monotonicity #867 #831]: #833
#830 := [trans #828 #834]: #835
#822 := [monotonicity #830]: #821
#818 := [trans #822 #824]: #821
#679 := [quant-inst #11 #13]: #678
#819 := [mp #679 #818]: #677
#734 := [unit-resolution #819 #909]: #838
#712 := (not #875)
#711 := (not #838)
#721 := (or #711 #712)
#716 := (not #869)
#825 := (<= #14 0::Int)
#737 := (not #825)
#90 := (>= #14 3::Int)
#15 := (< #14 3::Int)
#16 := (not #15)
#97 := (iff #16 #90)
#88 := (not #90)
#92 := (not #88)
#95 := (iff #92 #90)
#96 := [rewrite]: #95
#93 := (iff #16 #92)
#89 := (iff #15 #88)
#91 := [rewrite]: #89
#94 := [monotonicity #91]: #93
#98 := [trans #94 #96]: #97
#85 := [asserted]: #16
#99 := [mp #85 #98]: #90
#738 := (or #737 #88)
#739 := [th-lemma arith farkas 1 1]: #738
#735 := [unit-resolution #739 #99]: #737
#740 := (or #716 #825)
#720 := [th-lemma arith triangle-eq]: #740
#666 := [unit-resolution #720 #735]: #716
#705 := (or #711 #712 #869)
#713 := [def-axiom]: #705
#702 := [unit-resolution #713 #666]: #721
#726 := [unit-resolution #702 #734]: #712
#714 := (or #711 #875 #555)
#715 := [def-axiom]: #714
#727 := [unit-resolution #715 #726 #734]: #555
decl f9 :: (-> S6 Int S5)
decl f10 :: S6
#17 := f10
#462 := (f9 f10 #11)
#798 := (f6 f7 #462)
#800 := (= #798 0::Int)
#706 := (not #800)
#707 := (iff #712 #706)
#697 := (iff #875 #800)
#693 := (iff #800 #875)
#703 := (= #798 #11)
#728 := (= #462 f8)
#547 := (= f8 #462)
#18 := (:var 0 S5)
#19 := (f6 f7 #18)
#876 := (pattern #19)
#20 := (f9 f10 #19)
#87 := (= #18 #20)
#877 := (forall (vars (?v0 S5)) (:pat #876) #87)
#102 := (forall (vars (?v0 S5)) #87)
#880 := (iff #102 #877)
#878 := (iff #87 #87)
#879 := [refl]: #878
#881 := [quant-intro #879]: #880
#325 := (~ #102 #102)
#323 := (~ #87 #87)
#324 := [refl]: #323
#326 := [nnf-pos #324]: #325
#21 := (= #20 #18)
#22 := (forall (vars (?v0 S5)) #21)
#103 := (iff #22 #102)
#100 := (iff #21 #87)
#101 := [rewrite]: #100
#104 := [quant-intro #101]: #103
#86 := [asserted]: #22
#107 := [mp #86 #104]: #102
#311 := [mp~ #107 #326]: #102
#882 := [mp #311 #881]: #877
#540 := (not #877)
#551 := (or #540 #547)
#552 := [quant-inst #10]: #551
#722 := [unit-resolution #552 #882]: #547
#696 := [symm #722]: #728
#662 := [monotonicity #696]: #703
#695 := [monotonicity #662]: #693
#704 := [symm #695]: #697
#708 := [monotonicity #704]: #707
#718 := [mp #726 #708]: #706
#789 := (or #527 #800)
#26 := (f9 f10 #24)
#883 := (pattern #26)
#124 := (>= #24 0::Int)
#27 := (f6 f7 #26)
#32 := (= #27 0::Int)
#172 := (or #32 #124)
#890 := (forall (vars (?v0 Int)) (:pat #883) #172)
#177 := (forall (vars (?v0 Int)) #172)
#893 := (iff #177 #890)
#891 := (iff #172 #172)
#892 := [refl]: #891
#894 := [quant-intro #892]: #893
#315 := (~ #177 #177)
#327 := (~ #172 #172)
#328 := [refl]: #327
#316 := [nnf-pos #328]: #315
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#180 := (iff #34 #177)
#143 := (= 0::Int #27)
#149 := (not #31)
#150 := (or #149 #143)
#155 := (forall (vars (?v0 Int)) #150)
#178 := (iff #155 #177)
#175 := (iff #150 #172)
#169 := (or #124 #32)
#173 := (iff #169 #172)
#174 := [rewrite]: #173
#170 := (iff #150 #169)
#167 := (iff #143 #32)
#168 := [rewrite]: #167
#165 := (iff #149 #124)
#125 := (not #124)
#160 := (not #125)
#163 := (iff #160 #124)
#164 := [rewrite]: #163
#161 := (iff #149 #160)
#158 := (iff #31 #125)
#159 := [rewrite]: #158
#162 := [monotonicity #159]: #161
#166 := [trans #162 #164]: #165
#171 := [monotonicity #166 #168]: #170
#176 := [trans #171 #174]: #175
#179 := [quant-intro #176]: #178
#156 := (iff #34 #155)
#153 := (iff #33 #150)
#146 := (implies #31 #143)
#151 := (iff #146 #150)
#152 := [rewrite]: #151
#147 := (iff #33 #146)
#144 := (iff #32 #143)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#154 := [trans #148 #152]: #153
#157 := [quant-intro #154]: #156
#181 := [trans #157 #179]: #180
#142 := [asserted]: #34
#182 := [mp #142 #181]: #177
#329 := [mp~ #182 #316]: #177
#895 := [mp #329 #894]: #890
#802 := (not #890)
#803 := (or #802 #527 #800)
#792 := (or #800 #527)
#799 := (or #802 #792)
#797 := (iff #799 #803)
#793 := (or #802 #789)
#796 := (iff #793 #803)
#790 := [rewrite]: #796
#794 := (iff #799 #793)
#791 := (iff #792 #789)
#801 := [rewrite]: #791
#795 := [monotonicity #801]: #794
#781 := [trans #795 #790]: #797
#804 := [quant-inst #11]: #799
#782 := [mp #804 #781]: #803
#698 := [unit-resolution #782 #895]: #789
#719 := [unit-resolution #698 #718]: #527
#674 := (or #875 #856 #860)
#675 := [th-lemma arith triangle-eq]: #674
#680 := [unit-resolution #675 #726]: #850
#681 := [unit-resolution #680 #719]: #856
#656 := (or #574 #539)
#658 := [def-axiom]: #656
#682 := [unit-resolution #658 #681]: #574
#659 := (not #574)
#699 := (not #555)
#700 := (or #699 #659 #870)
#701 := [def-axiom]: #700
#683 := [unit-resolution #701 #682 #727]: #870
#710 := (not #870)
#684 := (or #710 #815)
#685 := [th-lemma arith triangle-eq]: #684
#686 := [unit-resolution #685 #683]: #815
[th-lemma arith farkas -1 1 1 #99 #686 #733]: false
unsat
0c32a24472b6c1312e94e12aa85113077d009d0a 670 0
#2 := false
#14 := 3::Int
decl f8 :: (-> S6 S3 Int)
decl f10 :: S3
#11 := f10
decl f9 :: S6
#10 := f9
#12 := (f8 f9 f10)
#890 := (mod #12 3::Int)
#713 := (>= #890 3::Int)
#714 := (not #713)
#1 := true
#86 := [true-axiom]: true
#673 := (or false #714)
#674 := [th-lemma arith]: #673
#676 := [unit-resolution #674 #86]: #714
#111 := (>= #12 3::Int)
#109 := (not #111)
#626 := [hypothesis]: #109
#26 := 0::Int
#227 := -1::Int
#888 := (* -1::Int #890)
decl f5 :: (-> S4 Int Int)
decl f6 :: (-> S5 Int S4)
decl f7 :: S5
#9 := f7
#13 := (f6 f7 #12)
#15 := (f5 #13 3::Int)
#891 := (+ #15 #888)
#831 := (<= #891 0::Int)
#877 := (= #891 0::Int)
#871 := (= #12 0::Int)
#816 := (not #871)
decl f3 :: (-> S2 Int S3)
decl f4 :: S2
#8 := f4
#16 := (f3 f4 #15)
#89 := (= f10 #16)
#579 := (not #89)
#581 := (or #579 #111)
#120 := (iff #89 #111)
#18 := (< #12 3::Int)
#17 := (= #16 f10)
#19 := (iff #17 #18)
#20 := (not #19)
#123 := (iff #20 #120)
#103 := (not #18)
#104 := (iff #89 #103)
#121 := (iff #104 #120)
#118 := (iff #103 #111)
#113 := (not #109)
#116 := (iff #113 #111)
#117 := [rewrite]: #116
#114 := (iff #103 #113)
#110 := (iff #18 #109)
#112 := [rewrite]: #110
#115 := [monotonicity #112]: #114
#119 := [trans #115 #117]: #118
#122 := [monotonicity #119]: #121
#107 := (iff #20 #104)
#95 := (iff #18 #89)
#100 := (not #95)
#105 := (iff #100 #104)
#106 := [rewrite]: #105
#101 := (iff #20 #100)
#98 := (iff #19 #95)
#92 := (iff #89 #18)
#96 := (iff #92 #95)
#97 := [rewrite]: #96
#93 := (iff #19 #92)
#90 := (iff #17 #89)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#99 := [trans #94 #97]: #98
#102 := [monotonicity #99]: #101
#108 := [trans #102 #106]: #107
#124 := [trans #108 #122]: #123
#88 := [asserted]: #20
#125 := [mp #88 #124]: #120
#490 := (not #120)
#580 := (or #579 #111 #490)
#508 := [def-axiom]: #580
#578 := [unit-resolution #508 #125]: #581
#643 := [unit-resolution #578 #626]: #579
#760 := (or #816 #89)
#582 := (f3 f4 #12)
#757 := (= #582 #16)
#753 := (= #16 #582)
#778 := (= #15 #12)
#777 := (= 0::Int #12)
#771 := [hypothesis]: #871
#772 := [symm #771]: #777
#597 := (= #15 0::Int)
#774 := (or #816 #597)
#847 := -3::Int
#887 := (* -1::Int #12)
#848 := (mod #887 -3::Int)
#686 := (+ #15 #848)
#841 := (= #686 0::Int)
#878 := (>= #12 0::Int)
#707 := (not #878)
#603 := (<= #12 0::Int)
#860 := (not #603)
#851 := (or #860 #707)
#842 := (ite #851 #877 #841)
#728 := (ite #871 #597 #842)
#27 := (:var 0 Int)
#39 := (:var 1 Int)
#59 := (f6 f7 #39)
#60 := (f5 #59 #27)
#931 := (pattern #60)
#231 := (* -1::Int #27)
#228 := (* -1::Int #39)
#292 := (mod #228 #231)
#422 := (+ #60 #292)
#423 := (= #422 0::Int)
#61 := (mod #39 #27)
#419 := (* -1::Int #61)
#420 := (+ #60 #419)
#421 := (= #420 0::Int)
#266 := (>= #39 0::Int)
#259 := (<= #27 0::Int)
#366 := (or #259 #266)
#367 := (not #366)
#255 := (<= #39 0::Int)
#364 := (or #255 #259)
#365 := (not #364)
#370 := (or #365 #367)
#424 := (ite #370 #421 #423)
#418 := (= #60 0::Int)
#42 := (= #39 0::Int)
#425 := (ite #42 #418 #424)
#417 := (= #39 #60)
#43 := (= #27 0::Int)
#426 := (ite #43 #417 #425)
#932 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #931) #426)
#429 := (forall (vars (?v0 Int) (?v1 Int)) #426)
#935 := (iff #429 #932)
#933 := (iff #426 #426)
#934 := [refl]: #933
#936 := [quant-intro #934]: #935
#298 := (* -1::Int #292)
#386 := (ite #370 #61 #298)
#389 := (ite #42 0::Int #386)
#392 := (ite #43 #39 #389)
#395 := (= #60 #392)
#398 := (forall (vars (?v0 Int) (?v1 Int)) #395)
#430 := (iff #398 #429)
#427 := (iff #395 #426)
#428 := [rewrite]: #427
#431 := [quant-intro #428]: #430
#267 := (not #266)
#260 := (not #259)
#270 := (and #260 #267)
#256 := (not #255)
#263 := (and #256 #260)
#273 := (or #263 #270)
#318 := (ite #273 #61 #298)
#321 := (ite #42 0::Int #318)
#324 := (ite #43 #39 #321)
#327 := (= #60 #324)
#330 := (forall (vars (?v0 Int) (?v1 Int)) #327)
#399 := (iff #330 #398)
#396 := (iff #327 #395)
#393 := (= #324 #392)
#390 := (= #321 #389)
#387 := (= #318 #386)
#371 := (iff #273 #370)
#368 := (iff #270 #367)
#369 := [rewrite]: #368
#349 := (iff #263 #365)
#350 := [rewrite]: #349
#372 := [monotonicity #350 #369]: #371
#388 := [monotonicity #372]: #387
#391 := [monotonicity #388]: #390
#394 := [monotonicity #391]: #393
#397 := [monotonicity #394]: #396
#400 := [quant-intro #397]: #399
#347 := (~ #330 #330)
#361 := (~ #327 #327)
#362 := [refl]: #361
#348 := [nnf-pos #362]: #347
#53 := (- #27)
#52 := (- #39)
#62 := (mod #52 #53)
#63 := (- #62)
#46 := (< 0::Int #27)
#48 := (< #39 0::Int)
#49 := (and #48 #46)
#45 := (< 0::Int #39)
#47 := (and #45 #46)
#50 := (or #47 #49)
#64 := (ite #50 #61 #63)
#65 := (ite #42 0::Int #64)
#66 := (ite #43 #39 #65)
#67 := (= #60 #66)
#68 := (forall (vars (?v0 Int) (?v1 Int)) #67)
#333 := (iff #68 #330)
#221 := (and #46 #48)
#224 := (or #47 #221)
#303 := (ite #224 #61 #298)
#212 := (= 0::Int #39)
#306 := (ite #212 0::Int #303)
#215 := (= 0::Int #27)
#309 := (ite #215 #39 #306)
#312 := (= #60 #309)
#315 := (forall (vars (?v0 Int) (?v1 Int)) #312)
#331 := (iff #315 #330)
#328 := (iff #312 #327)
#325 := (= #309 #324)
#322 := (= #306 #321)
#319 := (= #303 #318)
#274 := (iff #224 #273)
#271 := (iff #221 #270)
#268 := (iff #48 #267)
#269 := [rewrite]: #268
#261 := (iff #46 #260)
#262 := [rewrite]: #261
#272 := [monotonicity #262 #269]: #271
#264 := (iff #47 #263)
#257 := (iff #45 #256)
#258 := [rewrite]: #257
#265 := [monotonicity #258 #262]: #264
#275 := [monotonicity #265 #272]: #274
#320 := [monotonicity #275]: #319
#249 := (iff #212 #42)
#250 := [rewrite]: #249
#323 := [monotonicity #250 #320]: #322
#251 := (iff #215 #43)
#252 := [rewrite]: #251
#326 := [monotonicity #252 #323]: #325
#329 := [monotonicity #326]: #328
#332 := [quant-intro #329]: #331
#316 := (iff #68 #315)
#313 := (iff #67 #312)
#310 := (= #66 #309)
#307 := (= #65 #306)
#304 := (= #64 #303)
#301 := (= #63 #298)
#295 := (- #292)
#299 := (= #295 #298)
#300 := [rewrite]: #299
#296 := (= #63 #295)
#293 := (= #62 #292)
#232 := (= #53 #231)
#233 := [rewrite]: #232
#229 := (= #52 #228)
#230 := [rewrite]: #229
#294 := [monotonicity #230 #233]: #293
#297 := [monotonicity #294]: #296
#302 := [trans #297 #300]: #301
#225 := (iff #50 #224)
#222 := (iff #49 #221)
#223 := [rewrite]: #222
#226 := [monotonicity #223]: #225
#305 := [monotonicity #226 #302]: #304
#213 := (iff #42 #212)
#214 := [rewrite]: #213
#308 := [monotonicity #214 #305]: #307
#216 := (iff #43 #215)
#217 := [rewrite]: #216
#311 := [monotonicity #217 #308]: #310
#314 := [monotonicity #311]: #313
#317 := [quant-intro #314]: #316
#334 := [trans #317 #332]: #333
#291 := [asserted]: #68
#335 := [mp #291 #334]: #330
#363 := [mp~ #335 #348]: #330
#401 := [mp #363 #400]: #398
#432 := [mp #401 #431]: #429
#937 := [mp #432 #936]: #932
#739 := (not #932)
#740 := (or #739 #728)
#524 := (* -1::Int 3::Int)
#889 := (mod #887 #524)
#529 := (+ #15 #889)
#530 := (= #529 0::Int)
#600 := (<= 3::Int 0::Int)
#601 := (or #600 #878)
#602 := (not #601)
#496 := (or #603 #600)
#873 := (not #496)
#874 := (or #873 #602)
#596 := (ite #874 #877 #530)
#875 := (ite #871 #597 #596)
#872 := (= #12 #15)
#876 := (= 3::Int 0::Int)
#586 := (ite #876 #872 #875)
#733 := (or #739 #586)
#742 := (iff #733 #740)
#744 := (iff #740 #740)
#745 := [rewrite]: #744
#722 := (iff #586 #728)
#836 := (ite false #872 #728)
#834 := (iff #836 #728)
#837 := [rewrite]: #834
#738 := (iff #586 #836)
#729 := (iff #875 #728)
#845 := (iff #596 #842)
#843 := (iff #530 #841)
#687 := (= #529 #686)
#855 := (= #889 #848)
#853 := (= #524 -3::Int)
#854 := [rewrite]: #853
#684 := [monotonicity #854]: #855
#840 := [monotonicity #684]: #687
#844 := [monotonicity #840]: #843
#852 := (iff #874 #851)
#849 := (iff #602 #707)
#705 := (iff #601 #878)
#857 := (or false #878)
#858 := (iff #857 #878)
#864 := [rewrite]: #858
#862 := (iff #601 #857)
#589 := (iff #600 false)
#867 := [rewrite]: #589
#863 := [monotonicity #867]: #862
#706 := [trans #863 #864]: #705
#850 := [monotonicity #706]: #849
#861 := (iff #873 #860)
#870 := (iff #496 #603)
#868 := (or #603 false)
#869 := (iff #868 #603)
#866 := [rewrite]: #869
#583 := (iff #496 #868)
#865 := [monotonicity #867]: #583
#859 := [trans #865 #866]: #870
#856 := [monotonicity #859]: #861
#846 := [monotonicity #856 #850]: #852
#727 := [monotonicity #846 #844]: #845
#688 := [monotonicity #727]: #729
#587 := (iff #876 false)
#588 := [rewrite]: #587
#833 := [monotonicity #588 #688]: #738
#737 := [trans #833 #837]: #722
#743 := [monotonicity #737]: #742
#838 := [trans #743 #745]: #742
#741 := [quant-inst #12 #14]: #733
#835 := [mp #741 #838]: #740
#801 := [unit-resolution #835 #937]: #728
#811 := (not #728)
#802 := (or #811 #816 #597)
#803 := [def-axiom]: #802
#775 := [unit-resolution #803 #801]: #774
#776 := [unit-resolution #775 #771]: #597
#751 := [trans #776 #772]: #778
#646 := [monotonicity #751]: #753
#758 := [symm #646]: #757
#561 := (= f10 #582)
#21 := (:var 0 S3)
#22 := (f8 f9 #21)
#904 := (pattern #22)
#23 := (f3 f4 #22)
#127 := (= #21 #23)
#905 := (forall (vars (?v0 S3)) (:pat #904) #127)
#130 := (forall (vars (?v0 S3)) #127)
#908 := (iff #130 #905)
#906 := (iff #127 #127)
#907 := [refl]: #906
#909 := [quant-intro #907]: #908
#353 := (~ #130 #130)
#351 := (~ #127 #127)
#352 := [refl]: #351
#354 := [nnf-pos #352]: #353
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S3)) #24)
#131 := (iff #25 #130)
#128 := (iff #24 #127)
#129 := [rewrite]: #128
#132 := [quant-intro #129]: #131
#126 := [asserted]: #25
#135 := [mp #126 #132]: #130
#339 := [mp~ #135 #354]: #130
#910 := [mp #339 #909]: #905
#555 := (not #905)
#685 := (or #555 #561)
#892 := [quant-inst #11]: #685
#752 := [unit-resolution #892 #910]: #561
#759 := [trans #752 #758]: #89
#770 := [hypothesis]: #579
#764 := [unit-resolution #770 #759]: false
#761 := [lemma #764]: #760
#641 := [unit-resolution #761 #643]: #816
#773 := (or #871 #877)
#794 := [hypothesis]: #816
#819 := (not #851)
#809 := (not #877)
#795 := [hypothesis]: #809
#779 := (or #871 #842)
#805 := (or #811 #871 #842)
#806 := [def-axiom]: #805
#780 := [unit-resolution #806 #801]: #779
#782 := [unit-resolution #780 #794]: #842
#822 := (not #842)
#823 := (or #822 #819 #877)
#824 := [def-axiom]: #823
#783 := [unit-resolution #824 #782 #795]: #819
#826 := (or #851 #603)
#828 := [def-axiom]: #826
#784 := [unit-resolution #828 #783]: #603
#820 := (or #851 #878)
#817 := [def-axiom]: #820
#785 := [unit-resolution #817 #783]: #878
#786 := (or #871 #860 #707)
#781 := [th-lemma arith triangle-eq]: #786
#787 := [unit-resolution #781 #785 #784 #794]: false
#769 := [lemma #787]: #773
#630 := [unit-resolution #769 #641]: #877
#631 := (or #809 #831)
#632 := [th-lemma arith triangle-eq]: #631
#633 := [unit-resolution #632 #630]: #831
#762 := (div #12 3::Int)
#754 := (* -3::Int #762)
#755 := (+ #754 #888)
#750 := (+ #12 #755)
#731 := (<= #750 0::Int)
#730 := (= #750 0::Int)
#677 := (or false #730)
#678 := [th-lemma arith]: #677
#521 := [unit-resolution #678 #86]: #730
#679 := (not #730)
#675 := (or #679 #731)
#680 := [th-lemma arith triangle-eq]: #675
#659 := [unit-resolution #680 #521]: #731
#637 := 1::Int
#628 := -2::Int
#634 := (* -2::Int #762)
#635 := (+ #634 #888)
#636 := (+ #12 #635)
#638 := (>= #636 1::Int)
#689 := (* -1::Int #15)
#691 := (+ #12 #689)
#692 := (<= #691 0::Int)
#621 := (not #692)
#683 := (not #872)
#701 := (or #683 #89)
#695 := [hypothesis]: #872
#696 := [symm #695]: #778
#697 := [monotonicity #696]: #753
#698 := [symm #697]: #757
#699 := [trans #752 #698]: #89
#700 := [unit-resolution #770 #699]: false
#671 := [lemma #700]: #701
#615 := [unit-resolution #671 #643]: #683
#693 := (>= #691 0::Int)
#672 := (>= #762 0::Int)
#791 := (f8 f9 #582)
#792 := (= #791 0::Int)
#607 := (not #792)
#608 := (iff #816 #607)
#606 := (iff #871 #792)
#604 := (iff #792 #871)
#611 := (= #791 #12)
#614 := (= #582 f10)
#613 := [symm #752]: #614
#612 := [monotonicity #613]: #611
#605 := [monotonicity #612]: #604
#598 := [symm #605]: #606
#599 := [monotonicity #598]: #608
#609 := [mp #641 #599]: #607
#793 := (or #792 #878)
#29 := (f3 f4 #27)
#911 := (pattern #29)
#152 := (>= #27 0::Int)
#30 := (f8 f9 #29)
#35 := (= #30 0::Int)
#200 := (or #35 #152)
#918 := (forall (vars (?v0 Int)) (:pat #911) #200)
#205 := (forall (vars (?v0 Int)) #200)
#921 := (iff #205 #918)
#919 := (iff #200 #200)
#920 := [refl]: #919
#922 := [quant-intro #920]: #921
#343 := (~ #205 #205)
#355 := (~ #200 #200)
#356 := [refl]: #355
#344 := [nnf-pos #356]: #343
#34 := (< #27 0::Int)
#36 := (implies #34 #35)
#37 := (forall (vars (?v0 Int)) #36)
#208 := (iff #37 #205)
#171 := (= 0::Int #30)
#177 := (not #34)
#178 := (or #177 #171)
#183 := (forall (vars (?v0 Int)) #178)
#206 := (iff #183 #205)
#203 := (iff #178 #200)
#197 := (or #152 #35)
#201 := (iff #197 #200)
#202 := [rewrite]: #201
#198 := (iff #178 #197)
#195 := (iff #171 #35)
#196 := [rewrite]: #195
#193 := (iff #177 #152)
#153 := (not #152)
#188 := (not #153)
#191 := (iff #188 #152)
#192 := [rewrite]: #191
#189 := (iff #177 #188)
#186 := (iff #34 #153)
#187 := [rewrite]: #186
#190 := [monotonicity #187]: #189
#194 := [trans #190 #192]: #193
#199 := [monotonicity #194 #196]: #198
#204 := [trans #199 #202]: #203
#207 := [quant-intro #204]: #206
#184 := (iff #37 #183)
#181 := (iff #36 #178)
#174 := (implies #34 #171)
#179 := (iff #174 #178)
#180 := [rewrite]: #179
#175 := (iff #36 #174)
#172 := (iff #35 #171)
#173 := [rewrite]: #172
#176 := [monotonicity #173]: #175
#182 := [trans #176 #180]: #181
#185 := [quant-intro #182]: #184
#209 := [trans #185 #207]: #208
#170 := [asserted]: #37
#210 := [mp #170 #209]: #205
#357 := [mp~ #210 #344]: #205
#923 := [mp #357 #922]: #918
#879 := (not #918)
#796 := (or #879 #792 #878)
#797 := (or #879 #793)
#799 := (iff #797 #796)
#800 := [rewrite]: #799
#798 := [quant-inst #12]: #797
#790 := [mp #798 #800]: #796
#590 := [unit-resolution #790 #923]: #793
#591 := [unit-resolution #590 #609]: #878
#667 := (or #672 #707)
#662 := (not #672)
#666 := [hypothesis]: #662
#668 := [hypothesis]: #878
#669 := [th-lemma arith farkas 1 3 1 1 #668 #666 #659 #676]: false
#670 := [lemma #669]: #667
#592 := [unit-resolution #670 #591]: #672
#655 := (not #831)
#640 := (or #693 #655 #662)
#663 := (not #693)
#664 := [hypothesis]: #663
#690 := (>= #750 0::Int)
#649 := (or #679 #690)
#657 := [th-lemma arith triangle-eq]: #649
#650 := [unit-resolution #657 #521]: #690
#653 := [hypothesis]: #672
#661 := [hypothesis]: #831
#654 := [th-lemma arith farkas 1 -3 -1 1 #661 #653 #650 #664]: false
#642 := [lemma #654]: #640
#584 := [unit-resolution #642 #633 #592]: #693
#593 := (or #872 #621 #663)
#594 := [th-lemma arith triangle-eq]: #593
#585 := [unit-resolution #594 #584 #615]: #621
#827 := (>= #891 0::Int)
#595 := (or #809 #827)
#562 := [th-lemma arith triangle-eq]: #595
#564 := [unit-resolution #562 #630]: #827
#617 := (not #827)
#625 := (or #638 #617 #692)
#616 := (not #638)
#620 := [hypothesis]: #616
#622 := [hypothesis]: #621
#623 := [hypothesis]: #827
#624 := [th-lemma arith farkas -2/3 -1/3 -1/3 1 #650 #623 #622 #620]: false
#610 := [lemma #624]: #625
#565 := [unit-resolution #610 #564 #585]: #638
#896 := (>= #15 0::Int)
#721 := (>= #890 0::Int)
#556 := (or false #721)
#569 := [th-lemma arith]: #556
#570 := [unit-resolution #569 #86]: #721
#571 := (not #721)
#572 := (or #896 #571 #617)
#573 := [th-lemma arith assign-bounds 1 1]: #572
#563 := [unit-resolution #573 #564 #570]: #896
#574 := [th-lemma arith farkas -1 -3 2 1 1 #563 #565 #659 #633 #626]: false
#557 := [lemma #574]: #111
#566 := (f8 f9 #16)
#567 := (= #15 #566)
#528 := (iff #567 #872)
#525 := (iff #778 #872)
#527 := [commutativity]: #525
#534 := (iff #567 #778)
#535 := (= #566 #12)
#577 := (or #89 #109)
#575 := (or #89 #109 #490)
#576 := [def-axiom]: #575
#568 := [unit-resolution #576 #125]: #577
#552 := [unit-resolution #568 #557]: #89
#533 := [symm #552]: #17
#536 := [monotonicity #533]: #535
#537 := [monotonicity #536]: #534
#531 := [trans #537 #527]: #528
#559 := (or #860 #109)
#560 := [th-lemma arith farkas 1 1]: #559
#539 := [unit-resolution #560 #557]: #860
#541 := (or #816 #603)
#546 := [th-lemma arith triangle-eq]: #541
#547 := [unit-resolution #546 #539]: #816
#548 := [unit-resolution #769 #547]: #877
#549 := [unit-resolution #562 #548]: #827
#550 := [unit-resolution #573 #549 #570]: #896
#898 := (not #896)
#899 := (or #567 #898)
#134 := (= #27 #30)
#159 := (or #134 #153)
#912 := (forall (vars (?v0 Int)) (:pat #911) #159)
#164 := (forall (vars (?v0 Int)) #159)
#915 := (iff #164 #912)
#913 := (iff #159 #159)
#914 := [refl]: #913
#916 := [quant-intro #914]: #915
#341 := (~ #164 #164)
#340 := (~ #159 #159)
#337 := [refl]: #340
#342 := [nnf-pos #337]: #341
#31 := (= #30 #27)
#28 := (<= 0::Int #27)
#32 := (implies #28 #31)
#33 := (forall (vars (?v0 Int)) #32)
#167 := (iff #33 #164)
#141 := (not #28)
#142 := (or #141 #134)
#147 := (forall (vars (?v0 Int)) #142)
#165 := (iff #147 #164)
#162 := (iff #142 #159)
#156 := (or #153 #134)
#160 := (iff #156 #159)
#161 := [rewrite]: #160
#157 := (iff #142 #156)
#154 := (iff #141 #153)
#150 := (iff #28 #152)
#151 := [rewrite]: #150
#155 := [monotonicity #151]: #154
#158 := [monotonicity #155]: #157
#163 := [trans #158 #161]: #162
#166 := [quant-intro #163]: #165
#148 := (iff #33 #147)
#145 := (iff #32 #142)
#138 := (implies #28 #134)
#143 := (iff #138 #142)
#144 := [rewrite]: #143
#139 := (iff #32 #138)
#136 := (iff #31 #134)
#137 := [rewrite]: #136
#140 := [monotonicity #137]: #139
#146 := [trans #140 #144]: #145
#149 := [quant-intro #146]: #148
#168 := [trans #149 #166]: #167
#133 := [asserted]: #33
#169 := [mp #133 #168]: #164
#338 := [mp~ #169 #342]: #164
#917 := [mp #338 #916]: #912
#902 := (not #912)
#897 := (or #902 #567 #898)
#903 := (or #902 #899)
#553 := (iff #903 #897)
#558 := [rewrite]: #553
#893 := [quant-inst #15]: #903
#894 := [mp #893 #558]: #897
#551 := [unit-resolution #894 #917]: #899
#540 := [unit-resolution #551 #550]: #567
#526 := [mp #540 #531]: #872
#532 := (or #683 #692)
#506 := [th-lemma arith triangle-eq]: #532
#511 := [unit-resolution #506 #526]: #692
#512 := [unit-resolution #632 #548]: #831
[th-lemma arith farkas 1 1 -1 1 #512 #511 #557 #676]: false
unsat
64e52f0d144c27e355fe51228451050fa17f1e44 838 0
#2 := false
decl f4 :: (-> S3 Int S2)
decl f6 :: (-> S4 Int Int)
#14 := 1::Int
decl f7 :: (-> S5 Int S4)
decl f9 :: (-> S6 S2 Int)
decl f3 :: S2
#8 := f3
decl f10 :: S6
#11 := f10
#12 := (f9 f10 f3)
decl f11 :: S5
#17 := f11
#18 := (f7 f11 #12)
#19 := (f6 #18 1::Int)
decl f8 :: S5
#10 := f8
#13 := (f7 f8 #12)
#15 := (f6 #13 1::Int)
#93 := (+ #15 #19)
decl f5 :: S3
#9 := f5
#96 := (f4 f5 #93)
#99 := (= f3 #96)
#560 := (f9 f10 #96)
#478 := (f4 f5 #560)
#990 := (= #478 #96)
#481 := (= #96 #478)
#24 := (:var 0 S2)
#25 := (f9 f10 #24)
#883 := (pattern #25)
#26 := (f4 f5 #25)
#106 := (= #24 #26)
#884 := (forall (vars (?v0 S2)) (:pat #883) #106)
#110 := (forall (vars (?v0 S2)) #106)
#887 := (iff #110 #884)
#885 := (iff #106 #106)
#886 := [refl]: #885
#888 := [quant-intro #886]: #887
#333 := (~ #110 #110)
#331 := (~ #106 #106)
#332 := [refl]: #331
#334 := [nnf-pos #332]: #333
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S2)) #27)
#111 := (iff #28 #110)
#108 := (iff #27 #106)
#109 := [rewrite]: #108
#112 := [quant-intro #109]: #111
#105 := [asserted]: #28
#115 := [mp #105 #112]: #110
#319 := [mp~ #115 #334]: #110
#889 := [mp #319 #888]: #884
#547 := (not #884)
#938 := (or #547 #481)
#939 := [quant-inst #96]: #938
#985 := [unit-resolution #939 #889]: #481
#991 := [symm #985]: #990
#992 := (= f3 #478)
#470 := (f4 f5 #12)
#988 := (= #470 #478)
#986 := (= #478 #470)
#983 := (= #560 #12)
#29 := 0::Int
#981 := (= 0::Int #12)
#855 := (= #12 0::Int)
#942 := (= #470 #96)
#940 := (= #12 #93)
#923 := (= #15 #93)
#678 := (<= #19 0::Int)
#765 := (= #19 0::Int)
#852 := (<= #12 0::Int)
#684 := (not #852)
#580 := (>= #12 0::Int)
#833 := (not #580)
#726 := (or #833 #684 #855)
#502 := [hypothesis]: #833
#638 := (f9 f10 #470)
#641 := (= #638 0::Int)
#518 := (iff #641 #855)
#538 := (= #638 #12)
#488 := (= #12 #638)
#554 := (= f3 #470)
#558 := (or #547 #554)
#559 := [quant-inst #8]: #558
#542 := [unit-resolution #559 #889]: #554
#489 := [monotonicity #542]: #488
#492 := [symm #489]: #538
#493 := [monotonicity #492]: #518
#647 := (or #580 #641)
#30 := (:var 0 Int)
#32 := (f4 f5 #30)
#890 := (pattern #32)
#132 := (>= #30 0::Int)
#33 := (f9 f10 #32)
#38 := (= #33 0::Int)
#180 := (or #38 #132)
#897 := (forall (vars (?v0 Int)) (:pat #890) #180)
#185 := (forall (vars (?v0 Int)) #180)
#900 := (iff #185 #897)
#898 := (iff #180 #180)
#899 := [refl]: #898
#901 := [quant-intro #899]: #900
#323 := (~ #185 #185)
#335 := (~ #180 #180)
#336 := [refl]: #335
#324 := [nnf-pos #336]: #323
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#188 := (iff #40 #185)
#151 := (= 0::Int #33)
#157 := (not #37)
#158 := (or #157 #151)
#163 := (forall (vars (?v0 Int)) #158)
#186 := (iff #163 #185)
#183 := (iff #158 #180)
#177 := (or #132 #38)
#181 := (iff #177 #180)
#182 := [rewrite]: #181
#178 := (iff #158 #177)
#175 := (iff #151 #38)
#176 := [rewrite]: #175
#173 := (iff #157 #132)
#133 := (not #132)
#168 := (not #133)
#171 := (iff #168 #132)
#172 := [rewrite]: #171
#169 := (iff #157 #168)
#166 := (iff #37 #133)
#167 := [rewrite]: #166
#170 := [monotonicity #167]: #169
#174 := [trans #170 #172]: #173
#179 := [monotonicity #174 #176]: #178
#184 := [trans #179 #182]: #183
#187 := [quant-intro #184]: #186
#164 := (iff #40 #163)
#161 := (iff #39 #158)
#154 := (implies #37 #151)
#159 := (iff #154 #158)
#160 := [rewrite]: #159
#155 := (iff #39 #154)
#152 := (iff #38 #151)
#153 := [rewrite]: #152
#156 := [monotonicity #153]: #155
#162 := [trans #156 #160]: #161
#165 := [quant-intro #162]: #164
#189 := [trans #165 #187]: #188
#150 := [asserted]: #40
#190 := [mp #150 #189]: #185
#337 := [mp~ #190 #324]: #185
#902 := [mp #337 #901]: #897
#861 := (not #897)
#649 := (or #861 #580 #641)
#645 := (or #641 #580)
#637 := (or #861 #645)
#624 := (iff #637 #649)
#642 := (or #861 #647)
#644 := (iff #642 #649)
#634 := [rewrite]: #644
#643 := (iff #637 #642)
#648 := (iff #645 #647)
#646 := [rewrite]: #648
#639 := [monotonicity #646]: #643
#626 := [trans #639 #634]: #624
#640 := [quant-inst #12]: #637
#627 := [mp #640 #626]: #649
#519 := [unit-resolution #627 #902]: #647
#485 := [unit-resolution #519 #502]: #641
#494 := [mp #485 #493]: #855
#771 := (not #855)
#487 := (or #771 #580)
#495 := [th-lemma arith triangle-eq]: #487
#480 := [unit-resolution #495 #494 #502]: false
#477 := [lemma #480]: #580
#482 := [hypothesis]: #771
#512 := (or #855 #684 #833)
#514 := [th-lemma arith triangle-eq]: #512
#483 := [unit-resolution #514 #482 #477]: #684
#670 := (or #726 #852)
#671 := [def-axiom]: #670
#471 := [unit-resolution #671 #483]: #726
#675 := (not #726)
#474 := (or #675 #765)
#207 := -1::Int
#860 := (* -1::Int #12)
#792 := (mod #860 -1::Int)
#744 := (+ #19 #792)
#742 := (= #744 0::Int)
#687 := (ite #726 #765 #742)
#41 := (:var 1 Int)
#61 := (f7 f11 #41)
#62 := (f6 #61 #30)
#910 := (pattern #62)
#211 := (* -1::Int #30)
#208 := (* -1::Int #41)
#272 := (mod #208 #211)
#402 := (+ #62 #272)
#403 := (= #402 0::Int)
#63 := (mod #41 #30)
#399 := (* -1::Int #63)
#400 := (+ #62 #399)
#401 := (= #400 0::Int)
#246 := (>= #41 0::Int)
#239 := (<= #30 0::Int)
#346 := (or #239 #246)
#347 := (not #346)
#235 := (<= #41 0::Int)
#344 := (or #235 #239)
#345 := (not #344)
#350 := (or #345 #347)
#404 := (ite #350 #401 #403)
#398 := (= #62 0::Int)
#44 := (= #41 0::Int)
#405 := (ite #44 #398 #404)
#397 := (= #41 #62)
#45 := (= #30 0::Int)
#406 := (ite #45 #397 #405)
#911 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #910) #406)
#409 := (forall (vars (?v0 Int) (?v1 Int)) #406)
#914 := (iff #409 #911)
#912 := (iff #406 #406)
#913 := [refl]: #912
#915 := [quant-intro #913]: #914
#278 := (* -1::Int #272)
#366 := (ite #350 #63 #278)
#369 := (ite #44 0::Int #366)
#372 := (ite #45 #41 #369)
#375 := (= #62 #372)
#378 := (forall (vars (?v0 Int) (?v1 Int)) #375)
#410 := (iff #378 #409)
#407 := (iff #375 #406)
#408 := [rewrite]: #407
#411 := [quant-intro #408]: #410
#247 := (not #246)
#240 := (not #239)
#250 := (and #240 #247)
#236 := (not #235)
#243 := (and #236 #240)
#253 := (or #243 #250)
#298 := (ite #253 #63 #278)
#301 := (ite #44 0::Int #298)
#304 := (ite #45 #41 #301)
#307 := (= #62 #304)
#310 := (forall (vars (?v0 Int) (?v1 Int)) #307)
#379 := (iff #310 #378)
#376 := (iff #307 #375)
#373 := (= #304 #372)
#370 := (= #301 #369)
#367 := (= #298 #366)
#351 := (iff #253 #350)
#348 := (iff #250 #347)
#349 := [rewrite]: #348
#329 := (iff #243 #345)
#330 := [rewrite]: #329
#352 := [monotonicity #330 #349]: #351
#368 := [monotonicity #352]: #367
#371 := [monotonicity #368]: #370
#374 := [monotonicity #371]: #373
#377 := [monotonicity #374]: #376
#380 := [quant-intro #377]: #379
#327 := (~ #310 #310)
#341 := (~ #307 #307)
#342 := [refl]: #341
#328 := [nnf-pos #342]: #327
#55 := (- #30)
#54 := (- #41)
#64 := (mod #54 #55)
#65 := (- #64)
#48 := (< 0::Int #30)
#50 := (< #41 0::Int)
#51 := (and #50 #48)
#47 := (< 0::Int #41)
#49 := (and #47 #48)
#52 := (or #49 #51)
#66 := (ite #52 #63 #65)
#67 := (ite #44 0::Int #66)
#68 := (ite #45 #41 #67)
#69 := (= #62 #68)
#70 := (forall (vars (?v0 Int) (?v1 Int)) #69)
#313 := (iff #70 #310)
#201 := (and #48 #50)
#204 := (or #49 #201)
#283 := (ite #204 #63 #278)
#192 := (= 0::Int #41)
#286 := (ite #192 0::Int #283)
#195 := (= 0::Int #30)
#289 := (ite #195 #41 #286)
#292 := (= #62 #289)
#295 := (forall (vars (?v0 Int) (?v1 Int)) #292)
#311 := (iff #295 #310)
#308 := (iff #292 #307)
#305 := (= #289 #304)
#302 := (= #286 #301)
#299 := (= #283 #298)
#254 := (iff #204 #253)
#251 := (iff #201 #250)
#248 := (iff #50 #247)
#249 := [rewrite]: #248
#241 := (iff #48 #240)
#242 := [rewrite]: #241
#252 := [monotonicity #242 #249]: #251
#244 := (iff #49 #243)
#237 := (iff #47 #236)
#238 := [rewrite]: #237
#245 := [monotonicity #238 #242]: #244
#255 := [monotonicity #245 #252]: #254
#300 := [monotonicity #255]: #299
#229 := (iff #192 #44)
#230 := [rewrite]: #229
#303 := [monotonicity #230 #300]: #302
#231 := (iff #195 #45)
#232 := [rewrite]: #231
#306 := [monotonicity #232 #303]: #305
#309 := [monotonicity #306]: #308
#312 := [quant-intro #309]: #311
#296 := (iff #70 #295)
#293 := (iff #69 #292)
#290 := (= #68 #289)
#287 := (= #67 #286)
#284 := (= #66 #283)
#281 := (= #65 #278)
#275 := (- #272)
#279 := (= #275 #278)
#280 := [rewrite]: #279
#276 := (= #65 #275)
#273 := (= #64 #272)
#212 := (= #55 #211)
#213 := [rewrite]: #212
#209 := (= #54 #208)
#210 := [rewrite]: #209
#274 := [monotonicity #210 #213]: #273
#277 := [monotonicity #274]: #276
#282 := [trans #277 #280]: #281
#205 := (iff #52 #204)
#202 := (iff #51 #201)
#203 := [rewrite]: #202
#206 := [monotonicity #203]: #205
#285 := [monotonicity #206 #282]: #284
#193 := (iff #44 #192)
#194 := [rewrite]: #193
#288 := [monotonicity #194 #285]: #287
#196 := (iff #45 #195)
#197 := [rewrite]: #196
#291 := [monotonicity #197 #288]: #290
#294 := [monotonicity #291]: #293
#297 := [quant-intro #294]: #296
#314 := [trans #297 #312]: #313
#271 := [asserted]: #70
#315 := [mp #271 #314]: #310
#343 := [mp~ #315 #328]: #310
#381 := [mp #343 #380]: #378
#412 := [mp #381 #411]: #409
#916 := [mp #412 #915]: #911
#692 := (not #911)
#693 := (or #692 #687)
#524 := (* -1::Int 1::Int)
#780 := (mod #860 #524)
#758 := (+ #19 #780)
#759 := (= #758 0::Int)
#788 := (mod #12 1::Int)
#761 := (* -1::Int #788)
#762 := (+ #19 #761)
#763 := (= #762 0::Int)
#581 := (<= 1::Int 0::Int)
#582 := (or #581 #580)
#476 := (not #582)
#853 := (or #852 #581)
#575 := (not #853)
#576 := (or #575 #476)
#764 := (ite #576 #763 #759)
#760 := (ite #855 #765 #764)
#766 := (= #12 #19)
#851 := (= 1::Int 0::Int)
#752 := (ite #851 #766 #760)
#694 := (or #692 #752)
#696 := (iff #694 #693)
#698 := (iff #693 #693)
#683 := [rewrite]: #698
#690 := (iff #752 #687)
#819 := (or #833 #684)
#735 := (or #819 #855)
#703 := (ite #735 #765 #742)
#688 := (iff #703 #687)
#681 := (iff #735 #726)
#682 := [rewrite]: #681
#689 := [monotonicity #682]: #688
#725 := (iff #752 #703)
#704 := (ite false #766 #703)
#714 := (iff #704 #703)
#715 := [rewrite]: #714
#711 := (iff #752 #704)
#700 := (iff #760 #703)
#673 := (ite #819 #765 #742)
#733 := (ite #855 #765 #673)
#710 := (iff #733 #703)
#669 := [rewrite]: #710
#734 := (iff #760 #733)
#728 := (iff #764 #673)
#747 := (iff #759 #742)
#745 := (= #758 #744)
#740 := (= #780 #792)
#824 := (= #524 -1::Int)
#706 := [rewrite]: #824
#741 := [monotonicity #706]: #740
#746 := [monotonicity #741]: #745
#727 := [monotonicity #746]: #747
#743 := (iff #763 #765)
#737 := (= #762 #19)
#730 := (+ #19 0::Int)
#625 := (= #730 #19)
#736 := [rewrite]: #625
#731 := (= #762 #730)
#751 := (= #761 0::Int)
#750 := (* -1::Int 0::Int)
#755 := (= #750 0::Int)
#756 := [rewrite]: #755
#753 := (= #761 #750)
#748 := (= #788 0::Int)
#749 := [rewrite]: #748
#754 := [monotonicity #749]: #753
#757 := [trans #754 #756]: #751
#732 := [monotonicity #757]: #731
#738 := [trans #732 #736]: #737
#739 := [monotonicity #738]: #743
#823 := (iff #576 #819)
#663 := (or #684 #833)
#820 := (iff #663 #819)
#822 := [rewrite]: #820
#665 := (iff #576 #663)
#827 := (iff #476 #833)
#826 := (iff #582 #580)
#828 := (or false #580)
#831 := (iff #828 #580)
#825 := [rewrite]: #831
#829 := (iff #582 #828)
#838 := (iff #581 false)
#839 := [rewrite]: #838
#830 := [monotonicity #839]: #829
#832 := [trans #830 #825]: #826
#834 := [monotonicity #832]: #827
#685 := (iff #575 #684)
#837 := (iff #853 #852)
#840 := (or #852 false)
#841 := (iff #840 #852)
#842 := [rewrite]: #841
#835 := (iff #853 #840)
#836 := [monotonicity #839]: #835
#843 := [trans #836 #842]: #837
#686 := [monotonicity #843]: #685
#666 := [monotonicity #686 #834]: #665
#821 := [trans #666 #822]: #823
#709 := [monotonicity #821 #739 #727]: #728
#729 := [monotonicity #709]: #734
#702 := [trans #729 #669]: #700
#567 := (iff #851 false)
#568 := [rewrite]: #567
#713 := [monotonicity #568 #702]: #711
#705 := [trans #713 #715]: #725
#691 := [trans #705 #689]: #690
#697 := [monotonicity #691]: #696
#699 := [trans #697 #683]: #696
#695 := [quant-inst #12 #14]: #694
#660 := [mp #695 #699]: #693
#473 := [unit-resolution #660 #916]: #687
#650 := (not #687)
#651 := (or #650 #675 #765)
#652 := [def-axiom]: #651
#472 := [unit-resolution #652 #473]: #474
#475 := [unit-resolution #472 #471]: #765
#656 := (not #765)
#917 := (or #656 #678)
#918 := [th-lemma arith triangle-eq]: #917
#919 := [unit-resolution #918 #475]: #678
#679 := (>= #19 0::Int)
#920 := (or #656 #679)
#921 := [th-lemma arith triangle-eq]: #920
#922 := [unit-resolution #921 #475]: #679
#924 := [th-lemma arith eq-propagate -1 -1 #922 #919]: #923
#936 := (= #12 #15)
#870 := (div #12 1::Int)
#856 := (* -1::Int #870)
#857 := (+ #15 #856)
#789 := (<= #857 0::Int)
#579 := (= #857 0::Int)
#801 := (or #819 #852)
#802 := [def-axiom]: #801
#925 := [unit-resolution #802 #483]: #819
#707 := (div #860 -1::Int)
#815 := (* -1::Int #707)
#813 := (+ #15 #815)
#716 := (= #813 0::Int)
#712 := (ite #819 #579 #716)
#550 := (or #855 #712)
#854 := (= #15 0::Int)
#722 := (ite #855 #854 #712)
#42 := (f7 f8 #41)
#43 := (f6 #42 #30)
#903 := (pattern #43)
#214 := (div #208 #211)
#386 := (* -1::Int #214)
#387 := (+ #43 #386)
#388 := (= #387 0::Int)
#53 := (div #41 #30)
#383 := (* -1::Int #53)
#384 := (+ #43 #383)
#385 := (= #384 0::Int)
#389 := (ite #350 #385 #388)
#382 := (= #43 0::Int)
#46 := (or #44 #45)
#390 := (ite #46 #382 #389)
#904 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #903) #390)
#393 := (forall (vars (?v0 Int) (?v1 Int)) #390)
#907 := (iff #393 #904)
#905 := (iff #390 #390)
#906 := [refl]: #905
#908 := [quant-intro #906]: #907
#353 := (ite #350 #53 #214)
#356 := (ite #46 0::Int #353)
#359 := (= #43 #356)
#362 := (forall (vars (?v0 Int) (?v1 Int)) #359)
#394 := (iff #362 #393)
#391 := (iff #359 #390)
#392 := [rewrite]: #391
#395 := [quant-intro #392]: #394
#256 := (ite #253 #53 #214)
#259 := (ite #46 0::Int #256)
#262 := (= #43 #259)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#363 := (iff #265 #362)
#360 := (iff #262 #359)
#357 := (= #259 #356)
#354 := (= #256 #353)
#355 := [monotonicity #352]: #354
#358 := [monotonicity #355]: #357
#361 := [monotonicity #358]: #360
#364 := [quant-intro #361]: #363
#325 := (~ #265 #265)
#338 := (~ #262 #262)
#339 := [refl]: #338
#326 := [nnf-pos #339]: #325
#56 := (div #54 #55)
#57 := (ite #52 #53 #56)
#58 := (ite #46 0::Int #57)
#59 := (= #43 #58)
#60 := (forall (vars (?v0 Int) (?v1 Int)) #59)
#268 := (iff #60 #265)
#217 := (ite #204 #53 #214)
#198 := (or #192 #195)
#220 := (ite #198 0::Int #217)
#223 := (= #43 #220)
#226 := (forall (vars (?v0 Int) (?v1 Int)) #223)
#266 := (iff #226 #265)
#263 := (iff #223 #262)
#260 := (= #220 #259)
#257 := (= #217 #256)
#258 := [monotonicity #255]: #257
#233 := (iff #198 #46)
#234 := [monotonicity #230 #232]: #233
#261 := [monotonicity #234 #258]: #260
#264 := [monotonicity #261]: #263
#267 := [quant-intro #264]: #266
#227 := (iff #60 #226)
#224 := (iff #59 #223)
#221 := (= #58 #220)
#218 := (= #57 #217)
#215 := (= #56 #214)
#216 := [monotonicity #210 #213]: #215
#219 := [monotonicity #206 #216]: #218
#199 := (iff #46 #198)
#200 := [monotonicity #194 #197]: #199
#222 := [monotonicity #200 #219]: #221
#225 := [monotonicity #222]: #224
#228 := [quant-intro #225]: #227
#269 := [trans #228 #267]: #268
#191 := [asserted]: #60
#270 := [mp #191 #269]: #265
#340 := [mp~ #270 #326]: #265
#365 := [mp #340 #364]: #362
#396 := [mp #365 #395]: #393
#909 := [mp #396 #908]: #904
#817 := (not #904)
#814 := (or #817 #722)
#508 := (div #860 #524)
#509 := (* -1::Int #508)
#869 := (+ #15 #509)
#867 := (= #869 0::Int)
#850 := (ite #576 #579 #867)
#565 := (or #855 #851)
#566 := (ite #565 #854 #850)
#818 := (or #817 #566)
#807 := (iff #818 #814)
#796 := (iff #814 #814)
#798 := [rewrite]: #796
#723 := (iff #566 #722)
#720 := (iff #850 #712)
#718 := (iff #867 #716)
#816 := (= #869 #813)
#717 := (= #509 #815)
#708 := (= #508 #707)
#667 := [monotonicity #706]: #708
#812 := [monotonicity #667]: #717
#701 := [monotonicity #812]: #816
#719 := [monotonicity #701]: #718
#721 := [monotonicity #821 #719]: #720
#845 := (iff #565 #855)
#846 := (or #855 false)
#844 := (iff #846 #855)
#848 := [rewrite]: #844
#847 := (iff #565 #846)
#562 := [monotonicity #568]: #847
#849 := [trans #562 #848]: #845
#724 := [monotonicity #849 #721]: #723
#799 := [monotonicity #724]: #807
#808 := [trans #799 #798]: #807
#805 := [quant-inst #12 #14]: #818
#809 := [mp #805 #808]: #814
#544 := [unit-resolution #809 #909]: #722
#770 := (not #722)
#774 := (or #770 #855 #712)
#775 := [def-axiom]: #774
#551 := [unit-resolution #775 #544]: #550
#926 := [unit-resolution #551 #482]: #712
#803 := (not #819)
#790 := (not #712)
#795 := (or #790 #803 #579)
#781 := [def-axiom]: #795
#927 := [unit-resolution #781 #926 #925]: #579
#785 := (not #579)
#928 := (or #785 #789)
#929 := [th-lemma arith triangle-eq]: #928
#930 := [unit-resolution #929 #927]: #789
#791 := (>= #857 0::Int)
#506 := (or #785 #791)
#507 := [th-lemma arith triangle-eq]: #506
#931 := [unit-resolution #507 #927]: #791
#614 := (+ #12 #856)
#618 := (<= #614 0::Int)
#613 := (= #614 0::Int)
#1 := true
#88 := [true-axiom]: true
#571 := (or false #613)
#563 := [th-lemma arith]: #571
#572 := [unit-resolution #563 #88]: #613
#496 := (not #613)
#498 := (or #496 #618)
#499 := [th-lemma arith triangle-eq]: #498
#932 := [unit-resolution #499 #572]: #618
#595 := (>= #614 0::Int)
#933 := (or #496 #595)
#934 := [th-lemma arith triangle-eq]: #933
#935 := [unit-resolution #934 #572]: #595
#937 := [th-lemma arith eq-propagate 1 1 -1 -1 #935 #932 #931 #930]: #936
#941 := [trans #937 #924]: #940
#943 := [monotonicity #941]: #942
#944 := [trans #542 #943]: #99
#102 := (not #99)
#16 := (* #15 1::Int)
#20 := (+ #16 #19)
#21 := (f4 f5 #20)
#22 := (= f3 #21)
#23 := (not #22)
#103 := (iff #23 #102)
#100 := (iff #22 #99)
#97 := (= #21 #96)
#94 := (= #20 #93)
#91 := (= #16 #15)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#90 := [asserted]: #23
#107 := [mp #90 #104]: #102
#945 := [unit-resolution #107 #944]: false
#946 := [lemma #945]: #855
#982 := [symm #946]: #981
#522 := (= #560 0::Int)
#868 := (>= #560 0::Int)
#672 := (or #726 #771)
#674 := [def-axiom]: #672
#479 := [unit-resolution #674 #946]: #726
#484 := [unit-resolution #472 #479]: #765
#947 := [unit-resolution #921 #484]: #679
#806 := (>= #15 0::Int)
#505 := (not #618)
#573 := (not #806)
#564 := [hypothesis]: #573
#776 := (not #854)
#574 := (or #776 #806)
#541 := [th-lemma arith triangle-eq]: #574
#543 := [unit-resolution #541 #564]: #776
#535 := (or #771 #854)
#772 := (or #770 #771 #854)
#773 := [def-axiom]: #772
#548 := [unit-resolution #773 #544]: #535
#549 := [unit-resolution #548 #543]: #771
#552 := [unit-resolution #551 #549]: #712
#527 := (not #641)
#528 := (iff #771 #527)
#525 := (iff #855 #641)
#553 := (= #470 f3)
#536 := [symm #542]: #553
#539 := [monotonicity #536]: #538
#520 := [monotonicity #539]: #518
#526 := [symm #520]: #525
#529 := [monotonicity #526]: #528
#530 := [mp #549 #529]: #527
#531 := [unit-resolution #519 #530]: #580
#515 := [unit-resolution #514 #549]: #663
#513 := [unit-resolution #515 #531]: #684
#516 := [unit-resolution #802 #513]: #819
#504 := [unit-resolution #781 #516 #552]: #579
#510 := [unit-resolution #507 #504]: #791
#511 := (not #791)
#486 := (or #505 #833 #806 #511)
#490 := [th-lemma arith assign-bounds 1 1 -1]: #486
#491 := [unit-resolution #490 #531 #510 #564]: #505
#501 := [unit-resolution #499 #491 #572]: false
#497 := [lemma #501]: #806
#540 := (* -1::Int #560)
#875 := (+ #19 #540)
#877 := (+ #15 #875)
#858 := (<= #877 0::Int)
#534 := (= #877 0::Int)
#555 := (>= #93 0::Int)
#948 := (not #679)
#949 := (or #555 #573 #948)
#950 := [th-lemma arith assign-bounds -1 -1]: #949
#951 := [unit-resolution #950 #947 #497]: #555
#556 := (not #555)
#545 := (or #534 #556)
#114 := (= #30 #33)
#139 := (or #114 #133)
#891 := (forall (vars (?v0 Int)) (:pat #890) #139)
#144 := (forall (vars (?v0 Int)) #139)
#894 := (iff #144 #891)
#892 := (iff #139 #139)
#893 := [refl]: #892
#895 := [quant-intro #893]: #894
#321 := (~ #144 #144)
#320 := (~ #139 #139)
#317 := [refl]: #320
#322 := [nnf-pos #317]: #321
#34 := (= #33 #30)
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#147 := (iff #36 #144)
#121 := (not #31)
#122 := (or #121 #114)
#127 := (forall (vars (?v0 Int)) #122)
#145 := (iff #127 #144)
#142 := (iff #122 #139)
#136 := (or #133 #114)
#140 := (iff #136 #139)
#141 := [rewrite]: #140
#137 := (iff #122 #136)
#134 := (iff #121 #133)
#130 := (iff #31 #132)
#131 := [rewrite]: #130
#135 := [monotonicity #131]: #134
#138 := [monotonicity #135]: #137
#143 := [trans #138 #141]: #142
#146 := [quant-intro #143]: #145
#128 := (iff #36 #127)
#125 := (iff #35 #122)
#118 := (implies #31 #114)
#123 := (iff #118 #122)
#124 := [rewrite]: #123
#119 := (iff #35 #118)
#116 := (iff #34 #114)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#126 := [trans #120 #124]: #125
#129 := [quant-intro #126]: #128
#148 := [trans #129 #146]: #147
#113 := [asserted]: #36
#149 := [mp #113 #148]: #144
#318 := [mp~ #149 #322]: #144
#896 := [mp #318 #895]: #891
#879 := (not #891)
#880 := (or #879 #534 #556)
#557 := (= #93 #560)
#561 := (or #557 #556)
#881 := (or #879 #561)
#533 := (iff #881 #880)
#882 := (or #879 #545)
#537 := (iff #882 #880)
#873 := [rewrite]: #537
#872 := (iff #881 #882)
#546 := (iff #561 #545)
#664 := (iff #557 #534)
#871 := [rewrite]: #664
#878 := [monotonicity #871]: #546
#532 := [monotonicity #878]: #872
#874 := [trans #532 #873]: #533
#876 := [quant-inst #93]: #881
#517 := [mp #876 #874]: #880
#952 := [unit-resolution #517 #896]: #545
#953 := [unit-resolution #952 #951]: #534
#954 := (not #534)
#955 := (or #954 #858)
#956 := [th-lemma arith triangle-eq]: #955
#957 := [unit-resolution #956 #953]: #858
#958 := (not #858)
#959 := (or #868 #948 #958 #573)
#960 := [th-lemma arith assign-bounds -1 1 -1]: #959
#961 := [unit-resolution #960 #957 #497 #947]: #868
#866 := (<= #560 0::Int)
#962 := [unit-resolution #918 #484]: #678
#810 := (<= #15 0::Int)
#963 := [unit-resolution #548 #946]: #854
#964 := (or #776 #810)
#965 := [th-lemma arith triangle-eq]: #964
#966 := [unit-resolution #965 #963]: #810
#521 := (>= #877 0::Int)
#967 := (or #954 #521)
#968 := [th-lemma arith triangle-eq]: #967
#969 := [unit-resolution #968 #953]: #521
#972 := (not #810)
#971 := (not #521)
#970 := (not #678)
#973 := (or #866 #970 #971 #972)
#974 := [th-lemma arith assign-bounds -1 1 -1]: #973
#975 := [unit-resolution #974 #969 #966 #962]: #866
#977 := (not #868)
#976 := (not #866)
#978 := (or #522 #976 #977)
#979 := [th-lemma arith triangle-eq]: #978
#980 := [unit-resolution #979 #975 #961]: #522
#984 := [trans #980 #982]: #983
#987 := [monotonicity #984]: #986
#989 := [symm #987]: #988
#993 := [trans #542 #989]: #992
#994 := [trans #993 #991]: #99
[unit-resolution #107 #994]: false
unsat
7bbfb44660d3b5877236ebec13ff8c94702addce 884 0
#2 := false
decl f4 :: (-> S3 Int S2)
decl f6 :: (-> S4 Int Int)
#14 := 3::Int
decl f7 :: (-> S5 Int S4)
decl f9 :: (-> S6 S2 Int)
decl f3 :: S2
#8 := f3
decl f10 :: S6
#11 := f10
#12 := (f9 f10 f3)
decl f11 :: S5
#17 := f11
#18 := (f7 f11 #12)
#19 := (f6 #18 3::Int)
decl f8 :: S5
#10 := f8
#13 := (f7 f8 #12)
#15 := (f6 #13 3::Int)
#91 := (* 3::Int #15)
#94 := (+ #91 #19)
decl f5 :: S3
#9 := f5
#97 := (f4 f5 #94)
#100 := (= f3 #97)
#471 := (f4 f5 #12)
#1038 := (= #471 #97)
#1036 := (= #97 #471)
#1034 := (= #94 #12)
#29 := 0::Int
#1030 := (= 0::Int #12)
#840 := (= #12 0::Int)
#489 := (f9 f10 #97)
#562 := (= #94 #489)
#950 := (not #562)
#852 := (div #12 3::Int)
#208 := -1::Int
#856 := (* -1::Int #852)
#853 := (+ #15 #856)
#789 := (<= #853 0::Int)
#857 := (= #853 0::Int)
#848 := (<= #12 0::Int)
#836 := (not #848)
#567 := (>= #12 0::Int)
#708 := (not #567)
#814 := (or #708 #836)
#602 := [hypothesis]: #708
#679 := (f9 f10 #471)
#680 := (= #679 0::Int)
#543 := (iff #680 #840)
#566 := (= #679 #12)
#604 := (= #12 #679)
#556 := (= f3 #471)
#24 := (:var 0 S2)
#25 := (f9 f10 #24)
#885 := (pattern #25)
#26 := (f4 f5 #25)
#107 := (= #24 #26)
#886 := (forall (vars (?v0 S2)) (:pat #885) #107)
#111 := (forall (vars (?v0 S2)) #107)
#889 := (iff #111 #886)
#887 := (iff #107 #107)
#888 := [refl]: #887
#890 := [quant-intro #888]: #889
#334 := (~ #111 #111)
#332 := (~ #107 #107)
#333 := [refl]: #332
#335 := [nnf-pos #333]: #334
#27 := (= #26 #24)
#28 := (forall (vars (?v0 S2)) #27)
#112 := (iff #28 #111)
#109 := (iff #27 #107)
#110 := [rewrite]: #109
#113 := [quant-intro #110]: #112
#106 := [asserted]: #28
#116 := [mp #106 #113]: #111
#320 := [mp~ #116 #335]: #111
#891 := [mp #320 #890]: #886
#549 := (not #886)
#560 := (or #549 #556)
#561 := [quant-inst #8]: #560
#565 := [unit-resolution #561 #891]: #556
#605 := [monotonicity #565]: #604
#598 := [symm #605]: #566
#506 := [monotonicity #598]: #543
#664 := (or #567 #680)
#30 := (:var 0 Int)
#32 := (f4 f5 #30)
#892 := (pattern #32)
#133 := (>= #30 0::Int)
#33 := (f9 f10 #32)
#38 := (= #33 0::Int)
#181 := (or #38 #133)
#899 := (forall (vars (?v0 Int)) (:pat #892) #181)
#186 := (forall (vars (?v0 Int)) #181)
#902 := (iff #186 #899)
#900 := (iff #181 #181)
#901 := [refl]: #900
#903 := [quant-intro #901]: #902
#324 := (~ #186 #186)
#336 := (~ #181 #181)
#337 := [refl]: #336
#325 := [nnf-pos #337]: #324
#37 := (< #30 0::Int)
#39 := (implies #37 #38)
#40 := (forall (vars (?v0 Int)) #39)
#189 := (iff #40 #186)
#152 := (= 0::Int #33)
#158 := (not #37)
#159 := (or #158 #152)
#164 := (forall (vars (?v0 Int)) #159)
#187 := (iff #164 #186)
#184 := (iff #159 #181)
#178 := (or #133 #38)
#182 := (iff #178 #181)
#183 := [rewrite]: #182
#179 := (iff #159 #178)
#176 := (iff #152 #38)
#177 := [rewrite]: #176
#174 := (iff #158 #133)
#134 := (not #133)
#169 := (not #134)
#172 := (iff #169 #133)
#173 := [rewrite]: #172
#170 := (iff #158 #169)
#167 := (iff #37 #134)
#168 := [rewrite]: #167
#171 := [monotonicity #168]: #170
#175 := [trans #171 #173]: #174
#180 := [monotonicity #175 #177]: #179
#185 := [trans #180 #183]: #184
#188 := [quant-intro #185]: #187
#165 := (iff #40 #164)
#162 := (iff #39 #159)
#155 := (implies #37 #152)
#160 := (iff #155 #159)
#161 := [rewrite]: #160
#156 := (iff #39 #155)
#153 := (iff #38 #152)
#154 := [rewrite]: #153
#157 := [monotonicity #154]: #156
#163 := [trans #157 #161]: #162
#166 := [quant-intro #163]: #165
#190 := [trans #166 #188]: #189
#151 := [asserted]: #40
#191 := [mp #151 #190]: #186
#338 := [mp~ #191 #325]: #186
#904 := [mp #338 #903]: #899
#867 := (not #899)
#653 := (or #867 #567 #680)
#681 := (or #680 #567)
#654 := (or #867 #681)
#656 := (iff #654 #653)
#657 := (or #867 #664)
#502 := (iff #657 #653)
#660 := [rewrite]: #502
#658 := (iff #654 #657)
#682 := (iff #681 #664)
#652 := [rewrite]: #682
#659 := [monotonicity #652]: #658
#661 := [trans #659 #660]: #656
#655 := [quant-inst #12]: #654
#640 := [mp #655 #661]: #653
#554 := [unit-resolution #640 #904]: #664
#603 := [unit-resolution #554 #602]: #680
#508 := [mp #603 #506]: #840
#763 := (not #840)
#509 := (or #763 #567)
#512 := [th-lemma arith triangle-eq]: #509
#507 := [unit-resolution #512 #508 #602]: false
#513 := [lemma #507]: #567
#488 := [hypothesis]: #763
#555 := (or #840 #836 #708)
#538 := [th-lemma arith triangle-eq]: #555
#497 := [unit-resolution #538 #488 #513]: #836
#783 := (or #814 #848)
#784 := [def-axiom]: #783
#496 := [unit-resolution #784 #497]: #814
#720 := -3::Int
#477 := (* -1::Int #12)
#722 := (div #477 -3::Int)
#725 := (* -1::Int #722)
#816 := (+ #15 #725)
#809 := (= #816 0::Int)
#800 := (ite #814 #857 #809)
#571 := (or #840 #800)
#847 := (= #15 0::Int)
#812 := (ite #840 #847 #800)
#41 := (:var 1 Int)
#42 := (f7 f8 #41)
#43 := (f6 #42 #30)
#905 := (pattern #43)
#212 := (* -1::Int #30)
#209 := (* -1::Int #41)
#215 := (div #209 #212)
#387 := (* -1::Int #215)
#388 := (+ #43 #387)
#389 := (= #388 0::Int)
#53 := (div #41 #30)
#384 := (* -1::Int #53)
#385 := (+ #43 #384)
#386 := (= #385 0::Int)
#247 := (>= #41 0::Int)
#240 := (<= #30 0::Int)
#347 := (or #240 #247)
#348 := (not #347)
#236 := (<= #41 0::Int)
#345 := (or #236 #240)
#346 := (not #345)
#351 := (or #346 #348)
#390 := (ite #351 #386 #389)
#383 := (= #43 0::Int)
#45 := (= #30 0::Int)
#44 := (= #41 0::Int)
#46 := (or #44 #45)
#391 := (ite #46 #383 #390)
#906 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #905) #391)
#394 := (forall (vars (?v0 Int) (?v1 Int)) #391)
#909 := (iff #394 #906)
#907 := (iff #391 #391)
#908 := [refl]: #907
#910 := [quant-intro #908]: #909
#354 := (ite #351 #53 #215)
#357 := (ite #46 0::Int #354)
#360 := (= #43 #357)
#363 := (forall (vars (?v0 Int) (?v1 Int)) #360)
#395 := (iff #363 #394)
#392 := (iff #360 #391)
#393 := [rewrite]: #392
#396 := [quant-intro #393]: #395
#248 := (not #247)
#241 := (not #240)
#251 := (and #241 #248)
#237 := (not #236)
#244 := (and #237 #241)
#254 := (or #244 #251)
#257 := (ite #254 #53 #215)
#260 := (ite #46 0::Int #257)
#263 := (= #43 #260)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#364 := (iff #266 #363)
#361 := (iff #263 #360)
#358 := (= #260 #357)
#355 := (= #257 #354)
#352 := (iff #254 #351)
#349 := (iff #251 #348)
#350 := [rewrite]: #349
#330 := (iff #244 #346)
#331 := [rewrite]: #330
#353 := [monotonicity #331 #350]: #352
#356 := [monotonicity #353]: #355
#359 := [monotonicity #356]: #358
#362 := [monotonicity #359]: #361
#365 := [quant-intro #362]: #364
#326 := (~ #266 #266)
#339 := (~ #263 #263)
#340 := [refl]: #339
#327 := [nnf-pos #340]: #326
#55 := (- #30)
#54 := (- #41)
#56 := (div #54 #55)
#48 := (< 0::Int #30)
#50 := (< #41 0::Int)
#51 := (and #50 #48)
#47 := (< 0::Int #41)
#49 := (and #47 #48)
#52 := (or #49 #51)
#57 := (ite #52 #53 #56)
#58 := (ite #46 0::Int #57)
#59 := (= #43 #58)
#60 := (forall (vars (?v0 Int) (?v1 Int)) #59)
#269 := (iff #60 #266)
#202 := (and #48 #50)
#205 := (or #49 #202)
#218 := (ite #205 #53 #215)
#196 := (= 0::Int #30)
#193 := (= 0::Int #41)
#199 := (or #193 #196)
#221 := (ite #199 0::Int #218)
#224 := (= #43 #221)
#227 := (forall (vars (?v0 Int) (?v1 Int)) #224)
#267 := (iff #227 #266)
#264 := (iff #224 #263)
#261 := (= #221 #260)
#258 := (= #218 #257)
#255 := (iff #205 #254)
#252 := (iff #202 #251)
#249 := (iff #50 #248)
#250 := [rewrite]: #249
#242 := (iff #48 #241)
#243 := [rewrite]: #242
#253 := [monotonicity #243 #250]: #252
#245 := (iff #49 #244)
#238 := (iff #47 #237)
#239 := [rewrite]: #238
#246 := [monotonicity #239 #243]: #245
#256 := [monotonicity #246 #253]: #255
#259 := [monotonicity #256]: #258
#234 := (iff #199 #46)
#232 := (iff #196 #45)
#233 := [rewrite]: #232
#230 := (iff #193 #44)
#231 := [rewrite]: #230
#235 := [monotonicity #231 #233]: #234
#262 := [monotonicity #235 #259]: #261
#265 := [monotonicity #262]: #264
#268 := [quant-intro #265]: #267
#228 := (iff #60 #227)
#225 := (iff #59 #224)
#222 := (= #58 #221)
#219 := (= #57 #218)
#216 := (= #56 #215)
#213 := (= #55 #212)
#214 := [rewrite]: #213
#210 := (= #54 #209)
#211 := [rewrite]: #210
#217 := [monotonicity #211 #214]: #216
#206 := (iff #52 #205)
#203 := (iff #51 #202)
#204 := [rewrite]: #203
#207 := [monotonicity #204]: #206
#220 := [monotonicity #207 #217]: #219
#200 := (iff #46 #199)
#197 := (iff #45 #196)
#198 := [rewrite]: #197
#194 := (iff #44 #193)
#195 := [rewrite]: #194
#201 := [monotonicity #195 #198]: #200
#223 := [monotonicity #201 #220]: #222
#226 := [monotonicity #223]: #225
#229 := [quant-intro #226]: #228
#270 := [trans #229 #268]: #269
#192 := [asserted]: #60
#271 := [mp #192 #270]: #266
#341 := [mp~ #271 #327]: #266
#366 := [mp #341 #365]: #363
#397 := [mp #366 #396]: #394
#911 := [mp #397 #910]: #906
#802 := (not #906)
#803 := (or #802 #812)
#584 := (* -1::Int 3::Int)
#854 := (div #477 #584)
#855 := (* -1::Int #854)
#577 := (+ #15 #855)
#578 := (= #577 0::Int)
#568 := (<= 3::Int 0::Int)
#569 := (or #568 #567)
#570 := (not #569)
#849 := (or #848 #568)
#564 := (not #849)
#846 := (or #564 #570)
#850 := (ite #846 #857 #578)
#851 := (= 3::Int 0::Int)
#841 := (or #840 #851)
#842 := (ite #841 #847 #850)
#804 := (or #802 #842)
#799 := (iff #804 #803)
#790 := (iff #803 #803)
#791 := [rewrite]: #790
#808 := (iff #842 #812)
#810 := (iff #850 #800)
#801 := (iff #578 #809)
#820 := (= #577 #816)
#726 := (= #855 #725)
#723 := (= #854 #722)
#721 := (= #584 -3::Int)
#714 := [rewrite]: #721
#724 := [monotonicity #714]: #723
#819 := [monotonicity #724]: #726
#807 := [monotonicity #819]: #820
#798 := [monotonicity #807]: #801
#703 := (iff #846 #814)
#669 := (or #836 #708)
#815 := (iff #669 #814)
#818 := [rewrite]: #815
#817 := (iff #846 #669)
#709 := (iff #570 #708)
#823 := (iff #569 #567)
#668 := (or false #567)
#824 := (iff #668 #567)
#825 := [rewrite]: #824
#821 := (iff #569 #668)
#830 := (iff #568 false)
#831 := [rewrite]: #830
#822 := [monotonicity #831]: #821
#826 := [trans #822 #825]: #823
#710 := [monotonicity #826]: #709
#665 := (iff #564 #836)
#835 := (iff #849 #848)
#832 := (or #848 false)
#828 := (iff #832 #848)
#834 := [rewrite]: #828
#833 := (iff #849 #832)
#827 := [monotonicity #831]: #833
#829 := [trans #827 #834]: #835
#667 := [monotonicity #829]: #665
#719 := [monotonicity #667 #710]: #817
#718 := [trans #719 #818]: #703
#811 := [monotonicity #718 #798]: #810
#687 := (iff #841 #840)
#843 := (or #840 false)
#845 := (iff #843 #840)
#686 := [rewrite]: #845
#844 := (iff #841 #843)
#837 := (iff #851 false)
#838 := [rewrite]: #837
#839 := [monotonicity #838]: #844
#688 := [trans #839 #686]: #687
#813 := [monotonicity #688 #811]: #808
#806 := [monotonicity #813]: #799
#793 := [trans #806 #791]: #799
#805 := [quant-inst #12 #14]: #804
#794 := [mp #805 #793]: #803
#588 := [unit-resolution #794 #911]: #812
#761 := (not #812)
#766 := (or #761 #840 #800)
#767 := [def-axiom]: #766
#572 := [unit-resolution #767 #588]: #571
#481 := [unit-resolution #572 #488]: #800
#786 := (not #814)
#774 := (not #800)
#775 := (or #774 #786 #857)
#776 := [def-axiom]: #775
#478 := [unit-resolution #776 #481 #496]: #857
#779 := (not #857)
#479 := (or #779 #789)
#953 := [th-lemma arith triangle-eq]: #479
#954 := [unit-resolution #953 #478]: #789
#785 := (mod #12 3::Int)
#757 := (* -1::Int #785)
#758 := (+ #19 #757)
#683 := (<= #758 0::Int)
#753 := (= #758 0::Int)
#770 := (mod #477 -3::Int)
#740 := (+ #19 #770)
#742 := (= #740 0::Int)
#747 := (ite #814 #753 #742)
#956 := (or #840 #747)
#732 := (= #19 0::Int)
#749 := (ite #840 #732 #747)
#61 := (f7 f11 #41)
#62 := (f6 #61 #30)
#912 := (pattern #62)
#273 := (mod #209 #212)
#403 := (+ #62 #273)
#404 := (= #403 0::Int)
#63 := (mod #41 #30)
#400 := (* -1::Int #63)
#401 := (+ #62 #400)
#402 := (= #401 0::Int)
#405 := (ite #351 #402 #404)
#399 := (= #62 0::Int)
#406 := (ite #44 #399 #405)
#398 := (= #41 #62)
#407 := (ite #45 #398 #406)
#913 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #912) #407)
#410 := (forall (vars (?v0 Int) (?v1 Int)) #407)
#916 := (iff #410 #913)
#914 := (iff #407 #407)
#915 := [refl]: #914
#917 := [quant-intro #915]: #916
#279 := (* -1::Int #273)
#367 := (ite #351 #63 #279)
#370 := (ite #44 0::Int #367)
#373 := (ite #45 #41 #370)
#376 := (= #62 #373)
#379 := (forall (vars (?v0 Int) (?v1 Int)) #376)
#411 := (iff #379 #410)
#408 := (iff #376 #407)
#409 := [rewrite]: #408
#412 := [quant-intro #409]: #411
#299 := (ite #254 #63 #279)
#302 := (ite #44 0::Int #299)
#305 := (ite #45 #41 #302)
#308 := (= #62 #305)
#311 := (forall (vars (?v0 Int) (?v1 Int)) #308)
#380 := (iff #311 #379)
#377 := (iff #308 #376)
#374 := (= #305 #373)
#371 := (= #302 #370)
#368 := (= #299 #367)
#369 := [monotonicity #353]: #368
#372 := [monotonicity #369]: #371
#375 := [monotonicity #372]: #374
#378 := [monotonicity #375]: #377
#381 := [quant-intro #378]: #380
#328 := (~ #311 #311)
#342 := (~ #308 #308)
#343 := [refl]: #342
#329 := [nnf-pos #343]: #328
#64 := (mod #54 #55)
#65 := (- #64)
#66 := (ite #52 #63 #65)
#67 := (ite #44 0::Int #66)
#68 := (ite #45 #41 #67)
#69 := (= #62 #68)
#70 := (forall (vars (?v0 Int) (?v1 Int)) #69)
#314 := (iff #70 #311)
#284 := (ite #205 #63 #279)
#287 := (ite #193 0::Int #284)
#290 := (ite #196 #41 #287)
#293 := (= #62 #290)
#296 := (forall (vars (?v0 Int) (?v1 Int)) #293)
#312 := (iff #296 #311)
#309 := (iff #293 #308)
#306 := (= #290 #305)
#303 := (= #287 #302)
#300 := (= #284 #299)
#301 := [monotonicity #256]: #300
#304 := [monotonicity #231 #301]: #303
#307 := [monotonicity #233 #304]: #306
#310 := [monotonicity #307]: #309
#313 := [quant-intro #310]: #312
#297 := (iff #70 #296)
#294 := (iff #69 #293)
#291 := (= #68 #290)
#288 := (= #67 #287)
#285 := (= #66 #284)
#282 := (= #65 #279)
#276 := (- #273)
#280 := (= #276 #279)
#281 := [rewrite]: #280
#277 := (= #65 #276)
#274 := (= #64 #273)
#275 := [monotonicity #211 #214]: #274
#278 := [monotonicity #275]: #277
#283 := [trans #278 #281]: #282
#286 := [monotonicity #207 #283]: #285
#289 := [monotonicity #195 #286]: #288
#292 := [monotonicity #198 #289]: #291
#295 := [monotonicity #292]: #294
#298 := [quant-intro #295]: #297
#315 := [trans #298 #313]: #314
#272 := [asserted]: #70
#316 := [mp #272 #315]: #311
#344 := [mp~ #316 #329]: #311
#382 := [mp #344 #381]: #379
#413 := [mp #382 #412]: #410
#918 := [mp #413 #917]: #913
#712 := (not #913)
#671 := (or #712 #749)
#752 := (mod #477 #584)
#755 := (+ #19 #752)
#756 := (= #755 0::Int)
#759 := (ite #846 #753 #756)
#733 := (ite #840 #732 #759)
#734 := (= #12 #19)
#627 := (ite #851 #734 #733)
#702 := (or #712 #627)
#706 := (iff #702 #671)
#715 := (iff #671 #671)
#716 := [rewrite]: #715
#737 := (iff #627 #749)
#730 := (ite false #734 #749)
#736 := (iff #730 #749)
#731 := [rewrite]: #736
#711 := (iff #627 #730)
#729 := (iff #733 #749)
#748 := (iff #759 #747)
#743 := (iff #756 #742)
#745 := (= #755 #740)
#738 := (= #752 #770)
#739 := [monotonicity #714]: #738
#741 := [monotonicity #739]: #745
#746 := [monotonicity #741]: #743
#744 := [monotonicity #718 #746]: #748
#675 := [monotonicity #744]: #729
#735 := [monotonicity #838 #675]: #711
#705 := [trans #735 #731]: #737
#713 := [monotonicity #705]: #706
#717 := [trans #713 #716]: #706
#704 := [quant-inst #12 #14]: #702
#727 := [mp #704 #717]: #671
#955 := [unit-resolution #727 #918]: #749
#701 := (not #749)
#670 := (or #701 #840 #747)
#672 := [def-axiom]: #670
#957 := [unit-resolution #672 #955]: #956
#958 := [unit-resolution #957 #488]: #747
#691 := (not #747)
#692 := (or #691 #786 #753)
#693 := [def-axiom]: #692
#959 := [unit-resolution #693 #958 #496]: #753
#696 := (not #753)
#960 := (or #696 #683)
#961 := [th-lemma arith triangle-eq]: #960
#962 := [unit-resolution #961 #959]: #683
#769 := (>= #853 0::Int)
#527 := (or #779 #769)
#528 := [th-lemma arith triangle-eq]: #527
#963 := [unit-resolution #528 #478]: #769
#684 := (>= #758 0::Int)
#964 := (or #696 #684)
#965 := [th-lemma arith triangle-eq]: #964
#966 := [unit-resolution #965 #959]: #684
#923 := (not #789)
#924 := (not #683)
#531 := (not #769)
#931 := (not #684)
#951 := (or #950 #931 #531 #924 #923)
#501 := (f4 f5 #489)
#944 := (= #501 #97)
#503 := (= #97 #501)
#486 := (or #549 #503)
#490 := [quant-inst #97]: #486
#474 := [unit-resolution #490 #891]: #503
#945 := [symm #474]: #944
#946 := (= f3 #501)
#942 := (= #471 #501)
#940 := (= #12 #489)
#475 := [hypothesis]: #562
#483 := (= #12 #94)
#484 := (* -1::Int #94)
#480 := (+ #12 #484)
#472 := (>= #480 0::Int)
#473 := [hypothesis]: #789
#629 := (* -3::Int #852)
#632 := (+ #757 #629)
#633 := (+ #12 #632)
#635 := (>= #633 0::Int)
#628 := (= #633 0::Int)
#1 := true
#88 := [true-axiom]: true
#606 := (or false #628)
#591 := [th-lemma arith]: #606
#592 := [unit-resolution #591 #88]: #628
#514 := (not #628)
#476 := (or #514 #635)
#919 := [th-lemma arith triangle-eq]: #476
#920 := [unit-resolution #919 #592]: #635
#921 := [hypothesis]: #683
#922 := (not #635)
#925 := (or #472 #922 #923 #924)
#926 := [th-lemma arith assign-bounds -1 3 1]: #925
#927 := [unit-resolution #926 #921 #920 #473]: #472
#485 := (<= #480 0::Int)
#928 := [hypothesis]: #769
#634 := (<= #633 0::Int)
#516 := (or #514 #634)
#517 := [th-lemma arith triangle-eq]: #516
#929 := [unit-resolution #517 #592]: #634
#930 := [hypothesis]: #684
#530 := (not #634)
#932 := (or #485 #530 #531 #931)
#933 := [th-lemma arith assign-bounds -1 3 1]: #932
#934 := [unit-resolution #933 #930 #929 #928]: #485
#936 := (not #472)
#935 := (not #485)
#937 := (or #483 #935 #936)
#938 := [th-lemma arith triangle-eq]: #937
#939 := [unit-resolution #938 #934 #927]: #483
#941 := [trans #939 #475]: #940
#943 := [monotonicity #941]: #942
#947 := [trans #565 #943]: #946
#948 := [trans #947 #945]: #100
#103 := (not #100)
#16 := (* #15 3::Int)
#20 := (+ #16 #19)
#21 := (f4 f5 #20)
#22 := (= f3 #21)
#23 := (not #22)
#104 := (iff #23 #103)
#101 := (iff #22 #100)
#98 := (= #21 #97)
#95 := (= #20 #94)
#92 := (= #16 #91)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#105 := [monotonicity #102]: #104
#90 := [asserted]: #23
#108 := [mp #90 #105]: #103
#949 := [unit-resolution #108 #948]: false
#952 := [lemma #949]: #951
#967 := [unit-resolution #952 #966 #963 #962 #954]: #950
#563 := (* -1::Int #489)
#494 := (+ #94 #563)
#495 := (<= #494 0::Int)
#542 := (+ #19 #563)
#877 := (+ #91 #542)
#526 := (<= #877 0::Int)
#879 := (= #877 0::Int)
#557 := (>= #94 0::Int)
#796 := (>= #15 0::Int)
#608 := (>= #785 3::Int)
#620 := (not #608)
#593 := (or false #620)
#595 := [th-lemma arith]: #593
#594 := [unit-resolution #595 #88]: #620
#596 := (not #796)
#585 := [hypothesis]: #596
#762 := (not #847)
#586 := (or #762 #796)
#587 := [th-lemma arith triangle-eq]: #586
#579 := [unit-resolution #587 #585]: #762
#589 := (or #763 #847)
#764 := (or #761 #763 #847)
#765 := [def-axiom]: #764
#580 := [unit-resolution #765 #588]: #589
#590 := [unit-resolution #580 #579]: #763
#573 := [unit-resolution #572 #590]: #800
#550 := (not #680)
#551 := (iff #763 #550)
#546 := (iff #840 #680)
#574 := (= #471 f3)
#575 := [symm #565]: #574
#576 := [monotonicity #575]: #566
#545 := [monotonicity #576]: #543
#537 := [symm #545]: #546
#552 := [monotonicity #537]: #551
#553 := [mp #590 #552]: #550
#544 := [unit-resolution #554 #553]: #567
#540 := [unit-resolution #538 #590]: #669
#541 := [unit-resolution #540 #544]: #836
#520 := [unit-resolution #784 #541]: #814
#522 := [unit-resolution #776 #520 #573]: #857
#529 := [unit-resolution #528 #522]: #769
#532 := (or #530 #708 #608 #796 #531)
#521 := [th-lemma arith assign-bounds 1 1 3 -3]: #532
#533 := [unit-resolution #521 #544 #529 #585 #594]: #530
#515 := [unit-resolution #517 #533 #592]: false
#518 := [lemma #515]: #796
#728 := (>= #19 0::Int)
#621 := (>= #785 0::Int)
#968 := (or false #621)
#969 := [th-lemma arith]: #968
#970 := [unit-resolution #969 #88]: #621
#971 := (not #621)
#972 := (or #728 #971 #931)
#973 := [th-lemma arith assign-bounds 1 1]: #972
#974 := [unit-resolution #973 #966 #970]: #728
#975 := (not #728)
#976 := (or #557 #975 #596)
#977 := [th-lemma arith assign-bounds 1 3]: #976
#978 := [unit-resolution #977 #974 #518]: #557
#558 := (not #557)
#880 := (or #558 #879)
#115 := (= #30 #33)
#140 := (or #115 #134)
#893 := (forall (vars (?v0 Int)) (:pat #892) #140)
#145 := (forall (vars (?v0 Int)) #140)
#896 := (iff #145 #893)
#894 := (iff #140 #140)
#895 := [refl]: #894
#897 := [quant-intro #895]: #896
#322 := (~ #145 #145)
#321 := (~ #140 #140)
#318 := [refl]: #321
#323 := [nnf-pos #318]: #322
#34 := (= #33 #30)
#31 := (<= 0::Int #30)
#35 := (implies #31 #34)
#36 := (forall (vars (?v0 Int)) #35)
#148 := (iff #36 #145)
#122 := (not #31)
#123 := (or #122 #115)
#128 := (forall (vars (?v0 Int)) #123)
#146 := (iff #128 #145)
#143 := (iff #123 #140)
#137 := (or #134 #115)
#141 := (iff #137 #140)
#142 := [rewrite]: #141
#138 := (iff #123 #137)
#135 := (iff #122 #134)
#131 := (iff #31 #133)
#132 := [rewrite]: #131
#136 := [monotonicity #132]: #135
#139 := [monotonicity #136]: #138
#144 := [trans #139 #142]: #143
#147 := [quant-intro #144]: #146
#129 := (iff #36 #128)
#126 := (iff #35 #123)
#119 := (implies #31 #115)
#124 := (iff #119 #123)
#125 := [rewrite]: #124
#120 := (iff #35 #119)
#117 := (iff #34 #115)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#127 := [trans #121 #125]: #126
#130 := [quant-intro #127]: #129
#149 := [trans #130 #147]: #148
#114 := [asserted]: #36
#150 := [mp #114 #149]: #145
#319 := [mp~ #150 #323]: #145
#898 := [mp #319 #897]: #893
#884 := (not #893)
#874 := (or #884 #558 #879)
#559 := (or #562 #558)
#534 := (or #884 #559)
#523 := (iff #534 #874)
#875 := (or #884 #880)
#519 := (iff #875 #874)
#860 := [rewrite]: #519
#535 := (iff #534 #875)
#883 := (iff #559 #880)
#873 := (or #879 #558)
#881 := (iff #873 #880)
#882 := [rewrite]: #881
#547 := (iff #559 #873)
#536 := (iff #562 #879)
#666 := [rewrite]: #536
#548 := [monotonicity #666]: #547
#878 := [trans #548 #882]: #883
#876 := [monotonicity #878]: #535
#524 := [trans #876 #860]: #523
#539 := [quant-inst #94]: #534
#525 := [mp #539 #524]: #874
#979 := [unit-resolution #525 #898]: #880
#980 := [unit-resolution #979 #978]: #879
#981 := (not #879)
#982 := (or #981 #526)
#983 := [th-lemma arith triangle-eq]: #982
#984 := [unit-resolution #983 #980]: #526
#985 := (not #526)
#986 := (or #495 #985)
#987 := [th-lemma arith assign-bounds -1]: #986
#988 := [unit-resolution #987 #984]: #495
#482 := (>= #494 0::Int)
#862 := (>= #877 0::Int)
#989 := (or #981 #862)
#990 := [th-lemma arith triangle-eq]: #989
#991 := [unit-resolution #990 #980]: #862
#992 := (not #862)
#993 := (or #482 #992)
#994 := [th-lemma arith assign-bounds -1]: #993
#995 := [unit-resolution #994 #991]: #482
#997 := (not #482)
#996 := (not #495)
#998 := (or #562 #996 #997)
#999 := [th-lemma arith triangle-eq]: #998
#1000 := [unit-resolution #999 #995 #988 #967]: false
#1001 := [lemma #1000]: #840
#1031 := [symm #1001]: #1030
#1032 := (= #94 0::Int)
#863 := (= #489 0::Int)
#583 := (>= #489 0::Int)
#487 := (or #763 #732)
#662 := (or #701 #763 #732)
#663 := [def-axiom]: #662
#492 := [unit-resolution #663 #955]: #487
#493 := [unit-resolution #492 #1001]: #732
#673 := (not #732)
#498 := (or #673 #728)
#500 := [th-lemma arith triangle-eq]: #498
#1002 := [unit-resolution #500 #493]: #728
#1003 := [unit-resolution #977 #1002 #518]: #557
#1004 := [unit-resolution #979 #1003]: #879
#1005 := [unit-resolution #983 #1004]: #526
#1006 := (or #583 #975 #985 #596)
#1007 := [th-lemma arith assign-bounds 1 1 3]: #1006
#1008 := [unit-resolution #1007 #1005 #518 #1002]: #583
#582 := (<= #489 0::Int)
#707 := (<= #19 0::Int)
#1009 := (or #673 #707)
#1010 := [th-lemma arith triangle-eq]: #1009
#1011 := [unit-resolution #1010 #493]: #707
#795 := (<= #15 0::Int)
#1012 := [unit-resolution #580 #1001]: #847
#1013 := (or #762 #795)
#1014 := [th-lemma arith triangle-eq]: #1013
#1015 := [unit-resolution #1014 #1012]: #795
#1016 := [unit-resolution #990 #1004]: #862
#1018 := (not #795)
#1017 := (not #707)
#1019 := (or #582 #1017 #992 #1018)
#1020 := [th-lemma arith assign-bounds -1 1 -3]: #1019
#1021 := [unit-resolution #1020 #1016 #1015 #1011]: #582
#1023 := (not #583)
#1022 := (not #582)
#1024 := (or #863 #1022 #1023)
#1025 := [th-lemma arith triangle-eq]: #1024
#1026 := [unit-resolution #1025 #1021 #1008]: #863
#1027 := [unit-resolution #987 #1005]: #495
#1028 := [unit-resolution #994 #1016]: #482
#1029 := [unit-resolution #999 #1028 #1027]: #562
#1033 := [trans #1029 #1026]: #1032
#1035 := [trans #1033 #1031]: #1034
#1037 := [monotonicity #1035]: #1036
#1039 := [symm #1037]: #1038
#1040 := [trans #565 #1039]: #100
[unit-resolution #108 #1040]: false
unsat
9fcb3a18989ceb011583d7488b7d67a1464c8b3d 76 0
#2 := false
#24 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#58 := -1::Int
#59 := (* -1::Int #12)
#10 := (f3 f4 f5)
#60 := (+ #10 #59)
#61 := (<= #60 0::Int)
#64 := (ite #61 f5 f6)
#67 := (f3 f4 #64)
#75 := (* -1::Int #67)
#607 := (+ #12 #75)
#613 := (>= #607 0::Int)
#612 := (= #12 #67)
#326 := (= f6 #64)
#241 := (not #61)
#240 := (= f5 #64)
#610 := (not #240)
#625 := (= #10 #67)
#620 := [hypothesis]: #240
#617 := [monotonicity #620]: #625
#339 := (not #625)
#76 := (+ #10 #75)
#74 := (>= #76 0::Int)
#80 := (not #74)
#13 := (<= #10 #12)
#14 := (ite #13 f5 f6)
#15 := (f3 f4 #14)
#16 := (<= #15 #10)
#17 := (not #16)
#81 := (iff #17 #80)
#78 := (iff #16 #74)
#70 := (<= #67 #10)
#73 := (iff #70 #74)
#77 := [rewrite]: #73
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (= #14 #64)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#79 := [trans #72 #77]: #78
#82 := [monotonicity #79]: #81
#55 := [asserted]: #17
#83 := [mp #55 #82]: #80
#340 := (or #339 #74)
#618 := [th-lemma arith triangle-eq]: #340
#616 := [unit-resolution #618 #83]: #339
#621 := [unit-resolution #616 #617]: false
#611 := [lemma #621]: #610
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#614 := [unit-resolution #328 #611]: #241
#319 := (or #61 #326)
#330 := [def-axiom]: #319
#609 := [unit-resolution #330 #614]: #326
#615 := [monotonicity #609]: #612
#456 := (not #612)
#457 := (or #456 #613)
#458 := [th-lemma arith triangle-eq]: #457
#600 := [unit-resolution #458 #615]: #613
#347 := (<= #76 0::Int)
#601 := (or #347 #74)
#602 := [th-lemma arith farkas 1 1]: #601
#603 := [unit-resolution #602 #83]: #347
[th-lemma arith farkas 1 1 1 #603 #614 #600]: false
unsat
a449127c090f0317dd4d9ec8e341e46a848862fd 70 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f5 :: S3
#9 := f5
#24 := 0::Int
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#58 := -1::Int
#59 := (* -1::Int #12)
#10 := (f3 f4 f5)
#60 := (+ #10 #59)
#61 := (<= #60 0::Int)
#64 := (ite #61 f5 f6)
#67 := (f3 f4 #64)
#338 := (= #12 #67)
#326 := (= f6 #64)
#241 := (not #61)
#340 := [hypothesis]: #61
#74 := (* -1::Int #67)
#75 := (+ #12 #74)
#73 := (>= #75 0::Int)
#80 := (not #73)
#13 := (<= #10 #12)
#14 := (ite #13 f5 f6)
#15 := (f3 f4 #14)
#16 := (<= #15 #12)
#17 := (not #16)
#81 := (iff #17 #80)
#78 := (iff #16 #73)
#70 := (<= #67 #12)
#76 := (iff #70 #73)
#77 := [rewrite]: #76
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (= #14 #64)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#79 := [trans #72 #77]: #78
#82 := [monotonicity #79]: #81
#55 := [asserted]: #17
#83 := [mp #55 #82]: #80
#347 := (+ #10 #74)
#339 := (>= #347 0::Int)
#625 := (= #10 #67)
#240 := (= f5 #64)
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#618 := [unit-resolution #328 #340]: #240
#619 := [monotonicity #618]: #625
#334 := (not #625)
#616 := (or #334 #339)
#620 := [th-lemma arith triangle-eq]: #616
#617 := [unit-resolution #620 #619]: #339
#621 := [th-lemma arith farkas -1 1 1 #617 #83 #340]: false
#610 := [lemma #621]: #241
#319 := (or #61 #326)
#330 := [def-axiom]: #319
#612 := [unit-resolution #330 #610]: #326
#607 := [monotonicity #612]: #338
#608 := (not #338)
#613 := (or #608 #73)
#614 := [th-lemma arith triangle-eq]: #613
[unit-resolution #614 #83 #607]: false
unsat
2f52c0eb5cf7f99a57b987b4ca5bf5d9d94c7e8e 277 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#340 := (= #10 0::Int)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#19 := f8
#333 := (f7 f8 #10)
#320 := (f3 f4 #333)
#654 := (= #320 0::Int)
#319 := (>= #10 0::Int)
#572 := (not #319)
decl f6 :: S3
#11 := f6
#12 := (f3 f4 f6)
#59 := -1::Int
#60 := (* -1::Int #12)
#61 := (+ #10 #60)
#62 := (<= #61 0::Int)
#65 := (ite #62 f5 f6)
#68 := (f3 f4 #65)
#77 := (* -1::Int #68)
#78 := (+ #12 #77)
#79 := (+ #10 #78)
#75 := (>= #79 0::Int)
#82 := (not #75)
#16 := (+ #10 #12)
#13 := (<= #10 #12)
#14 := (ite #13 f5 f6)
#15 := (f3 f4 #14)
#17 := (<= #15 #16)
#18 := (not #17)
#83 := (iff #18 #82)
#80 := (iff #17 #75)
#71 := (<= #68 #16)
#74 := (iff #71 #75)
#76 := [rewrite]: #74
#72 := (iff #17 #71)
#69 := (= #15 #68)
#66 := (= #14 #65)
#63 := (iff #13 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#81 := [trans #73 #76]: #80
#84 := [monotonicity #81]: #83
#56 := [asserted]: #18
#85 := [mp #56 #84]: #82
#590 := (>= #78 0::Int)
#597 := (= #12 #68)
#328 := (= f6 #65)
#651 := (f7 f8 #68)
#481 := (= #651 #65)
#308 := (= #65 #651)
#20 := (:var 0 S3)
#21 := (f3 f4 #20)
#657 := (pattern #21)
#22 := (f7 f8 #21)
#58 := (= #20 #22)
#658 := (forall (vars (?v0 S3)) (:pat #657) #58)
#88 := (forall (vars (?v0 S3)) #58)
#661 := (iff #88 #658)
#659 := (iff #58 #58)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#182 := (~ #88 #88)
#180 := (~ #58 #58)
#181 := [refl]: #180
#183 := [nnf-pos #181]: #182
#23 := (= #22 #20)
#24 := (forall (vars (?v0 S3)) #23)
#89 := (iff #24 #88)
#86 := (iff #23 #58)
#87 := [rewrite]: #86
#90 := [quant-intro #87]: #89
#57 := [asserted]: #24
#93 := [mp #57 #90]: #88
#172 := [mp~ #93 #183]: #88
#663 := [mp #172 #662]: #658
#335 := (not #658)
#652 := (or #335 #308)
#653 := [quant-inst #65]: #652
#621 := [unit-resolution #653 #663]: #308
#482 := [symm #621]: #481
#441 := (= f6 #651)
#334 := (f7 f8 #12)
#598 := (= #334 #651)
#356 := (f3 f4 #651)
#437 := (= #356 #68)
#606 := (= #68 #356)
#607 := [monotonicity #621]: #606
#439 := [symm #607]: #437
#594 := (= #12 #356)
#601 := (= 0::Int #356)
#249 := (= #356 0::Int)
#355 := (>= #68 0::Int)
#614 := (not #355)
#349 := (+ #10 #77)
#341 := (>= #349 0::Int)
#627 := (= #10 #68)
#242 := (= f5 #65)
#342 := (not #328)
#620 := [hypothesis]: #342
#321 := (or #62 #328)
#332 := [def-axiom]: #321
#336 := [unit-resolution #332 #620]: #62
#243 := (not #62)
#329 := (or #243 #242)
#330 := [def-axiom]: #329
#618 := [unit-resolution #330 #336]: #242
#622 := [monotonicity #618]: #627
#619 := (not #627)
#623 := (or #619 #341)
#612 := [th-lemma arith triangle-eq]: #623
#613 := [unit-resolution #612 #622]: #341
#609 := (not #341)
#610 := (or #614 #609 #243 #75)
#615 := [th-lemma arith assign-bounds 2 -1 -1]: #610
#616 := [unit-resolution #615 #336 #85 #613]: #614
#626 := (or #249 #355)
#26 := (:var 0 Int)
#28 := (f7 f8 #26)
#664 := (pattern #28)
#109 := (>= #26 0::Int)
#29 := (f3 f4 #28)
#34 := (= #29 0::Int)
#158 := (or #34 #109)
#671 := (forall (vars (?v0 Int)) (:pat #664) #158)
#163 := (forall (vars (?v0 Int)) #158)
#674 := (iff #163 #671)
#672 := (iff #158 #158)
#673 := [refl]: #672
#675 := [quant-intro #673]: #674
#176 := (~ #163 #163)
#184 := (~ #158 #158)
#185 := [refl]: #184
#177 := [nnf-pos #185]: #176
#33 := (< #26 0::Int)
#35 := (implies #33 #34)
#36 := (forall (vars (?v0 Int)) #35)
#166 := (iff #36 #163)
#129 := (= 0::Int #29)
#135 := (not #33)
#136 := (or #135 #129)
#141 := (forall (vars (?v0 Int)) #136)
#164 := (iff #141 #163)
#161 := (iff #136 #158)
#155 := (or #109 #34)
#159 := (iff #155 #158)
#160 := [rewrite]: #159
#156 := (iff #136 #155)
#153 := (iff #129 #34)
#154 := [rewrite]: #153
#151 := (iff #135 #109)
#111 := (not #109)
#146 := (not #111)
#149 := (iff #146 #109)
#150 := [rewrite]: #149
#147 := (iff #135 #146)
#144 := (iff #33 #111)
#145 := [rewrite]: #144
#148 := [monotonicity #145]: #147
#152 := [trans #148 #150]: #151
#157 := [monotonicity #152 #154]: #156
#162 := [trans #157 #160]: #161
#165 := [quant-intro #162]: #164
#142 := (iff #36 #141)
#139 := (iff #35 #136)
#132 := (implies #33 #129)
#137 := (iff #132 #136)
#138 := [rewrite]: #137
#133 := (iff #35 #132)
#130 := (iff #34 #129)
#131 := [rewrite]: #130
#134 := [monotonicity #131]: #133
#140 := [trans #134 #138]: #139
#143 := [quant-intro #140]: #142
#167 := [trans #143 #165]: #166
#128 := [asserted]: #36
#168 := [mp #128 #167]: #163
#186 := [mp~ #168 #177]: #163
#676 := [mp #186 #675]: #671
#306 := (not #671)
#350 := (or #306 #249 #355)
#624 := (or #306 #626)
#625 := (iff #624 #350)
#629 := [rewrite]: #625
#628 := [quant-inst #68]: #624
#339 := [mp #628 #629]: #350
#611 := [unit-resolution #339 #676]: #626
#617 := [unit-resolution #611 #616]: #249
#608 := [symm #617]: #601
#440 := (= #12 0::Int)
#636 := (f3 f4 #334)
#637 := (= #636 0::Int)
#635 := (>= #12 0::Int)
#458 := (not #635)
#459 := (or #458 #609 #75)
#460 := [th-lemma arith assign-bounds 1 -1]: #459
#602 := [unit-resolution #460 #613 #85]: #458
#633 := (or #635 #637)
#640 := (or #306 #635 #637)
#638 := (or #637 #635)
#642 := (or #306 #638)
#631 := (iff #642 #640)
#283 := (or #306 #633)
#644 := (iff #283 #640)
#630 := [rewrite]: #644
#643 := (iff #642 #283)
#639 := (iff #638 #633)
#277 := [rewrite]: #639
#641 := [monotonicity #277]: #643
#353 := [trans #641 #630]: #631
#282 := [quant-inst #12]: #642
#354 := [mp #282 #353]: #640
#603 := [unit-resolution #354 #676]: #633
#604 := [unit-resolution #603 #602]: #637
#599 := (= #12 #636)
#331 := (= f6 #334)
#438 := (or #335 #331)
#645 := [quant-inst #11]: #438
#605 := [unit-resolution #645 #663]: #331
#600 := [monotonicity #605]: #599
#593 := [trans #600 #604]: #440
#596 := [trans #593 #608]: #594
#595 := [trans #596 #439]: #597
#480 := [monotonicity #595]: #598
#589 := [trans #605 #480]: #441
#491 := [trans #589 #482]: #328
#586 := [unit-resolution #620 #491]: false
#587 := [lemma #586]: #328
#475 := [monotonicity #587]: #597
#493 := (not #590)
#486 := [hypothesis]: #493
#588 := (not #597)
#592 := (or #588 #590)
#579 := [th-lemma arith triangle-eq]: #592
#581 := [unit-resolution #579 #486 #475]: false
#573 := [lemma #581]: #590
#582 := (or #572 #493 #75)
#583 := [th-lemma arith assign-bounds 1 -1]: #582
#584 := [unit-resolution #583 #573 #85]: #572
#650 := (or #319 #654)
#311 := (or #306 #319 #654)
#655 := (or #654 #319)
#647 := (or #306 #655)
#297 := (iff #647 #311)
#648 := (or #306 #650)
#295 := (iff #648 #311)
#296 := [rewrite]: #295
#291 := (iff #647 #648)
#656 := (iff #655 #650)
#646 := [rewrite]: #656
#632 := [monotonicity #646]: #291
#298 := [trans #632 #296]: #297
#307 := [quant-inst #10]: #647
#634 := [mp #307 #298]: #311
#580 := [unit-resolution #634 #676]: #650
#585 := [unit-resolution #580 #584]: #654
#577 := (= #10 #320)
#261 := (= f5 #333)
#314 := (or #335 #261)
#649 := [quant-inst #9]: #314
#574 := [unit-resolution #649 #663]: #261
#571 := [monotonicity #574]: #577
#578 := [trans #571 #585]: #340
#562 := (not #340)
#563 := (or #562 #319)
#565 := [th-lemma arith triangle-eq]: #563
[unit-resolution #565 #584 #578]: false
unsat
4e6556ab36648cdf433cba24ee625ef22ea51c56 123 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#14 := f7
decl f6 :: S3
#11 := f6
#30 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 f7)
#69 := -1::Int
#78 := (* -1::Int #15)
#12 := (f3 f4 f6)
#88 := (+ #12 #78)
#89 := (<= #88 0::Int)
#92 := (ite #89 f6 f7)
#95 := (f3 f4 #92)
#652 := (= #12 #95)
#280 := (= f6 #92)
#366 := (= f7 #92)
#479 := (not #366)
#637 := (= #15 #95)
#518 := [hypothesis]: #366
#519 := [monotonicity #518]: #637
#631 := (not #637)
#103 := (* -1::Int #95)
#638 := (+ #15 #103)
#644 := (<= #638 0::Int)
#475 := (not #644)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#104 := (+ #10 #103)
#102 := (>= #104 0::Int)
#101 := (not #102)
#79 := (+ #10 #78)
#77 := (>= #79 0::Int)
#76 := (not #77)
#72 := (* -1::Int #12)
#73 := (+ #10 #72)
#71 := (>= #73 0::Int)
#70 := (not #71)
#82 := (and #70 #76)
#85 := (not #82)
#109 := (or #85 #101)
#112 := (not #109)
#18 := (<= #12 #15)
#19 := (ite #18 f6 f7)
#20 := (f3 f4 #19)
#21 := (< #10 #20)
#16 := (< #10 #15)
#13 := (< #10 #12)
#17 := (and #13 #16)
#22 := (implies #17 #21)
#23 := (not #22)
#115 := (iff #23 #112)
#62 := (not #17)
#63 := (or #62 #21)
#66 := (not #63)
#113 := (iff #66 #112)
#110 := (iff #63 #109)
#107 := (iff #21 #101)
#98 := (< #10 #95)
#105 := (iff #98 #101)
#106 := [rewrite]: #105
#99 := (iff #21 #98)
#96 := (= #20 #95)
#93 := (= #19 #92)
#90 := (iff #18 #89)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#108 := [trans #100 #106]: #107
#86 := (iff #62 #85)
#83 := (iff #17 #82)
#80 := (iff #16 #76)
#81 := [rewrite]: #80
#74 := (iff #13 #70)
#75 := [rewrite]: #74
#84 := [monotonicity #75 #81]: #83
#87 := [monotonicity #84]: #86
#111 := [monotonicity #87 #108]: #110
#114 := [monotonicity #111]: #113
#67 := (iff #23 #66)
#64 := (iff #22 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#116 := [trans #68 #114]: #115
#61 := [asserted]: #23
#117 := [mp #61 #116]: #112
#121 := [not-or-elim #117]: #102
#118 := [not-or-elim #117]: #82
#120 := [and-elim #118]: #76
#639 := [hypothesis]: #644
#646 := [th-lemma arith farkas -1 -1 1 #639 #120 #121]: false
#477 := [lemma #646]: #475
#632 := (or #631 #644)
#634 := [th-lemma arith triangle-eq]: #632
#636 := [unit-resolution #634 #477]: #631
#520 := [unit-resolution #636 #519]: false
#627 := [lemma #520]: #479
#359 := (or #89 #366)
#370 := [def-axiom]: #359
#624 := [unit-resolution #370 #627]: #89
#281 := (not #89)
#367 := (or #281 #280)
#368 := [def-axiom]: #367
#625 := [unit-resolution #368 #624]: #280
#628 := [monotonicity #625]: #652
#498 := (not #652)
#647 := (+ #12 #103)
#648 := (<= #647 0::Int)
#655 := (not #648)
#119 := [and-elim #118]: #70
#654 := [hypothesis]: #648
#649 := [th-lemma arith farkas -1 -1 1 #654 #119 #121]: false
#496 := [lemma #649]: #655
#640 := (or #498 #648)
#641 := [th-lemma arith triangle-eq]: #640
#529 := [unit-resolution #641 #496]: #498
[unit-resolution #529 #628]: false
unsat
01147de59b42ac4a29c41704be4c71d5a4b3cce2 158 0
#2 := false
decl f5 :: S3
#9 := f5
decl f6 :: S3
#11 := f6
#25 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#59 := -1::Int
#60 := (* -1::Int #12)
#10 := (f3 f4 f5)
#61 := (+ #10 #60)
#69 := (>= #61 0::Int)
#71 := (ite #69 f6 f5)
#62 := (<= #61 0::Int)
#65 := (ite #62 f5 f6)
#74 := (= #65 #71)
#328 := (= f6 #71)
#488 := (iff #328 #74)
#485 := (iff #74 #328)
#620 := (= #65 f6)
#323 := (= f6 #65)
#238 := (not #62)
#237 := (= f5 #65)
#476 := (not #237)
#592 := (iff #237 #74)
#589 := (iff #74 #237)
#603 := (= #65 f5)
#435 := (iff #603 #237)
#588 := [commutativity]: #435
#432 := (iff #74 #603)
#602 := (= #71 f5)
#256 := (= f5 #71)
#621 := (not #256)
#622 := [hypothesis]: #621
#309 := (or #69 #256)
#644 := [def-axiom]: #309
#344 := [unit-resolution #644 #622]: #69
#329 := (not #69)
#326 := (or #329 #328)
#330 := [def-axiom]: #326
#345 := [unit-resolution #330 #344]: #328
#598 := (= f5 f6)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#19 := f8
#433 := (f7 f8 #12)
#453 := (= #433 f6)
#640 := (= f6 #433)
#20 := (:var 0 S3)
#21 := (f3 f4 #20)
#652 := (pattern #21)
#22 := (f7 f8 #21)
#58 := (= #20 #22)
#653 := (forall (vars (?v0 S3)) (:pat #652) #58)
#83 := (forall (vars (?v0 S3)) #58)
#656 := (iff #83 #653)
#654 := (iff #58 #58)
#655 := [refl]: #654
#657 := [quant-intro #655]: #656
#177 := (~ #83 #83)
#175 := (~ #58 #58)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#23 := (= #22 #20)
#24 := (forall (vars (?v0 S3)) #23)
#84 := (iff #24 #83)
#81 := (iff #23 #58)
#82 := [rewrite]: #81
#85 := [quant-intro #82]: #84
#57 := [asserted]: #24
#88 := [mp #57 #85]: #83
#167 := [mp~ #88 #178]: #83
#658 := [mp #167 #657]: #653
#314 := (not #653)
#650 := (or #314 #640)
#645 := [quant-inst #11]: #650
#604 := [unit-resolution #645 #658]: #640
#454 := [symm #604]: #453
#455 := (= f5 #433)
#646 := (f7 f8 #10)
#606 := (= #646 #433)
#610 := (= #433 #646)
#608 := (= #12 #10)
#618 := (= #10 #12)
#616 := (not #323)
#77 := (not #74)
#331 := (iff #77 #616)
#337 := (iff #74 #323)
#335 := (iff #620 #323)
#336 := [commutativity]: #335
#624 := (iff #74 #620)
#619 := (= #71 f6)
#623 := [symm #345]: #619
#334 := [monotonicity #623]: #624
#615 := [trans #334 #336]: #337
#613 := [monotonicity #615]: #331
#15 := (<= #12 #10)
#16 := (ite #15 f6 f5)
#13 := (<= #10 #12)
#14 := (ite #13 f5 f6)
#17 := (= #14 #16)
#18 := (not #17)
#78 := (iff #18 #77)
#75 := (iff #17 #74)
#72 := (= #16 #71)
#68 := (iff #15 #69)
#70 := [rewrite]: #68
#73 := [monotonicity #70]: #72
#66 := (= #14 #65)
#63 := (iff #13 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#76 := [monotonicity #67 #73]: #75
#79 := [monotonicity #76]: #78
#56 := [asserted]: #18
#80 := [mp #56 #79]: #77
#617 := [mp #80 #613]: #616
#316 := (or #62 #323)
#327 := [def-axiom]: #316
#614 := [unit-resolution #327 #617]: #62
#607 := [th-lemma arith eq-propagate 1 1 #344 #614]: #618
#609 := [symm #607]: #608
#611 := [monotonicity #609]: #610
#612 := [symm #611]: #606
#303 := (= f5 #646)
#315 := (or #314 #303)
#647 := [quant-inst #9]: #315
#605 := [unit-resolution #647 #658]: #303
#597 := [trans #605 #612]: #455
#599 := [trans #597 #454]: #598
#600 := [trans #599 #345]: #256
#594 := [unit-resolution #622 #600]: false
#595 := [lemma #594]: #256
#596 := [symm #595]: #602
#434 := [monotonicity #596]: #432
#591 := [trans #434 #588]: #589
#590 := [symm #591]: #592
#601 := [hypothesis]: #237
#593 := [mp #601 #590]: #74
#475 := [unit-resolution #80 #593]: false
#477 := [lemma #475]: #476
#324 := (or #238 #237)
#325 := [def-axiom]: #324
#436 := [unit-resolution #325 #477]: #238
#585 := [unit-resolution #327 #436]: #323
#470 := [symm #585]: #620
#487 := [monotonicity #470]: #485
#481 := [symm #487]: #488
#584 := (or #69 #62)
#486 := [th-lemma arith farkas 1 1]: #584
#581 := [unit-resolution #486 #436]: #69
#582 := [unit-resolution #330 #581]: #328
#489 := [mp #582 #481]: #74
[unit-resolution #80 #489]: false
unsat
fbf994cf5d4385a5ee6e3cff92f24bb0bf6bf2e2 306 0
#2 := false
decl f6 :: (-> S4 Int S3)
#12 := 0::Int
decl f7 :: S4
#11 := f7
#13 := (f6 f7 0::Int)
decl f5 :: S3
#9 := f5
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#8 := f4
#14 := (f3 f4 #13)
#61 := -1::Int
#62 := (* -1::Int #14)
#10 := (f3 f4 f5)
#63 := (+ #10 #62)
#64 := (<= #63 0::Int)
#67 := (ite #64 f5 #13)
#70 := (= #13 #67)
#327 := (f3 f4 #67)
#328 := (f6 f7 #327)
#593 := (= #328 #67)
#256 := (= #67 #328)
#19 := (:var 0 S3)
#20 := (f3 f4 #19)
#652 := (pattern #20)
#21 := (f6 f7 #20)
#80 := (= #19 #21)
#653 := (forall (vars (?v0 S3)) (:pat #652) #80)
#83 := (forall (vars (?v0 S3)) #80)
#656 := (iff #83 #653)
#654 := (iff #80 #80)
#655 := [refl]: #654
#657 := [quant-intro #655]: #656
#177 := (~ #83 #83)
#175 := (~ #80 #80)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#22 := (= #21 #19)
#23 := (forall (vars (?v0 S3)) #22)
#84 := (iff #23 #83)
#81 := (iff #22 #80)
#82 := [rewrite]: #81
#85 := [quant-intro #82]: #84
#79 := [asserted]: #23
#88 := [mp #79 #85]: #83
#167 := [mp~ #88 #178]: #83
#658 := [mp #167 #657]: #653
#330 := (not #653)
#309 := (or #330 #256)
#644 := [quant-inst #67]: #309
#603 := [unit-resolution #644 #658]: #256
#475 := [symm #603]: #593
#565 := (= #13 #328)
#576 := (= 0::Int #327)
#589 := (= #10 #327)
#435 := (= #327 #10)
#432 := (= #67 f5)
#237 := (= f5 #67)
#73 := (not #70)
#15 := (<= #10 #14)
#16 := (ite #15 f5 #13)
#17 := (= #16 #13)
#18 := (not #17)
#76 := (iff #18 #73)
#55 := (= #13 #16)
#58 := (not #55)
#74 := (iff #58 #73)
#71 := (iff #55 #70)
#68 := (= #16 #67)
#65 := (iff #15 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#77 := [trans #60 #75]: #76
#54 := [asserted]: #18
#78 := [mp #54 #77]: #73
#325 := (or #64 #70)
#316 := [def-axiom]: #325
#609 := [unit-resolution #316 #78]: #64
#323 := (not #64)
#238 := (or #323 #237)
#324 := [def-axiom]: #238
#596 := [unit-resolution #324 #609]: #237
#434 := [symm #596]: #432
#588 := [monotonicity #434]: #435
#591 := [symm #588]: #589
#587 := (= 0::Int #10)
#621 := (f6 f7 #10)
#622 := (f3 f4 #621)
#486 := (= #622 #10)
#491 := (= #10 #622)
#489 := (= f5 #621)
#485 := (= #328 #621)
#592 := (= #621 #328)
#590 := [monotonicity #591]: #592
#487 := [symm #590]: #485
#488 := (= f5 #328)
#481 := [trans #596 #603]: #488
#490 := [trans #481 #487]: #489
#492 := [monotonicity #490]: #491
#583 := [symm #492]: #486
#493 := (= 0::Int #622)
#344 := (= #622 0::Int)
#607 := (= #10 0::Int)
#608 := (<= #10 0::Int)
#278 := (<= #14 0::Int)
#647 := (= #14 0::Int)
#24 := (:var 0 Int)
#26 := (f6 f7 #24)
#659 := (pattern #26)
#104 := (>= #24 0::Int)
#106 := (not #104)
#27 := (f3 f4 #26)
#87 := (= #24 #27)
#112 := (or #87 #106)
#660 := (forall (vars (?v0 Int)) (:pat #659) #112)
#117 := (forall (vars (?v0 Int)) #112)
#663 := (iff #117 #660)
#661 := (iff #112 #112)
#662 := [refl]: #661
#664 := [quant-intro #662]: #663
#169 := (~ #117 #117)
#168 := (~ #112 #112)
#165 := [refl]: #168
#170 := [nnf-pos #165]: #169
#28 := (= #27 #24)
#25 := (<= 0::Int #24)
#29 := (implies #25 #28)
#30 := (forall (vars (?v0 Int)) #29)
#120 := (iff #30 #117)
#94 := (not #25)
#95 := (or #94 #87)
#100 := (forall (vars (?v0 Int)) #95)
#118 := (iff #100 #117)
#115 := (iff #95 #112)
#109 := (or #106 #87)
#113 := (iff #109 #112)
#114 := [rewrite]: #113
#110 := (iff #95 #109)
#107 := (iff #94 #106)
#103 := (iff #25 #104)
#105 := [rewrite]: #103
#108 := [monotonicity #105]: #107
#111 := [monotonicity #108]: #110
#116 := [trans #111 #114]: #115
#119 := [quant-intro #116]: #118
#101 := (iff #30 #100)
#98 := (iff #29 #95)
#91 := (implies #25 #87)
#96 := (iff #91 #95)
#97 := [rewrite]: #96
#92 := (iff #29 #91)
#89 := (iff #28 #87)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#99 := [trans #93 #97]: #98
#102 := [quant-intro #99]: #101
#121 := [trans #102 #119]: #120
#86 := [asserted]: #30
#122 := [mp #86 #121]: #117
#166 := [mp~ #122 #170]: #117
#665 := [mp #166 #664]: #660
#630 := (not #660)
#631 := (or #630 #647)
#646 := (>= 0::Int 0::Int)
#303 := (not #646)
#314 := (= 0::Int #14)
#315 := (or #314 #303)
#632 := (or #630 #315)
#628 := (iff #632 #631)
#272 := (iff #631 #631)
#635 := [rewrite]: #272
#293 := (iff #315 #647)
#286 := (or #647 false)
#291 := (iff #286 #647)
#292 := [rewrite]: #291
#627 := (iff #315 #286)
#302 := (iff #303 false)
#1 := true
#651 := (not true)
#306 := (iff #651 false)
#642 := [rewrite]: #306
#641 := (iff #303 #651)
#650 := (iff #646 true)
#645 := [rewrite]: #650
#301 := [monotonicity #645]: #641
#643 := [trans #301 #642]: #302
#648 := (iff #314 #647)
#649 := [rewrite]: #648
#290 := [monotonicity #649 #643]: #627
#629 := [trans #290 #292]: #293
#634 := [monotonicity #629]: #628
#637 := [trans #634 #635]: #628
#633 := [quant-inst #12]: #632
#277 := [mp #633 #637]: #631
#604 := [unit-resolution #277 #665]: #647
#605 := (not #647)
#610 := (or #605 #278)
#611 := [th-lemma arith triangle-eq]: #610
#606 := [unit-resolution #611 #604]: #278
#612 := (not #608)
#453 := [hypothesis]: #612
#454 := [th-lemma arith farkas -1 1 1 #453 #606 #609]: false
#455 := [lemma #454]: #608
#244 := (>= #10 0::Int)
#597 := (not #344)
#598 := [hypothesis]: #597
#619 := (or #244 #344)
#32 := (= #27 0::Int)
#153 := (or #32 #104)
#666 := (forall (vars (?v0 Int)) (:pat #659) #153)
#158 := (forall (vars (?v0 Int)) #153)
#669 := (iff #158 #666)
#667 := (iff #153 #153)
#668 := [refl]: #667
#670 := [quant-intro #668]: #669
#171 := (~ #158 #158)
#179 := (~ #153 #153)
#180 := [refl]: #179
#172 := [nnf-pos #180]: #171
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#161 := (iff #34 #158)
#124 := (= 0::Int #27)
#130 := (not #31)
#131 := (or #130 #124)
#136 := (forall (vars (?v0 Int)) #131)
#159 := (iff #136 #158)
#156 := (iff #131 #153)
#150 := (or #104 #32)
#154 := (iff #150 #153)
#155 := [rewrite]: #154
#151 := (iff #131 #150)
#148 := (iff #124 #32)
#149 := [rewrite]: #148
#146 := (iff #130 #104)
#141 := (not #106)
#144 := (iff #141 #104)
#145 := [rewrite]: #144
#142 := (iff #130 #141)
#139 := (iff #31 #106)
#140 := [rewrite]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#152 := [monotonicity #147 #149]: #151
#157 := [trans #152 #155]: #156
#160 := [quant-intro #157]: #159
#137 := (iff #34 #136)
#134 := (iff #33 #131)
#127 := (implies #31 #124)
#132 := (iff #127 #131)
#133 := [rewrite]: #132
#128 := (iff #33 #127)
#125 := (iff #32 #124)
#126 := [rewrite]: #125
#129 := [monotonicity #126]: #128
#135 := [trans #129 #133]: #134
#138 := [quant-intro #135]: #137
#162 := [trans #138 #160]: #161
#123 := [asserted]: #34
#163 := [mp #123 #162]: #158
#181 := [mp~ #163 #172]: #158
#671 := [mp #181 #670]: #666
#624 := (not #666)
#334 := (or #624 #244 #344)
#345 := (or #344 #244)
#335 := (or #624 #345)
#617 := (iff #335 #334)
#337 := (or #624 #619)
#331 := (iff #337 #334)
#613 := [rewrite]: #331
#615 := (iff #335 #337)
#623 := (iff #345 #619)
#620 := [rewrite]: #623
#616 := [monotonicity #620]: #615
#614 := [trans #616 #613]: #617
#336 := [quant-inst #10]: #335
#618 := [mp #336 #614]: #334
#599 := [unit-resolution #618 #671]: #619
#600 := [unit-resolution #599 #598]: #244
#594 := (not #244)
#595 := (or #607 #612 #594)
#601 := [th-lemma arith triangle-eq]: #595
#602 := [unit-resolution #601 #600 #455]: #607
#436 := (= #621 f5)
#476 := (= #621 #67)
#477 := [trans #590 #475]: #476
#584 := [trans #477 #434]: #436
#581 := [monotonicity #584]: #486
#582 := [trans #581 #602]: #344
#585 := [unit-resolution #598 #582]: false
#470 := [lemma #585]: #344
#586 := [symm #470]: #493
#574 := [trans #586 #583]: #587
#568 := [trans #574 #591]: #576
#567 := [monotonicity #568]: #565
#577 := [trans #567 #475]: #70
[unit-resolution #78 #577]: false
unsat
85603e9b42628a46d445e616c7b00cbba3c82418 70 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f6 :: S3
#11 := f6
#24 := 0::Int
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#58 := -1::Int
#59 := (* -1::Int #12)
#10 := (f3 f4 f5)
#60 := (+ #10 #59)
#61 := (<= #60 0::Int)
#64 := (ite #61 f6 f5)
#67 := (f3 f4 #64)
#339 := (= #10 #67)
#326 := (= f5 #64)
#241 := (not #61)
#340 := [hypothesis]: #61
#73 := (* -1::Int #67)
#74 := (+ #10 #73)
#75 := (<= #74 0::Int)
#80 := (not #75)
#13 := (<= #10 #12)
#14 := (ite #13 f6 f5)
#15 := (f3 f4 #14)
#16 := (<= #10 #15)
#17 := (not #16)
#81 := (iff #17 #80)
#78 := (iff #16 #75)
#70 := (<= #10 #67)
#76 := (iff #70 #75)
#77 := [rewrite]: #76
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (= #14 #64)
#62 := (iff #13 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#79 := [trans #72 #77]: #78
#82 := [monotonicity #79]: #81
#55 := [asserted]: #17
#83 := [mp #55 #82]: #80
#347 := (+ #12 #73)
#338 := (<= #347 0::Int)
#625 := (= #12 #67)
#240 := (= f6 #64)
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#618 := [unit-resolution #328 #340]: #240
#619 := [monotonicity #618]: #625
#334 := (not #625)
#616 := (or #334 #338)
#620 := [th-lemma arith triangle-eq]: #616
#617 := [unit-resolution #620 #619]: #338
#621 := [th-lemma arith farkas 1 -1 1 #617 #83 #340]: false
#610 := [lemma #621]: #241
#319 := (or #61 #326)
#330 := [def-axiom]: #319
#612 := [unit-resolution #330 #610]: #326
#607 := [monotonicity #612]: #339
#608 := (not #339)
#613 := (or #608 #75)
#614 := [th-lemma arith triangle-eq]: #613
[unit-resolution #614 #83 #607]: false
unsat
526d46cdfc0d87a1360427bc329d54e3e7b2ca5a 76 0
#2 := false
#24 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#58 := -1::Int
#61 := (* -1::Int #12)
#10 := (f3 f4 f5)
#62 := (+ #10 #61)
#60 := (>= #62 0::Int)
#64 := (ite #60 f5 f6)
#67 := (f3 f4 #64)
#73 := (* -1::Int #67)
#607 := (+ #12 #73)
#608 := (<= #607 0::Int)
#612 := (= #12 #67)
#326 := (= f6 #64)
#241 := (not #60)
#240 := (= f5 #64)
#610 := (not #240)
#625 := (= #10 #67)
#620 := [hypothesis]: #240
#617 := [monotonicity #620]: #625
#339 := (not #625)
#74 := (+ #10 #73)
#75 := (<= #74 0::Int)
#80 := (not #75)
#13 := (<= #12 #10)
#14 := (ite #13 f5 f6)
#15 := (f3 f4 #14)
#16 := (<= #10 #15)
#17 := (not #16)
#81 := (iff #17 #80)
#78 := (iff #16 #75)
#70 := (<= #10 #67)
#76 := (iff #70 #75)
#77 := [rewrite]: #76
#71 := (iff #16 #70)
#68 := (= #15 #67)
#65 := (= #14 #64)
#59 := (iff #13 #60)
#63 := [rewrite]: #59
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#79 := [trans #72 #77]: #78
#82 := [monotonicity #79]: #81
#55 := [asserted]: #17
#83 := [mp #55 #82]: #80
#340 := (or #339 #75)
#618 := [th-lemma arith triangle-eq]: #340
#616 := [unit-resolution #618 #83]: #339
#621 := [unit-resolution #616 #617]: false
#611 := [lemma #621]: #610
#327 := (or #241 #240)
#328 := [def-axiom]: #327
#614 := [unit-resolution #328 #611]: #241
#319 := (or #60 #326)
#330 := [def-axiom]: #319
#609 := [unit-resolution #330 #614]: #326
#615 := [monotonicity #609]: #612
#456 := (not #612)
#457 := (or #456 #608)
#458 := [th-lemma arith triangle-eq]: #457
#600 := [unit-resolution #458 #615]: #608
#347 := (>= #74 0::Int)
#601 := (or #347 #75)
#602 := [th-lemma arith farkas 1 1]: #601
#603 := [unit-resolution #602 #83]: #347
[th-lemma arith farkas 1 1 1 #603 #614 #600]: false
unsat
dada420705bc38de0c45602e9e3a17776a13efd2 465 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#10 := f7
decl f8 :: S3
#12 := f8
#31 := 0::Int
decl f4 :: S2
#8 := f4
#13 := (f3 f4 f8)
#63 := -1::Int
#64 := (* -1::Int #13)
#11 := (f3 f4 f7)
#65 := (+ #11 #64)
#93 := (<= #65 0::Int)
#96 := (ite #93 f8 f7)
#99 := (f3 f4 #96)
#471 := (= #11 #99)
#363 := (= f7 #96)
#278 := (not #93)
#566 := (= #13 #99)
#277 := (= f8 #96)
#420 := [hypothesis]: #93
#364 := (or #278 #277)
#365 := [def-axiom]: #364
#421 := [unit-resolution #365 #420]: #277
#422 := [monotonicity #421]: #566
#105 := (* -1::Int #99)
#541 := (+ #13 #105)
#508 := (<= #541 0::Int)
#466 := (not #508)
decl f5 :: (-> S4 Int S3)
decl f6 :: S4
#9 := f6
#68 := (f5 f6 #65)
#71 := (f3 f4 #68)
#660 := (<= #71 0::Int)
#326 := (* -1::Int #71)
#667 := (+ #64 #326)
#330 := (+ #11 #667)
#666 := (>= #330 0::Int)
#331 := (= #330 0::Int)
#681 := (>= #65 0::Int)
#341 := (not #681)
#447 := [hypothesis]: #341
#443 := (or #681 #93)
#433 := [th-lemma arith farkas 1 1]: #443
#435 := [unit-resolution #433 #447]: #93
#436 := [unit-resolution #365 #435]: #277
#439 := [monotonicity #436]: #566
#388 := (= #71 0::Int)
#389 := (or #388 #681)
#32 := (:var 0 Int)
#34 := (f5 f6 #32)
#699 := (pattern #34)
#144 := (>= #32 0::Int)
#35 := (f3 f4 #34)
#40 := (= #35 0::Int)
#193 := (or #40 #144)
#706 := (forall (vars (?v0 Int)) (:pat #699) #193)
#198 := (forall (vars (?v0 Int)) #193)
#709 := (iff #198 #706)
#707 := (iff #193 #193)
#708 := [refl]: #707
#710 := [quant-intro #708]: #709
#211 := (~ #198 #198)
#219 := (~ #193 #193)
#220 := [refl]: #219
#212 := [nnf-pos #220]: #211
#39 := (< #32 0::Int)
#41 := (implies #39 #40)
#42 := (forall (vars (?v0 Int)) #41)
#201 := (iff #42 #198)
#164 := (= 0::Int #35)
#170 := (not #39)
#171 := (or #170 #164)
#176 := (forall (vars (?v0 Int)) #171)
#199 := (iff #176 #198)
#196 := (iff #171 #193)
#190 := (or #144 #40)
#194 := (iff #190 #193)
#195 := [rewrite]: #194
#191 := (iff #171 #190)
#188 := (iff #164 #40)
#189 := [rewrite]: #188
#186 := (iff #170 #144)
#146 := (not #144)
#181 := (not #146)
#184 := (iff #181 #144)
#185 := [rewrite]: #184
#182 := (iff #170 #181)
#179 := (iff #39 #146)
#180 := [rewrite]: #179
#183 := [monotonicity #180]: #182
#187 := [trans #183 #185]: #186
#192 := [monotonicity #187 #189]: #191
#197 := [trans #192 #195]: #196
#200 := [quant-intro #197]: #199
#177 := (iff #42 #176)
#174 := (iff #41 #171)
#167 := (implies #39 #164)
#172 := (iff #167 #171)
#173 := [rewrite]: #172
#168 := (iff #41 #167)
#165 := (iff #40 #164)
#166 := [rewrite]: #165
#169 := [monotonicity #166]: #168
#175 := [trans #169 #173]: #174
#178 := [quant-intro #175]: #177
#202 := [trans #178 #200]: #201
#163 := [asserted]: #42
#203 := [mp #163 #202]: #198
#221 := [mp~ #203 #212]: #198
#711 := [mp #221 #710]: #706
#284 := (not #706)
#661 := (or #284 #388 #681)
#662 := (or #284 #389)
#385 := (iff #662 #661)
#659 := [rewrite]: #385
#384 := [quant-inst #65]: #662
#663 := [mp #384 #659]: #661
#440 := [unit-resolution #663 #711]: #389
#444 := [unit-resolution #440 #447]: #388
#552 := (not #388)
#437 := (or #552 #660)
#445 := [th-lemma arith triangle-eq]: #437
#438 := [unit-resolution #445 #444]: #660
#521 := (>= #11 0::Int)
#468 := (= #11 0::Int)
#368 := (f5 f6 #11)
#529 := (f3 f4 #368)
#530 := (= #529 0::Int)
#464 := (not #521)
#450 := [hypothesis]: #464
#532 := (or #521 #530)
#623 := (or #284 #521 #530)
#531 := (or #530 #521)
#627 := (or #284 #531)
#618 := (iff #627 #623)
#616 := (or #284 #532)
#607 := (iff #616 #623)
#617 := [rewrite]: #607
#608 := (iff #627 #616)
#533 := (iff #531 #532)
#626 := [rewrite]: #533
#605 := [monotonicity #626]: #608
#619 := [trans #605 #617]: #618
#614 := [quant-inst #11]: #627
#615 := [mp #614 #619]: #623
#454 := [unit-resolution #615 #711]: #532
#456 := [unit-resolution #454 #450]: #530
#455 := (= #11 #529)
#296 := (= f7 #368)
#26 := (:var 0 S3)
#27 := (f3 f4 #26)
#692 := (pattern #27)
#28 := (f5 f6 #27)
#120 := (= #26 #28)
#693 := (forall (vars (?v0 S3)) (:pat #692) #120)
#123 := (forall (vars (?v0 S3)) #120)
#696 := (iff #123 #693)
#694 := (iff #120 #120)
#695 := [refl]: #694
#697 := [quant-intro #695]: #696
#217 := (~ #123 #123)
#215 := (~ #120 #120)
#216 := [refl]: #215
#218 := [nnf-pos #216]: #217
#29 := (= #28 #26)
#30 := (forall (vars (?v0 S3)) #29)
#124 := (iff #30 #123)
#121 := (iff #29 #120)
#122 := [rewrite]: #121
#125 := [quant-intro #122]: #124
#119 := [asserted]: #30
#128 := [mp #119 #125]: #123
#207 := [mp~ #128 #218]: #123
#698 := [mp #207 #697]: #693
#370 := (not #693)
#349 := (or #370 #296)
#684 := [quant-inst #10]: #349
#457 := [unit-resolution #684 #698]: #296
#458 := [monotonicity #457]: #455
#446 := [trans #458 #456]: #468
#449 := (not #468)
#451 := (or #449 #521)
#452 := [th-lemma arith triangle-eq]: #451
#448 := [unit-resolution #452 #450 #446]: false
#453 := [lemma #448]: #521
#74 := (* -1::Int #11)
#75 := (+ #74 #13)
#78 := (f5 f6 #75)
#81 := (f3 f4 #78)
#656 := (+ #64 #81)
#371 := (+ #11 #656)
#642 := (<= #371 0::Int)
#377 := (= #371 0::Int)
#644 := (or #278 #377)
#127 := (= #32 #35)
#152 := (or #127 #146)
#700 := (forall (vars (?v0 Int)) (:pat #699) #152)
#157 := (forall (vars (?v0 Int)) #152)
#703 := (iff #157 #700)
#701 := (iff #152 #152)
#702 := [refl]: #701
#704 := [quant-intro #702]: #703
#209 := (~ #157 #157)
#208 := (~ #152 #152)
#205 := [refl]: #208
#210 := [nnf-pos #205]: #209
#36 := (= #35 #32)
#33 := (<= 0::Int #32)
#37 := (implies #33 #36)
#38 := (forall (vars (?v0 Int)) #37)
#160 := (iff #38 #157)
#134 := (not #33)
#135 := (or #134 #127)
#140 := (forall (vars (?v0 Int)) #135)
#158 := (iff #140 #157)
#155 := (iff #135 #152)
#149 := (or #146 #127)
#153 := (iff #149 #152)
#154 := [rewrite]: #153
#150 := (iff #135 #149)
#147 := (iff #134 #146)
#143 := (iff #33 #144)
#145 := [rewrite]: #143
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#156 := [trans #151 #154]: #155
#159 := [quant-intro #156]: #158
#141 := (iff #38 #140)
#138 := (iff #37 #135)
#131 := (implies #33 #127)
#136 := (iff #131 #135)
#137 := [rewrite]: #136
#132 := (iff #37 #131)
#129 := (iff #36 #127)
#130 := [rewrite]: #129
#133 := [monotonicity #130]: #132
#139 := [trans #133 #137]: #138
#142 := [quant-intro #139]: #141
#161 := [trans #142 #159]: #160
#126 := [asserted]: #38
#162 := [mp #126 #161]: #157
#206 := [mp~ #162 #210]: #157
#705 := [mp #206 #704]: #700
#672 := (not #700)
#652 := (or #672 #278 #377)
#390 := (>= #75 0::Int)
#391 := (not #390)
#374 := (= #75 #81)
#375 := (or #374 #391)
#493 := (or #672 #375)
#634 := (iff #493 #652)
#495 := (or #672 #644)
#639 := (iff #495 #652)
#640 := [rewrite]: #639
#637 := (iff #493 #495)
#651 := (iff #375 #644)
#647 := (or #377 #278)
#645 := (iff #647 #644)
#650 := [rewrite]: #645
#648 := (iff #375 #647)
#654 := (iff #391 #278)
#653 := (iff #390 #93)
#657 := [rewrite]: #653
#658 := [monotonicity #657]: #654
#376 := (iff #374 #377)
#655 := [rewrite]: #376
#649 := [monotonicity #655 #658]: #648
#646 := [trans #649 #650]: #651
#638 := [monotonicity #646]: #637
#635 := [trans #638 #640]: #634
#494 := [quant-inst #75]: #493
#641 := [mp #494 #635]: #652
#441 := [unit-resolution #641 #705]: #644
#442 := [unit-resolution #441 #435]: #377
#428 := (not #377)
#430 := (or #428 #642)
#431 := [th-lemma arith triangle-eq]: #430
#429 := [unit-resolution #431 #442]: #642
#309 := (not #642)
#465 := (not #660)
#467 := (or #464 #465 #466 #309)
#489 := [hypothesis]: #642
#459 := [hypothesis]: #521
#460 := [hypothesis]: #508
#461 := [hypothesis]: #660
#106 := (+ #81 #105)
#107 := (+ #71 #106)
#108 := (<= #107 0::Int)
#113 := (not #108)
#21 := (<= #11 #13)
#22 := (ite #21 f8 f7)
#23 := (f3 f4 #22)
#17 := (- #13 #11)
#18 := (f5 f6 #17)
#19 := (f3 f4 #18)
#14 := (- #11 #13)
#15 := (f5 f6 #14)
#16 := (f3 f4 #15)
#20 := (+ #16 #19)
#24 := (<= #20 #23)
#25 := (not #24)
#116 := (iff #25 #113)
#84 := (+ #71 #81)
#87 := (<= #84 #23)
#90 := (not #87)
#114 := (iff #90 #113)
#111 := (iff #87 #108)
#102 := (<= #84 #99)
#109 := (iff #102 #108)
#110 := [rewrite]: #109
#103 := (iff #87 #102)
#100 := (= #23 #99)
#97 := (= #22 #96)
#94 := (iff #21 #93)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#101 := [monotonicity #98]: #100
#104 := [monotonicity #101]: #103
#112 := [trans #104 #110]: #111
#115 := [monotonicity #112]: #114
#91 := (iff #25 #90)
#88 := (iff #24 #87)
#85 := (= #20 #84)
#82 := (= #19 #81)
#79 := (= #18 #78)
#76 := (= #17 #75)
#77 := [rewrite]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#72 := (= #16 #71)
#69 := (= #15 #68)
#66 := (= #14 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#73 := [monotonicity #70]: #72
#86 := [monotonicity #73 #83]: #85
#89 := [monotonicity #86]: #88
#92 := [monotonicity #89]: #91
#117 := [trans #92 #115]: #116
#62 := [asserted]: #25
#118 := [mp #62 #117]: #113
#462 := [th-lemma arith farkas -1 1 1 -1 1 #118 #461 #460 #459 #489]: false
#463 := [lemma #462]: #467
#432 := [unit-resolution #463 #429 #453 #438]: #466
#414 := (not #566)
#416 := (or #414 #508)
#417 := [th-lemma arith triangle-eq]: #416
#418 := [unit-resolution #417 #432 #439]: false
#419 := [lemma #418]: #681
#669 := (or #331 #341)
#673 := (or #672 #331 #341)
#342 := (= #65 #71)
#683 := (or #342 #341)
#668 := (or #672 #683)
#678 := (iff #668 #673)
#312 := (or #672 #669)
#317 := (iff #312 #673)
#318 := [rewrite]: #317
#675 := (iff #668 #312)
#670 := (iff #683 #669)
#332 := (iff #342 #331)
#333 := [rewrite]: #332
#671 := [monotonicity #333]: #670
#677 := [monotonicity #671]: #675
#676 := [trans #677 #318]: #678
#674 := [quant-inst #65]: #668
#679 := [mp #674 #676]: #673
#423 := [unit-resolution #679 #705]: #669
#424 := [unit-resolution #423 #419]: #331
#425 := (not #331)
#426 := (or #425 #666)
#415 := [th-lemma arith triangle-eq]: #426
#427 := [unit-resolution #415 #424]: #666
#504 := (not #666)
#404 := (or #278 #660 #504)
#406 := [th-lemma arith assign-bounds -1 -1]: #404
#407 := [unit-resolution #406 #420 #427]: #660
#408 := [unit-resolution #441 #420]: #377
#409 := [unit-resolution #431 #408]: #642
#410 := [unit-resolution #463 #409 #453 #407]: #466
#411 := [unit-resolution #417 #410 #422]: false
#412 := [lemma #411]: #278
#356 := (or #93 #363)
#367 := [def-axiom]: #356
#413 := [unit-resolution #367 #412]: #363
#398 := [monotonicity #413]: #471
#539 := (+ #11 #105)
#540 := (<= #539 0::Int)
#505 := (not #540)
#527 := (<= #81 0::Int)
#643 := (= #81 0::Int)
#629 := (or #93 #643)
#515 := (or #284 #93 #643)
#472 := (or #643 #390)
#516 := (or #284 #472)
#625 := (iff #516 #515)
#476 := (or #284 #629)
#621 := (iff #476 #515)
#622 := [rewrite]: #621
#624 := (iff #516 #476)
#630 := (iff #472 #629)
#474 := (or #643 #93)
#631 := (iff #474 #629)
#632 := [rewrite]: #631
#475 := (iff #472 #474)
#628 := [monotonicity #657]: #475
#633 := [trans #628 #632]: #630
#526 := [monotonicity #633]: #624
#510 := [trans #526 #622]: #625
#517 := [quant-inst #75]: #516
#525 := [mp #517 #510]: #515
#399 := [unit-resolution #525 #711]: #629
#400 := [unit-resolution #399 #412]: #643
#402 := (not #643)
#401 := (or #402 #527)
#403 := [th-lemma arith triangle-eq]: #401
#392 := [unit-resolution #403 #400]: #527
#503 := (not #527)
#393 := (or #503 #504 #505)
#620 := (>= #13 0::Int)
#492 := (= #13 0::Int)
#369 := (f5 f6 #13)
#609 := (f3 f4 #369)
#610 := (= #609 0::Int)
#502 := (not #620)
#469 := [hypothesis]: #502
#611 := (or #610 #620)
#613 := (or #284 #610 #620)
#597 := (or #284 #611)
#600 := (iff #597 #613)
#601 := [rewrite]: #600
#598 := [quant-inst #13]: #597
#602 := [mp #598 #601]: #613
#470 := [unit-resolution #602 #711]: #611
#477 := [unit-resolution #470 #469]: #610
#480 := (= #13 #609)
#366 := (= f8 #369)
#473 := (or #370 #366)
#680 := [quant-inst #12]: #473
#479 := [unit-resolution #680 #698]: #366
#481 := [monotonicity #479]: #480
#483 := [trans #481 #477]: #492
#484 := (not #492)
#485 := (or #484 #620)
#486 := [th-lemma arith triangle-eq]: #485
#487 := [unit-resolution #486 #469 #483]: false
#488 := [lemma #487]: #620
#506 := (or #502 #503 #504 #505)
#509 := [hypothesis]: #540
#498 := [hypothesis]: #666
#499 := [hypothesis]: #620
#500 := [hypothesis]: #527
#501 := [th-lemma arith farkas 1 -1 -1 -1 1 #500 #118 #499 #498 #509]: false
#507 := [lemma #501]: #506
#394 := [unit-resolution #507 #488]: #393
#386 := [unit-resolution #394 #392 #427]: #505
#395 := (not #471)
#396 := (or #395 #540)
#387 := [th-lemma arith triangle-eq]: #396
[unit-resolution #387 #386 #398]: false
unsat
6b12b12d963545c3e361f7fde145e90f2cb84243 123 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f7 :: S3
#14 := f7
#30 := 0::Int
decl f4 :: S2
#8 := f4
#15 := (f3 f4 f7)
#69 := -1::Int
#76 := (* -1::Int #15)
#10 := (f3 f4 f5)
#88 := (+ #10 #76)
#89 := (<= #88 0::Int)
#92 := (ite #89 f7 f5)
#95 := (f3 f4 #92)
#637 := (= #10 #95)
#366 := (= f5 #92)
#281 := (not #89)
#280 := (= f7 #92)
#479 := (not #280)
#652 := (= #15 #95)
#518 := [hypothesis]: #280
#519 := [monotonicity #518]: #652
#498 := (not #652)
#101 := (* -1::Int #95)
#647 := (+ #15 #101)
#653 := (>= #647 0::Int)
#655 := (not #653)
decl f6 :: S3
#11 := f6
#12 := (f3 f4 f6)
#102 := (+ #12 #101)
#103 := (<= #102 0::Int)
#104 := (not #103)
#77 := (+ #12 #76)
#78 := (<= #77 0::Int)
#79 := (not #78)
#72 := (* -1::Int #12)
#73 := (+ #10 #72)
#71 := (>= #73 0::Int)
#70 := (not #71)
#82 := (and #70 #79)
#85 := (not #82)
#109 := (or #85 #104)
#112 := (not #109)
#18 := (<= #10 #15)
#19 := (ite #18 f7 f5)
#20 := (f3 f4 #19)
#21 := (< #20 #12)
#16 := (< #15 #12)
#13 := (< #10 #12)
#17 := (and #13 #16)
#22 := (implies #17 #21)
#23 := (not #22)
#115 := (iff #23 #112)
#62 := (not #17)
#63 := (or #62 #21)
#66 := (not #63)
#113 := (iff #66 #112)
#110 := (iff #63 #109)
#107 := (iff #21 #104)
#98 := (< #95 #12)
#105 := (iff #98 #104)
#106 := [rewrite]: #105
#99 := (iff #21 #98)
#96 := (= #20 #95)
#93 := (= #19 #92)
#90 := (iff #18 #89)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#108 := [trans #100 #106]: #107
#86 := (iff #62 #85)
#83 := (iff #17 #82)
#80 := (iff #16 #79)
#81 := [rewrite]: #80
#74 := (iff #13 #70)
#75 := [rewrite]: #74
#84 := [monotonicity #75 #81]: #83
#87 := [monotonicity #84]: #86
#111 := [monotonicity #87 #108]: #110
#114 := [monotonicity #111]: #113
#67 := (iff #23 #66)
#64 := (iff #22 #63)
#65 := [rewrite]: #64
#68 := [monotonicity #65]: #67
#116 := [trans #68 #114]: #115
#61 := [asserted]: #23
#117 := [mp #61 #116]: #112
#121 := [not-or-elim #117]: #103
#118 := [not-or-elim #117]: #82
#120 := [and-elim #118]: #79
#654 := [hypothesis]: #653
#649 := [th-lemma arith farkas -1 -1 1 #654 #120 #121]: false
#496 := [lemma #649]: #655
#640 := (or #498 #653)
#641 := [th-lemma arith triangle-eq]: #640
#636 := [unit-resolution #641 #496]: #498
#520 := [unit-resolution #636 #519]: false
#627 := [lemma #520]: #479
#367 := (or #281 #280)
#368 := [def-axiom]: #367
#624 := [unit-resolution #368 #627]: #281
#359 := (or #89 #366)
#370 := [def-axiom]: #359
#625 := [unit-resolution #370 #624]: #366
#628 := [monotonicity #625]: #637
#631 := (not #637)
#638 := (+ #10 #101)
#645 := (>= #638 0::Int)
#475 := (not #645)
#119 := [and-elim #118]: #70
#639 := [hypothesis]: #645
#646 := [th-lemma arith farkas -1 1 1 #639 #119 #121]: false
#477 := [lemma #646]: #475
#632 := (or #631 #645)
#634 := [th-lemma arith triangle-eq]: #632
#529 := [unit-resolution #634 #477]: #631
[unit-resolution #529 #628]: false
unsat
0359c130ac749e033da47f8655a4eeb481185054 156 0
#2 := false
decl f6 :: S3
#11 := f6
decl f5 :: S3
#9 := f5
#25 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#59 := -1::Int
#60 := (* -1::Int #12)
#10 := (f3 f4 f5)
#61 := (+ #10 #60)
#69 := (>= #61 0::Int)
#71 := (ite #69 f5 f6)
#62 := (<= #61 0::Int)
#65 := (ite #62 f6 f5)
#74 := (= #65 #71)
#328 := (= f5 #71)
#485 := (iff #328 #74)
#585 := (iff #74 #328)
#624 := (= #65 f5)
#323 := (= f5 #65)
#238 := (not #62)
#237 := (= f6 #65)
#593 := (not #237)
#589 := (iff #237 #74)
#435 := (iff #74 #237)
#602 := (= #65 f6)
#432 := (iff #602 #237)
#434 := [commutativity]: #432
#596 := (iff #74 #602)
#595 := (= #71 f6)
#256 := (= f6 #71)
#621 := (not #256)
#622 := [hypothesis]: #621
#309 := (or #69 #256)
#644 := [def-axiom]: #309
#345 := [unit-resolution #644 #622]: #69
#329 := (not #69)
#326 := (or #329 #328)
#330 := [def-axiom]: #326
#619 := [unit-resolution #330 #345]: #328
#455 := (= f6 f5)
decl f7 :: (-> S4 Int S3)
decl f8 :: S4
#19 := f8
#646 := (f7 f8 #10)
#606 := (= #646 f5)
#303 := (= f5 #646)
#20 := (:var 0 S3)
#21 := (f3 f4 #20)
#652 := (pattern #21)
#22 := (f7 f8 #21)
#58 := (= #20 #22)
#653 := (forall (vars (?v0 S3)) (:pat #652) #58)
#83 := (forall (vars (?v0 S3)) #58)
#656 := (iff #83 #653)
#654 := (iff #58 #58)
#655 := [refl]: #654
#657 := [quant-intro #655]: #656
#177 := (~ #83 #83)
#175 := (~ #58 #58)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#23 := (= #22 #20)
#24 := (forall (vars (?v0 S3)) #23)
#84 := (iff #24 #83)
#81 := (iff #23 #58)
#82 := [rewrite]: #81
#85 := [quant-intro #82]: #84
#57 := [asserted]: #24
#88 := [mp #57 #85]: #83
#167 := [mp~ #88 #178]: #83
#658 := [mp #167 #657]: #653
#314 := (not #653)
#315 := (or #314 #303)
#647 := [quant-inst #9]: #315
#344 := [unit-resolution #647 #658]: #303
#612 := [symm #344]: #606
#453 := (= f6 #646)
#433 := (f7 f8 #12)
#610 := (= #433 #646)
#609 := (= #12 #10)
#607 := (= #10 #12)
#331 := (not #323)
#77 := (not #74)
#613 := (iff #77 #331)
#615 := (iff #74 #323)
#336 := (iff #624 #323)
#337 := [commutativity]: #336
#334 := (iff #74 #624)
#623 := (= #71 f5)
#620 := [symm #619]: #623
#335 := [monotonicity #620]: #334
#616 := [trans #335 #337]: #615
#617 := [monotonicity #616]: #613
#15 := (<= #12 #10)
#16 := (ite #15 f5 f6)
#13 := (<= #10 #12)
#14 := (ite #13 f6 f5)
#17 := (= #14 #16)
#18 := (not #17)
#78 := (iff #18 #77)
#75 := (iff #17 #74)
#72 := (= #16 #71)
#68 := (iff #15 #69)
#70 := [rewrite]: #68
#73 := [monotonicity #70]: #72
#66 := (= #14 #65)
#63 := (iff #13 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#76 := [monotonicity #67 #73]: #75
#79 := [monotonicity #76]: #78
#56 := [asserted]: #18
#80 := [mp #56 #79]: #77
#614 := [mp #80 #617]: #331
#316 := (or #62 #323)
#327 := [def-axiom]: #316
#618 := [unit-resolution #327 #614]: #62
#608 := [th-lemma arith eq-propagate 1 1 #345 #618]: #607
#604 := [symm #608]: #609
#611 := [monotonicity #604]: #610
#640 := (= f6 #433)
#650 := (or #314 #640)
#645 := [quant-inst #11]: #650
#605 := [unit-resolution #645 #658]: #640
#454 := [trans #605 #611]: #453
#597 := [trans #454 #612]: #455
#598 := [trans #597 #619]: #256
#599 := [unit-resolution #622 #598]: false
#600 := [lemma #599]: #256
#601 := [symm #600]: #595
#603 := [monotonicity #601]: #596
#588 := [trans #603 #434]: #435
#591 := [symm #588]: #589
#594 := [hypothesis]: #237
#592 := [mp #594 #591]: #74
#590 := [unit-resolution #80 #592]: false
#475 := [lemma #590]: #593
#324 := (or #238 #237)
#325 := [def-axiom]: #324
#476 := [unit-resolution #325 #475]: #238
#581 := [unit-resolution #327 #476]: #323
#582 := [symm #581]: #624
#470 := [monotonicity #582]: #585
#487 := [symm #470]: #485
#477 := (or #69 #62)
#436 := [th-lemma arith farkas 1 1]: #477
#584 := [unit-resolution #436 #476]: #69
#486 := [unit-resolution #330 #584]: #328
#488 := [mp #486 #487]: #74
[unit-resolution #80 #488]: false
unsat
84ed7acbaf0767eafcf3a11dec0969faefcbf9ae 282 0
#2 := false
decl f5 :: S3
#9 := f5
decl f6 :: (-> S4 Int S3)
#12 := 0::Int
decl f7 :: S4
#11 := f7
#13 := (f6 f7 0::Int)
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#8 := f4
#14 := (f3 f4 #13)
#61 := -1::Int
#62 := (* -1::Int #14)
#10 := (f3 f4 f5)
#63 := (+ #10 #62)
#64 := (<= #63 0::Int)
#67 := (ite #64 #13 f5)
#70 := (= f5 #67)
#237 := (= #13 #67)
#73 := (not #70)
#15 := (<= #10 #14)
#16 := (ite #15 #13 f5)
#17 := (= #16 f5)
#18 := (not #17)
#76 := (iff #18 #73)
#55 := (= f5 #16)
#58 := (not #55)
#74 := (iff #58 #73)
#71 := (iff #55 #70)
#68 := (= #16 #67)
#65 := (iff #15 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#59 := (iff #18 #58)
#56 := (iff #17 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#77 := [trans #60 #75]: #76
#54 := [asserted]: #18
#78 := [mp #54 #77]: #73
#325 := (or #64 #70)
#316 := [def-axiom]: #325
#608 := [unit-resolution #316 #78]: #64
#323 := (not #64)
#238 := (or #323 #237)
#324 := [def-axiom]: #238
#591 := [unit-resolution #324 #608]: #237
#477 := (= f5 #13)
#327 := (f6 f7 #10)
#475 := (= #327 #13)
#618 := (= #10 0::Int)
#621 := (f3 f4 #327)
#622 := (= #621 0::Int)
#607 := (<= #10 0::Int)
#278 := (<= #14 0::Int)
#647 := (= #14 0::Int)
#24 := (:var 0 Int)
#26 := (f6 f7 #24)
#659 := (pattern #26)
#104 := (>= #24 0::Int)
#106 := (not #104)
#27 := (f3 f4 #26)
#87 := (= #24 #27)
#112 := (or #87 #106)
#660 := (forall (vars (?v0 Int)) (:pat #659) #112)
#117 := (forall (vars (?v0 Int)) #112)
#663 := (iff #117 #660)
#661 := (iff #112 #112)
#662 := [refl]: #661
#664 := [quant-intro #662]: #663
#169 := (~ #117 #117)
#168 := (~ #112 #112)
#165 := [refl]: #168
#170 := [nnf-pos #165]: #169
#28 := (= #27 #24)
#25 := (<= 0::Int #24)
#29 := (implies #25 #28)
#30 := (forall (vars (?v0 Int)) #29)
#120 := (iff #30 #117)
#94 := (not #25)
#95 := (or #94 #87)
#100 := (forall (vars (?v0 Int)) #95)
#118 := (iff #100 #117)
#115 := (iff #95 #112)
#109 := (or #106 #87)
#113 := (iff #109 #112)
#114 := [rewrite]: #113
#110 := (iff #95 #109)
#107 := (iff #94 #106)
#103 := (iff #25 #104)
#105 := [rewrite]: #103
#108 := [monotonicity #105]: #107
#111 := [monotonicity #108]: #110
#116 := [trans #111 #114]: #115
#119 := [quant-intro #116]: #118
#101 := (iff #30 #100)
#98 := (iff #29 #95)
#91 := (implies #25 #87)
#96 := (iff #91 #95)
#97 := [rewrite]: #96
#92 := (iff #29 #91)
#89 := (iff #28 #87)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#99 := [trans #93 #97]: #98
#102 := [quant-intro #99]: #101
#121 := [trans #102 #119]: #120
#86 := [asserted]: #30
#122 := [mp #86 #121]: #117
#166 := [mp~ #122 #170]: #117
#665 := [mp #166 #664]: #660
#630 := (not #660)
#631 := (or #630 #647)
#646 := (>= 0::Int 0::Int)
#303 := (not #646)
#314 := (= 0::Int #14)
#315 := (or #314 #303)
#632 := (or #630 #315)
#628 := (iff #632 #631)
#272 := (iff #631 #631)
#635 := [rewrite]: #272
#293 := (iff #315 #647)
#286 := (or #647 false)
#291 := (iff #286 #647)
#292 := [rewrite]: #291
#627 := (iff #315 #286)
#302 := (iff #303 false)
#1 := true
#651 := (not true)
#306 := (iff #651 false)
#642 := [rewrite]: #306
#641 := (iff #303 #651)
#650 := (iff #646 true)
#645 := [rewrite]: #650
#301 := [monotonicity #645]: #641
#643 := [trans #301 #642]: #302
#648 := (iff #314 #647)
#649 := [rewrite]: #648
#290 := [monotonicity #649 #643]: #627
#629 := [trans #290 #292]: #293
#634 := [monotonicity #629]: #628
#637 := [trans #634 #635]: #628
#633 := [quant-inst #12]: #632
#277 := [mp #633 #637]: #631
#609 := [unit-resolution #277 #665]: #647
#604 := (not #647)
#605 := (or #604 #278)
#610 := [th-lemma arith triangle-eq]: #605
#611 := [unit-resolution #610 #609]: #278
#606 := (not #607)
#612 := [hypothesis]: #606
#453 := [th-lemma arith farkas -1 1 1 #612 #611 #608]: false
#454 := [lemma #453]: #607
#244 := (>= #10 0::Int)
#455 := (not #622)
#597 := [hypothesis]: #455
#345 := (or #244 #622)
#32 := (= #27 0::Int)
#153 := (or #32 #104)
#666 := (forall (vars (?v0 Int)) (:pat #659) #153)
#158 := (forall (vars (?v0 Int)) #153)
#669 := (iff #158 #666)
#667 := (iff #153 #153)
#668 := [refl]: #667
#670 := [quant-intro #668]: #669
#171 := (~ #158 #158)
#179 := (~ #153 #153)
#180 := [refl]: #179
#172 := [nnf-pos #180]: #171
#31 := (< #24 0::Int)
#33 := (implies #31 #32)
#34 := (forall (vars (?v0 Int)) #33)
#161 := (iff #34 #158)
#124 := (= 0::Int #27)
#130 := (not #31)
#131 := (or #130 #124)
#136 := (forall (vars (?v0 Int)) #131)
#159 := (iff #136 #158)
#156 := (iff #131 #153)
#150 := (or #104 #32)
#154 := (iff #150 #153)
#155 := [rewrite]: #154
#151 := (iff #131 #150)
#148 := (iff #124 #32)
#149 := [rewrite]: #148
#146 := (iff #130 #104)
#141 := (not #106)
#144 := (iff #141 #104)
#145 := [rewrite]: #144
#142 := (iff #130 #141)
#139 := (iff #31 #106)
#140 := [rewrite]: #139
#143 := [monotonicity #140]: #142
#147 := [trans #143 #145]: #146
#152 := [monotonicity #147 #149]: #151
#157 := [trans #152 #155]: #156
#160 := [quant-intro #157]: #159
#137 := (iff #34 #136)
#134 := (iff #33 #131)
#127 := (implies #31 #124)
#132 := (iff #127 #131)
#133 := [rewrite]: #132
#128 := (iff #33 #127)
#125 := (iff #32 #124)
#126 := [rewrite]: #125
#129 := [monotonicity #126]: #128
#135 := [trans #129 #133]: #134
#138 := [quant-intro #135]: #137
#162 := [trans #138 #160]: #161
#123 := [asserted]: #34
#163 := [mp #123 #162]: #158
#181 := [mp~ #163 #172]: #158
#671 := [mp #181 #670]: #666
#620 := (not #666)
#624 := (or #620 #244 #622)
#344 := (or #622 #244)
#334 := (or #620 #344)
#613 := (iff #334 #624)
#336 := (or #620 #345)
#616 := (iff #336 #624)
#331 := [rewrite]: #616
#337 := (iff #334 #336)
#619 := (iff #344 #345)
#623 := [rewrite]: #619
#615 := [monotonicity #623]: #337
#617 := [trans #615 #331]: #613
#335 := [quant-inst #10]: #334
#614 := [mp #335 #617]: #624
#598 := [unit-resolution #614 #671]: #345
#599 := [unit-resolution #598 #597]: #244
#600 := (not #244)
#594 := (or #618 #606 #600)
#595 := [th-lemma arith triangle-eq]: #594
#601 := [unit-resolution #595 #599 #454]: #618
#432 := (= #621 #10)
#596 := (= #327 f5)
#328 := (= f5 #327)
#19 := (:var 0 S3)
#20 := (f3 f4 #19)
#652 := (pattern #20)
#21 := (f6 f7 #20)
#80 := (= #19 #21)
#653 := (forall (vars (?v0 S3)) (:pat #652) #80)
#83 := (forall (vars (?v0 S3)) #80)
#656 := (iff #83 #653)
#654 := (iff #80 #80)
#655 := [refl]: #654
#657 := [quant-intro #655]: #656
#177 := (~ #83 #83)
#175 := (~ #80 #80)
#176 := [refl]: #175
#178 := [nnf-pos #176]: #177
#22 := (= #21 #19)
#23 := (forall (vars (?v0 S3)) #22)
#84 := (iff #23 #83)
#81 := (iff #22 #80)
#82 := [rewrite]: #81
#85 := [quant-intro #82]: #84
#79 := [asserted]: #23
#88 := [mp #79 #85]: #83
#167 := [mp~ #88 #178]: #83
#658 := [mp #167 #657]: #653
#326 := (not #653)
#330 := (or #326 #328)
#309 := [quant-inst #9]: #330
#602 := [unit-resolution #309 #658]: #328
#603 := [symm #602]: #596
#434 := [monotonicity #603]: #432
#435 := [trans #434 #601]: #622
#588 := [unit-resolution #597 #435]: false
#589 := [lemma #588]: #622
#592 := (= #10 #621)
#590 := [monotonicity #602]: #592
#593 := [trans #590 #589]: #618
#476 := [monotonicity #593]: #475
#436 := [trans #602 #476]: #477
#584 := [trans #436 #591]: #70
[unit-resolution #78 #584]: false
unsat
068d7b92a99be7dc4cc7b601acb4e869b185110c 142 0
#2 := false
#8 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#10 := f5
decl f4 :: S2
#9 := f4
#11 := (f3 f4 f5)
#630 := (= #11 0::Int)
decl f6 :: (-> S4 Int S3)
decl f7 :: S4
#14 := f7
#216 := (f6 f7 #11)
#217 := (f3 f4 #216)
#303 := (= #217 0::Int)
#20 := (:var 0 Int)
#22 := (f6 f7 #20)
#639 := (pattern #22)
#84 := (>= #20 0::Int)
#23 := (f3 f4 #22)
#28 := (= #23 0::Int)
#132 := (or #28 #84)
#646 := (forall (vars (?v0 Int)) (:pat #639) #132)
#137 := (forall (vars (?v0 Int)) #132)
#649 := (iff #137 #646)
#647 := (iff #132 #132)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#150 := (~ #137 #137)
#158 := (~ #132 #132)
#159 := [refl]: #158
#151 := [nnf-pos #159]: #150
#27 := (< #20 0::Int)
#29 := (implies #27 #28)
#30 := (forall (vars (?v0 Int)) #29)
#140 := (iff #30 #137)
#103 := (= 0::Int #23)
#109 := (not #27)
#110 := (or #109 #103)
#115 := (forall (vars (?v0 Int)) #110)
#138 := (iff #115 #137)
#135 := (iff #110 #132)
#129 := (or #84 #28)
#133 := (iff #129 #132)
#134 := [rewrite]: #133
#130 := (iff #110 #129)
#127 := (iff #103 #28)
#128 := [rewrite]: #127
#125 := (iff #109 #84)
#85 := (not #84)
#120 := (not #85)
#123 := (iff #120 #84)
#124 := [rewrite]: #123
#121 := (iff #109 #120)
#118 := (iff #27 #85)
#119 := [rewrite]: #118
#122 := [monotonicity #119]: #121
#126 := [trans #122 #124]: #125
#131 := [monotonicity #126 #128]: #130
#136 := [trans #131 #134]: #135
#139 := [quant-intro #136]: #138
#116 := (iff #30 #115)
#113 := (iff #29 #110)
#106 := (implies #27 #103)
#111 := (iff #106 #110)
#112 := [rewrite]: #111
#107 := (iff #29 #106)
#104 := (iff #28 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#114 := [trans #108 #112]: #113
#117 := [quant-intro #114]: #116
#141 := [trans #117 #139]: #140
#102 := [asserted]: #30
#142 := [mp #102 #141]: #137
#160 := [mp~ #142 #151]: #137
#651 := [mp #160 #650]: #646
#55 := (>= #11 0::Int)
#56 := (not #55)
#12 := (<= 0::Int #11)
#13 := (not #12)
#57 := (iff #13 #56)
#53 := (iff #12 #55)
#54 := [rewrite]: #53
#58 := [monotonicity #54]: #57
#50 := [asserted]: #13
#59 := [mp #50 #58]: #56
#309 := (not #646)
#288 := (or #309 #55 #303)
#307 := (or #303 #55)
#624 := (or #309 #307)
#627 := (iff #624 #288)
#235 := (or #55 #303)
#282 := (or #309 #235)
#293 := (iff #282 #288)
#294 := [rewrite]: #293
#413 := (iff #624 #282)
#308 := (iff #307 #235)
#305 := [rewrite]: #308
#620 := [monotonicity #305]: #413
#628 := [trans #620 #294]: #627
#626 := [quant-inst #11]: #624
#629 := [mp #626 #628]: #288
#631 := [unit-resolution #629 #59 #651]: #303
#280 := (= #11 #217)
#302 := (= f5 #216)
#15 := (:var 0 S3)
#16 := (f3 f4 #15)
#632 := (pattern #16)
#17 := (f6 f7 #16)
#52 := (= #15 #17)
#633 := (forall (vars (?v0 S3)) (:pat #632) #52)
#62 := (forall (vars (?v0 S3)) #52)
#636 := (iff #62 #633)
#634 := (iff #52 #52)
#635 := [refl]: #634
#637 := [quant-intro #635]: #636
#156 := (~ #62 #62)
#154 := (~ #52 #52)
#155 := [refl]: #154
#157 := [nnf-pos #155]: #156
#18 := (= #17 #15)
#19 := (forall (vars (?v0 S3)) #18)
#63 := (iff #19 #62)
#60 := (iff #18 #52)
#61 := [rewrite]: #60
#64 := [quant-intro #61]: #63
#51 := [asserted]: #19
#67 := [mp #51 #64]: #62
#146 := [mp~ #67 #157]: #62
#638 := [mp #146 #637]: #633
#304 := (not #633)
#295 := (or #304 #302)
#306 := [quant-inst #10]: #295
#621 := [unit-resolution #306 #638]: #302
#285 := [monotonicity #621]: #280
#622 := [trans #285 #631]: #630
#281 := (not #630)
#623 := (or #281 #55)
#265 := [th-lemma arith triangle-eq]: #623
[unit-resolution #265 #59 #622]: false
unsat
5c3635bde03236679c5aa59e91b8371f17c3315c 103 0
#2 := false
decl f6 :: (-> S4 Int S3)
#13 := 1::Int
decl f7 :: S4
#16 := f7
#17 := (f6 f7 1::Int)
decl f5 :: S3
#10 := f5
#18 := (= f5 #17)
decl f3 :: (-> S2 S3 Int)
decl f4 :: S2
#9 := f4
#11 := (f3 f4 f5)
#256 := (f6 f7 #11)
#367 := (= #256 #17)
#645 := (= #17 #256)
#655 := (= 1::Int #11)
#296 := (= #11 1::Int)
#14 := (<= #11 1::Int)
#8 := 0::Int
#64 := (<= #11 0::Int)
#65 := (not #64)
#71 := (and #14 #65)
#76 := (not #71)
#82 := (or #18 #76)
#87 := (not #82)
#12 := (< 0::Int #11)
#15 := (and #12 #14)
#19 := (implies #15 #18)
#20 := (not #19)
#90 := (iff #20 #87)
#57 := (not #15)
#58 := (or #57 #18)
#61 := (not #58)
#88 := (iff #61 #87)
#85 := (iff #58 #82)
#79 := (or #76 #18)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #58 #79)
#77 := (iff #57 #76)
#74 := (iff #15 #71)
#68 := (and #65 #14)
#72 := (iff #68 #71)
#73 := [rewrite]: #72
#69 := (iff #15 #68)
#66 := (iff #12 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [monotonicity #86]: #88
#62 := (iff #20 #61)
#59 := (iff #19 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#91 := [trans #63 #89]: #90
#56 := [asserted]: #20
#92 := [mp #56 #91]: #87
#95 := [not-or-elim #92]: #71
#96 := [and-elim #95]: #14
#97 := [and-elim #95]: #65
#657 := [th-lemma arith eq-propagate 0 0 #97 #96]: #296
#658 := [symm #657]: #655
#352 := [monotonicity #658]: #645
#368 := [symm #352]: #367
#341 := (= f5 #256)
#21 := (:var 0 S3)
#22 := (f3 f4 #21)
#671 := (pattern #22)
#23 := (f6 f7 #22)
#99 := (= #21 #23)
#672 := (forall (vars (?v0 S3)) (:pat #671) #99)
#102 := (forall (vars (?v0 S3)) #99)
#675 := (iff #102 #672)
#673 := (iff #99 #99)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#200 := (~ #102 #102)
#198 := (~ #99 #99)
#199 := [refl]: #198
#201 := [nnf-pos #199]: #200
#24 := (= #23 #21)
#25 := (forall (vars (?v0 S3)) #24)
#103 := (iff #25 #102)
#100 := (iff #24 #99)
#101 := [rewrite]: #100
#104 := [quant-intro #101]: #103
#98 := [asserted]: #25
#107 := [mp #98 #104]: #102
#190 := [mp~ #107 #201]: #102
#677 := [mp #190 #676]: #672
#343 := (not #672)
#334 := (or #343 #341)
#345 := [quant-inst #10]: #334
#644 := [unit-resolution #345 #677]: #341
#369 := [trans #644 #368]: #18
#93 := (not #18)
#94 := [not-or-elim #92]: #93
[unit-resolution #94 #369]: false
unsat
90ecf2a0f6182d20e85e5caa15ec520fe6639d37 22 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#11 := (<= #10 #10)
#12 := (not #11)
#60 := (iff #12 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #12 #55)
#53 := (iff #11 true)
#54 := [rewrite]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#50 := [asserted]: #12
[mp #50 #61]: false
unsat
a9de0c4310af4f5739de23ef772c907d133787bf 56 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#14 := 3::Int
#16 := (* 3::Int #12)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#15 := (* 3::Int #10)
#17 := (<= #15 #16)
#13 := (<= #10 #12)
#18 := (implies #13 #17)
#19 := (not #18)
#90 := (iff #19 false)
#58 := (not #13)
#59 := (or #58 #17)
#62 := (not #59)
#88 := (iff #62 false)
#1 := true
#83 := (not true)
#86 := (iff #83 false)
#87 := [rewrite]: #86
#84 := (iff #62 #83)
#81 := (iff #59 true)
#26 := 0::Int
#65 := -1::Int
#66 := (* -1::Int #12)
#67 := (+ #10 #66)
#68 := (<= #67 0::Int)
#71 := (not #68)
#76 := (or #71 #68)
#79 := (iff #76 true)
#80 := [rewrite]: #79
#77 := (iff #59 #76)
#74 := (iff #17 #68)
#75 := [rewrite]: #74
#72 := (iff #58 #71)
#69 := (iff #13 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#78 := [monotonicity #73 #75]: #77
#82 := [trans #78 #80]: #81
#85 := [monotonicity #82]: #84
#89 := [trans #85 #87]: #88
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#91 := [trans #64 #89]: #90
#57 := [asserted]: #19
[mp #57 #91]: false
unsat
d762995aadd1557f770900e730ed2ac53179faf4 61 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#14 := 3::Int
#16 := (* 3::Int #12)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#15 := (* 3::Int #10)
#17 := (< #15 #16)
#13 := (< #10 #12)
#18 := (implies #13 #17)
#19 := (not #18)
#95 := (iff #19 false)
#58 := (not #13)
#59 := (or #58 #17)
#62 := (not #59)
#93 := (iff #62 false)
#1 := true
#88 := (not true)
#91 := (iff #88 false)
#92 := [rewrite]: #91
#89 := (iff #62 #88)
#86 := (iff #59 true)
#26 := 0::Int
#65 := -1::Int
#68 := (* -1::Int #12)
#69 := (+ #10 #68)
#67 := (>= #69 0::Int)
#66 := (not #67)
#80 := (or #67 #66)
#84 := (iff #80 true)
#85 := [rewrite]: #84
#82 := (iff #59 #80)
#81 := (iff #17 #66)
#79 := [rewrite]: #81
#77 := (iff #58 #67)
#72 := (not #66)
#75 := (iff #72 #67)
#76 := [rewrite]: #75
#73 := (iff #58 #72)
#70 := (iff #13 #66)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#78 := [trans #74 #76]: #77
#83 := [monotonicity #78 #79]: #82
#87 := [trans #83 #85]: #86
#90 := [monotonicity #87]: #89
#94 := [trans #90 #92]: #93
#63 := (iff #19 #62)
#60 := (iff #18 #59)
#61 := [rewrite]: #60
#64 := [monotonicity #61]: #63
#96 := [trans #64 #94]: #95
#57 := [asserted]: #19
[mp #57 #96]: false
unsat
a713cfdad41abece70ff154554a3a68431ecc97d 57 0
#2 := false
#23 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#62 := -1::Int
#65 := (* -1::Int #12)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#66 := (+ #10 #65)
#76 := (<= #66 0::Int)
#89 := (not #76)
#64 := (>= #66 0::Int)
#79 := (or #64 #76)
#82 := (not #79)
#14 := (<= #10 #12)
#13 := (< #10 #12)
#15 := (implies #13 #14)
#16 := (not #15)
#85 := (iff #16 #82)
#55 := (not #13)
#56 := (or #55 #14)
#59 := (not #56)
#83 := (iff #59 #82)
#80 := (iff #56 #79)
#77 := (iff #14 #76)
#78 := [rewrite]: #77
#74 := (iff #55 #64)
#63 := (not #64)
#69 := (not #63)
#72 := (iff #69 #64)
#73 := [rewrite]: #72
#70 := (iff #55 #69)
#67 := (iff #13 #63)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#75 := [trans #71 #73]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#60 := (iff #16 #59)
#57 := (iff #15 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#86 := [trans #61 #84]: #85
#54 := [asserted]: #16
#87 := [mp #54 #86]: #82
#90 := [not-or-elim #87]: #89
#88 := [not-or-elim #87]: #63
#249 := (or #76 #64)
#335 := [th-lemma arith farkas 1 1]: #249
#250 := [unit-resolution #335 #88]: #76
[unit-resolution #250 #90]: false
unsat
7f843b4a4724aa1a653b0a828c65e6e29162883a 78 0
#2 := false
#25 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#75 := -1::Int
#76 := (* -1::Int #12)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#77 := (+ #10 #76)
#82 := (>= #77 0::Int)
#78 := (<= #77 -1::Int)
#334 := (not #78)
#81 := (not #82)
#368 := [hypothesis]: #81
#347 := (or #334 #82)
#92 := (iff #78 #82)
#14 := 1::Int
#15 := (+ #10 1::Int)
#16 := (<= #15 #12)
#13 := (< #10 #12)
#17 := (iff #13 #16)
#18 := (not #17)
#95 := (iff #18 #92)
#69 := (not #13)
#57 := (+ 1::Int #10)
#60 := (<= #57 #12)
#70 := (iff #60 #69)
#93 := (iff #70 #92)
#90 := (iff #69 #82)
#85 := (not #81)
#88 := (iff #85 #82)
#89 := [rewrite]: #88
#86 := (iff #69 #85)
#83 := (iff #13 #81)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#91 := [trans #87 #89]: #90
#79 := (iff #60 #78)
#80 := [rewrite]: #79
#94 := [monotonicity #80 #91]: #93
#73 := (iff #18 #70)
#63 := (iff #13 #60)
#66 := (not #63)
#71 := (iff #66 #70)
#72 := [rewrite]: #71
#67 := (iff #18 #66)
#64 := (iff #17 #63)
#61 := (iff #16 #60)
#58 := (= #15 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#65 := [monotonicity #62]: #64
#68 := [monotonicity #65]: #67
#74 := [trans #68 #72]: #73
#96 := [trans #74 #94]: #95
#56 := [asserted]: #18
#97 := [mp #56 #96]: #92
#256 := (not #92)
#345 := (or #334 #82 #256)
#346 := [def-axiom]: #345
#344 := [unit-resolution #346 #97]: #347
#369 := [unit-resolution #344 #368]: #334
#263 := [th-lemma arith farkas 1 1 #368 #369]: false
#639 := [lemma #263]: #82
#640 := (or #81 #334)
#362 := [th-lemma arith farkas 1 1]: #640
#363 := [unit-resolution #362 #639]: #334
#342 := (or #78 #81)
#341 := (or #78 #81 #256)
#257 := [def-axiom]: #341
#343 := [unit-resolution #257 #97]: #342
[unit-resolution #343 #363 #639]: false
unsat
8b705266e9e4f0706f9d3c335e68f3d792ff2c66 19 0
#2 := false
decl f3 :: (-> S2 S3 Int)
decl f5 :: S3
#9 := f5
decl f4 :: S2
#8 := f4
#10 := (f3 f4 f5)
#11 := (< #10 #10)
#12 := (not #11)
#13 := (not #12)
#56 := (iff #13 false)
#54 := (iff #11 false)
#55 := [rewrite]: #54
#52 := (iff #13 #11)
#53 := [rewrite]: #52
#57 := [trans #53 #55]: #56
#51 := [asserted]: #13
[mp #51 #57]: false
unsat
a47f8885da8e6a2dd769c0d058b020acc80a3413 81 0
#2 := false
#27 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#14 := f7
decl f4 :: S2
#8 := f4
#15 := (f3 f4 f7)
#75 := -1::Int
#76 := (* -1::Int #15)
decl f6 :: S3
#11 := f6
#12 := (f3 f4 f6)
#77 := (+ #12 #76)
#78 := (<= #77 0::Int)
#88 := (* -1::Int #12)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#89 := (+ #10 #88)
#90 := (<= #89 0::Int)
#93 := (not #90)
#84 := (+ #10 #76)
#85 := (<= #84 0::Int)
#81 := (not #78)
#102 := (or #81 #85 #93)
#107 := (not #102)
#17 := (<= #10 #15)
#16 := (<= #12 #15)
#18 := (implies #16 #17)
#13 := (<= #10 #12)
#19 := (implies #13 #18)
#20 := (not #19)
#110 := (iff #20 #107)
#59 := (not #16)
#60 := (or #59 #17)
#66 := (not #13)
#67 := (or #66 #60)
#72 := (not #67)
#108 := (iff #72 #107)
#105 := (iff #67 #102)
#96 := (or #81 #85)
#99 := (or #93 #96)
#103 := (iff #99 #102)
#104 := [rewrite]: #103
#100 := (iff #67 #99)
#97 := (iff #60 #96)
#86 := (iff #17 #85)
#87 := [rewrite]: #86
#82 := (iff #59 #81)
#79 := (iff #16 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#98 := [monotonicity #83 #87]: #97
#94 := (iff #66 #93)
#91 := (iff #13 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#101 := [monotonicity #95 #98]: #100
#106 := [trans #101 #104]: #105
#109 := [monotonicity #106]: #108
#73 := (iff #20 #72)
#70 := (iff #19 #67)
#63 := (implies #13 #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #19 #63)
#61 := (iff #18 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#71 := [trans #65 #69]: #70
#74 := [monotonicity #71]: #73
#111 := [trans #74 #109]: #110
#58 := [asserted]: #20
#112 := [mp #58 #111]: #107
#113 := [not-or-elim #112]: #78
#114 := (not #85)
#115 := [not-or-elim #112]: #114
#116 := [not-or-elim #112]: #90
[th-lemma arith farkas 1 -1 1 #116 #115 #113]: false
unsat
855f8ec444546329497deff0085d8e9571a25bb7 86 0
#2 := false
#27 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#14 := f7
decl f4 :: S2
#8 := f4
#15 := (f3 f4 f7)
#75 := -1::Int
#76 := (* -1::Int #15)
decl f6 :: S3
#11 := f6
#12 := (f3 f4 f6)
#77 := (+ #12 #76)
#78 := (<= #77 0::Int)
#90 := (* -1::Int #12)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#91 := (+ #10 #90)
#89 := (>= #91 0::Int)
#84 := (+ #10 #76)
#85 := (<= #84 0::Int)
#81 := (not #78)
#107 := (or #81 #85 #89)
#112 := (not #107)
#17 := (<= #10 #15)
#16 := (<= #12 #15)
#18 := (implies #16 #17)
#13 := (< #10 #12)
#19 := (implies #13 #18)
#20 := (not #19)
#115 := (iff #20 #112)
#59 := (not #16)
#60 := (or #59 #17)
#66 := (not #13)
#67 := (or #66 #60)
#72 := (not #67)
#113 := (iff #72 #112)
#110 := (iff #67 #107)
#101 := (or #81 #85)
#104 := (or #89 #101)
#108 := (iff #104 #107)
#109 := [rewrite]: #108
#105 := (iff #67 #104)
#102 := (iff #60 #101)
#86 := (iff #17 #85)
#87 := [rewrite]: #86
#82 := (iff #59 #81)
#79 := (iff #16 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#103 := [monotonicity #83 #87]: #102
#99 := (iff #66 #89)
#88 := (not #89)
#94 := (not #88)
#97 := (iff #94 #89)
#98 := [rewrite]: #97
#95 := (iff #66 #94)
#92 := (iff #13 #88)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#100 := [trans #96 #98]: #99
#106 := [monotonicity #100 #103]: #105
#111 := [trans #106 #109]: #110
#114 := [monotonicity #111]: #113
#73 := (iff #20 #72)
#70 := (iff #19 #67)
#63 := (implies #13 #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #19 #63)
#61 := (iff #18 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#71 := [trans #65 #69]: #70
#74 := [monotonicity #71]: #73
#116 := [trans #74 #114]: #115
#58 := [asserted]: #20
#117 := [mp #58 #116]: #112
#118 := [not-or-elim #117]: #78
#119 := (not #85)
#120 := [not-or-elim #117]: #119
#121 := [not-or-elim #117]: #88
[th-lemma arith farkas 1 1 1 #121 #120 #118]: false
unsat
5b8b51f4b0b17c7b86316066d52d623031015f7f 86 0
#2 := false
#27 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f6 :: S3
#11 := f6
decl f4 :: S2
#8 := f4
#12 := (f3 f4 f6)
#75 := -1::Int
#93 := (* -1::Int #12)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#94 := (+ #10 #93)
#95 := (<= #94 0::Int)
#98 := (not #95)
decl f7 :: S3
#14 := f7
#15 := (f3 f4 f7)
#78 := (* -1::Int #15)
#89 := (+ #10 #78)
#90 := (<= #89 0::Int)
#79 := (+ #12 #78)
#77 := (>= #79 0::Int)
#107 := (or #77 #90 #98)
#112 := (not #107)
#17 := (<= #10 #15)
#16 := (< #12 #15)
#18 := (implies #16 #17)
#13 := (<= #10 #12)
#19 := (implies #13 #18)
#20 := (not #19)
#115 := (iff #20 #112)
#59 := (not #16)
#60 := (or #59 #17)
#66 := (not #13)
#67 := (or #66 #60)
#72 := (not #67)
#113 := (iff #72 #112)
#110 := (iff #67 #107)
#101 := (or #77 #90)
#104 := (or #98 #101)
#108 := (iff #104 #107)
#109 := [rewrite]: #108
#105 := (iff #67 #104)
#102 := (iff #60 #101)
#91 := (iff #17 #90)
#92 := [rewrite]: #91
#87 := (iff #59 #77)
#76 := (not #77)
#82 := (not #76)
#85 := (iff #82 #77)
#86 := [rewrite]: #85
#83 := (iff #59 #82)
#80 := (iff #16 #76)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#103 := [monotonicity #88 #92]: #102
#99 := (iff #66 #98)
#96 := (iff #13 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#106 := [monotonicity #100 #103]: #105
#111 := [trans #106 #109]: #110
#114 := [monotonicity #111]: #113
#73 := (iff #20 #72)
#70 := (iff #19 #67)
#63 := (implies #13 #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #19 #63)
#61 := (iff #18 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#71 := [trans #65 #69]: #70
#74 := [monotonicity #71]: #73
#116 := [trans #74 #114]: #115
#58 := [asserted]: #20
#117 := [mp #58 #116]: #112
#121 := [not-or-elim #117]: #95
#119 := (not #90)
#120 := [not-or-elim #117]: #119
#118 := [not-or-elim #117]: #76
[th-lemma arith farkas 1 1 1 #118 #120 #121]: false
unsat
1dc9e0401f3e6d68ca3f3c4cf618ee7dc6f0ce31 91 0
#2 := false
#27 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#14 := f7
decl f4 :: S2
#8 := f4
#15 := (f3 f4 f7)
#75 := -1::Int
#78 := (* -1::Int #15)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#91 := (+ #10 #78)
#90 := (>= #91 0::Int)
decl f6 :: S3
#11 := f6
#12 := (f3 f4 f6)
#96 := (* -1::Int #12)
#97 := (+ #10 #96)
#95 := (>= #97 0::Int)
#89 := (not #90)
#79 := (+ #12 #78)
#77 := (>= #79 0::Int)
#113 := (or #77 #89 #95)
#118 := (not #113)
#17 := (< #10 #15)
#16 := (< #12 #15)
#18 := (implies #16 #17)
#13 := (< #10 #12)
#19 := (implies #13 #18)
#20 := (not #19)
#121 := (iff #20 #118)
#59 := (not #16)
#60 := (or #59 #17)
#66 := (not #13)
#67 := (or #66 #60)
#72 := (not #67)
#119 := (iff #72 #118)
#116 := (iff #67 #113)
#107 := (or #77 #89)
#110 := (or #95 #107)
#114 := (iff #110 #113)
#115 := [rewrite]: #114
#111 := (iff #67 #110)
#108 := (iff #60 #107)
#92 := (iff #17 #89)
#93 := [rewrite]: #92
#87 := (iff #59 #77)
#76 := (not #77)
#82 := (not #76)
#85 := (iff #82 #77)
#86 := [rewrite]: #85
#83 := (iff #59 #82)
#80 := (iff #16 #76)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#88 := [trans #84 #86]: #87
#109 := [monotonicity #88 #93]: #108
#105 := (iff #66 #95)
#94 := (not #95)
#100 := (not #94)
#103 := (iff #100 #95)
#104 := [rewrite]: #103
#101 := (iff #66 #100)
#98 := (iff #13 #94)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#106 := [trans #102 #104]: #105
#112 := [monotonicity #106 #109]: #111
#117 := [trans #112 #115]: #116
#120 := [monotonicity #117]: #119
#73 := (iff #20 #72)
#70 := (iff #19 #67)
#63 := (implies #13 #60)
#68 := (iff #63 #67)
#69 := [rewrite]: #68
#64 := (iff #19 #63)
#61 := (iff #18 #60)
#62 := [rewrite]: #61
#65 := [monotonicity #62]: #64
#71 := [trans #65 #69]: #70
#74 := [monotonicity #71]: #73
#122 := [trans #74 #120]: #121
#58 := [asserted]: #20
#123 := [mp #58 #122]: #118
#125 := [not-or-elim #123]: #90
#124 := [not-or-elim #123]: #76
#126 := [not-or-elim #123]: #94
[th-lemma arith farkas 1 1 1 #126 #124 #125]: false
unsat
16e044a831706a18531bf6261ba78fef95060579 75 0
#2 := false
#28 := 0::Int
decl f3 :: (-> S2 S3 Int)
decl f7 :: S3
#14 := f7
decl f4 :: S2
#8 := f4
#15 := (f3 f4 f7)
#67 := -1::Int
#75 := (* -1::Int #15)
decl f5 :: S3
#9 := f5
#10 := (f3 f4 f5)
#86 := (+ #10 #75)
#87 := (<= #86 0::Int)
#88 := (not #87)
decl f6 :: S3
#11 := f6
#12 := (f3 f4 f6)
#76 := (+ #12 #75)
#74 := (>= #76 0::Int)
#77 := (not #74)
#70 := (* -1::Int #12)
#71 := (+ #10 #70)
#69 := (>= #71 0::Int)
#68 := (not #69)
#80 := (and #68 #77)
#83 := (not #80)
#98 := (or #83 #87)
#101 := (not #98)
#18 := (< #15 #10)
#19 := (not #18)
#16 := (< #12 #15)
#13 := (< #10 #12)
#17 := (and #13 #16)
#20 := (implies #17 #19)
#21 := (not #20)
#104 := (iff #21 #101)
#60 := (not #17)
#61 := (or #60 #19)
#64 := (not #61)
#102 := (iff #64 #101)
#99 := (iff #61 #98)
#96 := (iff #19 #87)
#91 := (not #88)
#94 := (iff #91 #87)
#95 := [rewrite]: #94
#92 := (iff #19 #91)
#89 := (iff #18 #88)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#97 := [trans #93 #95]: #96
#84 := (iff #60 #83)
#81 := (iff #17 #80)
#78 := (iff #16 #77)
#79 := [rewrite]: #78
#72 := (iff #13 #68)
#73 := [rewrite]: #72
#82 := [monotonicity #73 #79]: #81
#85 := [monotonicity #82]: #84
#100 := [monotonicity #85 #97]: #99
#103 := [monotonicity #100]: #102
#65 := (iff #21 #64)
#62 := (iff #20 #61)
#63 := [rewrite]: #62
#66 := [monotonicity #63]: #65
#105 := [trans #66 #103]: #104
#59 := [asserted]: #21
#106 := [mp #59 #105]: #101
#110 := [not-or-elim #106]: #88
#107 := [not-or-elim #106]: #80
#109 := [and-elim #107]: #77
#108 := [and-elim #107]: #68
[th-lemma arith farkas 1 1 1 #108 #109 #110]: false
unsat
13113e7e58018c6880ea2f28cb5993925582157c 17 0
#2 := false
#8 := 0::Int
#9 := (= 0::Int 0::Int)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
1056717a1a09b6c4176c8b78807918dcff0f057a 25 0
#2 := false
#8 := 0::Int
#9 := (- 0::Int)
#10 := (= 0::Int #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#32 := (= #9 0::Int)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
52057012d500bf36246da2f6fe0e5f4fead2daa8 17 0
#2 := false
#8 := 1::Int
#9 := (= 1::Int 1::Int)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
3896508560f827467603181397afe4ea7af60b1b 34 0
#2 := false
#8 := 1::Int
#9 := (- 1::Int)
#10 := (= #9 1::Int)
#11 := (not #10)
#12 := (not #11)
#55 := (iff #12 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 false)
#33 := -1::Int
#36 := (= -1::Int 1::Int)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (= #9 -1::Int)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #12
[mp #32 #56]: false
unsat
abda142ed88ecbb996b79ee8162fe49b344031b3 40 0
#2 := false
#12 := 567::Int
#10 := 345::Int
#8 := 123::Int
#9 := (- 123::Int)
#11 := (+ #9 345::Int)
#13 := (< #11 567::Int)
#14 := (not #13)
#61 := (iff #14 false)
#41 := 222::Int
#46 := (< 222::Int 567::Int)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (= #11 222::Int)
#35 := -123::Int
#38 := (+ -123::Int 345::Int)
#42 := (= #38 222::Int)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #9 -123::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
52ee66296beec0b85b106a54f57287052dcd7f89 30 0
#2 := false
#10 := 2345678901::Int
#8 := 123456789::Int
#9 := (- 123456789::Int)
#11 := (< #9 2345678901::Int)
#12 := (not #11)
#51 := (iff #12 false)
#33 := -123456789::Int
#36 := (< -123456789::Int 2345678901::Int)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #9 -123456789::Int)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
cc3c0a2b103dc2bb6601e0a4c48514f8376c297a 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 0::Int
#10 := (+ f3 0::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
fd47edbfbac88ee3d94d488f80d6a8ea5bf561a8 26 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 0::Int
#10 := (+ 0::Int f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
567ac5e5181b99e579edcd5a30f3a17097bdc207 29 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
2fe26988f5a773923b0b53e62aca5ed502114903 33 0
#2 := false
decl f5 :: Int
#10 := f5
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#51 := (iff #16 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #16 #46)
#44 := (iff #15 true)
#39 := (= #12 #12)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #15 #39)
#37 := (= #14 #12)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #16
[mp #36 #52]: false
unsat
aa9232285ab331eb0061966d9cc17b455a15a8b2 45 0
#2 := false
decl f4 :: Int
#9 := f4
#13 := (- f4)
decl f3 :: Int
#8 := f3
#14 := (= f3 #13)
#11 := 0::Int
#10 := (+ f3 f4)
#12 := (= #10 0::Int)
#15 := (iff #12 #14)
#16 := (not #15)
#65 := (iff #16 false)
#50 := (not #12)
#37 := -1::Int
#38 := (* -1::Int f4)
#41 := (= f3 #38)
#51 := (iff #41 #50)
#63 := (iff #51 false)
#58 := (iff #12 #50)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #51 #58)
#56 := (iff #41 #12)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #16 #51)
#44 := (iff #12 #41)
#47 := (not #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#39 := (= #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#66 := [trans #55 #64]: #65
#36 := [asserted]: #16
[mp #36 #66]: false
unsat
3f272fd1319f78b4692aa5dda96df513e4645a9a 26 0
#2 := false
#8 := 1::Int
#9 := (- 1::Int)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -1::Int
#35 := (= -1::Int -1::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -1::Int)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
e2a7b8949fe3993d5fd2b8dd48b8d65ca6a5debe 26 0
#2 := false
#8 := 3::Int
#9 := (- 3::Int)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -3::Int
#35 := (= -3::Int -3::Int)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -3::Int)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
6f4d8de64d01428967bef903e3d6b1e134e99c36 58 0
#2 := false
decl f3 :: Int
#8 := f3
#10 := 0::Int
#12 := (< 0::Int f3)
#9 := (- f3)
#11 := (< #9 0::Int)
#13 := (iff #11 #12)
#14 := (not #13)
#79 := (iff #14 false)
#53 := (not #12)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< #36 0::Int)
#54 := (iff #39 #53)
#77 := (iff #54 false)
#59 := (<= f3 0::Int)
#60 := (not #59)
#72 := (iff #60 #59)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #54 #72)
#70 := (iff #53 #59)
#65 := (not #60)
#68 := (iff #65 #59)
#69 := [rewrite]: #68
#66 := (iff #53 #65)
#63 := (iff #12 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #39 #60)
#62 := [rewrite]: #61
#74 := [monotonicity #62 #71]: #73
#78 := [trans #74 #76]: #77
#57 := (iff #14 #54)
#45 := (iff #12 #39)
#50 := (not #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#42 := (iff #39 #12)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #13 #42)
#40 := (iff #11 #39)
#37 := (= #9 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#80 := [trans #58 #78]: #79
#34 := [asserted]: #14
[mp #34 #80]: false
unsat
564c0a73934063d90154f68605ccc2409e9fa075 61 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#11 := (- f3)
#12 := (< #11 0::Int)
#10 := (< 0::Int f3)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< #36 0::Int)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (<= f3 0::Int)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
62e66d279aac101c29ec561e3c1aa729670803a3 61 0
#2 := false
decl f3 :: Int
#8 := f3
#11 := (- f3)
#9 := 0::Int
#12 := (< 0::Int #11)
#10 := (< f3 0::Int)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Int
#36 := (* -1::Int f3)
#39 := (< 0::Int #36)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (>= f3 0::Int)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
36e3e0be50e13bfd349cb4dd2f24507689560060 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 0::Int
#10 := (- f3 0::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
967752e39c59bb7230849d17d3298eda01ba97f0 32 0
#2 := false
decl f3 :: Int
#9 := f3
#11 := (- f3)
#8 := 0::Int
#10 := (- 0::Int f3)
#12 := (= #10 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := -1::Int
#35 := (* -1::Int f3)
#40 := (= #35 #35)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (= #11 #35)
#39 := [rewrite]: #38
#36 := (= #10 #35)
#37 := [rewrite]: #36
#42 := [monotonicity #37 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
d66c19efaea02c4da5b9f725e7d8d3733e147b06 64 0
#2 := false
#12 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::Int)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#83 := (iff #15 false)
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#41 := (< #38 0::Int)
#47 := (not #10)
#48 := (or #47 #41)
#53 := (not #48)
#81 := (iff #53 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #53 #76)
#74 := (iff #48 true)
#57 := (>= #38 0::Int)
#56 := (not #57)
#69 := (or #57 #56)
#72 := (iff #69 true)
#73 := [rewrite]: #72
#70 := (iff #48 #69)
#67 := (iff #41 #56)
#68 := [rewrite]: #67
#65 := (iff #47 #57)
#60 := (not #56)
#63 := (iff #60 #57)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#58 := (iff #10 #56)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#71 := [monotonicity #66 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#44 := (implies #10 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#84 := [trans #55 #82]: #83
#35 := [asserted]: #15
[mp #35 #84]: false
unsat
b4a0e97ac26aaa849b0de7e06daad43acc3105c3 44 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#63 := (iff #14 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #14 #58)
#56 := (iff #13 true)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (= #12 #37)
#40 := (* -1::Int f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #10 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #14
[mp #34 #64]: false
unsat
f0c92a75694daf72953722c261a7985603bb0bf1 42 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#61 := (iff #14 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #14 #56)
#54 := (iff #13 true)
#35 := -1::Int
#36 := (* -1::Int f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (= #12 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #12 #42)
#40 := (= #11 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #10 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
8923322f057ed7cee840582974da3314f48d3c1d 48 0
#2 := false
decl f5 :: Int
#11 := f5
decl f4 :: Int
#9 := f4
#13 := (+ f4 f5)
decl f3 :: Int
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#66 := (iff #16 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #16 #61)
#59 := (iff #15 true)
#37 := -1::Int
#45 := (* -1::Int f5)
#38 := (* -1::Int f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #15 #54)
#52 := (= #14 #47)
#53 := [rewrite]: #52
#50 := (= #12 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #12 #42)
#40 := (= #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #16
[mp #36 #67]: false
unsat
1d827628bfc865305d062976dd88c9223e790cae 26 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#10 := (* f3 0::Int)
#11 := (= #10 0::Int)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
268dc80516cad8e0537058bf237f1fac47b44dd9 26 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#10 := (* 0::Int f3)
#11 := (= #10 0::Int)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Int 0::Int)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
d2498e6f1e4e863ac89298e0d00130df98aa8bf9 26 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := 1::Int
#10 := (* f3 1::Int)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
d26161837b1f05cfdb35001c90ead1460ca18bec 26 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 1::Int
#10 := (* 1::Int f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
855f0121ef7db6c69742bc5a6c6901549956abdf 40 0
#2 := false
decl f3 :: Int
#8 := f3
#12 := (- f3)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (* f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#35 := -1::Int
#41 := (* -1::Int f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #41)
#47 := [rewrite]: #46
#44 := (= #11 #41)
#38 := (* f3 -1::Int)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #10 -1::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #14
[mp #34 #61]: false
unsat
5d21e0de4aaaaeca789bd4695bdd117eea163e38 35 0
#2 := false
decl f3 :: Int
#10 := f3
#12 := (- f3)
#8 := 1::Int
#9 := (- 1::Int)
#11 := (* #9 f3)
#13 := (= #11 #12)
#14 := (not #13)
#55 := (iff #14 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #14 #50)
#48 := (iff #13 true)
#35 := -1::Int
#38 := (* -1::Int f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (= #12 #38)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #9 -1::Int)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #14
[mp #34 #56]: false
unsat
9d12a5c7c6846be4a5b4be5e467c3f4cb34e4d39 28 0
#2 := false
#8 := 3::Int
decl f3 :: Int
#9 := f3
#11 := (* f3 3::Int)
#10 := (* 3::Int f3)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
84f32aa4eeda327e1332824fe194fc79ffa88b5a 259 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#754 := (pattern #17)
#9 := 0::Int
#92 := -1::Int
#96 := (* -1::Int #16)
#93 := (* -1::Int #14)
#99 := (div #93 #96)
#256 := (* -1::Int #99)
#257 := (+ #17 #256)
#258 := (= #257 0::Int)
#27 := (div #14 #16)
#253 := (* -1::Int #27)
#254 := (+ #17 #253)
#255 := (= #254 0::Int)
#131 := (>= #14 0::Int)
#124 := (<= #16 0::Int)
#216 := (or #124 #131)
#217 := (not #216)
#120 := (<= #14 0::Int)
#214 := (or #120 #124)
#215 := (not #214)
#220 := (or #215 #217)
#259 := (ite #220 #255 #258)
#252 := (= #17 0::Int)
#19 := (= #16 0::Int)
#18 := (= #14 0::Int)
#20 := (or #18 #19)
#260 := (ite #20 #252 #259)
#755 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #754) #260)
#263 := (forall (vars (?v0 Int) (?v1 Int)) #260)
#758 := (iff #263 #755)
#756 := (iff #260 #260)
#757 := [refl]: #756
#759 := [quant-intro #757]: #758
#223 := (ite #220 #27 #99)
#226 := (ite #20 0::Int #223)
#229 := (= #17 #226)
#232 := (forall (vars (?v0 Int) (?v1 Int)) #229)
#264 := (iff #232 #263)
#261 := (iff #229 #260)
#262 := [rewrite]: #261
#265 := [quant-intro #262]: #264
#132 := (not #131)
#125 := (not #124)
#135 := (and #125 #132)
#121 := (not #120)
#128 := (and #121 #125)
#138 := (or #128 #135)
#141 := (ite #138 #27 #99)
#144 := (ite #20 0::Int #141)
#147 := (= #17 #144)
#150 := (forall (vars (?v0 Int) (?v1 Int)) #147)
#233 := (iff #150 #232)
#230 := (iff #147 #229)
#227 := (= #144 #226)
#224 := (= #141 #223)
#221 := (iff #138 #220)
#218 := (iff #135 #217)
#219 := [rewrite]: #218
#208 := (iff #128 #215)
#209 := [rewrite]: #208
#222 := [monotonicity #209 #219]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [quant-intro #231]: #233
#212 := (~ #150 #150)
#210 := (~ #147 #147)
#211 := [refl]: #210
#213 := [nnf-pos #211]: #212
#29 := (- #16)
#28 := (- #14)
#30 := (div #28 #29)
#22 := (< 0::Int #16)
#24 := (< #14 0::Int)
#25 := (and #24 #22)
#21 := (< 0::Int #14)
#23 := (and #21 #22)
#26 := (or #23 #25)
#31 := (ite #26 #27 #30)
#32 := (ite #20 0::Int #31)
#33 := (= #17 #32)
#34 := (forall (vars (?v0 Int) (?v1 Int)) #33)
#153 := (iff #34 #150)
#86 := (and #22 #24)
#89 := (or #23 #86)
#102 := (ite #89 #27 #99)
#80 := (= 0::Int #16)
#77 := (= 0::Int #14)
#83 := (or #77 #80)
#105 := (ite #83 0::Int #102)
#108 := (= #17 #105)
#111 := (forall (vars (?v0 Int) (?v1 Int)) #108)
#151 := (iff #111 #150)
#148 := (iff #108 #147)
#145 := (= #105 #144)
#142 := (= #102 #141)
#139 := (iff #89 #138)
#136 := (iff #86 #135)
#133 := (iff #24 #132)
#134 := [rewrite]: #133
#126 := (iff #22 #125)
#127 := [rewrite]: #126
#137 := [monotonicity #127 #134]: #136
#129 := (iff #23 #128)
#122 := (iff #21 #121)
#123 := [rewrite]: #122
#130 := [monotonicity #123 #127]: #129
#140 := [monotonicity #130 #137]: #139
#143 := [monotonicity #140]: #142
#118 := (iff #83 #20)
#116 := (iff #80 #19)
#117 := [rewrite]: #116
#114 := (iff #77 #18)
#115 := [rewrite]: #114
#119 := [monotonicity #115 #117]: #118
#146 := [monotonicity #119 #143]: #145
#149 := [monotonicity #146]: #148
#152 := [quant-intro #149]: #151
#112 := (iff #34 #111)
#109 := (iff #33 #108)
#106 := (= #32 #105)
#103 := (= #31 #102)
#100 := (= #30 #99)
#97 := (= #29 #96)
#98 := [rewrite]: #97
#94 := (= #28 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#90 := (iff #26 #89)
#87 := (iff #25 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#104 := [monotonicity #91 #101]: #103
#84 := (iff #20 #83)
#81 := (iff #19 #80)
#82 := [rewrite]: #81
#78 := (iff #18 #77)
#79 := [rewrite]: #78
#85 := [monotonicity #79 #82]: #84
#107 := [monotonicity #85 #104]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#154 := [trans #113 #152]: #153
#76 := [asserted]: #34
#155 := [mp #76 #154]: #150
#204 := [mp~ #155 #213]: #150
#235 := [mp #204 #234]: #232
#266 := [mp #235 #265]: #263
#760 := [mp #266 #759]: #755
#10 := (f4 f5 0::Int)
#11 := (f3 #10 0::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#712 := (not #755)
#713 := (or #712 #12)
#340 := (* -1::Int 0::Int)
#425 := (div #340 #340)
#426 := (* -1::Int #425)
#427 := (+ #11 #426)
#418 := (= #427 0::Int)
#429 := (div 0::Int 0::Int)
#430 := (* -1::Int #429)
#358 := (+ #11 #430)
#431 := (= #358 0::Int)
#428 := (>= 0::Int 0::Int)
#432 := (<= 0::Int 0::Int)
#411 := (or #432 #428)
#746 := (not #411)
#748 := (or #432 #432)
#405 := (not #748)
#535 := (or #405 #746)
#742 := (ite #535 #431 #418)
#416 := (= 0::Int 0::Int)
#417 := (or #416 #416)
#749 := (ite #417 #12 #742)
#708 := (or #712 #749)
#555 := (iff #708 #713)
#557 := (iff #713 #713)
#699 := [rewrite]: #557
#706 := (iff #749 #12)
#1 := true
#716 := (ite true #12 #431)
#710 := (iff #716 #12)
#711 := [rewrite]: #710
#720 := (iff #749 #716)
#715 := (iff #742 #431)
#438 := (ite false #431 #431)
#718 := (iff #438 #431)
#433 := [rewrite]: #718
#439 := (iff #742 #438)
#436 := (iff #418 #431)
#722 := (= #427 #358)
#721 := (= #426 #430)
#446 := (= #425 #429)
#723 := (= #340 0::Int)
#724 := [rewrite]: #723
#447 := [monotonicity #724 #724]: #446
#725 := [monotonicity #447]: #721
#726 := [monotonicity #725]: #722
#437 := [monotonicity #726]: #436
#453 := (iff #535 false)
#727 := (or false false)
#451 := (iff #727 false)
#452 := [rewrite]: #451
#728 := (iff #535 #727)
#738 := (iff #746 false)
#394 := (not true)
#732 := (iff #394 false)
#733 := [rewrite]: #732
#380 := (iff #746 #394)
#739 := (iff #411 true)
#752 := (or true true)
#743 := (iff #752 true)
#403 := [rewrite]: #743
#374 := (iff #411 #752)
#730 := (iff #428 true)
#736 := [rewrite]: #730
#404 := (iff #432 true)
#745 := [rewrite]: #404
#737 := [monotonicity #745 #736]: #374
#379 := [trans #737 #403]: #739
#740 := [monotonicity #379]: #380
#741 := [trans #740 #733]: #738
#734 := (iff #405 false)
#395 := (iff #405 #394)
#392 := (iff #748 true)
#388 := (iff #748 #752)
#729 := [monotonicity #745 #745]: #388
#393 := [trans #729 #403]: #392
#731 := [monotonicity #393]: #395
#735 := [trans #731 #733]: #734
#450 := [monotonicity #735 #741]: #728
#346 := [trans #450 #452]: #453
#717 := [monotonicity #346 #437]: #439
#719 := [trans #717 #433]: #715
#408 := (iff #417 true)
#747 := (iff #417 #752)
#750 := (iff #416 true)
#751 := [rewrite]: #750
#753 := [monotonicity #751 #751]: #747
#744 := [trans #753 #403]: #408
#709 := [monotonicity #744 #719]: #720
#707 := [trans #709 #711]: #706
#556 := [monotonicity #707]: #555
#700 := [trans #556 #699]: #555
#714 := [quant-inst #9 #9]: #708
#701 := [mp #714 #700]: #713
[unit-resolution #701 #65 #760]: false
unsat
9fbbb1a5156a787e9413d37350d9f3d76a725d67 272 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#755 := (pattern #18)
#11 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #17)
#94 := (* -1::Int #15)
#100 := (div #94 #97)
#257 := (* -1::Int #100)
#258 := (+ #18 #257)
#259 := (= #258 0::Int)
#28 := (div #15 #17)
#254 := (* -1::Int #28)
#255 := (+ #18 #254)
#256 := (= #255 0::Int)
#132 := (>= #15 0::Int)
#125 := (<= #17 0::Int)
#217 := (or #125 #132)
#218 := (not #217)
#121 := (<= #15 0::Int)
#215 := (or #121 #125)
#216 := (not #215)
#221 := (or #216 #218)
#260 := (ite #221 #256 #259)
#253 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#261 := (ite #21 #253 #260)
#756 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #755) #261)
#264 := (forall (vars (?v0 Int) (?v1 Int)) #261)
#759 := (iff #264 #756)
#757 := (iff #261 #261)
#758 := [refl]: #757
#760 := [quant-intro #758]: #759
#224 := (ite #221 #28 #100)
#227 := (ite #21 0::Int #224)
#230 := (= #18 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#265 := (iff #233 #264)
#262 := (iff #230 #261)
#263 := [rewrite]: #262
#266 := [quant-intro #263]: #265
#133 := (not #132)
#126 := (not #125)
#136 := (and #126 #133)
#122 := (not #121)
#129 := (and #122 #126)
#139 := (or #129 #136)
#142 := (ite #139 #28 #100)
#145 := (ite #21 0::Int #142)
#148 := (= #18 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#234 := (iff #151 #233)
#231 := (iff #148 #230)
#228 := (= #145 #227)
#225 := (= #142 #224)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#220 := [rewrite]: #219
#209 := (iff #129 #216)
#210 := [rewrite]: #209
#223 := [monotonicity #210 #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#213 := (~ #151 #151)
#211 := (~ #148 #148)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#154 := (iff #35 #151)
#87 := (and #23 #25)
#90 := (or #24 #87)
#103 := (ite #90 #28 #100)
#81 := (= 0::Int #17)
#78 := (= 0::Int #15)
#84 := (or #78 #81)
#106 := (ite #84 0::Int #103)
#109 := (= #18 #106)
#112 := (forall (vars (?v0 Int) (?v1 Int)) #109)
#152 := (iff #112 #151)
#149 := (iff #109 #148)
#146 := (= #106 #145)
#143 := (= #103 #142)
#140 := (iff #90 #139)
#137 := (iff #87 #136)
#134 := (iff #25 #133)
#135 := [rewrite]: #134
#127 := (iff #23 #126)
#128 := [rewrite]: #127
#138 := [monotonicity #128 #135]: #137
#130 := (iff #24 #129)
#123 := (iff #22 #122)
#124 := [rewrite]: #123
#131 := [monotonicity #124 #128]: #130
#141 := [monotonicity #131 #138]: #140
#144 := [monotonicity #141]: #143
#119 := (iff #84 #21)
#117 := (iff #81 #20)
#118 := [rewrite]: #117
#115 := (iff #78 #19)
#116 := [rewrite]: #115
#120 := [monotonicity #116 #118]: #119
#147 := [monotonicity #120 #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#113 := (iff #35 #112)
#110 := (iff #34 #109)
#107 := (= #33 #106)
#104 := (= #32 #103)
#101 := (= #31 #100)
#98 := (= #30 #97)
#99 := [rewrite]: #98
#95 := (= #29 #94)
#96 := [rewrite]: #95
#102 := [monotonicity #96 #99]: #101
#91 := (iff #27 #90)
#88 := (iff #26 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#105 := [monotonicity #92 #102]: #104
#85 := (iff #21 #84)
#82 := (iff #20 #81)
#83 := [rewrite]: #82
#79 := (iff #19 #78)
#80 := [rewrite]: #79
#86 := [monotonicity #80 #83]: #85
#108 := [monotonicity #86 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [quant-intro #111]: #113
#155 := [trans #114 #153]: #154
#77 := [asserted]: #35
#156 := [mp #77 #155]: #151
#205 := [mp~ #156 #214]: #151
#236 := [mp #205 #235]: #233
#267 := [mp #236 #266]: #264
#761 := [mp #267 #760]: #756
decl f6 :: Int
#9 := f6
#10 := (f4 f5 f6)
#12 := (f3 #10 0::Int)
#13 := (= #12 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#697 := (not #756)
#698 := (or #697 #13)
#341 := (* -1::Int 0::Int)
#426 := (* -1::Int f6)
#427 := (div #426 #341)
#428 := (* -1::Int #427)
#419 := (+ #12 #428)
#430 := (= #419 0::Int)
#431 := (div f6 0::Int)
#359 := (* -1::Int #431)
#432 := (+ #12 #359)
#429 := (= #432 0::Int)
#433 := (>= f6 0::Int)
#412 := (<= 0::Int 0::Int)
#747 := (or #412 #433)
#749 := (not #747)
#406 := (<= f6 0::Int)
#536 := (or #406 #412)
#743 := (not #536)
#417 := (or #743 #749)
#418 := (ite #417 #429 #430)
#750 := (= 0::Int 0::Int)
#751 := (= f6 0::Int)
#752 := (or #751 #750)
#753 := (ite #752 #13 #418)
#704 := (or #697 #753)
#699 := (iff #704 #698)
#535 := (iff #698 #698)
#537 := [rewrite]: #535
#702 := (iff #753 #13)
#438 := (div #426 0::Int)
#718 := (* -1::Int #438)
#716 := (+ #12 #718)
#721 := (= #716 0::Int)
#1 := true
#556 := (ite true #13 #721)
#700 := (iff #556 #13)
#701 := [rewrite]: #700
#557 := (iff #753 #556)
#709 := (iff #418 #721)
#712 := (ite false #429 #721)
#713 := (iff #712 #721)
#714 := [rewrite]: #713
#707 := (iff #418 #712)
#710 := (iff #430 #721)
#720 := (= #419 #716)
#719 := (= #428 #718)
#439 := (= #427 #438)
#727 := (= #341 0::Int)
#437 := [rewrite]: #727
#440 := [monotonicity #437]: #439
#434 := [monotonicity #440]: #719
#717 := [monotonicity #434]: #720
#711 := [monotonicity #717]: #710
#726 := (iff #417 false)
#724 := (or false false)
#448 := (iff #724 false)
#722 := [rewrite]: #448
#725 := (iff #417 #724)
#454 := (iff #749 false)
#736 := (not true)
#375 := (iff #736 false)
#738 := [rewrite]: #375
#452 := (iff #749 #736)
#729 := (iff #747 true)
#381 := (or true #433)
#742 := (iff #381 true)
#728 := [rewrite]: #742
#741 := (iff #747 #381)
#730 := (iff #412 true)
#393 := [rewrite]: #730
#739 := [monotonicity #393]: #741
#451 := [trans #739 #728]: #729
#453 := [monotonicity #451]: #452
#347 := [trans #453 #738]: #454
#740 := (iff #743 false)
#731 := (iff #743 #736)
#734 := (iff #536 true)
#394 := (or #406 true)
#732 := (iff #394 true)
#733 := [rewrite]: #732
#395 := (iff #536 #394)
#396 := [monotonicity #393]: #395
#735 := [trans #396 #733]: #734
#737 := [monotonicity #735]: #731
#380 := [trans #737 #738]: #740
#447 := [monotonicity #380 #347]: #725
#723 := [trans #447 #722]: #726
#708 := [monotonicity #723 #711]: #707
#715 := [trans #708 #714]: #709
#746 := (iff #752 true)
#744 := (or #751 true)
#745 := (iff #744 true)
#405 := [rewrite]: #745
#404 := (iff #752 #744)
#748 := (iff #750 true)
#754 := [rewrite]: #748
#409 := [monotonicity #754]: #404
#389 := [trans #409 #405]: #746
#558 := [monotonicity #389 #715]: #557
#703 := [trans #558 #701]: #702
#706 := [monotonicity #703]: #699
#538 := [trans #706 #537]: #699
#705 := [quant-inst #9 #11]: #704
#691 := [mp #705 #538]: #698
[unit-resolution #691 #66 #761]: false
unsat
aac15ec211f322a6810a9bf44dec67adf9e8201f 296 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#754 := (pattern #18)
#9 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #17)
#94 := (* -1::Int #15)
#100 := (div #94 #97)
#257 := (* -1::Int #100)
#258 := (+ #18 #257)
#259 := (= #258 0::Int)
#28 := (div #15 #17)
#254 := (* -1::Int #28)
#255 := (+ #18 #254)
#256 := (= #255 0::Int)
#132 := (>= #15 0::Int)
#125 := (<= #17 0::Int)
#217 := (or #125 #132)
#218 := (not #217)
#121 := (<= #15 0::Int)
#215 := (or #121 #125)
#216 := (not #215)
#221 := (or #216 #218)
#260 := (ite #221 #256 #259)
#253 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#261 := (ite #21 #253 #260)
#755 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #754) #261)
#264 := (forall (vars (?v0 Int) (?v1 Int)) #261)
#758 := (iff #264 #755)
#756 := (iff #261 #261)
#757 := [refl]: #756
#759 := [quant-intro #757]: #758
#224 := (ite #221 #28 #100)
#227 := (ite #21 0::Int #224)
#230 := (= #18 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#265 := (iff #233 #264)
#262 := (iff #230 #261)
#263 := [rewrite]: #262
#266 := [quant-intro #263]: #265
#133 := (not #132)
#126 := (not #125)
#136 := (and #126 #133)
#122 := (not #121)
#129 := (and #122 #126)
#139 := (or #129 #136)
#142 := (ite #139 #28 #100)
#145 := (ite #21 0::Int #142)
#148 := (= #18 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#234 := (iff #151 #233)
#231 := (iff #148 #230)
#228 := (= #145 #227)
#225 := (= #142 #224)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#220 := [rewrite]: #219
#209 := (iff #129 #216)
#210 := [rewrite]: #209
#223 := [monotonicity #210 #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#213 := (~ #151 #151)
#211 := (~ #148 #148)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#154 := (iff #35 #151)
#87 := (and #23 #25)
#90 := (or #24 #87)
#103 := (ite #90 #28 #100)
#81 := (= 0::Int #17)
#78 := (= 0::Int #15)
#84 := (or #78 #81)
#106 := (ite #84 0::Int #103)
#109 := (= #18 #106)
#112 := (forall (vars (?v0 Int) (?v1 Int)) #109)
#152 := (iff #112 #151)
#149 := (iff #109 #148)
#146 := (= #106 #145)
#143 := (= #103 #142)
#140 := (iff #90 #139)
#137 := (iff #87 #136)
#134 := (iff #25 #133)
#135 := [rewrite]: #134
#127 := (iff #23 #126)
#128 := [rewrite]: #127
#138 := [monotonicity #128 #135]: #137
#130 := (iff #24 #129)
#123 := (iff #22 #122)
#124 := [rewrite]: #123
#131 := [monotonicity #124 #128]: #130
#141 := [monotonicity #131 #138]: #140
#144 := [monotonicity #141]: #143
#119 := (iff #84 #21)
#117 := (iff #81 #20)
#118 := [rewrite]: #117
#115 := (iff #78 #19)
#116 := [rewrite]: #115
#120 := [monotonicity #116 #118]: #119
#147 := [monotonicity #120 #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#113 := (iff #35 #112)
#110 := (iff #34 #109)
#107 := (= #33 #106)
#104 := (= #32 #103)
#101 := (= #31 #100)
#98 := (= #30 #97)
#99 := [rewrite]: #98
#95 := (= #29 #94)
#96 := [rewrite]: #95
#102 := [monotonicity #96 #99]: #101
#91 := (iff #27 #90)
#88 := (iff #26 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#105 := [monotonicity #92 #102]: #104
#85 := (iff #21 #84)
#82 := (iff #20 #81)
#83 := [rewrite]: #82
#79 := (iff #19 #78)
#80 := [rewrite]: #79
#86 := [monotonicity #80 #83]: #85
#108 := [monotonicity #86 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [quant-intro #111]: #113
#155 := [trans #114 #153]: #154
#77 := [asserted]: #35
#156 := [mp #77 #155]: #151
#205 := [mp~ #156 #214]: #151
#236 := [mp #205 #235]: #233
#267 := [mp #236 #266]: #264
#760 := [mp #267 #759]: #755
#11 := 1::Int
#10 := (f4 f5 0::Int)
#12 := (f3 #10 1::Int)
#13 := (= #12 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#589 := (not #755)
#590 := (or #589 #13)
#341 := (* -1::Int 1::Int)
#425 := (* -1::Int 0::Int)
#426 := (div #425 #341)
#427 := (* -1::Int #426)
#418 := (+ #12 #427)
#429 := (= #418 0::Int)
#430 := (div 0::Int 1::Int)
#431 := (* -1::Int #430)
#428 := (+ #12 #431)
#432 := (= #428 0::Int)
#411 := (>= 0::Int 0::Int)
#746 := (<= 1::Int 0::Int)
#748 := (or #746 #411)
#405 := (not #748)
#535 := (<= 0::Int 0::Int)
#742 := (or #535 #746)
#416 := (not #742)
#417 := (or #416 #405)
#749 := (ite #417 #432 #429)
#750 := (= 1::Int 0::Int)
#751 := (= 0::Int 0::Int)
#752 := (or #751 #750)
#747 := (ite #752 #13 #749)
#583 := (or #589 #747)
#592 := (iff #583 #590)
#594 := (iff #590 #590)
#595 := [rewrite]: #594
#572 := (iff #747 #13)
#1 := true
#686 := (ite true #13 #13)
#684 := (iff #686 #13)
#687 := [rewrite]: #684
#588 := (iff #747 #686)
#579 := (iff #749 #13)
#694 := (ite false #13 #13)
#577 := (iff #694 #13)
#578 := [rewrite]: #577
#692 := (iff #749 #694)
#691 := (iff #429 #13)
#537 := (= #418 #12)
#709 := (+ #12 0::Int)
#706 := (= #709 #12)
#707 := [rewrite]: #706
#534 := (= #418 #709)
#698 := (= #427 0::Int)
#715 := (= #425 0::Int)
#719 := [rewrite]: #715
#703 := (= #427 #425)
#696 := (= #426 0::Int)
#557 := (div 0::Int -1::Int)
#701 := (= #557 0::Int)
#702 := [rewrite]: #701
#699 := (= #426 #557)
#555 := (= #341 -1::Int)
#556 := [rewrite]: #555
#700 := [monotonicity #719 #556]: #699
#697 := [trans #700 #702]: #696
#704 := [monotonicity #697]: #703
#705 := [trans #704 #719]: #698
#536 := [monotonicity #705]: #534
#690 := [trans #536 #707]: #537
#693 := [monotonicity #690]: #691
#708 := (iff #432 #13)
#712 := (= #428 #12)
#710 := (= #428 #709)
#716 := (= #431 0::Int)
#718 := (= #431 #425)
#439 := (= #430 0::Int)
#717 := [rewrite]: #439
#433 := [monotonicity #717]: #718
#720 := [trans #433 #719]: #716
#711 := [monotonicity #720]: #710
#713 := [trans #711 #707]: #712
#714 := [monotonicity #713]: #708
#437 := (iff #417 false)
#721 := (or false false)
#726 := (iff #721 false)
#436 := [rewrite]: #726
#725 := (iff #417 #721)
#446 := (iff #405 false)
#736 := (not true)
#739 := (iff #736 false)
#379 := [rewrite]: #739
#723 := (iff #405 #736)
#453 := (iff #748 true)
#727 := (or false true)
#451 := (iff #727 true)
#452 := [rewrite]: #451
#728 := (iff #748 #727)
#738 := (iff #411 true)
#741 := [rewrite]: #738
#731 := (iff #746 false)
#732 := [rewrite]: #731
#450 := [monotonicity #732 #741]: #728
#347 := [trans #450 #452]: #453
#724 := [monotonicity #347]: #723
#447 := [trans #724 #379]: #446
#380 := (iff #416 false)
#374 := (iff #416 #736)
#735 := (iff #742 true)
#744 := (or true false)
#388 := (iff #744 true)
#729 := [rewrite]: #388
#733 := (iff #742 #744)
#394 := (iff #535 true)
#395 := [rewrite]: #394
#734 := [monotonicity #395 #732]: #733
#730 := [trans #734 #729]: #735
#737 := [monotonicity #730]: #374
#740 := [trans #737 #379]: #380
#722 := [monotonicity #740 #447]: #725
#438 := [trans #722 #436]: #437
#695 := [monotonicity #438 #714 #693]: #692
#538 := [trans #695 #578]: #579
#392 := (iff #752 true)
#404 := (iff #752 #744)
#403 := (iff #750 false)
#408 := [rewrite]: #403
#753 := (iff #751 true)
#743 := [rewrite]: #753
#745 := [monotonicity #743 #408]: #404
#393 := [trans #745 #729]: #392
#683 := [monotonicity #393 #538]: #588
#587 := [trans #683 #687]: #572
#593 := [monotonicity #587]: #592
#688 := [trans #593 #595]: #592
#591 := [quant-inst #9 #11]: #583
#685 := [mp #591 #688]: #590
[unit-resolution #685 #66 #760]: false
unsat
575117f1eb706f5a1dbf04aa3800a1f178601599 284 0
#2 := false
decl f3 :: (-> S2 Int Int)
#16 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#14 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#15 := (f4 f5 #14)
#17 := (f3 #15 #16)
#739 := (pattern #17)
#18 := 0::Int
#84 := -1::Int
#88 := (* -1::Int #16)
#85 := (* -1::Int #14)
#91 := (div #85 #88)
#242 := (* -1::Int #91)
#243 := (+ #17 #242)
#244 := (= #243 0::Int)
#28 := (div #14 #16)
#239 := (* -1::Int #28)
#240 := (+ #17 #239)
#241 := (= #240 0::Int)
#117 := (>= #14 0::Int)
#110 := (<= #16 0::Int)
#202 := (or #110 #117)
#203 := (not #202)
#106 := (<= #14 0::Int)
#200 := (or #106 #110)
#201 := (not #200)
#206 := (or #201 #203)
#245 := (ite #206 #241 #244)
#238 := (= #17 0::Int)
#20 := (= #16 0::Int)
#19 := (= #14 0::Int)
#21 := (or #19 #20)
#246 := (ite #21 #238 #245)
#740 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #739) #246)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#743 := (iff #249 #740)
#741 := (iff #246 #246)
#742 := [refl]: #741
#744 := [quant-intro #742]: #743
#209 := (ite #206 #28 #91)
#212 := (ite #21 0::Int #209)
#215 := (= #17 #212)
#218 := (forall (vars (?v0 Int) (?v1 Int)) #215)
#250 := (iff #218 #249)
#247 := (iff #215 #246)
#248 := [rewrite]: #247
#251 := [quant-intro #248]: #250
#118 := (not #117)
#111 := (not #110)
#121 := (and #111 #118)
#107 := (not #106)
#114 := (and #107 #111)
#124 := (or #114 #121)
#127 := (ite #124 #28 #91)
#130 := (ite #21 0::Int #127)
#133 := (= #17 #130)
#136 := (forall (vars (?v0 Int) (?v1 Int)) #133)
#219 := (iff #136 #218)
#216 := (iff #133 #215)
#213 := (= #130 #212)
#210 := (= #127 #209)
#207 := (iff #124 #206)
#204 := (iff #121 #203)
#205 := [rewrite]: #204
#194 := (iff #114 #201)
#195 := [rewrite]: #194
#208 := [monotonicity #195 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [monotonicity #211]: #213
#217 := [monotonicity #214]: #216
#220 := [quant-intro #217]: #219
#198 := (~ #136 #136)
#196 := (~ #133 #133)
#197 := [refl]: #196
#199 := [nnf-pos #197]: #198
#30 := (- #16)
#29 := (- #14)
#31 := (div #29 #30)
#23 := (< 0::Int #16)
#25 := (< #14 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #14)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #17 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#139 := (iff #35 #136)
#78 := (and #23 #25)
#81 := (or #24 #78)
#94 := (ite #81 #28 #91)
#97 := (ite #21 0::Int #94)
#100 := (= #17 #97)
#103 := (forall (vars (?v0 Int) (?v1 Int)) #100)
#137 := (iff #103 #136)
#134 := (iff #100 #133)
#131 := (= #97 #130)
#128 := (= #94 #127)
#125 := (iff #81 #124)
#122 := (iff #78 #121)
#119 := (iff #25 #118)
#120 := [rewrite]: #119
#112 := (iff #23 #111)
#113 := [rewrite]: #112
#123 := [monotonicity #113 #120]: #122
#115 := (iff #24 #114)
#108 := (iff #22 #107)
#109 := [rewrite]: #108
#116 := [monotonicity #109 #113]: #115
#126 := [monotonicity #116 #123]: #125
#129 := [monotonicity #126]: #128
#132 := [monotonicity #129]: #131
#135 := [monotonicity #132]: #134
#138 := [quant-intro #135]: #137
#104 := (iff #35 #103)
#101 := (iff #34 #100)
#98 := (= #33 #97)
#95 := (= #32 #94)
#92 := (= #31 #91)
#89 := (= #30 #88)
#90 := [rewrite]: #89
#86 := (= #29 #85)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#82 := (iff #27 #81)
#79 := (iff #26 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#96 := [monotonicity #83 #93]: #95
#99 := [monotonicity #96]: #98
#102 := [monotonicity #99]: #101
#105 := [quant-intro #102]: #104
#140 := [trans #105 #138]: #139
#77 := [asserted]: #35
#141 := [mp #77 #140]: #136
#190 := [mp~ #141 #199]: #136
#221 := [mp #190 #220]: #218
#252 := [mp #221 #251]: #249
#745 := [mp #252 #744]: #740
#9 := 1::Int
#10 := (f4 f5 1::Int)
#11 := (f3 #10 1::Int)
#12 := (= #11 1::Int)
#13 := (not #12)
#66 := [asserted]: #13
#576 := (not #740)
#577 := (or #576 #12)
#326 := (* -1::Int 1::Int)
#410 := (div #326 #326)
#411 := (* -1::Int #410)
#412 := (+ #11 #411)
#403 := (= #412 0::Int)
#414 := (div 1::Int 1::Int)
#415 := (* -1::Int #414)
#416 := (+ #11 #415)
#413 := (= #416 0::Int)
#417 := (>= 1::Int 0::Int)
#396 := (<= 1::Int 0::Int)
#731 := (or #396 #417)
#733 := (not #731)
#390 := (or #396 #396)
#520 := (not #390)
#727 := (or #520 #733)
#401 := (ite #727 #413 #403)
#402 := (= #11 0::Int)
#734 := (= 1::Int 0::Int)
#735 := (or #734 #734)
#736 := (ite #735 #402 #401)
#578 := (or #576 #736)
#580 := (iff #578 #577)
#670 := (iff #577 #577)
#674 := [rewrite]: #670
#575 := (iff #736 #12)
#669 := (ite false #402 #12)
#572 := (iff #669 #12)
#574 := [rewrite]: #572
#672 := (iff #736 #669)
#573 := (iff #401 #12)
#1 := true
#562 := (ite true #12 #12)
#523 := (iff #562 #12)
#671 := [rewrite]: #523
#563 := (iff #401 #562)
#677 := (iff #403 #12)
#694 := (+ -1::Int #11)
#697 := (= #694 0::Int)
#699 := (iff #697 #12)
#540 := [rewrite]: #699
#678 := (iff #403 #697)
#675 := (= #412 #694)
#704 := (+ #11 -1::Int)
#695 := (= #704 #694)
#696 := [rewrite]: #695
#521 := (= #412 #704)
#690 := (= #411 -1::Int)
#702 := (= #326 -1::Int)
#703 := [rewrite]: #702
#689 := (= #411 #326)
#682 := (= #410 1::Int)
#684 := (div -1::Int -1::Int)
#687 := (= #684 1::Int)
#681 := [rewrite]: #687
#685 := (= #410 #684)
#686 := [monotonicity #703 #703]: #685
#688 := [trans #686 #681]: #682
#683 := [monotonicity #688]: #689
#519 := [trans #683 #703]: #690
#522 := [monotonicity #519]: #521
#676 := [trans #522 #696]: #675
#679 := [monotonicity #676]: #678
#680 := [trans #679 #540]: #677
#541 := (iff #413 #12)
#698 := (iff #413 #697)
#691 := (= #416 #694)
#701 := (= #416 #704)
#418 := (= #415 -1::Int)
#423 := (= #415 #326)
#421 := (= #414 1::Int)
#422 := [rewrite]: #421
#424 := [monotonicity #422]: #423
#700 := [trans #424 #703]: #418
#705 := [monotonicity #700]: #701
#692 := [trans #705 #696]: #691
#693 := [monotonicity #692]: #698
#542 := [trans #693 #540]: #541
#707 := (iff #727 true)
#709 := (or true false)
#706 := (iff #709 true)
#710 := [rewrite]: #706
#431 := (iff #727 #709)
#332 := (iff #733 false)
#713 := (not true)
#437 := (iff #713 false)
#438 := [rewrite]: #437
#435 := (iff #733 #713)
#726 := (iff #731 true)
#724 := (or false true)
#725 := (iff #724 true)
#723 := [rewrite]: #725
#364 := (iff #731 #724)
#359 := (iff #417 true)
#722 := [rewrite]: #359
#373 := (iff #396 false)
#714 := [rewrite]: #373
#365 := [monotonicity #714 #722]: #364
#712 := [trans #365 #723]: #726
#436 := [monotonicity #712]: #435
#708 := [trans #436 #438]: #332
#715 := (iff #520 true)
#716 := (not false)
#719 := (iff #716 true)
#720 := [rewrite]: #719
#717 := (iff #520 #716)
#379 := (iff #390 false)
#738 := (or false false)
#393 := (iff #738 false)
#729 := [rewrite]: #393
#377 := (iff #390 #738)
#378 := [monotonicity #714 #714]: #377
#380 := [trans #378 #729]: #379
#718 := [monotonicity #380]: #717
#721 := [trans #718 #720]: #715
#432 := [monotonicity #721 #708]: #431
#711 := [trans #432 #710]: #707
#564 := [monotonicity #711 #542 #680]: #563
#668 := [trans #564 #671]: #573
#389 := (iff #735 false)
#728 := (iff #735 #738)
#737 := (iff #734 false)
#732 := [rewrite]: #737
#388 := [monotonicity #732 #732]: #728
#730 := [trans #388 #729]: #389
#557 := [monotonicity #730 #668]: #672
#568 := [trans #557 #574]: #575
#673 := [monotonicity #568]: #580
#661 := [trans #673 #674]: #580
#579 := [quant-inst #9 #9]: #578
#663 := [mp #579 #661]: #577
[unit-resolution #663 #66 #745]: false
unsat
9e2cb4354c0a45ed596c8dff93f29dc26a938b99 295 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#740 := (pattern #18)
#19 := 0::Int
#85 := -1::Int
#89 := (* -1::Int #17)
#86 := (* -1::Int #15)
#92 := (div #86 #89)
#243 := (* -1::Int #92)
#244 := (+ #18 #243)
#245 := (= #244 0::Int)
#29 := (div #15 #17)
#240 := (* -1::Int #29)
#241 := (+ #18 #240)
#242 := (= #241 0::Int)
#118 := (>= #15 0::Int)
#111 := (<= #17 0::Int)
#203 := (or #111 #118)
#204 := (not #203)
#107 := (<= #15 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#246 := (ite #207 #242 #245)
#239 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#247 := (ite #22 #239 #246)
#741 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #740) #247)
#250 := (forall (vars (?v0 Int) (?v1 Int)) #247)
#744 := (iff #250 #741)
#742 := (iff #247 #247)
#743 := [refl]: #742
#745 := [quant-intro #743]: #744
#210 := (ite #207 #29 #92)
#213 := (ite #22 0::Int #210)
#216 := (= #18 #213)
#219 := (forall (vars (?v0 Int) (?v1 Int)) #216)
#251 := (iff #219 #250)
#248 := (iff #216 #247)
#249 := [rewrite]: #248
#252 := [quant-intro #249]: #251
#119 := (not #118)
#112 := (not #111)
#122 := (and #112 #119)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#128 := (ite #125 #29 #92)
#131 := (ite #22 0::Int #128)
#134 := (= #18 #131)
#137 := (forall (vars (?v0 Int) (?v1 Int)) #134)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#214 := (= #131 #213)
#211 := (= #128 #210)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [monotonicity #215]: #217
#221 := [quant-intro #218]: #220
#199 := (~ #137 #137)
#197 := (~ #134 #134)
#198 := [refl]: #197
#200 := [nnf-pos #198]: #199
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#140 := (iff #36 #137)
#79 := (and #24 #26)
#82 := (or #25 #79)
#95 := (ite #82 #29 #92)
#98 := (ite #22 0::Int #95)
#101 := (= #18 #98)
#104 := (forall (vars (?v0 Int) (?v1 Int)) #101)
#138 := (iff #104 #137)
#135 := (iff #101 #134)
#132 := (= #98 #131)
#129 := (= #95 #128)
#126 := (iff #82 #125)
#123 := (iff #79 #122)
#120 := (iff #26 #119)
#121 := [rewrite]: #120
#113 := (iff #24 #112)
#114 := [rewrite]: #113
#124 := [monotonicity #114 #121]: #123
#116 := (iff #25 #115)
#109 := (iff #23 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [monotonicity #133]: #135
#139 := [quant-intro #136]: #138
#105 := (iff #36 #104)
#102 := (iff #35 #101)
#99 := (= #34 #98)
#96 := (= #33 #95)
#93 := (= #32 #92)
#90 := (= #31 #89)
#91 := [rewrite]: #90
#87 := (= #30 #86)
#88 := [rewrite]: #87
#94 := [monotonicity #88 #91]: #93
#83 := (iff #28 #82)
#80 := (iff #27 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#97 := [monotonicity #84 #94]: #96
#100 := [monotonicity #97]: #99
#103 := [monotonicity #100]: #102
#106 := [quant-intro #103]: #105
#141 := [trans #106 #139]: #140
#78 := [asserted]: #36
#142 := [mp #78 #141]: #137
#191 := [mp~ #142 #200]: #137
#222 := [mp #191 #221]: #219
#253 := [mp #222 #252]: #250
#746 := [mp #253 #745]: #741
#9 := 3::Int
#11 := 1::Int
#10 := (f4 f5 3::Int)
#12 := (f3 #10 1::Int)
#13 := (= #12 3::Int)
#14 := (not #13)
#67 := [asserted]: #14
#656 := (not #741)
#653 := (or #656 #13)
#327 := (* -1::Int 1::Int)
#411 := (* -1::Int 3::Int)
#412 := (div #411 #327)
#413 := (* -1::Int #412)
#404 := (+ #12 #413)
#415 := (= #404 0::Int)
#416 := (div 3::Int 1::Int)
#417 := (* -1::Int #416)
#414 := (+ #12 #417)
#418 := (= #414 0::Int)
#397 := (>= 3::Int 0::Int)
#732 := (<= 1::Int 0::Int)
#734 := (or #732 #397)
#391 := (not #734)
#521 := (<= 3::Int 0::Int)
#728 := (or #521 #732)
#402 := (not #728)
#403 := (or #402 #391)
#735 := (ite #403 #418 #415)
#736 := (= #12 0::Int)
#737 := (= 1::Int 0::Int)
#738 := (= 3::Int 0::Int)
#733 := (or #738 #737)
#739 := (ite #733 #736 #735)
#655 := (or #656 #739)
#666 := (iff #655 #653)
#663 := (iff #653 #653)
#668 := [rewrite]: #663
#662 := (iff #739 #13)
#580 := (ite false #736 #13)
#671 := (iff #580 #13)
#675 := [rewrite]: #671
#581 := (iff #739 #580)
#578 := (iff #735 #13)
#1 := true
#573 := (ite true #13 #13)
#569 := (iff #573 #13)
#577 := [rewrite]: #569
#575 := (iff #735 #573)
#673 := (iff #415 #13)
#695 := -3::Int
#700 := (+ -3::Int #12)
#686 := (= #700 0::Int)
#682 := (iff #686 #13)
#683 := [rewrite]: #682
#669 := (iff #415 #686)
#672 := (= #404 #700)
#698 := (+ #12 -3::Int)
#541 := (= #698 #700)
#542 := [rewrite]: #541
#565 := (= #404 #698)
#563 := (= #413 -3::Int)
#696 := (= #411 -3::Int)
#697 := [rewrite]: #696
#678 := (= #413 #411)
#679 := (= #412 3::Int)
#520 := (div -3::Int -1::Int)
#676 := (= #520 3::Int)
#677 := [rewrite]: #676
#522 := (= #412 #520)
#684 := (= #327 -1::Int)
#691 := [rewrite]: #684
#523 := [monotonicity #697 #691]: #522
#680 := [trans #523 #677]: #679
#681 := [monotonicity #680]: #678
#564 := [trans #681 #697]: #563
#524 := [monotonicity #564]: #565
#574 := [trans #524 #542]: #672
#670 := [monotonicity #574]: #669
#558 := [trans #670 #683]: #673
#689 := (iff #418 #13)
#687 := (iff #418 #686)
#543 := (= #414 #700)
#699 := (= #414 #698)
#692 := (= #417 -3::Int)
#702 := (= #417 #411)
#701 := (= #416 3::Int)
#705 := [rewrite]: #701
#706 := [monotonicity #705]: #702
#693 := [trans #706 #697]: #692
#694 := [monotonicity #693]: #699
#685 := [trans #694 #542]: #543
#688 := [monotonicity #685]: #687
#690 := [trans #688 #683]: #689
#704 := (iff #403 true)
#422 := (or true false)
#425 := (iff #422 true)
#703 := [rewrite]: #425
#423 := (iff #403 #422)
#708 := (iff #391 false)
#710 := (not true)
#707 := (iff #710 false)
#711 := [rewrite]: #707
#432 := (iff #391 #710)
#333 := (iff #734 true)
#714 := (or false true)
#438 := (iff #714 true)
#439 := [rewrite]: #438
#436 := (iff #734 #714)
#727 := (iff #397 true)
#713 := [rewrite]: #727
#718 := (iff #732 false)
#719 := [rewrite]: #718
#437 := [monotonicity #719 #713]: #436
#709 := [trans #437 #439]: #333
#433 := [monotonicity #709]: #432
#712 := [trans #433 #711]: #708
#726 := (iff #402 true)
#360 := (not false)
#365 := (iff #360 true)
#366 := [rewrite]: #365
#723 := (iff #402 #360)
#716 := (iff #728 false)
#390 := (or false false)
#715 := (iff #390 false)
#378 := [rewrite]: #715
#720 := (iff #728 #390)
#381 := (iff #521 false)
#717 := [rewrite]: #381
#721 := [monotonicity #717 #719]: #720
#722 := [trans #721 #378]: #716
#725 := [monotonicity #722]: #723
#724 := [trans #725 #366]: #726
#424 := [monotonicity #724 #712]: #423
#419 := [trans #424 #703]: #704
#576 := [monotonicity #419 #690 #558]: #575
#579 := [trans #576 #577]: #578
#379 := (iff #733 false)
#731 := (iff #733 #390)
#394 := (iff #737 false)
#730 := [rewrite]: #394
#729 := (iff #738 false)
#389 := [rewrite]: #729
#374 := [monotonicity #389 #730]: #731
#380 := [trans #374 #378]: #379
#674 := [monotonicity #380 #579]: #581
#664 := [trans #674 #675]: #662
#667 := [monotonicity #664]: #666
#657 := [trans #667 #668]: #666
#665 := [quant-inst #9 #11]: #655
#658 := [mp #665 #657]: #653
[unit-resolution #658 #67 #746]: false
unsat
4f67493d1061e5182b09035995903ba8d555fcbc 332 0
#2 := false
decl f3 :: (-> S2 Int Int)
#11 := 1::Int
decl f4 :: (-> S3 Int S2)
decl f6 :: Int
#9 := f6
decl f5 :: S3
#8 := f5
#10 := (f4 f5 f6)
#12 := (f3 #10 1::Int)
#68 := (= f6 #12)
#19 := 0::Int
#733 := (= #12 0::Int)
#548 := (iff #733 #68)
#546 := (iff #68 #733)
#541 := (= 0::Int #12)
#544 := (iff #541 #733)
#545 := [commutativity]: #544
#542 := (iff #68 #541)
#735 := (= f6 0::Int)
#413 := (div f6 1::Int)
#82 := -1::Int
#414 := (* -1::Int #413)
#411 := (+ #12 #414)
#415 := (= #411 0::Int)
#521 := (not #415)
#557 := (= #413 #12)
#595 := (= #12 #413)
#520 := (<= #411 0::Int)
#479 := [hypothesis]: #415
#590 := (or #521 #520)
#591 := [th-lemma arith triangle-eq]: #590
#592 := [unit-resolution #591 #479]: #520
#673 := (>= #411 0::Int)
#597 := (or #521 #673)
#593 := [th-lemma arith triangle-eq]: #597
#594 := [unit-resolution #593 #479]: #673
#598 := [th-lemma arith eq-propagate 1 1 #594 #592]: #595
#564 := [symm #598]: #557
#583 := (= f6 #413)
#626 := (+ f6 #414)
#631 := (<= #626 0::Int)
#625 := (= #626 0::Int)
#1 := true
#65 := [true-axiom]: true
#599 := (or false #625)
#600 := [th-lemma arith]: #599
#596 := [unit-resolution #600 #65]: #625
#601 := (not #625)
#581 := (or #601 #631)
#527 := [th-lemma arith triangle-eq]: #581
#582 := [unit-resolution #527 #596]: #631
#632 := (>= #626 0::Int)
#563 := (or #601 #632)
#587 := [th-lemma arith triangle-eq]: #563
#588 := [unit-resolution #587 #596]: #632
#589 := [th-lemma arith eq-propagate 1 1 #588 #582]: #583
#523 := [trans #589 #564]: #68
#71 := (not #68)
#13 := (= #12 f6)
#14 := (not #13)
#72 := (iff #14 #71)
#69 := (iff #13 #68)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#67 := [asserted]: #14
#76 := [mp #67 #73]: #71
#554 := [unit-resolution #76 #523]: false
#556 := [lemma #554]: #521
#408 := (* -1::Int f6)
#709 := (div #408 -1::Int)
#421 := (* -1::Int #709)
#701 := (+ #12 #421)
#702 := (= #701 0::Int)
#518 := (<= f6 0::Int)
#719 := (not #518)
#394 := (>= f6 0::Int)
#711 := (not #394)
#706 := (or #711 #719)
#692 := (ite #706 #415 #702)
#570 := (not #735)
#662 := [hypothesis]: #570
#565 := (or #735 #692)
#689 := (ite #735 #733 #692)
#17 := (:var 0 Int)
#15 := (:var 1 Int)
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#737 := (pattern #18)
#86 := (* -1::Int #17)
#83 := (* -1::Int #15)
#89 := (div #83 #86)
#240 := (* -1::Int #89)
#241 := (+ #18 #240)
#242 := (= #241 0::Int)
#29 := (div #15 #17)
#237 := (* -1::Int #29)
#238 := (+ #18 #237)
#239 := (= #238 0::Int)
#115 := (>= #15 0::Int)
#108 := (<= #17 0::Int)
#200 := (or #108 #115)
#201 := (not #200)
#104 := (<= #15 0::Int)
#198 := (or #104 #108)
#199 := (not #198)
#204 := (or #199 #201)
#243 := (ite #204 #239 #242)
#236 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#244 := (ite #22 #236 #243)
#738 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #737) #244)
#247 := (forall (vars (?v0 Int) (?v1 Int)) #244)
#741 := (iff #247 #738)
#739 := (iff #244 #244)
#740 := [refl]: #739
#742 := [quant-intro #740]: #741
#207 := (ite #204 #29 #89)
#210 := (ite #22 0::Int #207)
#213 := (= #18 #210)
#216 := (forall (vars (?v0 Int) (?v1 Int)) #213)
#248 := (iff #216 #247)
#245 := (iff #213 #244)
#246 := [rewrite]: #245
#249 := [quant-intro #246]: #248
#116 := (not #115)
#109 := (not #108)
#119 := (and #109 #116)
#105 := (not #104)
#112 := (and #105 #109)
#122 := (or #112 #119)
#125 := (ite #122 #29 #89)
#128 := (ite #22 0::Int #125)
#131 := (= #18 #128)
#134 := (forall (vars (?v0 Int) (?v1 Int)) #131)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#211 := (= #128 #210)
#208 := (= #125 #207)
#205 := (iff #122 #204)
#202 := (iff #119 #201)
#203 := [rewrite]: #202
#192 := (iff #112 #199)
#193 := [rewrite]: #192
#206 := [monotonicity #193 #203]: #205
#209 := [monotonicity #206]: #208
#212 := [monotonicity #209]: #211
#215 := [monotonicity #212]: #214
#218 := [quant-intro #215]: #217
#196 := (~ #134 #134)
#194 := (~ #131 #131)
#195 := [refl]: #194
#197 := [nnf-pos #195]: #196
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#137 := (iff #36 #134)
#75 := (and #24 #26)
#79 := (or #25 #75)
#92 := (ite #79 #29 #89)
#95 := (ite #22 0::Int #92)
#98 := (= #18 #95)
#101 := (forall (vars (?v0 Int) (?v1 Int)) #98)
#135 := (iff #101 #134)
#132 := (iff #98 #131)
#129 := (= #95 #128)
#126 := (= #92 #125)
#123 := (iff #79 #122)
#120 := (iff #75 #119)
#117 := (iff #26 #116)
#118 := [rewrite]: #117
#110 := (iff #24 #109)
#111 := [rewrite]: #110
#121 := [monotonicity #111 #118]: #120
#113 := (iff #25 #112)
#106 := (iff #23 #105)
#107 := [rewrite]: #106
#114 := [monotonicity #107 #111]: #113
#124 := [monotonicity #114 #121]: #123
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#133 := [monotonicity #130]: #132
#136 := [quant-intro #133]: #135
#102 := (iff #36 #101)
#99 := (iff #35 #98)
#96 := (= #34 #95)
#93 := (= #33 #92)
#90 := (= #32 #89)
#87 := (= #31 #86)
#88 := [rewrite]: #87
#84 := (= #30 #83)
#85 := [rewrite]: #84
#91 := [monotonicity #85 #88]: #90
#80 := (iff #28 #79)
#77 := (iff #27 #75)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#94 := [monotonicity #81 #91]: #93
#97 := [monotonicity #94]: #96
#100 := [monotonicity #97]: #99
#103 := [quant-intro #100]: #102
#138 := [trans #103 #136]: #137
#74 := [asserted]: #36
#139 := [mp #74 #138]: #134
#188 := [mp~ #139 #197]: #134
#219 := [mp #188 #218]: #216
#250 := [mp #219 #249]: #247
#743 := [mp #250 #742]: #738
#696 := (not #738)
#691 := (or #696 #689)
#324 := (* -1::Int 1::Int)
#409 := (div #408 #324)
#410 := (* -1::Int #409)
#401 := (+ #12 #410)
#412 := (= #401 0::Int)
#729 := (<= 1::Int 0::Int)
#731 := (or #729 #394)
#388 := (not #731)
#725 := (or #518 #729)
#399 := (not #725)
#400 := (or #399 #388)
#732 := (ite #400 #415 #412)
#734 := (= 1::Int 0::Int)
#730 := (or #735 #734)
#736 := (ite #730 #733 #732)
#697 := (or #696 #736)
#539 := (iff #697 #691)
#682 := (iff #691 #691)
#683 := [rewrite]: #682
#690 := (iff #736 #689)
#693 := (iff #732 #692)
#699 := (iff #412 #702)
#416 := (= #401 #701)
#422 := (= #410 #421)
#419 := (= #409 #709)
#708 := (= #324 -1::Int)
#705 := [rewrite]: #708
#420 := [monotonicity #705]: #419
#700 := [monotonicity #420]: #422
#698 := [monotonicity #700]: #416
#703 := [monotonicity #698]: #699
#430 := (iff #400 #706)
#435 := (or #719 #711)
#707 := (iff #435 #706)
#429 := [rewrite]: #707
#436 := (iff #400 #435)
#433 := (iff #388 #711)
#724 := (iff #731 #394)
#722 := (or false #394)
#723 := (iff #722 #394)
#721 := [rewrite]: #723
#362 := (iff #731 #722)
#376 := (iff #729 false)
#377 := [rewrite]: #376
#363 := [monotonicity #377]: #362
#710 := [trans #363 #721]: #724
#434 := [monotonicity #710]: #433
#357 := (iff #399 #719)
#718 := (iff #725 #518)
#378 := (or #518 false)
#716 := (iff #378 #518)
#717 := [rewrite]: #716
#714 := (iff #725 #378)
#715 := [monotonicity #377]: #714
#713 := [trans #715 #717]: #718
#720 := [monotonicity #713]: #357
#330 := [monotonicity #720 #434]: #436
#704 := [trans #330 #429]: #430
#694 := [monotonicity #704 #703]: #693
#712 := (iff #730 #735)
#391 := (or #735 false)
#728 := (iff #391 #735)
#371 := [rewrite]: #728
#727 := (iff #730 #391)
#726 := (iff #734 false)
#386 := [rewrite]: #726
#387 := [monotonicity #386]: #727
#375 := [trans #387 #371]: #712
#695 := [monotonicity #375 #694]: #690
#540 := [monotonicity #695]: #539
#684 := [trans #540 #683]: #539
#538 := [quant-inst #9 #11]: #697
#685 := [mp #538 #684]: #691
#558 := [unit-resolution #685 #743]: #689
#555 := (not #689)
#566 := (or #555 #735 #692)
#574 := [def-axiom]: #566
#567 := [unit-resolution #574 #558]: #565
#568 := [unit-resolution #567 #662]: #692
#654 := (or #706 #735)
#681 := (not #706)
#653 := [hypothesis]: #681
#679 := (or #706 #394)
#680 := [def-axiom]: #679
#650 := [unit-resolution #680 #653]: #394
#686 := (or #706 #518)
#687 := [def-axiom]: #686
#652 := [unit-resolution #687 #653]: #518
#663 := (or #735 #719 #711)
#664 := [th-lemma arith triangle-eq]: #663
#660 := [unit-resolution #664 #662]: #435
#665 := [unit-resolution #660 #652 #650]: false
#655 := [lemma #665]: #654
#569 := [unit-resolution #655 #662]: #706
#675 := (not #692)
#678 := (or #675 #681 #415)
#560 := [def-axiom]: #678
#579 := [unit-resolution #560 #569 #568 #556]: false
#559 := [lemma #579]: #735
#543 := [monotonicity #559]: #542
#547 := [trans #543 #545]: #546
#549 := [symm #547]: #548
#580 := (or #570 #733)
#572 := (or #555 #570 #733)
#573 := [def-axiom]: #572
#535 := [unit-resolution #573 #558]: #580
#536 := [unit-resolution #535 #559]: #733
#550 := [mp #536 #549]: #68
[unit-resolution #76 #550]: false
unsat
e29ee22242a3ef560671b54d7d6c2b7f016db198 321 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#769 := (pattern #19)
#9 := 0::Int
#68 := -1::Int
#112 := (* -1::Int #18)
#109 := (* -1::Int #16)
#115 := (div #109 #112)
#272 := (* -1::Int #115)
#273 := (+ #19 #272)
#274 := (= #273 0::Int)
#29 := (div #16 #18)
#269 := (* -1::Int #29)
#270 := (+ #19 #269)
#271 := (= #270 0::Int)
#147 := (>= #16 0::Int)
#140 := (<= #18 0::Int)
#232 := (or #140 #147)
#233 := (not #232)
#136 := (<= #16 0::Int)
#230 := (or #136 #140)
#231 := (not #230)
#236 := (or #231 #233)
#275 := (ite #236 #271 #274)
#268 := (= #19 0::Int)
#21 := (= #18 0::Int)
#20 := (= #16 0::Int)
#22 := (or #20 #21)
#276 := (ite #22 #268 #275)
#770 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #769) #276)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#773 := (iff #279 #770)
#771 := (iff #276 #276)
#772 := [refl]: #771
#774 := [quant-intro #772]: #773
#239 := (ite #236 #29 #115)
#242 := (ite #22 0::Int #239)
#245 := (= #19 #242)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#148 := (not #147)
#141 := (not #140)
#151 := (and #141 #148)
#137 := (not #136)
#144 := (and #137 #141)
#154 := (or #144 #151)
#157 := (ite #154 #29 #115)
#160 := (ite #22 0::Int #157)
#163 := (= #19 #160)
#166 := (forall (vars (?v0 Int) (?v1 Int)) #163)
#249 := (iff #166 #248)
#246 := (iff #163 #245)
#243 := (= #160 #242)
#240 := (= #157 #239)
#237 := (iff #154 #236)
#234 := (iff #151 #233)
#235 := [rewrite]: #234
#224 := (iff #144 #231)
#225 := [rewrite]: #224
#238 := [monotonicity #225 #235]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#228 := (~ #166 #166)
#226 := (~ #163 #163)
#227 := [refl]: #226
#229 := [nnf-pos #227]: #228
#31 := (- #18)
#30 := (- #16)
#32 := (div #30 #31)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #19 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#169 := (iff #36 #166)
#103 := (and #24 #26)
#106 := (or #25 #103)
#118 := (ite #106 #29 #115)
#97 := (= 0::Int #18)
#94 := (= 0::Int #16)
#100 := (or #94 #97)
#121 := (ite #100 0::Int #118)
#124 := (= #19 #121)
#127 := (forall (vars (?v0 Int) (?v1 Int)) #124)
#167 := (iff #127 #166)
#164 := (iff #124 #163)
#161 := (= #121 #160)
#158 := (= #118 #157)
#155 := (iff #106 #154)
#152 := (iff #103 #151)
#149 := (iff #26 #148)
#150 := [rewrite]: #149
#142 := (iff #24 #141)
#143 := [rewrite]: #142
#153 := [monotonicity #143 #150]: #152
#145 := (iff #25 #144)
#138 := (iff #23 #137)
#139 := [rewrite]: #138
#146 := [monotonicity #139 #143]: #145
#156 := [monotonicity #146 #153]: #155
#159 := [monotonicity #156]: #158
#134 := (iff #100 #22)
#132 := (iff #97 #21)
#133 := [rewrite]: #132
#130 := (iff #94 #20)
#131 := [rewrite]: #130
#135 := [monotonicity #131 #133]: #134
#162 := [monotonicity #135 #159]: #161
#165 := [monotonicity #162]: #164
#168 := [quant-intro #165]: #167
#128 := (iff #36 #127)
#125 := (iff #35 #124)
#122 := (= #34 #121)
#119 := (= #33 #118)
#116 := (= #32 #115)
#113 := (= #31 #112)
#114 := [rewrite]: #113
#110 := (= #30 #109)
#111 := [rewrite]: #110
#117 := [monotonicity #111 #114]: #116
#107 := (iff #28 #106)
#104 := (iff #27 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#120 := [monotonicity #108 #117]: #119
#101 := (iff #22 #100)
#98 := (iff #21 #97)
#99 := [rewrite]: #98
#95 := (iff #20 #94)
#96 := [rewrite]: #95
#102 := [monotonicity #96 #99]: #101
#123 := [monotonicity #102 #120]: #122
#126 := [monotonicity #123]: #125
#129 := [quant-intro #126]: #128
#170 := [trans #129 #168]: #169
#93 := [asserted]: #36
#171 := [mp #93 #170]: #166
#220 := [mp~ #171 #229]: #166
#251 := [mp #220 #250]: #248
#282 := [mp #251 #281]: #279
#775 := [mp #282 #774]: #770
#10 := (f4 f5 0::Int)
#71 := (f3 #10 -1::Int)
#74 := (= #71 0::Int)
#87 := (not #74)
#11 := 1::Int
#12 := (- 1::Int)
#13 := (f3 #10 #12)
#14 := (= #13 0::Int)
#15 := (not #14)
#90 := (iff #15 #87)
#77 := (= 0::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #15 #82)
#80 := (iff #14 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #14 #74)
#72 := (= #13 #71)
#69 := (= #12 -1::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#67 := [asserted]: #15
#92 := [mp #67 #91]: #87
#604 := (not #770)
#605 := (or #604 #74)
#356 := (* -1::Int -1::Int)
#440 := (* -1::Int 0::Int)
#441 := (div #440 #356)
#442 := (* -1::Int #441)
#433 := (+ #71 #442)
#444 := (= #433 0::Int)
#445 := (div 0::Int -1::Int)
#446 := (* -1::Int #445)
#443 := (+ #71 #446)
#447 := (= #443 0::Int)
#426 := (>= 0::Int 0::Int)
#761 := (<= -1::Int 0::Int)
#763 := (or #761 #426)
#420 := (not #763)
#550 := (<= 0::Int 0::Int)
#757 := (or #550 #761)
#431 := (not #757)
#432 := (or #431 #420)
#764 := (ite #432 #447 #444)
#765 := (= -1::Int 0::Int)
#766 := (= 0::Int 0::Int)
#767 := (or #766 #765)
#762 := (ite #767 #74 #764)
#598 := (or #604 #762)
#607 := (iff #598 #605)
#609 := (iff #605 #605)
#610 := [rewrite]: #609
#587 := (iff #762 #74)
#1 := true
#701 := (ite true #74 #74)
#699 := (iff #701 #74)
#702 := [rewrite]: #699
#603 := (iff #762 #701)
#594 := (iff #764 #74)
#709 := (ite false #74 #74)
#592 := (iff #709 #74)
#593 := [rewrite]: #592
#707 := (iff #764 #709)
#706 := (iff #444 #74)
#552 := (= #433 #71)
#724 := (+ #71 0::Int)
#721 := (= #724 #71)
#722 := [rewrite]: #721
#549 := (= #433 #724)
#713 := (= #442 0::Int)
#730 := (= #440 0::Int)
#734 := [rewrite]: #730
#718 := (= #442 #440)
#711 := (= #441 0::Int)
#572 := (div 0::Int 1::Int)
#716 := (= #572 0::Int)
#717 := [rewrite]: #716
#714 := (= #441 #572)
#570 := (= #356 1::Int)
#571 := [rewrite]: #570
#715 := [monotonicity #734 #571]: #714
#712 := [trans #715 #717]: #711
#719 := [monotonicity #712]: #718
#720 := [trans #719 #734]: #713
#551 := [monotonicity #720]: #549
#705 := [trans #551 #722]: #552
#708 := [monotonicity #705]: #706
#723 := (iff #447 #74)
#727 := (= #443 #71)
#725 := (= #443 #724)
#731 := (= #446 0::Int)
#733 := (= #446 #440)
#454 := (= #445 0::Int)
#732 := [rewrite]: #454
#448 := [monotonicity #732]: #733
#735 := [trans #448 #734]: #731
#726 := [monotonicity #735]: #725
#728 := [trans #726 #722]: #727
#729 := [monotonicity #728]: #723
#452 := (iff #432 false)
#736 := (or false false)
#741 := (iff #736 false)
#451 := [rewrite]: #741
#740 := (iff #432 #736)
#461 := (iff #420 false)
#754 := (not true)
#755 := (iff #754 false)
#753 := [rewrite]: #755
#738 := (iff #420 #754)
#468 := (iff #763 true)
#748 := (or true true)
#745 := (iff #748 true)
#751 := [rewrite]: #745
#466 := (iff #763 #748)
#743 := (iff #426 true)
#465 := [rewrite]: #743
#746 := (iff #761 true)
#747 := [rewrite]: #746
#467 := [monotonicity #747 #465]: #466
#362 := [trans #467 #751]: #468
#739 := [monotonicity #362]: #738
#462 := [trans #739 #753]: #461
#756 := (iff #431 false)
#394 := (iff #431 #754)
#389 := (iff #757 true)
#749 := (iff #757 #748)
#409 := (iff #550 true)
#410 := [rewrite]: #409
#750 := [monotonicity #410 #747]: #749
#752 := [trans #750 #751]: #389
#395 := [monotonicity #752]: #394
#742 := [trans #395 #753]: #756
#737 := [monotonicity #742 #462]: #740
#453 := [trans #737 #451]: #452
#710 := [monotonicity #453 #729 #708]: #707
#553 := [trans #710 #593]: #594
#407 := (iff #767 true)
#759 := (or true false)
#403 := (iff #759 true)
#744 := [rewrite]: #403
#419 := (iff #767 #759)
#418 := (iff #765 false)
#423 := [rewrite]: #418
#768 := (iff #766 true)
#758 := [rewrite]: #768
#760 := [monotonicity #758 #423]: #419
#408 := [trans #760 #744]: #407
#698 := [monotonicity #408 #553]: #603
#602 := [trans #698 #702]: #587
#608 := [monotonicity #602]: #607
#703 := [trans #608 #610]: #607
#606 := [quant-inst #9 #68]: #598
#700 := [mp #606 #703]: #605
[unit-resolution #700 #92 #775]: false
unsat
cb905c8736ea11d2932b8d278573ed536358edd4 315 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#754 := (pattern #18)
#19 := 0::Int
#68 := -1::Int
#103 := (* -1::Int #17)
#100 := (* -1::Int #15)
#106 := (div #100 #103)
#257 := (* -1::Int #106)
#258 := (+ #18 #257)
#259 := (= #258 0::Int)
#29 := (div #15 #17)
#254 := (* -1::Int #29)
#255 := (+ #18 #254)
#256 := (= #255 0::Int)
#132 := (>= #15 0::Int)
#125 := (<= #17 0::Int)
#217 := (or #125 #132)
#218 := (not #217)
#121 := (<= #15 0::Int)
#215 := (or #121 #125)
#216 := (not #215)
#221 := (or #216 #218)
#260 := (ite #221 #256 #259)
#253 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#261 := (ite #22 #253 #260)
#755 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #754) #261)
#264 := (forall (vars (?v0 Int) (?v1 Int)) #261)
#758 := (iff #264 #755)
#756 := (iff #261 #261)
#757 := [refl]: #756
#759 := [quant-intro #757]: #758
#224 := (ite #221 #29 #106)
#227 := (ite #22 0::Int #224)
#230 := (= #18 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#265 := (iff #233 #264)
#262 := (iff #230 #261)
#263 := [rewrite]: #262
#266 := [quant-intro #263]: #265
#133 := (not #132)
#126 := (not #125)
#136 := (and #126 #133)
#122 := (not #121)
#129 := (and #122 #126)
#139 := (or #129 #136)
#142 := (ite #139 #29 #106)
#145 := (ite #22 0::Int #142)
#148 := (= #18 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#234 := (iff #151 #233)
#231 := (iff #148 #230)
#228 := (= #145 #227)
#225 := (= #142 #224)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#220 := [rewrite]: #219
#209 := (iff #129 #216)
#210 := [rewrite]: #209
#223 := [monotonicity #210 #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#213 := (~ #151 #151)
#211 := (~ #148 #148)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#154 := (iff #36 #151)
#94 := (and #24 #26)
#97 := (or #25 #94)
#109 := (ite #97 #29 #106)
#112 := (ite #22 0::Int #109)
#115 := (= #18 #112)
#118 := (forall (vars (?v0 Int) (?v1 Int)) #115)
#152 := (iff #118 #151)
#149 := (iff #115 #148)
#146 := (= #112 #145)
#143 := (= #109 #142)
#140 := (iff #97 #139)
#137 := (iff #94 #136)
#134 := (iff #26 #133)
#135 := [rewrite]: #134
#127 := (iff #24 #126)
#128 := [rewrite]: #127
#138 := [monotonicity #128 #135]: #137
#130 := (iff #25 #129)
#123 := (iff #23 #122)
#124 := [rewrite]: #123
#131 := [monotonicity #124 #128]: #130
#141 := [monotonicity #131 #138]: #140
#144 := [monotonicity #141]: #143
#147 := [monotonicity #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#119 := (iff #36 #118)
#116 := (iff #35 #115)
#113 := (= #34 #112)
#110 := (= #33 #109)
#107 := (= #32 #106)
#104 := (= #31 #103)
#105 := [rewrite]: #104
#101 := (= #30 #100)
#102 := [rewrite]: #101
#108 := [monotonicity #102 #105]: #107
#98 := (iff #28 #97)
#95 := (iff #27 #94)
#96 := [rewrite]: #95
#99 := [monotonicity #96]: #98
#111 := [monotonicity #99 #108]: #110
#114 := [monotonicity #111]: #113
#117 := [monotonicity #114]: #116
#120 := [quant-intro #117]: #119
#155 := [trans #120 #153]: #154
#93 := [asserted]: #36
#156 := [mp #93 #155]: #151
#205 := [mp~ #156 #214]: #151
#236 := [mp #205 #235]: #233
#267 := [mp #236 #266]: #264
#760 := [mp #267 #759]: #755
#9 := 1::Int
#10 := (f4 f5 1::Int)
#71 := (f3 #10 -1::Int)
#74 := (= #71 -1::Int)
#87 := (not #74)
#11 := (- 1::Int)
#12 := (f3 #10 #11)
#13 := (= #12 #11)
#14 := (not #13)
#90 := (iff #14 #87)
#77 := (= -1::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #14 #82)
#80 := (iff #13 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #13 #74)
#69 := (= #11 -1::Int)
#70 := [rewrite]: #69
#72 := (= #12 #71)
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73 #70]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#67 := [asserted]: #14
#92 := [mp #67 #91]: #87
#685 := (not #755)
#689 := (or #685 #74)
#341 := (* -1::Int -1::Int)
#425 := (* -1::Int 1::Int)
#426 := (div #425 #341)
#427 := (* -1::Int #426)
#418 := (+ #71 #427)
#429 := (= #418 0::Int)
#430 := (div 1::Int -1::Int)
#431 := (* -1::Int #430)
#428 := (+ #71 #431)
#432 := (= #428 0::Int)
#411 := (>= 1::Int 0::Int)
#746 := (<= -1::Int 0::Int)
#748 := (or #746 #411)
#405 := (not #748)
#535 := (<= 1::Int 0::Int)
#742 := (or #535 #746)
#416 := (not #742)
#417 := (or #416 #405)
#749 := (ite #417 #432 #429)
#750 := (= #71 0::Int)
#751 := (= -1::Int 0::Int)
#752 := (= 1::Int 0::Int)
#747 := (or #752 #751)
#753 := (ite #747 #750 #749)
#676 := (or #685 #753)
#670 := (iff #676 #689)
#669 := (iff #689 #689)
#679 := [rewrite]: #669
#595 := (iff #753 #74)
#583 := (ite false #750 #74)
#593 := (iff #583 #74)
#594 := [rewrite]: #593
#591 := (iff #753 #583)
#589 := (iff #749 #74)
#683 := (ite false #74 #74)
#572 := (iff #683 #74)
#587 := [rewrite]: #572
#684 := (iff #749 #683)
#686 := (iff #429 #74)
#707 := (+ 1::Int #71)
#555 := (= #707 0::Int)
#699 := (iff #555 #74)
#700 := [rewrite]: #699
#579 := (iff #429 #555)
#577 := (= #418 #707)
#710 := (+ #71 1::Int)
#712 := (= #710 #707)
#713 := [rewrite]: #712
#692 := (= #418 #710)
#693 := (= #427 1::Int)
#719 := (= #341 1::Int)
#716 := [rewrite]: #719
#690 := (= #427 #341)
#536 := (= #426 -1::Int)
#703 := (div -1::Int 1::Int)
#705 := (= #703 -1::Int)
#534 := [rewrite]: #705
#704 := (= #426 #703)
#696 := (= #425 -1::Int)
#697 := [rewrite]: #696
#698 := [monotonicity #697 #716]: #704
#537 := [trans #698 #534]: #536
#691 := [monotonicity #537]: #690
#694 := [trans #691 #716]: #693
#695 := [monotonicity #694]: #692
#578 := [trans #695 #713]: #577
#538 := [monotonicity #578]: #579
#588 := [trans #538 #700]: #686
#701 := (iff #432 #74)
#556 := (iff #432 #555)
#708 := (= #428 #707)
#711 := (= #428 #710)
#720 := (= #431 1::Int)
#433 := (= #431 #341)
#717 := (= #430 -1::Int)
#718 := [rewrite]: #717
#715 := [monotonicity #718]: #433
#709 := [trans #715 #716]: #720
#706 := [monotonicity #709]: #711
#714 := [trans #706 #713]: #708
#557 := [monotonicity #714]: #556
#702 := [trans #557 #700]: #701
#438 := (iff #417 false)
#404 := (or false false)
#729 := (iff #404 false)
#392 := [rewrite]: #729
#436 := (iff #417 #404)
#722 := (iff #405 false)
#1 := true
#379 := (not true)
#738 := (iff #379 false)
#741 := [rewrite]: #738
#721 := (iff #405 #379)
#446 := (iff #748 true)
#452 := (or true true)
#723 := (iff #452 true)
#724 := [rewrite]: #723
#453 := (iff #748 #452)
#450 := (iff #411 true)
#451 := [rewrite]: #450
#732 := (iff #746 true)
#733 := [rewrite]: #732
#347 := [monotonicity #733 #451]: #453
#447 := [trans #347 #724]: #446
#725 := [monotonicity #447]: #721
#726 := [trans #725 #741]: #722
#727 := (iff #416 false)
#380 := (iff #416 #379)
#737 := (iff #742 true)
#734 := (or false true)
#736 := (iff #734 true)
#374 := [rewrite]: #736
#735 := (iff #742 #734)
#395 := (iff #535 false)
#731 := [rewrite]: #395
#730 := [monotonicity #731 #733]: #735
#739 := [trans #730 #374]: #737
#740 := [monotonicity #739]: #380
#728 := [trans #740 #741]: #727
#437 := [monotonicity #728 #726]: #436
#439 := [trans #437 #392]: #438
#687 := [monotonicity #439 #702 #588]: #684
#590 := [trans #687 #587]: #589
#393 := (iff #747 false)
#745 := (iff #747 #404)
#408 := (iff #751 false)
#744 := [rewrite]: #408
#743 := (iff #752 false)
#403 := [rewrite]: #743
#388 := [monotonicity #403 #744]: #745
#394 := [trans #388 #392]: #393
#592 := [monotonicity #394 #590]: #591
#688 := [trans #592 #594]: #595
#667 := [monotonicity #688]: #670
#680 := [trans #667 #679]: #670
#678 := [quant-inst #9 #68]: #676
#681 := [mp #678 #680]: #689
[unit-resolution #681 #92 #760]: false
unsat
509cb97799c2b173f188cefbb1ff19fd9cf187f7 311 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#747 := (pattern #20)
#21 := 0::Int
#70 := -1::Int
#96 := (* -1::Int #19)
#93 := (* -1::Int #17)
#99 := (div #93 #96)
#250 := (* -1::Int #99)
#251 := (+ #20 #250)
#252 := (= #251 0::Int)
#31 := (div #17 #19)
#247 := (* -1::Int #31)
#248 := (+ #20 #247)
#249 := (= #248 0::Int)
#125 := (>= #17 0::Int)
#118 := (<= #19 0::Int)
#210 := (or #118 #125)
#211 := (not #210)
#114 := (<= #17 0::Int)
#208 := (or #114 #118)
#209 := (not #208)
#214 := (or #209 #211)
#253 := (ite #214 #249 #252)
#246 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#254 := (ite #24 #246 #253)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #254)
#257 := (forall (vars (?v0 Int) (?v1 Int)) #254)
#751 := (iff #257 #748)
#749 := (iff #254 #254)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#217 := (ite #214 #31 #99)
#220 := (ite #24 0::Int #217)
#223 := (= #20 #220)
#226 := (forall (vars (?v0 Int) (?v1 Int)) #223)
#258 := (iff #226 #257)
#255 := (iff #223 #254)
#256 := [rewrite]: #255
#259 := [quant-intro #256]: #258
#126 := (not #125)
#119 := (not #118)
#129 := (and #119 #126)
#115 := (not #114)
#122 := (and #115 #119)
#132 := (or #122 #129)
#135 := (ite #132 #31 #99)
#138 := (ite #24 0::Int #135)
#141 := (= #20 #138)
#144 := (forall (vars (?v0 Int) (?v1 Int)) #141)
#227 := (iff #144 #226)
#224 := (iff #141 #223)
#221 := (= #138 #220)
#218 := (= #135 #217)
#215 := (iff #132 #214)
#212 := (iff #129 #211)
#213 := [rewrite]: #212
#202 := (iff #122 #209)
#203 := [rewrite]: #202
#216 := [monotonicity #203 #213]: #215
#219 := [monotonicity #216]: #218
#222 := [monotonicity #219]: #221
#225 := [monotonicity #222]: #224
#228 := [quant-intro #225]: #227
#206 := (~ #144 #144)
#204 := (~ #141 #141)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (ite #30 #31 #34)
#36 := (ite #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#147 := (iff #38 #144)
#86 := (and #26 #28)
#90 := (or #27 #86)
#102 := (ite #90 #31 #99)
#105 := (ite #24 0::Int #102)
#108 := (= #20 #105)
#111 := (forall (vars (?v0 Int) (?v1 Int)) #108)
#145 := (iff #111 #144)
#142 := (iff #108 #141)
#139 := (= #105 #138)
#136 := (= #102 #135)
#133 := (iff #90 #132)
#130 := (iff #86 #129)
#127 := (iff #28 #126)
#128 := [rewrite]: #127
#120 := (iff #26 #119)
#121 := [rewrite]: #120
#131 := [monotonicity #121 #128]: #130
#123 := (iff #27 #122)
#116 := (iff #25 #115)
#117 := [rewrite]: #116
#124 := [monotonicity #117 #121]: #123
#134 := [monotonicity #124 #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [quant-intro #143]: #145
#112 := (iff #38 #111)
#109 := (iff #37 #108)
#106 := (= #36 #105)
#103 := (= #35 #102)
#100 := (= #34 #99)
#97 := (= #33 #96)
#98 := [rewrite]: #97
#94 := (= #32 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #30 #90)
#88 := (iff #29 #86)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#148 := [trans #113 #146]: #147
#85 := [asserted]: #38
#149 := [mp #85 #148]: #144
#198 := [mp~ #149 #207]: #144
#229 := [mp #198 #228]: #226
#260 := [mp #229 #259]: #257
#753 := [mp #260 #752]: #748
#76 := -3::Int
#9 := 3::Int
#10 := (f4 f5 3::Int)
#73 := (f3 #10 -1::Int)
#79 := (= #73 -3::Int)
#82 := (not #79)
#14 := (- 3::Int)
#11 := 1::Int
#12 := (- 1::Int)
#13 := (f3 #10 #12)
#15 := (= #13 #14)
#16 := (not #15)
#83 := (iff #16 #82)
#80 := (iff #15 #79)
#77 := (= #14 -3::Int)
#78 := [rewrite]: #77
#74 := (= #13 #73)
#71 := (= #12 -1::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#69 := [asserted]: #16
#87 := [mp #69 #84]: #82
#671 := (not #748)
#663 := (or #671 #79)
#334 := (* -1::Int -1::Int)
#418 := (* -1::Int 3::Int)
#419 := (div #418 #334)
#420 := (* -1::Int #419)
#411 := (+ #73 #420)
#422 := (= #411 0::Int)
#423 := (div 3::Int -1::Int)
#424 := (* -1::Int #423)
#421 := (+ #73 #424)
#425 := (= #421 0::Int)
#404 := (>= 3::Int 0::Int)
#739 := (<= -1::Int 0::Int)
#741 := (or #739 #404)
#398 := (not #741)
#528 := (<= 3::Int 0::Int)
#735 := (or #528 #739)
#409 := (not #735)
#410 := (or #409 #398)
#742 := (ite #410 #425 #422)
#743 := (= #73 0::Int)
#744 := (= -1::Int 0::Int)
#745 := (= 3::Int 0::Int)
#740 := (or #745 #744)
#746 := (ite #740 #743 #742)
#660 := (or #671 #746)
#672 := (iff #660 #663)
#674 := (iff #663 #663)
#670 := [rewrite]: #674
#682 := (iff #746 #79)
#586 := (ite false #743 #79)
#681 := (iff #586 #79)
#678 := [rewrite]: #681
#587 := (iff #746 #586)
#584 := (iff #742 #79)
#565 := (ite false #79 #79)
#583 := (iff #565 #79)
#576 := [rewrite]: #583
#580 := (iff #742 #565)
#677 := (iff #422 #79)
#705 := (+ 3::Int #73)
#549 := (= #705 0::Int)
#693 := (iff #549 #79)
#694 := [rewrite]: #693
#581 := (iff #422 #549)
#531 := (= #411 #705)
#704 := (+ #73 3::Int)
#706 := (= #704 #705)
#701 := [rewrite]: #706
#571 := (= #411 #704)
#688 := (= #420 3::Int)
#426 := (* -1::Int -3::Int)
#709 := (= #426 3::Int)
#713 := [rewrite]: #709
#687 := (= #420 #426)
#684 := (= #419 -3::Int)
#698 := (div -3::Int 1::Int)
#530 := (= #698 -3::Int)
#683 := [rewrite]: #530
#527 := (= #419 #698)
#697 := (= #334 1::Int)
#691 := [rewrite]: #697
#690 := (= #418 -3::Int)
#696 := [rewrite]: #690
#529 := [monotonicity #696 #691]: #527
#686 := [trans #529 #683]: #684
#685 := [monotonicity #686]: #687
#570 := [trans #685 #713]: #688
#572 := [monotonicity #570]: #571
#679 := [trans #572 #701]: #531
#676 := [monotonicity #679]: #581
#680 := [trans #676 #694]: #677
#695 := (iff #425 #79)
#550 := (iff #425 #549)
#707 := (= #421 #705)
#699 := (= #421 #704)
#702 := (= #424 3::Int)
#708 := (= #424 #426)
#710 := (= #423 -3::Int)
#711 := [rewrite]: #710
#712 := [monotonicity #711]: #708
#703 := [trans #712 #713]: #702
#700 := [monotonicity #703]: #699
#548 := [trans #700 #701]: #707
#692 := [monotonicity #548]: #550
#689 := [trans #692 #694]: #695
#431 := (iff #410 false)
#397 := (or false false)
#722 := (iff #397 false)
#385 := [rewrite]: #722
#429 := (iff #410 #397)
#715 := (iff #398 false)
#1 := true
#372 := (not true)
#731 := (iff #372 false)
#734 := [rewrite]: #731
#714 := (iff #398 #372)
#439 := (iff #741 true)
#445 := (or true true)
#716 := (iff #445 true)
#717 := [rewrite]: #716
#446 := (iff #741 #445)
#443 := (iff #404 true)
#444 := [rewrite]: #443
#725 := (iff #739 true)
#726 := [rewrite]: #725
#340 := [monotonicity #726 #444]: #446
#440 := [trans #340 #717]: #439
#718 := [monotonicity #440]: #714
#719 := [trans #718 #734]: #715
#720 := (iff #409 false)
#373 := (iff #409 #372)
#730 := (iff #735 true)
#727 := (or false true)
#729 := (iff #727 true)
#367 := [rewrite]: #729
#728 := (iff #735 #727)
#388 := (iff #528 false)
#724 := [rewrite]: #388
#723 := [monotonicity #724 #726]: #728
#732 := [trans #723 #367]: #730
#733 := [monotonicity #732]: #373
#721 := [trans #733 #734]: #720
#430 := [monotonicity #721 #719]: #429
#432 := [trans #430 #385]: #431
#582 := [monotonicity #432 #689 #680]: #580
#585 := [trans #582 #576]: #584
#386 := (iff #740 false)
#738 := (iff #740 #397)
#401 := (iff #744 false)
#737 := [rewrite]: #401
#736 := (iff #745 false)
#396 := [rewrite]: #736
#381 := [monotonicity #396 #737]: #738
#387 := [trans #381 #385]: #386
#588 := [monotonicity #387 #585]: #587
#669 := [trans #588 #678]: #682
#673 := [monotonicity #669]: #672
#675 := [trans #673 #670]: #672
#662 := [quant-inst #9 #70]: #660
#664 := [mp #662 #675]: #663
[unit-resolution #664 #87 #753]: false
unsat
f7a542d94fa8744cde88643a09f5498259f3785d 355 0
#2 := false
#21 := 0::Int
#11 := 1::Int
decl f6 :: Int
#9 := f6
#70 := -1::Int
#76 := (* -1::Int f6)
#719 := (div #76 1::Int)
#717 := (* -1::Int #719)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#8 := f5
#10 := (f4 f5 f6)
#73 := (f3 #10 -1::Int)
#722 := (+ #73 #717)
#696 := (<= #722 0::Int)
#713 := (= #722 0::Int)
#749 := (= f6 0::Int)
#579 := (not #749)
#744 := (<= f6 0::Int)
#620 := [hypothesis]: #749
#600 := (or #579 #744)
#546 := [th-lemma arith triangle-eq]: #600
#601 := [unit-resolution #546 #620]: #744
#85 := (+ f6 #73)
#343 := (<= #85 0::Int)
#582 := (not #343)
#427 := (>= #85 0::Int)
#748 := (>= f6 0::Int)
#689 := (not #713)
#694 := (>= #722 0::Int)
#626 := (not #694)
#635 := (not #427)
#636 := [hypothesis]: #635
#627 := (or #626 #427)
#634 := [hypothesis]: #694
#670 := (+ f6 #719)
#667 := (>= #670 0::Int)
#677 := (= #670 0::Int)
#1 := true
#67 := [true-axiom]: true
#637 := (or false #677)
#638 := [th-lemma arith]: #637
#633 := [unit-resolution #638 #67]: #677
#639 := (not #677)
#625 := (or #639 #667)
#621 := [th-lemma arith triangle-eq]: #625
#622 := [unit-resolution #621 #633]: #667
#623 := [th-lemma arith farkas 1 -1 1 #622 #636 #634]: false
#628 := [lemma #623]: #627
#666 := [unit-resolution #628 #636]: #626
#629 := (or #689 #694)
#624 := [th-lemma arith triangle-eq]: #629
#630 := [unit-resolution #624 #666]: #689
#604 := (or #749 #713)
#753 := (= #73 0::Int)
#701 := (ite #749 #753 #713)
#19 := (:var 0 Int)
#17 := (:var 1 Int)
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#756 := (pattern #20)
#105 := (* -1::Int #19)
#102 := (* -1::Int #17)
#108 := (div #102 #105)
#259 := (* -1::Int #108)
#260 := (+ #20 #259)
#261 := (= #260 0::Int)
#31 := (div #17 #19)
#256 := (* -1::Int #31)
#257 := (+ #20 #256)
#258 := (= #257 0::Int)
#134 := (>= #17 0::Int)
#127 := (<= #19 0::Int)
#219 := (or #127 #134)
#220 := (not #219)
#123 := (<= #17 0::Int)
#217 := (or #123 #127)
#218 := (not #217)
#223 := (or #218 #220)
#262 := (ite #223 #258 #261)
#255 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#263 := (ite #24 #255 #262)
#757 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #756) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#760 := (iff #266 #757)
#758 := (iff #263 #263)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#226 := (ite #223 #31 #108)
#229 := (ite #24 0::Int #226)
#232 := (= #20 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#135 := (not #134)
#128 := (not #127)
#138 := (and #128 #135)
#124 := (not #123)
#131 := (and #124 #128)
#141 := (or #131 #138)
#144 := (ite #141 #31 #108)
#147 := (ite #24 0::Int #144)
#150 := (= #20 #147)
#153 := (forall (vars (?v0 Int) (?v1 Int)) #150)
#236 := (iff #153 #235)
#233 := (iff #150 #232)
#230 := (= #147 #229)
#227 := (= #144 #226)
#224 := (iff #141 #223)
#221 := (iff #138 #220)
#222 := [rewrite]: #221
#211 := (iff #131 #218)
#212 := [rewrite]: #211
#225 := [monotonicity #212 #222]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#215 := (~ #153 #153)
#213 := (~ #150 #150)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (ite #30 #31 #34)
#36 := (ite #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#156 := (iff #38 #153)
#96 := (and #26 #28)
#99 := (or #27 #96)
#111 := (ite #99 #31 #108)
#114 := (ite #24 0::Int #111)
#117 := (= #20 #114)
#120 := (forall (vars (?v0 Int) (?v1 Int)) #117)
#154 := (iff #120 #153)
#151 := (iff #117 #150)
#148 := (= #114 #147)
#145 := (= #111 #144)
#142 := (iff #99 #141)
#139 := (iff #96 #138)
#136 := (iff #28 #135)
#137 := [rewrite]: #136
#129 := (iff #26 #128)
#130 := [rewrite]: #129
#140 := [monotonicity #130 #137]: #139
#132 := (iff #27 #131)
#125 := (iff #25 #124)
#126 := [rewrite]: #125
#133 := [monotonicity #126 #130]: #132
#143 := [monotonicity #133 #140]: #142
#146 := [monotonicity #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [quant-intro #152]: #154
#121 := (iff #38 #120)
#118 := (iff #37 #117)
#115 := (= #36 #114)
#112 := (= #35 #111)
#109 := (= #34 #108)
#106 := (= #33 #105)
#107 := [rewrite]: #106
#103 := (= #32 #102)
#104 := [rewrite]: #103
#110 := [monotonicity #104 #107]: #109
#100 := (iff #30 #99)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#113 := [monotonicity #101 #110]: #112
#116 := [monotonicity #113]: #115
#119 := [monotonicity #116]: #118
#122 := [quant-intro #119]: #121
#157 := [trans #122 #155]: #156
#95 := [asserted]: #38
#158 := [mp #95 #157]: #153
#207 := [mp~ #158 #216]: #153
#238 := [mp #207 #237]: #235
#269 := [mp #238 #268]: #266
#762 := [mp #269 #761]: #757
#704 := (not #757)
#698 := (or #704 #701)
#428 := (* -1::Int -1::Int)
#429 := (div #76 #428)
#420 := (* -1::Int #429)
#431 := (+ #73 #420)
#432 := (= #431 0::Int)
#433 := (div f6 -1::Int)
#430 := (* -1::Int #433)
#434 := (+ #73 #430)
#413 := (= #434 0::Int)
#750 := (<= -1::Int 0::Int)
#407 := (or #750 #748)
#537 := (not #407)
#418 := (or #744 #750)
#419 := (not #418)
#751 := (or #419 #537)
#752 := (ite #751 #413 #432)
#754 := (= -1::Int 0::Int)
#755 := (or #749 #754)
#745 := (ite #755 #753 #752)
#699 := (or #704 #745)
#706 := (iff #699 #698)
#707 := (iff #698 #698)
#536 := [rewrite]: #707
#702 := (iff #745 #701)
#558 := (iff #752 #713)
#714 := (ite false #413 #713)
#716 := (iff #714 #713)
#557 := [rewrite]: #716
#715 := (iff #752 #714)
#708 := (iff #432 #713)
#711 := (= #431 #722)
#721 := (= #420 #717)
#720 := (= #429 #719)
#440 := (= #428 1::Int)
#441 := [rewrite]: #440
#435 := [monotonicity #441]: #720
#718 := [monotonicity #435]: #721
#712 := [monotonicity #718]: #711
#709 := [monotonicity #712]: #708
#438 := (iff #751 false)
#449 := (or false false)
#724 := (iff #449 false)
#728 := [rewrite]: #724
#723 := (iff #751 #449)
#726 := (iff #537 false)
#376 := (not true)
#381 := (iff #376 false)
#382 := [rewrite]: #381
#349 := (iff #537 #376)
#454 := (iff #407 true)
#743 := (or true #748)
#452 := (iff #743 true)
#453 := [rewrite]: #452
#729 := (iff #407 #743)
#396 := (iff #750 true)
#397 := [rewrite]: #396
#730 := [monotonicity #397]: #729
#455 := [trans #730 #453]: #454
#725 := [monotonicity #455]: #349
#448 := [trans #725 #382]: #726
#742 := (iff #419 false)
#739 := (iff #419 #376)
#732 := (iff #418 true)
#733 := (or #744 true)
#736 := (iff #733 true)
#737 := [rewrite]: #736
#734 := (iff #418 #733)
#735 := [monotonicity #397]: #734
#738 := [trans #735 #737]: #732
#741 := [monotonicity #738]: #739
#740 := [trans #741 #382]: #742
#727 := [monotonicity #740 #448]: #723
#439 := [trans #727 #728]: #438
#710 := [monotonicity #439 #709]: #715
#559 := [trans #710 #557]: #558
#394 := (iff #755 #749)
#746 := (or #749 false)
#390 := (iff #746 #749)
#731 := [rewrite]: #390
#406 := (iff #755 #746)
#405 := (iff #754 false)
#410 := [rewrite]: #405
#747 := [monotonicity #410]: #406
#395 := [trans #747 #731]: #394
#703 := [monotonicity #395 #559]: #702
#700 := [monotonicity #703]: #706
#538 := [trans #700 #536]: #706
#705 := [quant-inst #9 #70]: #699
#539 := [mp #705 #538]: #698
#603 := [unit-resolution #539 #762]: #701
#697 := (not #701)
#540 := (or #697 #749 #713)
#688 := [def-axiom]: #540
#605 := [unit-resolution #688 #603]: #604
#498 := [unit-resolution #605 #630]: #749
#609 := (or #579 #748)
#610 := [th-lemma arith triangle-eq]: #609
#611 := [unit-resolution #610 #498]: #748
#693 := (>= #73 0::Int)
#616 := (or #579 #753)
#580 := (or #697 #579 #753)
#581 := [def-axiom]: #580
#612 := [unit-resolution #581 #603]: #616
#613 := [unit-resolution #612 #498]: #753
#590 := (not #753)
#614 := (or #590 #693)
#617 := [th-lemma arith triangle-eq]: #614
#618 := [unit-resolution #617 #613]: #693
#619 := [th-lemma arith farkas 1 -1 1 #618 #636 #611]: false
#615 := [lemma #619]: #427
#602 := (or #582 #635)
#86 := (= #85 0::Int)
#89 := (not #86)
#14 := (- f6)
#12 := (- 1::Int)
#13 := (f3 #10 #12)
#15 := (= #13 #14)
#16 := (not #15)
#92 := (iff #16 #89)
#79 := (= #73 #76)
#82 := (not #79)
#90 := (iff #82 #89)
#87 := (iff #79 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#83 := (iff #16 #82)
#80 := (iff #15 #79)
#77 := (= #14 #76)
#78 := [rewrite]: #77
#74 := (= #13 #73)
#71 := (= #12 -1::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#93 := [trans #84 #91]: #92
#69 := [asserted]: #16
#94 := [mp #69 #93]: #89
#606 := (or #86 #582 #635)
#607 := [th-lemma arith triangle-eq]: #606
#608 := [unit-resolution #607 #94]: #602
#576 := [unit-resolution #608 #615]: #582
#692 := (<= #73 0::Int)
#583 := [unit-resolution #612 #620]: #753
#542 := (or #590 #692)
#573 := [th-lemma arith triangle-eq]: #542
#575 := [unit-resolution #573 #583]: #692
#577 := [th-lemma arith farkas 1 -1 1 #575 #576 #601]: false
#584 := [lemma #577]: #579
#587 := [unit-resolution #605 #584]: #713
#588 := (or #689 #696)
#598 := [th-lemma arith triangle-eq]: #588
#578 := [unit-resolution #598 #587]: #696
#586 := (<= #670 0::Int)
#599 := (or #639 #586)
#554 := [th-lemma arith triangle-eq]: #599
#555 := [unit-resolution #554 #633]: #586
[th-lemma arith farkas 1 -1 1 #555 #576 #578]: false
unsat
128c927b2271de8226cec6066dac246457adc1e5 297 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#755 := (pattern #18)
#9 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #17)
#94 := (* -1::Int #15)
#100 := (div #94 #97)
#257 := (* -1::Int #100)
#258 := (+ #18 #257)
#259 := (= #258 0::Int)
#28 := (div #15 #17)
#254 := (* -1::Int #28)
#255 := (+ #18 #254)
#256 := (= #255 0::Int)
#132 := (>= #15 0::Int)
#125 := (<= #17 0::Int)
#217 := (or #125 #132)
#218 := (not #217)
#121 := (<= #15 0::Int)
#215 := (or #121 #125)
#216 := (not #215)
#221 := (or #216 #218)
#260 := (ite #221 #256 #259)
#253 := (= #18 0::Int)
#20 := (= #17 0::Int)
#19 := (= #15 0::Int)
#21 := (or #19 #20)
#261 := (ite #21 #253 #260)
#756 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #755) #261)
#264 := (forall (vars (?v0 Int) (?v1 Int)) #261)
#759 := (iff #264 #756)
#757 := (iff #261 #261)
#758 := [refl]: #757
#760 := [quant-intro #758]: #759
#224 := (ite #221 #28 #100)
#227 := (ite #21 0::Int #224)
#230 := (= #18 #227)
#233 := (forall (vars (?v0 Int) (?v1 Int)) #230)
#265 := (iff #233 #264)
#262 := (iff #230 #261)
#263 := [rewrite]: #262
#266 := [quant-intro #263]: #265
#133 := (not #132)
#126 := (not #125)
#136 := (and #126 #133)
#122 := (not #121)
#129 := (and #122 #126)
#139 := (or #129 #136)
#142 := (ite #139 #28 #100)
#145 := (ite #21 0::Int #142)
#148 := (= #18 #145)
#151 := (forall (vars (?v0 Int) (?v1 Int)) #148)
#234 := (iff #151 #233)
#231 := (iff #148 #230)
#228 := (= #145 #227)
#225 := (= #142 #224)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#220 := [rewrite]: #219
#209 := (iff #129 #216)
#210 := [rewrite]: #209
#223 := [monotonicity #210 #220]: #222
#226 := [monotonicity #223]: #225
#229 := [monotonicity #226]: #228
#232 := [monotonicity #229]: #231
#235 := [quant-intro #232]: #234
#213 := (~ #151 #151)
#211 := (~ #148 #148)
#212 := [refl]: #211
#214 := [nnf-pos #212]: #213
#30 := (- #17)
#29 := (- #15)
#31 := (div #29 #30)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#32 := (ite #27 #28 #31)
#33 := (ite #21 0::Int #32)
#34 := (= #18 #33)
#35 := (forall (vars (?v0 Int) (?v1 Int)) #34)
#154 := (iff #35 #151)
#87 := (and #23 #25)
#90 := (or #24 #87)
#103 := (ite #90 #28 #100)
#81 := (= 0::Int #17)
#78 := (= 0::Int #15)
#84 := (or #78 #81)
#106 := (ite #84 0::Int #103)
#109 := (= #18 #106)
#112 := (forall (vars (?v0 Int) (?v1 Int)) #109)
#152 := (iff #112 #151)
#149 := (iff #109 #148)
#146 := (= #106 #145)
#143 := (= #103 #142)
#140 := (iff #90 #139)
#137 := (iff #87 #136)
#134 := (iff #25 #133)
#135 := [rewrite]: #134
#127 := (iff #23 #126)
#128 := [rewrite]: #127
#138 := [monotonicity #128 #135]: #137
#130 := (iff #24 #129)
#123 := (iff #22 #122)
#124 := [rewrite]: #123
#131 := [monotonicity #124 #128]: #130
#141 := [monotonicity #131 #138]: #140
#144 := [monotonicity #141]: #143
#119 := (iff #84 #21)
#117 := (iff #81 #20)
#118 := [rewrite]: #117
#115 := (iff #78 #19)
#116 := [rewrite]: #115
#120 := [monotonicity #116 #118]: #119
#147 := [monotonicity #120 #144]: #146
#150 := [monotonicity #147]: #149
#153 := [quant-intro #150]: #152
#113 := (iff #35 #112)
#110 := (iff #34 #109)
#107 := (= #33 #106)
#104 := (= #32 #103)
#101 := (= #31 #100)
#98 := (= #30 #97)
#99 := [rewrite]: #98
#95 := (= #29 #94)
#96 := [rewrite]: #95
#102 := [monotonicity #96 #99]: #101
#91 := (iff #27 #90)
#88 := (iff #26 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#105 := [monotonicity #92 #102]: #104
#85 := (iff #21 #84)
#82 := (iff #20 #81)
#83 := [rewrite]: #82
#79 := (iff #19 #78)
#80 := [rewrite]: #79
#86 := [monotonicity #80 #83]: #85
#108 := [monotonicity #86 #105]: #107
#111 := [monotonicity #108]: #110
#114 := [quant-intro #111]: #113
#155 := [trans #114 #153]: #154
#77 := [asserted]: #35
#156 := [mp #77 #155]: #151
#205 := [mp~ #156 #214]: #151
#236 := [mp #205 #235]: #233
#267 := [mp #236 #266]: #264
#761 := [mp #267 #760]: #756
#11 := 3::Int
#10 := (f4 f5 0::Int)
#12 := (f3 #10 3::Int)
#13 := (= #12 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#590 := (not #756)
#591 := (or #590 #13)
#341 := (* -1::Int 3::Int)
#426 := (* -1::Int 0::Int)
#427 := (div #426 #341)
#428 := (* -1::Int #427)
#419 := (+ #12 #428)
#430 := (= #419 0::Int)
#431 := (div 0::Int 3::Int)
#359 := (* -1::Int #431)
#432 := (+ #12 #359)
#429 := (= #432 0::Int)
#433 := (>= 0::Int 0::Int)
#412 := (<= 3::Int 0::Int)
#747 := (or #412 #433)
#749 := (not #747)
#406 := (<= 0::Int 0::Int)
#536 := (or #406 #412)
#743 := (not #536)
#417 := (or #743 #749)
#418 := (ite #417 #429 #430)
#750 := (= 3::Int 0::Int)
#751 := (= 0::Int 0::Int)
#752 := (or #751 #750)
#753 := (ite #752 #13 #418)
#584 := (or #590 #753)
#593 := (iff #584 #591)
#595 := (iff #591 #591)
#596 := [rewrite]: #595
#573 := (iff #753 #13)
#1 := true
#687 := (ite true #13 #13)
#685 := (iff #687 #13)
#688 := [rewrite]: #685
#589 := (iff #753 #687)
#580 := (iff #418 #13)
#695 := (ite false #13 #13)
#578 := (iff #695 #13)
#579 := [rewrite]: #578
#693 := (iff #418 #695)
#692 := (iff #430 #13)
#538 := (= #419 #12)
#721 := (+ #12 0::Int)
#712 := (= #721 #12)
#707 := [rewrite]: #712
#535 := (= #419 #721)
#699 := (= #428 0::Int)
#434 := (= #426 0::Int)
#716 := [rewrite]: #434
#704 := (= #428 #426)
#697 := (= #427 0::Int)
#715 := -3::Int
#558 := (div 0::Int -3::Int)
#702 := (= #558 0::Int)
#703 := [rewrite]: #702
#700 := (= #427 #558)
#556 := (= #341 -3::Int)
#557 := [rewrite]: #556
#701 := [monotonicity #716 #557]: #700
#698 := [trans #701 #703]: #697
#705 := [monotonicity #698]: #704
#706 := [trans #705 #716]: #699
#537 := [monotonicity #706]: #535
#691 := [trans #537 #707]: #538
#694 := [monotonicity #691]: #692
#714 := (iff #429 #13)
#708 := (= #432 #12)
#710 := (= #432 #721)
#720 := (= #359 0::Int)
#718 := (= #359 #426)
#439 := (= #431 0::Int)
#440 := [rewrite]: #439
#719 := [monotonicity #440]: #718
#717 := [trans #719 #716]: #720
#711 := [monotonicity #717]: #710
#713 := [trans #711 #707]: #708
#709 := [monotonicity #713]: #714
#437 := (iff #417 false)
#448 := (or false false)
#723 := (iff #448 false)
#727 := [rewrite]: #723
#722 := (iff #417 #448)
#725 := (iff #749 false)
#731 := (not true)
#738 := (iff #731 false)
#740 := [rewrite]: #738
#347 := (iff #749 #731)
#453 := (iff #747 true)
#742 := (or false true)
#451 := (iff #742 true)
#452 := [rewrite]: #451
#728 := (iff #747 #742)
#741 := (iff #433 true)
#739 := [rewrite]: #741
#396 := (iff #412 false)
#732 := [rewrite]: #396
#729 := [monotonicity #732 #739]: #728
#454 := [trans #729 #452]: #453
#724 := [monotonicity #454]: #347
#447 := [trans #724 #740]: #725
#380 := (iff #743 false)
#737 := (iff #743 #731)
#735 := (iff #536 true)
#409 := (or true false)
#746 := (iff #409 true)
#389 := [rewrite]: #746
#733 := (iff #536 #409)
#394 := (iff #406 true)
#395 := [rewrite]: #394
#734 := [monotonicity #395 #732]: #733
#736 := [trans #734 #389]: #735
#375 := [monotonicity #736]: #737
#381 := [trans #375 #740]: #380
#726 := [monotonicity #381 #447]: #722
#438 := [trans #726 #727]: #437
#696 := [monotonicity #438 #709 #694]: #693
#539 := [trans #696 #579]: #580
#730 := (iff #752 true)
#745 := (iff #752 #409)
#744 := (iff #750 false)
#404 := [rewrite]: #744
#748 := (iff #751 true)
#754 := [rewrite]: #748
#405 := [monotonicity #754 #404]: #745
#393 := [trans #405 #389]: #730
#684 := [monotonicity #393 #539]: #589
#588 := [trans #684 #688]: #573
#594 := [monotonicity #588]: #593
#689 := [trans #594 #596]: #593
#592 := [quant-inst #9 #11]: #584
#686 := [mp #592 #689]: #591
[unit-resolution #686 #66 #761]: false
unsat
092ba79ab133007633bbd2e87982795a7237ea61 322 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#771 := (pattern #19)
#9 := 0::Int
#109 := -1::Int
#113 := (* -1::Int #18)
#110 := (* -1::Int #16)
#116 := (div #110 #113)
#273 := (* -1::Int #116)
#274 := (+ #19 #273)
#275 := (= #274 0::Int)
#29 := (div #16 #18)
#270 := (* -1::Int #29)
#271 := (+ #19 #270)
#272 := (= #271 0::Int)
#148 := (>= #16 0::Int)
#141 := (<= #18 0::Int)
#233 := (or #141 #148)
#234 := (not #233)
#137 := (<= #16 0::Int)
#231 := (or #137 #141)
#232 := (not #231)
#237 := (or #232 #234)
#276 := (ite #237 #272 #275)
#269 := (= #19 0::Int)
#21 := (= #18 0::Int)
#20 := (= #16 0::Int)
#22 := (or #20 #21)
#277 := (ite #22 #269 #276)
#772 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #771) #277)
#280 := (forall (vars (?v0 Int) (?v1 Int)) #277)
#775 := (iff #280 #772)
#773 := (iff #277 #277)
#774 := [refl]: #773
#776 := [quant-intro #774]: #775
#240 := (ite #237 #29 #116)
#243 := (ite #22 0::Int #240)
#246 := (= #19 #243)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#281 := (iff #249 #280)
#278 := (iff #246 #277)
#279 := [rewrite]: #278
#282 := [quant-intro #279]: #281
#149 := (not #148)
#142 := (not #141)
#152 := (and #142 #149)
#138 := (not #137)
#145 := (and #138 #142)
#155 := (or #145 #152)
#158 := (ite #155 #29 #116)
#161 := (ite #22 0::Int #158)
#164 := (= #19 #161)
#167 := (forall (vars (?v0 Int) (?v1 Int)) #164)
#250 := (iff #167 #249)
#247 := (iff #164 #246)
#244 := (= #161 #243)
#241 := (= #158 #240)
#238 := (iff #155 #237)
#235 := (iff #152 #234)
#236 := [rewrite]: #235
#225 := (iff #145 #232)
#226 := [rewrite]: #225
#239 := [monotonicity #226 #236]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [quant-intro #248]: #250
#229 := (~ #167 #167)
#227 := (~ #164 #164)
#228 := [refl]: #227
#230 := [nnf-pos #228]: #229
#31 := (- #18)
#30 := (- #16)
#32 := (div #30 #31)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #19 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#170 := (iff #36 #167)
#103 := (and #24 #26)
#106 := (or #25 #103)
#119 := (ite #106 #29 #116)
#97 := (= 0::Int #18)
#94 := (= 0::Int #16)
#100 := (or #94 #97)
#122 := (ite #100 0::Int #119)
#125 := (= #19 #122)
#128 := (forall (vars (?v0 Int) (?v1 Int)) #125)
#168 := (iff #128 #167)
#165 := (iff #125 #164)
#162 := (= #122 #161)
#159 := (= #119 #158)
#156 := (iff #106 #155)
#153 := (iff #103 #152)
#150 := (iff #26 #149)
#151 := [rewrite]: #150
#143 := (iff #24 #142)
#144 := [rewrite]: #143
#154 := [monotonicity #144 #151]: #153
#146 := (iff #25 #145)
#139 := (iff #23 #138)
#140 := [rewrite]: #139
#147 := [monotonicity #140 #144]: #146
#157 := [monotonicity #147 #154]: #156
#160 := [monotonicity #157]: #159
#135 := (iff #100 #22)
#133 := (iff #97 #21)
#134 := [rewrite]: #133
#131 := (iff #94 #20)
#132 := [rewrite]: #131
#136 := [monotonicity #132 #134]: #135
#163 := [monotonicity #136 #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#129 := (iff #36 #128)
#126 := (iff #35 #125)
#123 := (= #34 #122)
#120 := (= #33 #119)
#117 := (= #32 #116)
#114 := (= #31 #113)
#115 := [rewrite]: #114
#111 := (= #30 #110)
#112 := [rewrite]: #111
#118 := [monotonicity #112 #115]: #117
#107 := (iff #28 #106)
#104 := (iff #27 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#121 := [monotonicity #108 #118]: #120
#101 := (iff #22 #100)
#98 := (iff #21 #97)
#99 := [rewrite]: #98
#95 := (iff #20 #94)
#96 := [rewrite]: #95
#102 := [monotonicity #96 #99]: #101
#124 := [monotonicity #102 #121]: #123
#127 := [monotonicity #124]: #126
#130 := [quant-intro #127]: #129
#171 := [trans #130 #169]: #170
#93 := [asserted]: #36
#172 := [mp #93 #171]: #167
#221 := [mp~ #172 #230]: #167
#252 := [mp #221 #251]: #249
#283 := [mp #252 #282]: #280
#777 := [mp #283 #776]: #772
#68 := -3::Int
#10 := (f4 f5 0::Int)
#71 := (f3 #10 -3::Int)
#74 := (= #71 0::Int)
#87 := (not #74)
#11 := 3::Int
#12 := (- 3::Int)
#13 := (f3 #10 #12)
#14 := (= #13 0::Int)
#15 := (not #14)
#90 := (iff #15 #87)
#77 := (= 0::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #15 #82)
#80 := (iff #14 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #14 #74)
#72 := (= #13 #71)
#69 := (= #12 -3::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#67 := [asserted]: #15
#92 := [mp #67 #91]: #87
#604 := (not #772)
#606 := (or #604 #74)
#357 := (* -1::Int -3::Int)
#442 := (* -1::Int 0::Int)
#443 := (div #442 #357)
#444 := (* -1::Int #443)
#435 := (+ #71 #444)
#446 := (= #435 0::Int)
#447 := (div 0::Int -3::Int)
#375 := (* -1::Int #447)
#448 := (+ #71 #375)
#445 := (= #448 0::Int)
#449 := (>= 0::Int 0::Int)
#428 := (<= -3::Int 0::Int)
#763 := (or #428 #449)
#765 := (not #763)
#422 := (<= 0::Int 0::Int)
#552 := (or #422 #428)
#759 := (not #552)
#433 := (or #759 #765)
#434 := (ite #433 #445 #446)
#766 := (= -3::Int 0::Int)
#767 := (= 0::Int 0::Int)
#768 := (or #767 #766)
#769 := (ite #768 #74 #434)
#607 := (or #604 #769)
#608 := (iff #607 #606)
#610 := (iff #606 #606)
#611 := [rewrite]: #610
#704 := (iff #769 #74)
#1 := true
#555 := (ite true #74 #74)
#700 := (iff #555 #74)
#701 := [rewrite]: #700
#703 := (iff #769 #555)
#595 := (iff #434 #74)
#710 := (ite false #74 #74)
#712 := (iff #710 #74)
#594 := [rewrite]: #712
#711 := (iff #434 #710)
#707 := (iff #446 #74)
#553 := (= #435 #71)
#737 := (+ #71 0::Int)
#728 := (= #737 #71)
#723 := [rewrite]: #728
#722 := (= #435 #737)
#721 := (= #444 0::Int)
#450 := (= #442 0::Int)
#732 := [rewrite]: #450
#714 := (= #444 #442)
#719 := (= #443 0::Int)
#573 := (div 0::Int 3::Int)
#717 := (= #573 0::Int)
#718 := [rewrite]: #717
#574 := (= #443 #573)
#731 := (= #357 3::Int)
#572 := [rewrite]: #731
#716 := [monotonicity #732 #572]: #574
#713 := [trans #716 #718]: #719
#720 := [monotonicity #713]: #714
#715 := [trans #720 #732]: #721
#551 := [monotonicity #715]: #722
#554 := [trans #551 #723]: #553
#708 := [monotonicity #554]: #707
#730 := (iff #445 #74)
#724 := (= #448 #71)
#726 := (= #448 #737)
#736 := (= #375 0::Int)
#734 := (= #375 #442)
#455 := (= #447 0::Int)
#456 := [rewrite]: #455
#735 := [monotonicity #456]: #734
#733 := [trans #735 #732]: #736
#727 := [monotonicity #733]: #726
#729 := [trans #727 #723]: #724
#725 := [monotonicity #729]: #730
#453 := (iff #433 false)
#464 := (or false false)
#739 := (iff #464 false)
#743 := [rewrite]: #739
#738 := (iff #433 #464)
#741 := (iff #765 false)
#754 := (not true)
#397 := (iff #754 false)
#757 := [rewrite]: #397
#363 := (iff #765 #754)
#469 := (iff #763 true)
#749 := (or true true)
#752 := (iff #749 true)
#747 := [rewrite]: #752
#467 := (iff #763 #749)
#744 := (iff #449 true)
#745 := [rewrite]: #744
#412 := (iff #428 true)
#748 := [rewrite]: #412
#468 := [monotonicity #748 #745]: #467
#470 := [trans #468 #747]: #469
#740 := [monotonicity #470]: #363
#463 := [trans #740 #757]: #741
#755 := (iff #759 false)
#756 := (iff #759 #754)
#753 := (iff #552 true)
#750 := (iff #552 #749)
#410 := (iff #422 true)
#411 := [rewrite]: #410
#751 := [monotonicity #411 #748]: #750
#391 := [trans #751 #747]: #753
#396 := [monotonicity #391]: #756
#758 := [trans #396 #757]: #755
#742 := [monotonicity #758 #463]: #738
#454 := [trans #742 #743]: #453
#709 := [monotonicity #454 #725 #708]: #711
#596 := [trans #709 #594]: #595
#746 := (iff #768 true)
#425 := (or true false)
#762 := (iff #425 true)
#405 := [rewrite]: #762
#761 := (iff #768 #425)
#760 := (iff #766 false)
#420 := [rewrite]: #760
#764 := (iff #767 true)
#770 := [rewrite]: #764
#421 := [monotonicity #770 #420]: #761
#409 := [trans #421 #405]: #746
#605 := [monotonicity #409 #596]: #703
#589 := [trans #605 #701]: #704
#609 := [monotonicity #589]: #608
#612 := [trans #609 #611]: #608
#600 := [quant-inst #9 #68]: #607
#705 := [mp #600 #612]: #606
[unit-resolution #705 #92 #777]: false
unsat
f4ee017fa009ecfb02498b2f74ede18810bd93a3 314 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#745 := (pattern #19)
#13 := 0::Int
#84 := -1::Int
#88 := (* -1::Int #18)
#85 := (* -1::Int #16)
#91 := (div #85 #88)
#248 := (* -1::Int #91)
#249 := (+ #19 #248)
#250 := (= #249 0::Int)
#29 := (div #16 #18)
#245 := (* -1::Int #29)
#246 := (+ #19 #245)
#247 := (= #246 0::Int)
#123 := (>= #16 0::Int)
#116 := (<= #18 0::Int)
#208 := (or #116 #123)
#209 := (not #208)
#112 := (<= #16 0::Int)
#206 := (or #112 #116)
#207 := (not #206)
#212 := (or #207 #209)
#251 := (ite #212 #247 #250)
#244 := (= #19 0::Int)
#21 := (= #18 0::Int)
#20 := (= #16 0::Int)
#22 := (or #20 #21)
#252 := (ite #22 #244 #251)
#746 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #745) #252)
#255 := (forall (vars (?v0 Int) (?v1 Int)) #252)
#749 := (iff #255 #746)
#747 := (iff #252 #252)
#748 := [refl]: #747
#750 := [quant-intro #748]: #749
#215 := (ite #212 #29 #91)
#218 := (ite #22 0::Int #215)
#221 := (= #19 #218)
#224 := (forall (vars (?v0 Int) (?v1 Int)) #221)
#256 := (iff #224 #255)
#253 := (iff #221 #252)
#254 := [rewrite]: #253
#257 := [quant-intro #254]: #256
#124 := (not #123)
#117 := (not #116)
#127 := (and #117 #124)
#113 := (not #112)
#120 := (and #113 #117)
#130 := (or #120 #127)
#133 := (ite #130 #29 #91)
#136 := (ite #22 0::Int #133)
#139 := (= #19 #136)
#142 := (forall (vars (?v0 Int) (?v1 Int)) #139)
#225 := (iff #142 #224)
#222 := (iff #139 #221)
#219 := (= #136 #218)
#216 := (= #133 #215)
#213 := (iff #130 #212)
#210 := (iff #127 #209)
#211 := [rewrite]: #210
#200 := (iff #120 #207)
#201 := [rewrite]: #200
#214 := [monotonicity #201 #211]: #213
#217 := [monotonicity #214]: #216
#220 := [monotonicity #217]: #219
#223 := [monotonicity #220]: #222
#226 := [quant-intro #223]: #225
#204 := (~ #142 #142)
#202 := (~ #139 #139)
#203 := [refl]: #202
#205 := [nnf-pos #203]: #204
#31 := (- #18)
#30 := (- #16)
#32 := (div #30 #31)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #19 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#145 := (iff #36 #142)
#78 := (and #24 #26)
#81 := (or #25 #78)
#94 := (ite #81 #29 #91)
#72 := (= 0::Int #18)
#69 := (= 0::Int #16)
#75 := (or #69 #72)
#97 := (ite #75 0::Int #94)
#100 := (= #19 #97)
#103 := (forall (vars (?v0 Int) (?v1 Int)) #100)
#143 := (iff #103 #142)
#140 := (iff #100 #139)
#137 := (= #97 #136)
#134 := (= #94 #133)
#131 := (iff #81 #130)
#128 := (iff #78 #127)
#125 := (iff #26 #124)
#126 := [rewrite]: #125
#118 := (iff #24 #117)
#119 := [rewrite]: #118
#129 := [monotonicity #119 #126]: #128
#121 := (iff #25 #120)
#114 := (iff #23 #113)
#115 := [rewrite]: #114
#122 := [monotonicity #115 #119]: #121
#132 := [monotonicity #122 #129]: #131
#135 := [monotonicity #132]: #134
#110 := (iff #75 #22)
#108 := (iff #72 #21)
#109 := [rewrite]: #108
#106 := (iff #69 #20)
#107 := [rewrite]: #106
#111 := [monotonicity #107 #109]: #110
#138 := [monotonicity #111 #135]: #137
#141 := [monotonicity #138]: #140
#144 := [quant-intro #141]: #143
#104 := (iff #36 #103)
#101 := (iff #35 #100)
#98 := (= #34 #97)
#95 := (= #33 #94)
#92 := (= #32 #91)
#89 := (= #31 #88)
#90 := [rewrite]: #89
#86 := (= #30 #85)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#82 := (iff #28 #81)
#79 := (iff #27 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#96 := [monotonicity #83 #93]: #95
#76 := (iff #22 #75)
#73 := (iff #21 #72)
#74 := [rewrite]: #73
#70 := (iff #20 #69)
#71 := [rewrite]: #70
#77 := [monotonicity #71 #74]: #76
#99 := [monotonicity #77 #96]: #98
#102 := [monotonicity #99]: #101
#105 := [quant-intro #102]: #104
#146 := [trans #105 #144]: #145
#68 := [asserted]: #36
#147 := [mp #68 #146]: #142
#196 := [mp~ #147 #205]: #142
#227 := [mp #196 #226]: #224
#258 := [mp #227 #257]: #255
#751 := [mp #258 #750]: #746
#11 := 3::Int
#9 := 1::Int
#10 := (f4 f5 1::Int)
#12 := (f3 #10 3::Int)
#14 := (= #12 0::Int)
#15 := (not #14)
#67 := [asserted]: #15
#671 := (not #746)
#672 := (or #671 #14)
#332 := (* -1::Int 3::Int)
#416 := (* -1::Int 1::Int)
#417 := (div #416 #332)
#418 := (* -1::Int #417)
#409 := (+ #12 #418)
#420 := (= #409 0::Int)
#421 := (div 1::Int 3::Int)
#422 := (* -1::Int #421)
#419 := (+ #12 #422)
#423 := (= #419 0::Int)
#402 := (>= 1::Int 0::Int)
#737 := (<= 3::Int 0::Int)
#739 := (or #737 #402)
#396 := (not #739)
#526 := (<= 1::Int 0::Int)
#733 := (or #526 #737)
#407 := (not #733)
#408 := (or #407 #396)
#740 := (ite #408 #423 #420)
#741 := (= 3::Int 0::Int)
#742 := (= 1::Int 0::Int)
#743 := (or #742 #741)
#738 := (ite #743 #14 #740)
#668 := (or #671 #738)
#662 := (iff #668 #672)
#664 := (iff #672 #672)
#665 := [rewrite]: #664
#660 := (iff #738 #14)
#680 := (ite false #14 #14)
#661 := (iff #680 #14)
#658 := [rewrite]: #661
#667 := (iff #738 #680)
#679 := (iff #740 #14)
#563 := (= #12 1::Int)
#1 := true
#582 := (ite true #14 #563)
#585 := (iff #582 #14)
#586 := [rewrite]: #585
#583 := (iff #740 #582)
#581 := (iff #420 #563)
#569 := (+ -1::Int #12)
#674 := (= #569 0::Int)
#578 := (iff #674 #563)
#580 := [rewrite]: #578
#675 := (iff #420 #674)
#677 := (= #409 #569)
#683 := (+ #12 -1::Int)
#570 := (= #683 #569)
#529 := [rewrite]: #570
#686 := (= #409 #683)
#684 := (= #418 -1::Int)
#691 := (= #416 -1::Int)
#692 := [rewrite]: #691
#681 := (= #418 #416)
#527 := (= #417 1::Int)
#693 := -3::Int
#694 := (div -1::Int -3::Int)
#696 := (= #694 1::Int)
#525 := [rewrite]: #696
#695 := (= #417 #694)
#687 := (= #332 -3::Int)
#688 := [rewrite]: #687
#689 := [monotonicity #692 #688]: #695
#528 := [trans #689 #525]: #527
#682 := [monotonicity #528]: #681
#685 := [trans #682 #692]: #684
#568 := [monotonicity #685]: #686
#579 := [trans #568 #529]: #677
#678 := [monotonicity #579]: #675
#574 := [trans #678 #580]: #581
#548 := (iff #423 #14)
#546 := (= #419 #12)
#698 := (+ #12 0::Int)
#699 := (= #698 #12)
#705 := [rewrite]: #699
#703 := (= #419 #698)
#702 := (= #422 0::Int)
#710 := (* -1::Int 0::Int)
#700 := (= #710 0::Int)
#701 := [rewrite]: #700
#707 := (= #422 #710)
#424 := (= #421 0::Int)
#706 := [rewrite]: #424
#711 := [monotonicity #706]: #707
#697 := [trans #711 #701]: #702
#704 := [monotonicity #697]: #703
#547 := [trans #704 #705]: #546
#690 := [monotonicity #547]: #548
#708 := (iff #408 true)
#717 := (or true false)
#429 := (iff #717 true)
#430 := [rewrite]: #429
#427 := (iff #408 #717)
#716 := (iff #396 false)
#714 := (not true)
#438 := (iff #714 false)
#712 := [rewrite]: #438
#715 := (iff #396 #714)
#444 := (iff #739 true)
#718 := (or false true)
#442 := (iff #718 true)
#443 := [rewrite]: #442
#719 := (iff #739 #718)
#729 := (iff #402 true)
#732 := [rewrite]: #729
#722 := (iff #737 false)
#723 := [rewrite]: #722
#441 := [monotonicity #723 #732]: #719
#338 := [trans #441 #443]: #444
#437 := [monotonicity #338]: #715
#713 := [trans #437 #712]: #716
#371 := (iff #407 true)
#727 := (not false)
#730 := (iff #727 true)
#370 := [rewrite]: #730
#365 := (iff #407 #727)
#726 := (iff #733 false)
#735 := (or false false)
#379 := (iff #735 false)
#720 := [rewrite]: #379
#724 := (iff #733 #735)
#385 := (iff #526 false)
#386 := [rewrite]: #385
#725 := [monotonicity #386 #723]: #724
#721 := [trans #725 #720]: #726
#728 := [monotonicity #721]: #365
#731 := [trans #728 #370]: #371
#428 := [monotonicity #731 #713]: #427
#709 := [trans #428 #430]: #708
#584 := [monotonicity #709 #690 #574]: #583
#676 := [trans #584 #586]: #679
#383 := (iff #743 false)
#395 := (iff #743 #735)
#394 := (iff #741 false)
#399 := [rewrite]: #394
#744 := (iff #742 false)
#734 := [rewrite]: #744
#736 := [monotonicity #734 #399]: #395
#384 := [trans #736 #720]: #383
#669 := [monotonicity #384 #676]: #667
#670 := [trans #669 #658]: #660
#663 := [monotonicity #670]: #662
#659 := [trans #663 #665]: #662
#673 := [quant-inst #9 #11]: #668
#666 := [mp #673 #659]: #672
[unit-resolution #666 #67 #751]: false
unsat
7cb12de79ce8da3bfdf6ce2fdc8ec9ed8a8943d3 289 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#16 := (f4 f5 #15)
#18 := (f3 #16 #17)
#730 := (pattern #18)
#19 := 0::Int
#75 := -1::Int
#79 := (* -1::Int #17)
#76 := (* -1::Int #15)
#82 := (div #76 #79)
#233 := (* -1::Int #82)
#234 := (+ #18 #233)
#235 := (= #234 0::Int)
#29 := (div #15 #17)
#230 := (* -1::Int #29)
#231 := (+ #18 #230)
#232 := (= #231 0::Int)
#108 := (>= #15 0::Int)
#101 := (<= #17 0::Int)
#193 := (or #101 #108)
#194 := (not #193)
#97 := (<= #15 0::Int)
#191 := (or #97 #101)
#192 := (not #191)
#197 := (or #192 #194)
#236 := (ite #197 #232 #235)
#229 := (= #18 0::Int)
#21 := (= #17 0::Int)
#20 := (= #15 0::Int)
#22 := (or #20 #21)
#237 := (ite #22 #229 #236)
#731 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #730) #237)
#240 := (forall (vars (?v0 Int) (?v1 Int)) #237)
#734 := (iff #240 #731)
#732 := (iff #237 #237)
#733 := [refl]: #732
#735 := [quant-intro #733]: #734
#200 := (ite #197 #29 #82)
#203 := (ite #22 0::Int #200)
#206 := (= #18 #203)
#209 := (forall (vars (?v0 Int) (?v1 Int)) #206)
#241 := (iff #209 #240)
#238 := (iff #206 #237)
#239 := [rewrite]: #238
#242 := [quant-intro #239]: #241
#109 := (not #108)
#102 := (not #101)
#112 := (and #102 #109)
#98 := (not #97)
#105 := (and #98 #102)
#115 := (or #105 #112)
#118 := (ite #115 #29 #82)
#121 := (ite #22 0::Int #118)
#124 := (= #18 #121)
#127 := (forall (vars (?v0 Int) (?v1 Int)) #124)
#210 := (iff #127 #209)
#207 := (iff #124 #206)
#204 := (= #121 #203)
#201 := (= #118 #200)
#198 := (iff #115 #197)
#195 := (iff #112 #194)
#196 := [rewrite]: #195
#185 := (iff #105 #192)
#186 := [rewrite]: #185
#199 := [monotonicity #186 #196]: #198
#202 := [monotonicity #199]: #201
#205 := [monotonicity #202]: #204
#208 := [monotonicity #205]: #207
#211 := [quant-intro #208]: #210
#189 := (~ #127 #127)
#187 := (~ #124 #124)
#188 := [refl]: #187
#190 := [nnf-pos #188]: #189
#31 := (- #17)
#30 := (- #15)
#32 := (div #30 #31)
#24 := (< 0::Int #17)
#26 := (< #15 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #15)
#25 := (and #23 #24)
#28 := (or #25 #27)
#33 := (ite #28 #29 #32)
#34 := (ite #22 0::Int #33)
#35 := (= #18 #34)
#36 := (forall (vars (?v0 Int) (?v1 Int)) #35)
#130 := (iff #36 #127)
#69 := (and #24 #26)
#72 := (or #25 #69)
#85 := (ite #72 #29 #82)
#88 := (ite #22 0::Int #85)
#91 := (= #18 #88)
#94 := (forall (vars (?v0 Int) (?v1 Int)) #91)
#128 := (iff #94 #127)
#125 := (iff #91 #124)
#122 := (= #88 #121)
#119 := (= #85 #118)
#116 := (iff #72 #115)
#113 := (iff #69 #112)
#110 := (iff #26 #109)
#111 := [rewrite]: #110
#103 := (iff #24 #102)
#104 := [rewrite]: #103
#114 := [monotonicity #104 #111]: #113
#106 := (iff #25 #105)
#99 := (iff #23 #98)
#100 := [rewrite]: #99
#107 := [monotonicity #100 #104]: #106
#117 := [monotonicity #107 #114]: #116
#120 := [monotonicity #117]: #119
#123 := [monotonicity #120]: #122
#126 := [monotonicity #123]: #125
#129 := [quant-intro #126]: #128
#95 := (iff #36 #94)
#92 := (iff #35 #91)
#89 := (= #34 #88)
#86 := (= #33 #85)
#83 := (= #32 #82)
#80 := (= #31 #79)
#81 := [rewrite]: #80
#77 := (= #30 #76)
#78 := [rewrite]: #77
#84 := [monotonicity #78 #81]: #83
#73 := (iff #28 #72)
#70 := (iff #27 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#87 := [monotonicity #74 #84]: #86
#90 := [monotonicity #87]: #89
#93 := [monotonicity #90]: #92
#96 := [quant-intro #93]: #95
#131 := [trans #96 #129]: #130
#68 := [asserted]: #36
#132 := [mp #68 #131]: #127
#181 := [mp~ #132 #190]: #127
#212 := [mp #181 #211]: #209
#243 := [mp #212 #242]: #240
#736 := [mp #243 #735]: #731
#12 := 1::Int
#9 := 3::Int
#10 := (f4 f5 3::Int)
#11 := (f3 #10 3::Int)
#13 := (= #11 1::Int)
#14 := (not #13)
#67 := [asserted]: #14
#571 := (not #731)
#664 := (or #571 #13)
#317 := (* -1::Int 3::Int)
#401 := (div #317 #317)
#402 := (* -1::Int #401)
#403 := (+ #11 #402)
#394 := (= #403 0::Int)
#405 := (div 3::Int 3::Int)
#406 := (* -1::Int #405)
#407 := (+ #11 #406)
#404 := (= #407 0::Int)
#408 := (>= 3::Int 0::Int)
#387 := (<= 3::Int 0::Int)
#722 := (or #387 #408)
#724 := (not #722)
#381 := (or #387 #387)
#511 := (not #381)
#718 := (or #511 #724)
#392 := (ite #718 #404 #394)
#393 := (= #11 0::Int)
#725 := (= 3::Int 0::Int)
#726 := (or #725 #725)
#727 := (ite #726 #393 #392)
#661 := (or #571 #727)
#652 := (iff #661 #664)
#646 := (iff #664 #664)
#643 := [rewrite]: #646
#569 := (iff #727 #13)
#565 := (ite false #393 #13)
#567 := (iff #565 #13)
#568 := [rewrite]: #567
#566 := (iff #727 #565)
#548 := (iff #392 #13)
#1 := true
#662 := (ite true #13 #13)
#660 := (iff #662 #13)
#663 := [rewrite]: #660
#564 := (iff #392 #662)
#555 := (iff #394 #13)
#686 := (+ -1::Int #11)
#689 := (= #686 0::Int)
#531 := (iff #689 #13)
#532 := [rewrite]: #531
#553 := (iff #394 #689)
#668 := (= #403 #686)
#692 := (+ #11 -1::Int)
#687 := (= #692 #686)
#682 := [rewrite]: #687
#669 := (= #403 #692)
#666 := (= #402 -1::Int)
#414 := (* -1::Int 1::Int)
#694 := (= #414 -1::Int)
#409 := [rewrite]: #694
#512 := (= #402 #414)
#681 := (= #401 1::Int)
#676 := -3::Int
#672 := (div -3::Int -3::Int)
#680 := (= #672 1::Int)
#674 := [rewrite]: #680
#673 := (= #401 #672)
#677 := (= #317 -3::Int)
#678 := [rewrite]: #677
#679 := [monotonicity #678 #678]: #673
#510 := [trans #679 #674]: #681
#513 := [monotonicity #510]: #512
#667 := [trans #513 #409]: #666
#670 := [monotonicity #667]: #669
#671 := [trans #670 #682]: #668
#554 := [monotonicity #671]: #553
#514 := [trans #554 #532]: #555
#533 := (iff #404 #13)
#684 := (iff #404 #689)
#683 := (= #407 #686)
#696 := (= #407 #692)
#691 := (= #406 -1::Int)
#415 := (= #406 #414)
#412 := (= #405 1::Int)
#413 := [rewrite]: #412
#693 := [monotonicity #413]: #415
#695 := [trans #693 #409]: #691
#685 := [monotonicity #695]: #696
#688 := [trans #685 #682]: #683
#690 := [monotonicity #688]: #684
#675 := [trans #690 #532]: #533
#698 := (iff #718 true)
#700 := (or true false)
#697 := (iff #700 true)
#701 := [rewrite]: #697
#422 := (iff #718 #700)
#323 := (iff #724 false)
#704 := (not true)
#428 := (iff #704 false)
#429 := [rewrite]: #428
#426 := (iff #724 #704)
#717 := (iff #722 true)
#715 := (or false true)
#716 := (iff #715 true)
#714 := [rewrite]: #716
#355 := (iff #722 #715)
#350 := (iff #408 true)
#713 := [rewrite]: #350
#364 := (iff #387 false)
#705 := [rewrite]: #364
#356 := [monotonicity #705 #713]: #355
#703 := [trans #356 #714]: #717
#427 := [monotonicity #703]: #426
#699 := [trans #427 #429]: #323
#706 := (iff #511 true)
#707 := (not false)
#710 := (iff #707 true)
#711 := [rewrite]: #710
#708 := (iff #511 #707)
#370 := (iff #381 false)
#729 := (or false false)
#384 := (iff #729 false)
#720 := [rewrite]: #384
#368 := (iff #381 #729)
#369 := [monotonicity #705 #705]: #368
#371 := [trans #369 #720]: #370
#709 := [monotonicity #371]: #708
#712 := [trans #709 #711]: #706
#423 := [monotonicity #712 #699]: #422
#702 := [trans #423 #701]: #698
#659 := [monotonicity #702 #675 #514]: #564
#563 := [trans #659 #663]: #548
#380 := (iff #726 false)
#719 := (iff #726 #729)
#728 := (iff #725 false)
#723 := [rewrite]: #728
#379 := [monotonicity #723 #723]: #719
#721 := [trans #379 #720]: #380
#559 := [monotonicity #721 #563]: #566
#570 := [trans #559 #568]: #569
#654 := [monotonicity #570]: #652
#645 := [trans #654 #643]: #652
#665 := [quant-inst #9 #9]: #661
#655 := [mp #665 #645]: #664
[unit-resolution #655 #67 #736]: false
unsat
3738fba1d7898fa560273958052bb4073440cad3 313 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#731 := (pattern #19)
#20 := 0::Int
#76 := -1::Int
#80 := (* -1::Int #18)
#77 := (* -1::Int #16)
#83 := (div #77 #80)
#234 := (* -1::Int #83)
#235 := (+ #19 #234)
#236 := (= #235 0::Int)
#30 := (div #16 #18)
#231 := (* -1::Int #30)
#232 := (+ #19 #231)
#233 := (= #232 0::Int)
#109 := (>= #16 0::Int)
#102 := (<= #18 0::Int)
#194 := (or #102 #109)
#195 := (not #194)
#98 := (<= #16 0::Int)
#192 := (or #98 #102)
#193 := (not #192)
#198 := (or #193 #195)
#237 := (ite #198 #233 #236)
#230 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#238 := (ite #23 #230 #237)
#732 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #731) #238)
#241 := (forall (vars (?v0 Int) (?v1 Int)) #238)
#735 := (iff #241 #732)
#733 := (iff #238 #238)
#734 := [refl]: #733
#736 := [quant-intro #734]: #735
#201 := (ite #198 #30 #83)
#204 := (ite #23 0::Int #201)
#207 := (= #19 #204)
#210 := (forall (vars (?v0 Int) (?v1 Int)) #207)
#242 := (iff #210 #241)
#239 := (iff #207 #238)
#240 := [rewrite]: #239
#243 := [quant-intro #240]: #242
#110 := (not #109)
#103 := (not #102)
#113 := (and #103 #110)
#99 := (not #98)
#106 := (and #99 #103)
#116 := (or #106 #113)
#119 := (ite #116 #30 #83)
#122 := (ite #23 0::Int #119)
#125 := (= #19 #122)
#128 := (forall (vars (?v0 Int) (?v1 Int)) #125)
#211 := (iff #128 #210)
#208 := (iff #125 #207)
#205 := (= #122 #204)
#202 := (= #119 #201)
#199 := (iff #116 #198)
#196 := (iff #113 #195)
#197 := [rewrite]: #196
#186 := (iff #106 #193)
#187 := [rewrite]: #186
#200 := [monotonicity #187 #197]: #199
#203 := [monotonicity #200]: #202
#206 := [monotonicity #203]: #205
#209 := [monotonicity #206]: #208
#212 := [quant-intro #209]: #211
#190 := (~ #128 #128)
#188 := (~ #125 #125)
#189 := [refl]: #188
#191 := [nnf-pos #189]: #190
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (ite #29 #30 #33)
#35 := (ite #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#131 := (iff #37 #128)
#70 := (and #25 #27)
#73 := (or #26 #70)
#86 := (ite #73 #30 #83)
#89 := (ite #23 0::Int #86)
#92 := (= #19 #89)
#95 := (forall (vars (?v0 Int) (?v1 Int)) #92)
#129 := (iff #95 #128)
#126 := (iff #92 #125)
#123 := (= #89 #122)
#120 := (= #86 #119)
#117 := (iff #73 #116)
#114 := (iff #70 #113)
#111 := (iff #27 #110)
#112 := [rewrite]: #111
#104 := (iff #25 #103)
#105 := [rewrite]: #104
#115 := [monotonicity #105 #112]: #114
#107 := (iff #26 #106)
#100 := (iff #24 #99)
#101 := [rewrite]: #100
#108 := [monotonicity #101 #105]: #107
#118 := [monotonicity #108 #115]: #117
#121 := [monotonicity #118]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#130 := [quant-intro #127]: #129
#96 := (iff #37 #95)
#93 := (iff #36 #92)
#90 := (= #35 #89)
#87 := (= #34 #86)
#84 := (= #33 #83)
#81 := (= #32 #80)
#82 := [rewrite]: #81
#78 := (= #31 #77)
#79 := [rewrite]: #78
#85 := [monotonicity #79 #82]: #84
#74 := (iff #29 #73)
#71 := (iff #28 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#88 := [monotonicity #75 #85]: #87
#91 := [monotonicity #88]: #90
#94 := [monotonicity #91]: #93
#97 := [quant-intro #94]: #96
#132 := [trans #97 #130]: #131
#69 := [asserted]: #37
#133 := [mp #69 #132]: #128
#182 := [mp~ #133 #191]: #128
#213 := [mp #182 #212]: #210
#244 := [mp #213 #243]: #241
#737 := [mp #244 #736]: #732
#13 := 1::Int
#11 := 3::Int
#9 := 5::Int
#10 := (f4 f5 5::Int)
#12 := (f3 #10 3::Int)
#14 := (= #12 1::Int)
#15 := (not #14)
#68 := [asserted]: #15
#640 := (not #732)
#641 := (or #640 #14)
#318 := (* -1::Int 3::Int)
#402 := (* -1::Int 5::Int)
#403 := (div #402 #318)
#404 := (* -1::Int #403)
#395 := (+ #12 #404)
#406 := (= #395 0::Int)
#407 := (div 5::Int 3::Int)
#408 := (* -1::Int #407)
#405 := (+ #12 #408)
#409 := (= #405 0::Int)
#388 := (>= 5::Int 0::Int)
#723 := (<= 3::Int 0::Int)
#725 := (or #723 #388)
#382 := (not #725)
#512 := (<= 5::Int 0::Int)
#719 := (or #512 #723)
#393 := (not #719)
#394 := (or #393 #382)
#726 := (ite #394 #409 #406)
#727 := (= #12 0::Int)
#728 := (= 3::Int 0::Int)
#729 := (= 5::Int 0::Int)
#724 := (or #729 #728)
#730 := (ite #724 #727 #726)
#642 := (or #640 #730)
#643 := (iff #642 #641)
#630 := (iff #641 #641)
#632 := [rewrite]: #630
#637 := (iff #730 #14)
#650 := (ite false #727 #14)
#652 := (iff #650 #14)
#636 := [rewrite]: #652
#651 := (iff #730 #650)
#648 := (iff #726 #14)
#669 := 2::Int
#653 := (= #12 2::Int)
#1 := true
#656 := (ite true #14 #653)
#654 := (iff #656 #14)
#659 := [rewrite]: #654
#657 := (iff #726 #656)
#644 := (iff #406 #653)
#660 := -2::Int
#568 := (+ -2::Int #12)
#665 := (= #568 0::Int)
#655 := (iff #665 #653)
#647 := [rewrite]: #655
#662 := (iff #406 #665)
#571 := (= #395 #568)
#566 := (+ #12 -2::Int)
#569 := (= #566 #568)
#570 := [rewrite]: #569
#567 := (= #395 #566)
#549 := (= #404 -2::Int)
#515 := (* -1::Int 2::Int)
#661 := (= #515 -2::Int)
#664 := [rewrite]: #661
#663 := (= #404 #515)
#555 := (= #403 2::Int)
#513 := -3::Int
#675 := -5::Int
#668 := (div -5::Int -3::Int)
#672 := (= #668 2::Int)
#554 := [rewrite]: #672
#670 := (= #403 #668)
#514 := (= #318 -3::Int)
#667 := [rewrite]: #514
#682 := (= #402 -5::Int)
#511 := [rewrite]: #682
#671 := [monotonicity #511 #667]: #670
#556 := [trans #671 #554]: #555
#565 := [monotonicity #556]: #663
#564 := [trans #565 #664]: #549
#560 := [monotonicity #564]: #567
#572 := [trans #560 #570]: #571
#666 := [monotonicity #572]: #662
#646 := [trans #666 #647]: #644
#680 := (iff #409 #14)
#691 := (+ -1::Int #12)
#677 := (= #691 0::Int)
#673 := (iff #677 #14)
#674 := [rewrite]: #673
#678 := (iff #409 #677)
#534 := (= #405 #691)
#689 := (+ #12 -1::Int)
#532 := (= #689 #691)
#533 := [rewrite]: #532
#690 := (= #405 #689)
#683 := (= #408 -1::Int)
#693 := (* -1::Int 1::Int)
#687 := (= #693 -1::Int)
#688 := [rewrite]: #687
#697 := (= #408 #693)
#692 := (= #407 1::Int)
#696 := [rewrite]: #692
#686 := [monotonicity #696]: #697
#684 := [trans #686 #688]: #683
#685 := [monotonicity #684]: #690
#676 := [trans #685 #533]: #534
#679 := [monotonicity #676]: #678
#681 := [trans #679 #674]: #680
#695 := (iff #394 true)
#413 := (or true false)
#416 := (iff #413 true)
#694 := [rewrite]: #416
#414 := (iff #394 #413)
#699 := (iff #382 false)
#701 := (not true)
#698 := (iff #701 false)
#702 := [rewrite]: #698
#423 := (iff #382 #701)
#324 := (iff #725 true)
#705 := (or false true)
#429 := (iff #705 true)
#430 := [rewrite]: #429
#427 := (iff #725 #705)
#718 := (iff #388 true)
#704 := [rewrite]: #718
#709 := (iff #723 false)
#710 := [rewrite]: #709
#428 := [monotonicity #710 #704]: #427
#700 := [trans #428 #430]: #324
#424 := [monotonicity #700]: #423
#703 := [trans #424 #702]: #699
#717 := (iff #393 true)
#351 := (not false)
#356 := (iff #351 true)
#357 := [rewrite]: #356
#714 := (iff #393 #351)
#707 := (iff #719 false)
#381 := (or false false)
#706 := (iff #381 false)
#369 := [rewrite]: #706
#711 := (iff #719 #381)
#372 := (iff #512 false)
#708 := [rewrite]: #372
#712 := [monotonicity #708 #710]: #711
#713 := [trans #712 #369]: #707
#716 := [monotonicity #713]: #714
#715 := [trans #716 #357]: #717
#415 := [monotonicity #715 #703]: #414
#410 := [trans #415 #694]: #695
#658 := [monotonicity #410 #681 #646]: #657
#649 := [trans #658 #659]: #648
#370 := (iff #724 false)
#722 := (iff #724 #381)
#385 := (iff #728 false)
#721 := [rewrite]: #385
#720 := (iff #729 false)
#380 := [rewrite]: #720
#365 := [monotonicity #380 #721]: #722
#371 := [trans #365 #369]: #370
#645 := [monotonicity #371 #649]: #651
#639 := [trans #645 #636]: #637
#629 := [monotonicity #639]: #643
#633 := [trans #629 #632]: #643
#638 := [quant-inst #9 #11]: #642
#634 := [mp #638 #633]: #641
[unit-resolution #634 #68 #737]: false
unsat
b0632c3adf15c421ca3bfe276f81b5b084a9fb12 312 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#747 := (pattern #20)
#21 := 0::Int
#76 := -1::Int
#96 := (* -1::Int #19)
#93 := (* -1::Int #17)
#99 := (div #93 #96)
#250 := (* -1::Int #99)
#251 := (+ #20 #250)
#252 := (= #251 0::Int)
#31 := (div #17 #19)
#247 := (* -1::Int #31)
#248 := (+ #20 #247)
#249 := (= #248 0::Int)
#125 := (>= #17 0::Int)
#118 := (<= #19 0::Int)
#210 := (or #118 #125)
#211 := (not #210)
#114 := (<= #17 0::Int)
#208 := (or #114 #118)
#209 := (not #208)
#214 := (or #209 #211)
#253 := (ite #214 #249 #252)
#246 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#254 := (ite #24 #246 #253)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #254)
#257 := (forall (vars (?v0 Int) (?v1 Int)) #254)
#751 := (iff #257 #748)
#749 := (iff #254 #254)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#217 := (ite #214 #31 #99)
#220 := (ite #24 0::Int #217)
#223 := (= #20 #220)
#226 := (forall (vars (?v0 Int) (?v1 Int)) #223)
#258 := (iff #226 #257)
#255 := (iff #223 #254)
#256 := [rewrite]: #255
#259 := [quant-intro #256]: #258
#126 := (not #125)
#119 := (not #118)
#129 := (and #119 #126)
#115 := (not #114)
#122 := (and #115 #119)
#132 := (or #122 #129)
#135 := (ite #132 #31 #99)
#138 := (ite #24 0::Int #135)
#141 := (= #20 #138)
#144 := (forall (vars (?v0 Int) (?v1 Int)) #141)
#227 := (iff #144 #226)
#224 := (iff #141 #223)
#221 := (= #138 #220)
#218 := (= #135 #217)
#215 := (iff #132 #214)
#212 := (iff #129 #211)
#213 := [rewrite]: #212
#202 := (iff #122 #209)
#203 := [rewrite]: #202
#216 := [monotonicity #203 #213]: #215
#219 := [monotonicity #216]: #218
#222 := [monotonicity #219]: #221
#225 := [monotonicity #222]: #224
#228 := [quant-intro #225]: #227
#206 := (~ #144 #144)
#204 := (~ #141 #141)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (ite #30 #31 #34)
#36 := (ite #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#147 := (iff #38 #144)
#86 := (and #26 #28)
#90 := (or #27 #86)
#102 := (ite #90 #31 #99)
#105 := (ite #24 0::Int #102)
#108 := (= #20 #105)
#111 := (forall (vars (?v0 Int) (?v1 Int)) #108)
#145 := (iff #111 #144)
#142 := (iff #108 #141)
#139 := (= #105 #138)
#136 := (= #102 #135)
#133 := (iff #90 #132)
#130 := (iff #86 #129)
#127 := (iff #28 #126)
#128 := [rewrite]: #127
#120 := (iff #26 #119)
#121 := [rewrite]: #120
#131 := [monotonicity #121 #128]: #130
#123 := (iff #27 #122)
#116 := (iff #25 #115)
#117 := [rewrite]: #116
#124 := [monotonicity #117 #121]: #123
#134 := [monotonicity #124 #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [quant-intro #143]: #145
#112 := (iff #38 #111)
#109 := (iff #37 #108)
#106 := (= #36 #105)
#103 := (= #35 #102)
#100 := (= #34 #99)
#97 := (= #33 #96)
#98 := [rewrite]: #97
#94 := (= #32 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #30 #90)
#88 := (iff #29 #86)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#148 := [trans #113 #146]: #147
#85 := [asserted]: #38
#149 := [mp #85 #148]: #144
#198 := [mp~ #149 #207]: #144
#229 := [mp #198 #228]: #226
#260 := [mp #229 #259]: #257
#753 := [mp #260 #752]: #748
#70 := -3::Int
#9 := 1::Int
#10 := (f4 f5 1::Int)
#73 := (f3 #10 -3::Int)
#79 := (= #73 -1::Int)
#82 := (not #79)
#14 := (- 1::Int)
#11 := 3::Int
#12 := (- 3::Int)
#13 := (f3 #10 #12)
#15 := (= #13 #14)
#16 := (not #15)
#83 := (iff #16 #82)
#80 := (iff #15 #79)
#77 := (= #14 -1::Int)
#78 := [rewrite]: #77
#74 := (= #13 #73)
#71 := (= #12 -3::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#69 := [asserted]: #16
#87 := [mp #69 #84]: #82
#663 := (not #748)
#660 := (or #663 #79)
#334 := (* -1::Int -3::Int)
#418 := (* -1::Int 1::Int)
#419 := (div #418 #334)
#420 := (* -1::Int #419)
#411 := (+ #73 #420)
#422 := (= #411 0::Int)
#423 := (div 1::Int -3::Int)
#424 := (* -1::Int #423)
#421 := (+ #73 #424)
#425 := (= #421 0::Int)
#404 := (>= 1::Int 0::Int)
#739 := (<= -3::Int 0::Int)
#741 := (or #739 #404)
#398 := (not #741)
#528 := (<= 1::Int 0::Int)
#735 := (or #528 #739)
#409 := (not #735)
#410 := (or #409 #398)
#742 := (ite #410 #425 #422)
#743 := (= #73 0::Int)
#744 := (= -3::Int 0::Int)
#745 := (= 1::Int 0::Int)
#740 := (or #745 #744)
#746 := (ite #740 #743 #742)
#662 := (or #663 #746)
#673 := (iff #662 #660)
#670 := (iff #660 #660)
#675 := [rewrite]: #670
#669 := (iff #746 #79)
#576 := (ite false #743 #79)
#586 := (iff #576 #79)
#587 := [rewrite]: #586
#678 := (iff #746 #576)
#588 := (iff #742 #79)
#584 := (iff #742 #576)
#582 := (iff #422 #79)
#571 := (+ 1::Int #73)
#676 := (= #571 0::Int)
#565 := (iff #676 #79)
#580 := [rewrite]: #565
#677 := (iff #422 #676)
#679 := (= #411 #571)
#685 := (+ #73 1::Int)
#572 := (= #685 #571)
#531 := [rewrite]: #572
#688 := (= #411 #685)
#686 := (= #420 1::Int)
#527 := (* -1::Int -1::Int)
#683 := (= #527 1::Int)
#684 := [rewrite]: #683
#529 := (= #420 #527)
#691 := (= #419 -1::Int)
#695 := (div -1::Int 3::Int)
#696 := (= #695 -1::Int)
#697 := [rewrite]: #696
#689 := (= #419 #695)
#693 := (= #334 3::Int)
#694 := [rewrite]: #693
#550 := (= #418 -1::Int)
#692 := [rewrite]: #550
#690 := [monotonicity #692 #694]: #689
#698 := [trans #690 #697]: #691
#530 := [monotonicity #698]: #529
#687 := [trans #530 #684]: #686
#570 := [monotonicity #687]: #688
#581 := [trans #570 #531]: #679
#680 := [monotonicity #581]: #677
#583 := [trans #680 #580]: #582
#548 := (iff #425 #743)
#701 := (= #421 #73)
#704 := (+ #73 0::Int)
#705 := (= #704 #73)
#706 := [rewrite]: #705
#699 := (= #421 #704)
#702 := (= #424 0::Int)
#426 := (* -1::Int 0::Int)
#709 := (= #426 0::Int)
#713 := [rewrite]: #709
#708 := (= #424 #426)
#710 := (= #423 0::Int)
#711 := [rewrite]: #710
#712 := [monotonicity #711]: #708
#703 := [trans #712 #713]: #702
#700 := [monotonicity #703]: #699
#707 := [trans #700 #706]: #701
#549 := [monotonicity #707]: #548
#431 := (iff #410 false)
#397 := (or false false)
#722 := (iff #397 false)
#385 := [rewrite]: #722
#429 := (iff #410 #397)
#715 := (iff #398 false)
#1 := true
#372 := (not true)
#731 := (iff #372 false)
#734 := [rewrite]: #731
#714 := (iff #398 #372)
#439 := (iff #741 true)
#445 := (or true true)
#716 := (iff #445 true)
#717 := [rewrite]: #716
#446 := (iff #741 #445)
#443 := (iff #404 true)
#444 := [rewrite]: #443
#725 := (iff #739 true)
#726 := [rewrite]: #725
#340 := [monotonicity #726 #444]: #446
#440 := [trans #340 #717]: #439
#718 := [monotonicity #440]: #714
#719 := [trans #718 #734]: #715
#720 := (iff #409 false)
#373 := (iff #409 #372)
#730 := (iff #735 true)
#727 := (or false true)
#729 := (iff #727 true)
#367 := [rewrite]: #729
#728 := (iff #735 #727)
#388 := (iff #528 false)
#724 := [rewrite]: #388
#723 := [monotonicity #724 #726]: #728
#732 := [trans #723 #367]: #730
#733 := [monotonicity #732]: #373
#721 := [trans #733 #734]: #720
#430 := [monotonicity #721 #719]: #429
#432 := [trans #430 #385]: #431
#585 := [monotonicity #432 #549 #583]: #584
#681 := [trans #585 #587]: #588
#386 := (iff #740 false)
#738 := (iff #740 #397)
#401 := (iff #744 false)
#737 := [rewrite]: #401
#736 := (iff #745 false)
#396 := [rewrite]: #736
#381 := [monotonicity #396 #737]: #738
#387 := [trans #381 #385]: #386
#682 := [monotonicity #387 #681]: #678
#671 := [trans #682 #587]: #669
#674 := [monotonicity #671]: #673
#664 := [trans #674 #675]: #673
#672 := [quant-inst #9 #70]: #662
#665 := [mp #672 #664]: #660
[unit-resolution #665 #87 #753]: false
unsat
9923768ca3c7be858f0346034e649eacbb6e42b8 311 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#747 := (pattern #20)
#21 := 0::Int
#76 := -1::Int
#96 := (* -1::Int #19)
#93 := (* -1::Int #17)
#99 := (div #93 #96)
#250 := (* -1::Int #99)
#251 := (+ #20 #250)
#252 := (= #251 0::Int)
#31 := (div #17 #19)
#247 := (* -1::Int #31)
#248 := (+ #20 #247)
#249 := (= #248 0::Int)
#125 := (>= #17 0::Int)
#118 := (<= #19 0::Int)
#210 := (or #118 #125)
#211 := (not #210)
#114 := (<= #17 0::Int)
#208 := (or #114 #118)
#209 := (not #208)
#214 := (or #209 #211)
#253 := (ite #214 #249 #252)
#246 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#254 := (ite #24 #246 #253)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #254)
#257 := (forall (vars (?v0 Int) (?v1 Int)) #254)
#751 := (iff #257 #748)
#749 := (iff #254 #254)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#217 := (ite #214 #31 #99)
#220 := (ite #24 0::Int #217)
#223 := (= #20 #220)
#226 := (forall (vars (?v0 Int) (?v1 Int)) #223)
#258 := (iff #226 #257)
#255 := (iff #223 #254)
#256 := [rewrite]: #255
#259 := [quant-intro #256]: #258
#126 := (not #125)
#119 := (not #118)
#129 := (and #119 #126)
#115 := (not #114)
#122 := (and #115 #119)
#132 := (or #122 #129)
#135 := (ite #132 #31 #99)
#138 := (ite #24 0::Int #135)
#141 := (= #20 #138)
#144 := (forall (vars (?v0 Int) (?v1 Int)) #141)
#227 := (iff #144 #226)
#224 := (iff #141 #223)
#221 := (= #138 #220)
#218 := (= #135 #217)
#215 := (iff #132 #214)
#212 := (iff #129 #211)
#213 := [rewrite]: #212
#202 := (iff #122 #209)
#203 := [rewrite]: #202
#216 := [monotonicity #203 #213]: #215
#219 := [monotonicity #216]: #218
#222 := [monotonicity #219]: #221
#225 := [monotonicity #222]: #224
#228 := [quant-intro #225]: #227
#206 := (~ #144 #144)
#204 := (~ #141 #141)
#205 := [refl]: #204
#207 := [nnf-pos #205]: #206
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (ite #30 #31 #34)
#36 := (ite #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#147 := (iff #38 #144)
#86 := (and #26 #28)
#90 := (or #27 #86)
#102 := (ite #90 #31 #99)
#105 := (ite #24 0::Int #102)
#108 := (= #20 #105)
#111 := (forall (vars (?v0 Int) (?v1 Int)) #108)
#145 := (iff #111 #144)
#142 := (iff #108 #141)
#139 := (= #105 #138)
#136 := (= #102 #135)
#133 := (iff #90 #132)
#130 := (iff #86 #129)
#127 := (iff #28 #126)
#128 := [rewrite]: #127
#120 := (iff #26 #119)
#121 := [rewrite]: #120
#131 := [monotonicity #121 #128]: #130
#123 := (iff #27 #122)
#116 := (iff #25 #115)
#117 := [rewrite]: #116
#124 := [monotonicity #117 #121]: #123
#134 := [monotonicity #124 #131]: #133
#137 := [monotonicity #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [quant-intro #143]: #145
#112 := (iff #38 #111)
#109 := (iff #37 #108)
#106 := (= #36 #105)
#103 := (= #35 #102)
#100 := (= #34 #99)
#97 := (= #33 #96)
#98 := [rewrite]: #97
#94 := (= #32 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #30 #90)
#88 := (iff #29 #86)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [monotonicity #104]: #106
#110 := [monotonicity #107]: #109
#113 := [quant-intro #110]: #112
#148 := [trans #113 #146]: #147
#85 := [asserted]: #38
#149 := [mp #85 #148]: #144
#198 := [mp~ #149 #207]: #144
#229 := [mp #198 #228]: #226
#260 := [mp #229 #259]: #257
#753 := [mp #260 #752]: #748
#70 := -3::Int
#9 := 3::Int
#10 := (f4 f5 3::Int)
#73 := (f3 #10 -3::Int)
#79 := (= #73 -1::Int)
#82 := (not #79)
#13 := 1::Int
#14 := (- 1::Int)
#11 := (- 3::Int)
#12 := (f3 #10 #11)
#15 := (= #12 #14)
#16 := (not #15)
#83 := (iff #16 #82)
#80 := (iff #15 #79)
#77 := (= #14 -1::Int)
#78 := [rewrite]: #77
#74 := (= #12 #73)
#71 := (= #11 -3::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#69 := [asserted]: #16
#87 := [mp #69 #84]: #82
#671 := (not #748)
#663 := (or #671 #79)
#334 := (* -1::Int -3::Int)
#418 := (* -1::Int 3::Int)
#419 := (div #418 #334)
#420 := (* -1::Int #419)
#411 := (+ #73 #420)
#422 := (= #411 0::Int)
#423 := (div 3::Int -3::Int)
#424 := (* -1::Int #423)
#421 := (+ #73 #424)
#425 := (= #421 0::Int)
#404 := (>= 3::Int 0::Int)
#739 := (<= -3::Int 0::Int)
#741 := (or #739 #404)
#398 := (not #741)
#528 := (<= 3::Int 0::Int)
#735 := (or #528 #739)
#409 := (not #735)
#410 := (or #409 #398)
#742 := (ite #410 #425 #422)
#743 := (= #73 0::Int)
#744 := (= -3::Int 0::Int)
#745 := (= 3::Int 0::Int)
#740 := (or #745 #744)
#746 := (ite #740 #743 #742)
#660 := (or #671 #746)
#672 := (iff #660 #663)
#674 := (iff #663 #663)
#670 := [rewrite]: #674
#682 := (iff #746 #79)
#586 := (ite false #743 #79)
#681 := (iff #586 #79)
#678 := [rewrite]: #681
#587 := (iff #746 #586)
#584 := (iff #742 #79)
#565 := (ite false #79 #79)
#583 := (iff #565 #79)
#576 := [rewrite]: #583
#580 := (iff #742 #565)
#677 := (iff #422 #79)
#705 := (+ 1::Int #73)
#549 := (= #705 0::Int)
#693 := (iff #549 #79)
#694 := [rewrite]: #693
#581 := (iff #422 #549)
#531 := (= #411 #705)
#704 := (+ #73 1::Int)
#706 := (= #704 #705)
#701 := [rewrite]: #706
#571 := (= #411 #704)
#688 := (= #420 1::Int)
#426 := (* -1::Int -1::Int)
#709 := (= #426 1::Int)
#713 := [rewrite]: #709
#687 := (= #420 #426)
#684 := (= #419 -1::Int)
#698 := (div -3::Int 3::Int)
#530 := (= #698 -1::Int)
#683 := [rewrite]: #530
#527 := (= #419 #698)
#697 := (= #334 3::Int)
#691 := [rewrite]: #697
#690 := (= #418 -3::Int)
#696 := [rewrite]: #690
#529 := [monotonicity #696 #691]: #527
#686 := [trans #529 #683]: #684
#685 := [monotonicity #686]: #687
#570 := [trans #685 #713]: #688
#572 := [monotonicity #570]: #571
#679 := [trans #572 #701]: #531
#676 := [monotonicity #679]: #581
#680 := [trans #676 #694]: #677
#695 := (iff #425 #79)
#550 := (iff #425 #549)
#707 := (= #421 #705)
#699 := (= #421 #704)
#702 := (= #424 1::Int)
#708 := (= #424 #426)
#710 := (= #423 -1::Int)
#711 := [rewrite]: #710
#712 := [monotonicity #711]: #708
#703 := [trans #712 #713]: #702
#700 := [monotonicity #703]: #699
#548 := [trans #700 #701]: #707
#692 := [monotonicity #548]: #550
#689 := [trans #692 #694]: #695
#431 := (iff #410 false)
#397 := (or false false)
#722 := (iff #397 false)
#385 := [rewrite]: #722
#429 := (iff #410 #397)
#715 := (iff #398 false)
#1 := true
#372 := (not true)
#731 := (iff #372 false)
#734 := [rewrite]: #731
#714 := (iff #398 #372)
#439 := (iff #741 true)
#445 := (or true true)
#716 := (iff #445 true)
#717 := [rewrite]: #716
#446 := (iff #741 #445)
#443 := (iff #404 true)
#444 := [rewrite]: #443
#725 := (iff #739 true)
#726 := [rewrite]: #725
#340 := [monotonicity #726 #444]: #446
#440 := [trans #340 #717]: #439
#718 := [monotonicity #440]: #714
#719 := [trans #718 #734]: #715
#720 := (iff #409 false)
#373 := (iff #409 #372)
#730 := (iff #735 true)
#727 := (or false true)
#729 := (iff #727 true)
#367 := [rewrite]: #729
#728 := (iff #735 #727)
#388 := (iff #528 false)
#724 := [rewrite]: #388
#723 := [monotonicity #724 #726]: #728
#732 := [trans #723 #367]: #730
#733 := [monotonicity #732]: #373
#721 := [trans #733 #734]: #720
#430 := [monotonicity #721 #719]: #429
#432 := [trans #430 #385]: #431
#582 := [monotonicity #432 #689 #680]: #580
#585 := [trans #582 #576]: #584
#386 := (iff #740 false)
#738 := (iff #740 #397)
#401 := (iff #744 false)
#737 := [rewrite]: #401
#736 := (iff #745 false)
#396 := [rewrite]: #736
#381 := [monotonicity #396 #737]: #738
#387 := [trans #381 #385]: #386
#588 := [monotonicity #387 #585]: #587
#669 := [trans #588 #678]: #682
#673 := [monotonicity #669]: #672
#675 := [trans #673 #670]: #672
#662 := [quant-inst #9 #70]: #660
#664 := [mp #662 #675]: #663
[unit-resolution #664 #87 #753]: false
unsat
0d7678af8cbb5c17b0aa826f273a0694a47c1519 326 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#19 := (f4 f5 #18)
#21 := (f3 #19 #20)
#750 := (pattern #21)
#22 := 0::Int
#94 := -1::Int
#98 := (* -1::Int #20)
#95 := (* -1::Int #18)
#101 := (div #95 #98)
#252 := (* -1::Int #101)
#253 := (+ #21 #252)
#254 := (= #253 0::Int)
#32 := (div #18 #20)
#249 := (* -1::Int #32)
#250 := (+ #21 #249)
#251 := (= #250 0::Int)
#127 := (>= #18 0::Int)
#120 := (<= #20 0::Int)
#212 := (or #120 #127)
#213 := (not #212)
#116 := (<= #18 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#255 := (ite #216 #251 #254)
#248 := (= #21 0::Int)
#24 := (= #20 0::Int)
#23 := (= #18 0::Int)
#25 := (or #23 #24)
#256 := (ite #25 #248 #255)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #256)
#259 := (forall (vars (?v0 Int) (?v1 Int)) #256)
#754 := (iff #259 #751)
#752 := (iff #256 #256)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#219 := (ite #216 #32 #101)
#222 := (ite #25 0::Int #219)
#225 := (= #21 #222)
#228 := (forall (vars (?v0 Int) (?v1 Int)) #225)
#260 := (iff #228 #259)
#257 := (iff #225 #256)
#258 := [rewrite]: #257
#261 := [quant-intro #258]: #260
#128 := (not #127)
#121 := (not #120)
#131 := (and #121 #128)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#137 := (ite #134 #32 #101)
#140 := (ite #25 0::Int #137)
#143 := (= #21 #140)
#146 := (forall (vars (?v0 Int) (?v1 Int)) #143)
#229 := (iff #146 #228)
#226 := (iff #143 #225)
#223 := (= #140 #222)
#220 := (= #137 #219)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#221 := [monotonicity #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [quant-intro #227]: #229
#208 := (~ #146 #146)
#206 := (~ #143 #143)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#34 := (- #20)
#33 := (- #18)
#35 := (div #33 #34)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#36 := (ite #31 #32 #35)
#37 := (ite #25 0::Int #36)
#38 := (= #21 #37)
#39 := (forall (vars (?v0 Int) (?v1 Int)) #38)
#149 := (iff #39 #146)
#87 := (and #27 #29)
#91 := (or #28 #87)
#104 := (ite #91 #32 #101)
#107 := (ite #25 0::Int #104)
#110 := (= #21 #107)
#113 := (forall (vars (?v0 Int) (?v1 Int)) #110)
#147 := (iff #113 #146)
#144 := (iff #110 #143)
#141 := (= #107 #140)
#138 := (= #104 #137)
#135 := (iff #91 #134)
#132 := (iff #87 #131)
#129 := (iff #29 #128)
#130 := [rewrite]: #129
#122 := (iff #27 #121)
#123 := [rewrite]: #122
#133 := [monotonicity #123 #130]: #132
#125 := (iff #28 #124)
#118 := (iff #26 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#139 := [monotonicity #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [quant-intro #145]: #147
#114 := (iff #39 #113)
#111 := (iff #38 #110)
#108 := (= #37 #107)
#105 := (= #36 #104)
#102 := (= #35 #101)
#99 := (= #34 #98)
#100 := [rewrite]: #99
#96 := (= #33 #95)
#97 := [rewrite]: #96
#103 := [monotonicity #97 #100]: #102
#92 := (iff #31 #91)
#89 := (iff #30 #87)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#106 := [monotonicity #93 #103]: #105
#109 := [monotonicity #106]: #108
#112 := [monotonicity #109]: #111
#115 := [quant-intro #112]: #114
#150 := [trans #115 #148]: #149
#86 := [asserted]: #39
#151 := [mp #86 #150]: #146
#200 := [mp~ #151 #209]: #146
#231 := [mp #200 #230]: #228
#262 := [mp #231 #261]: #259
#756 := [mp #262 #755]: #751
#77 := -2::Int
#71 := -3::Int
#9 := 5::Int
#10 := (f4 f5 5::Int)
#74 := (f3 #10 -3::Int)
#80 := (= #74 -2::Int)
#83 := (not #80)
#14 := 2::Int
#15 := (- 2::Int)
#11 := 3::Int
#12 := (- 3::Int)
#13 := (f3 #10 #12)
#16 := (= #13 #15)
#17 := (not #16)
#84 := (iff #17 #83)
#81 := (iff #16 #80)
#78 := (= #15 -2::Int)
#79 := [rewrite]: #78
#75 := (= #13 #74)
#72 := (= #12 -3::Int)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#85 := [monotonicity #82]: #84
#70 := [asserted]: #17
#88 := [mp #70 #85]: #83
#670 := (not #751)
#664 := (or #670 #80)
#336 := (* -1::Int -3::Int)
#421 := (* -1::Int 5::Int)
#422 := (div #421 #336)
#423 := (* -1::Int #422)
#414 := (+ #74 #423)
#425 := (= #414 0::Int)
#426 := (div 5::Int -3::Int)
#354 := (* -1::Int #426)
#427 := (+ #74 #354)
#424 := (= #427 0::Int)
#428 := (>= 5::Int 0::Int)
#407 := (<= -3::Int 0::Int)
#742 := (or #407 #428)
#744 := (not #742)
#401 := (<= 5::Int 0::Int)
#531 := (or #401 #407)
#738 := (not #531)
#412 := (or #738 #744)
#413 := (ite #412 #424 #425)
#745 := (= #74 0::Int)
#746 := (= -3::Int 0::Int)
#747 := (= 5::Int 0::Int)
#748 := (or #747 #746)
#743 := (ite #748 #745 #413)
#671 := (or #670 #743)
#656 := (iff #671 #664)
#659 := (iff #664 #664)
#660 := [rewrite]: #659
#668 := (iff #743 #80)
#676 := (ite false #745 #80)
#678 := (iff #676 #80)
#667 := [rewrite]: #678
#677 := (iff #743 #676)
#665 := (iff #413 #80)
#696 := (= #74 -1::Int)
#685 := (ite false #696 #80)
#666 := (iff #685 #80)
#663 := [rewrite]: #666
#672 := (iff #413 #685)
#684 := (iff #425 #80)
#568 := (+ 2::Int #74)
#587 := (= #568 0::Int)
#590 := (iff #587 #80)
#591 := [rewrite]: #590
#588 := (iff #425 #587)
#586 := (= #414 #568)
#679 := (+ #74 2::Int)
#583 := (= #679 #568)
#585 := [rewrite]: #583
#680 := (= #414 #679)
#682 := (= #423 2::Int)
#691 := (* -1::Int -2::Int)
#575 := (= #691 2::Int)
#534 := [rewrite]: #575
#573 := (= #423 #691)
#690 := (= #422 -2::Int)
#699 := -5::Int
#532 := (div -5::Int 3::Int)
#687 := (= #532 -2::Int)
#689 := [rewrite]: #687
#533 := (= #422 #532)
#701 := (= #336 3::Int)
#530 := [rewrite]: #701
#700 := (= #421 -5::Int)
#694 := [rewrite]: #700
#686 := [monotonicity #694 #530]: #533
#688 := [trans #686 #689]: #690
#574 := [monotonicity #688]: #573
#584 := [trans #574 #534]: #682
#683 := [monotonicity #584]: #680
#579 := [trans #683 #585]: #586
#589 := [monotonicity #579]: #588
#681 := [trans #589 #591]: #684
#692 := (iff #424 #696)
#715 := 1::Int
#708 := (+ 1::Int #74)
#552 := (= #708 0::Int)
#697 := (iff #552 #696)
#698 := [rewrite]: #697
#553 := (iff #424 #552)
#710 := (= #427 #708)
#707 := (+ #74 1::Int)
#709 := (= #707 #708)
#704 := [rewrite]: #709
#702 := (= #427 #707)
#705 := (= #354 1::Int)
#714 := (* -1::Int -1::Int)
#712 := (= #714 1::Int)
#716 := [rewrite]: #712
#429 := (= #354 #714)
#435 := (= #426 -1::Int)
#713 := [rewrite]: #435
#711 := [monotonicity #713]: #429
#706 := [trans #711 #716]: #705
#703 := [monotonicity #706]: #702
#551 := [trans #703 #704]: #710
#695 := [monotonicity #551]: #553
#693 := [trans #695 #698]: #692
#433 := (iff #412 false)
#740 := (or false false)
#384 := (iff #740 false)
#725 := [rewrite]: #384
#722 := (iff #412 #740)
#721 := (iff #744 false)
#1 := true
#735 := (not true)
#736 := (iff #735 false)
#734 := [rewrite]: #736
#443 := (iff #744 #735)
#720 := (iff #742 true)
#447 := (or true true)
#342 := (iff #447 true)
#719 := [rewrite]: #342
#448 := (iff #742 #447)
#724 := (iff #428 true)
#446 := [rewrite]: #724
#727 := (iff #407 true)
#728 := [rewrite]: #727
#449 := [monotonicity #728 #446]: #448
#442 := [trans #449 #719]: #720
#717 := [monotonicity #442]: #443
#718 := [trans #717 #734]: #721
#737 := (iff #738 false)
#375 := (iff #738 #735)
#370 := (iff #531 true)
#729 := (or false true)
#726 := (iff #729 true)
#732 := [rewrite]: #726
#730 := (iff #531 #729)
#390 := (iff #401 false)
#391 := [rewrite]: #390
#731 := [monotonicity #391 #728]: #730
#733 := [trans #731 #732]: #370
#376 := [monotonicity #733]: #375
#723 := [trans #376 #734]: #737
#432 := [monotonicity #723 #718]: #722
#434 := [trans #432 #725]: #433
#674 := [monotonicity #434 #693 #681]: #672
#675 := [trans #674 #663]: #665
#388 := (iff #748 false)
#400 := (iff #748 #740)
#399 := (iff #746 false)
#404 := [rewrite]: #399
#749 := (iff #747 false)
#739 := [rewrite]: #749
#741 := [monotonicity #739 #404]: #400
#389 := [trans #741 #725]: #388
#673 := [monotonicity #389 #675]: #677
#669 := [trans #673 #667]: #668
#658 := [monotonicity #669]: #656
#661 := [trans #658 #660]: #656
#655 := [quant-inst #9 #71]: #671
#657 := [mp #655 #661]: #664
[unit-resolution #657 #88 #756]: false
unsat
ca8fe38f3d2a99215e3a097c3b452207a271c445 327 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#758 := (pattern #19)
#20 := 0::Int
#69 := -1::Int
#107 := (* -1::Int #18)
#104 := (* -1::Int #16)
#110 := (div #104 #107)
#261 := (* -1::Int #110)
#262 := (+ #19 #261)
#263 := (= #262 0::Int)
#30 := (div #16 #18)
#258 := (* -1::Int #30)
#259 := (+ #19 #258)
#260 := (= #259 0::Int)
#136 := (>= #16 0::Int)
#129 := (<= #18 0::Int)
#221 := (or #129 #136)
#222 := (not #221)
#125 := (<= #16 0::Int)
#219 := (or #125 #129)
#220 := (not #219)
#225 := (or #220 #222)
#264 := (ite #225 #260 #263)
#257 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#265 := (ite #23 #257 #264)
#759 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #758) #265)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#762 := (iff #268 #759)
#760 := (iff #265 #265)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#228 := (ite #225 #30 #110)
#231 := (ite #23 0::Int #228)
#234 := (= #19 #231)
#237 := (forall (vars (?v0 Int) (?v1 Int)) #234)
#269 := (iff #237 #268)
#266 := (iff #234 #265)
#267 := [rewrite]: #266
#270 := [quant-intro #267]: #269
#137 := (not #136)
#130 := (not #129)
#140 := (and #130 #137)
#126 := (not #125)
#133 := (and #126 #130)
#143 := (or #133 #140)
#146 := (ite #143 #30 #110)
#149 := (ite #23 0::Int #146)
#152 := (= #19 #149)
#155 := (forall (vars (?v0 Int) (?v1 Int)) #152)
#238 := (iff #155 #237)
#235 := (iff #152 #234)
#232 := (= #149 #231)
#229 := (= #146 #228)
#226 := (iff #143 #225)
#223 := (iff #140 #222)
#224 := [rewrite]: #223
#213 := (iff #133 #220)
#214 := [rewrite]: #213
#227 := [monotonicity #214 #224]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [quant-intro #236]: #238
#217 := (~ #155 #155)
#215 := (~ #152 #152)
#216 := [refl]: #215
#218 := [nnf-pos #216]: #217
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (ite #29 #30 #33)
#35 := (ite #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#158 := (iff #37 #155)
#98 := (and #25 #27)
#101 := (or #26 #98)
#113 := (ite #101 #30 #110)
#116 := (ite #23 0::Int #113)
#119 := (= #19 #116)
#122 := (forall (vars (?v0 Int) (?v1 Int)) #119)
#156 := (iff #122 #155)
#153 := (iff #119 #152)
#150 := (= #116 #149)
#147 := (= #113 #146)
#144 := (iff #101 #143)
#141 := (iff #98 #140)
#138 := (iff #27 #137)
#139 := [rewrite]: #138
#131 := (iff #25 #130)
#132 := [rewrite]: #131
#142 := [monotonicity #132 #139]: #141
#134 := (iff #26 #133)
#127 := (iff #24 #126)
#128 := [rewrite]: #127
#135 := [monotonicity #128 #132]: #134
#145 := [monotonicity #135 #142]: #144
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#157 := [quant-intro #154]: #156
#123 := (iff #37 #122)
#120 := (iff #36 #119)
#117 := (= #35 #116)
#114 := (= #34 #113)
#111 := (= #33 #110)
#108 := (= #32 #107)
#109 := [rewrite]: #108
#105 := (= #31 #104)
#106 := [rewrite]: #105
#112 := [monotonicity #106 #109]: #111
#102 := (iff #29 #101)
#99 := (iff #28 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#115 := [monotonicity #103 #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [quant-intro #121]: #123
#159 := [trans #124 #157]: #158
#97 := [asserted]: #37
#160 := [mp #97 #159]: #155
#209 := [mp~ #160 #218]: #155
#240 := [mp #209 #239]: #237
#271 := [mp #240 #270]: #268
#764 := [mp #271 #763]: #759
#12 := 3::Int
#72 := (f4 f5 -1::Int)
#75 := (f3 #72 3::Int)
#78 := (= #75 -1::Int)
#91 := (not #78)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (f4 f5 #10)
#13 := (f3 #11 3::Int)
#14 := (= #13 #10)
#15 := (not #14)
#94 := (iff #15 #91)
#81 := (= -1::Int #75)
#86 := (not #81)
#92 := (iff #86 #91)
#89 := (iff #81 #78)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#87 := (iff #15 #86)
#84 := (iff #14 #81)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #14 #78)
#70 := (= #10 -1::Int)
#71 := [rewrite]: #70
#76 := (= #13 #75)
#73 := (= #11 #72)
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#80 := [monotonicity #77 #71]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#95 := [trans #88 #93]: #94
#68 := [asserted]: #15
#96 := [mp #68 #95]: #91
#684 := (not #759)
#685 := (or #684 #78)
#345 := (* -1::Int 3::Int)
#429 := (* -1::Int -1::Int)
#430 := (div #429 #345)
#431 := (* -1::Int #430)
#422 := (+ #75 #431)
#433 := (= #422 0::Int)
#434 := (div -1::Int 3::Int)
#435 := (* -1::Int #434)
#432 := (+ #75 #435)
#436 := (= #432 0::Int)
#415 := (>= -1::Int 0::Int)
#750 := (<= 3::Int 0::Int)
#752 := (or #750 #415)
#409 := (not #752)
#539 := (<= -1::Int 0::Int)
#746 := (or #539 #750)
#420 := (not #746)
#421 := (or #420 #409)
#753 := (ite #421 #436 #433)
#754 := (= #75 0::Int)
#755 := (= 3::Int 0::Int)
#756 := (= -1::Int 0::Int)
#751 := (or #756 #755)
#757 := (ite #751 #754 #753)
#681 := (or #684 #757)
#675 := (iff #681 #685)
#677 := (iff #685 #685)
#678 := [rewrite]: #677
#673 := (iff #757 #78)
#693 := (ite false #754 #78)
#674 := (iff #693 #78)
#671 := [rewrite]: #674
#680 := (iff #757 #693)
#692 := (iff #753 #78)
#1 := true
#595 := (ite true #78 #754)
#598 := (iff #595 #78)
#599 := [rewrite]: #598
#596 := (iff #753 #595)
#594 := (iff #433 #754)
#591 := (= #422 #75)
#592 := (+ #75 0::Int)
#691 := (= #592 #75)
#576 := [rewrite]: #691
#687 := (= #422 #592)
#542 := (= #431 0::Int)
#696 := (* -1::Int 0::Int)
#582 := (= #696 0::Int)
#583 := [rewrite]: #582
#699 := (= #431 #696)
#697 := (= #430 0::Int)
#708 := -3::Int
#538 := (div 1::Int -3::Int)
#694 := (= #538 0::Int)
#695 := [rewrite]: #694
#540 := (= #430 #538)
#702 := (= #345 -3::Int)
#709 := [rewrite]: #702
#713 := (= #429 1::Int)
#714 := [rewrite]: #713
#541 := [monotonicity #714 #709]: #540
#698 := [trans #541 #695]: #697
#581 := [monotonicity #698]: #699
#690 := [trans #581 #583]: #542
#688 := [monotonicity #690]: #687
#593 := [trans #688 #576]: #591
#587 := [monotonicity #593]: #594
#701 := (iff #436 #78)
#712 := (+ 1::Int #75)
#703 := (= #712 0::Int)
#706 := (iff #703 #78)
#700 := [rewrite]: #706
#704 := (iff #436 #703)
#560 := (= #432 #712)
#711 := (+ #75 1::Int)
#718 := (= #711 #712)
#559 := [rewrite]: #718
#716 := (= #432 #711)
#715 := (= #435 1::Int)
#720 := (= #435 #429)
#719 := (= #434 -1::Int)
#723 := [rewrite]: #719
#724 := [monotonicity #723]: #720
#710 := [trans #724 #714]: #715
#717 := [monotonicity #710]: #716
#561 := [trans #717 #559]: #560
#705 := [monotonicity #561]: #704
#707 := [trans #705 #700]: #701
#722 := (iff #421 true)
#440 := (or false true)
#443 := (iff #440 true)
#721 := [rewrite]: #443
#441 := (iff #421 #440)
#726 := (iff #409 true)
#728 := (not false)
#725 := (iff #728 true)
#729 := [rewrite]: #725
#450 := (iff #409 #728)
#351 := (iff #752 false)
#408 := (or false false)
#733 := (iff #408 false)
#396 := [rewrite]: #733
#456 := (iff #752 #408)
#454 := (iff #415 false)
#455 := [rewrite]: #454
#736 := (iff #750 false)
#737 := [rewrite]: #736
#457 := [monotonicity #737 #455]: #456
#727 := [trans #457 #396]: #351
#451 := [monotonicity #727]: #450
#730 := [trans #451 #729]: #726
#731 := (iff #420 false)
#383 := (not true)
#742 := (iff #383 false)
#745 := [rewrite]: #742
#384 := (iff #420 #383)
#741 := (iff #746 true)
#738 := (or true false)
#740 := (iff #738 true)
#378 := [rewrite]: #740
#739 := (iff #746 #738)
#399 := (iff #539 true)
#735 := [rewrite]: #399
#734 := [monotonicity #735 #737]: #739
#743 := [trans #734 #378]: #741
#744 := [monotonicity #743]: #384
#732 := [trans #744 #745]: #731
#442 := [monotonicity #732 #730]: #441
#437 := [trans #442 #721]: #722
#597 := [monotonicity #437 #707 #587]: #596
#689 := [trans #597 #599]: #692
#397 := (iff #751 false)
#749 := (iff #751 #408)
#412 := (iff #755 false)
#748 := [rewrite]: #412
#747 := (iff #756 false)
#407 := [rewrite]: #747
#392 := [monotonicity #407 #748]: #749
#398 := [trans #392 #396]: #397
#682 := [monotonicity #398 #689]: #680
#683 := [trans #682 #671]: #673
#676 := [monotonicity #683]: #675
#672 := [trans #676 #678]: #675
#686 := [quant-inst #69 #12]: #681
#679 := [mp #686 #672]: #685
[unit-resolution #679 #96 #764]: false
unsat
95ce555aaa4ba313bd33402001355ba151fdf57d 317 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#18 := (f4 f5 #17)
#20 := (f3 #18 #19)
#750 := (pattern #20)
#21 := 0::Int
#79 := -1::Int
#99 := (* -1::Int #19)
#96 := (* -1::Int #17)
#102 := (div #96 #99)
#253 := (* -1::Int #102)
#254 := (+ #20 #253)
#255 := (= #254 0::Int)
#31 := (div #17 #19)
#250 := (* -1::Int #31)
#251 := (+ #20 #250)
#252 := (= #251 0::Int)
#128 := (>= #17 0::Int)
#121 := (<= #19 0::Int)
#213 := (or #121 #128)
#214 := (not #213)
#117 := (<= #17 0::Int)
#211 := (or #117 #121)
#212 := (not #211)
#217 := (or #212 #214)
#256 := (ite #217 #252 #255)
#249 := (= #20 0::Int)
#23 := (= #19 0::Int)
#22 := (= #17 0::Int)
#24 := (or #22 #23)
#257 := (ite #24 #249 #256)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #257)
#260 := (forall (vars (?v0 Int) (?v1 Int)) #257)
#754 := (iff #260 #751)
#752 := (iff #257 #257)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#220 := (ite #217 #31 #102)
#223 := (ite #24 0::Int #220)
#226 := (= #20 #223)
#229 := (forall (vars (?v0 Int) (?v1 Int)) #226)
#261 := (iff #229 #260)
#258 := (iff #226 #257)
#259 := [rewrite]: #258
#262 := [quant-intro #259]: #261
#129 := (not #128)
#122 := (not #121)
#132 := (and #122 #129)
#118 := (not #117)
#125 := (and #118 #122)
#135 := (or #125 #132)
#138 := (ite #135 #31 #102)
#141 := (ite #24 0::Int #138)
#144 := (= #20 #141)
#147 := (forall (vars (?v0 Int) (?v1 Int)) #144)
#230 := (iff #147 #229)
#227 := (iff #144 #226)
#224 := (= #141 #223)
#221 := (= #138 #220)
#218 := (iff #135 #217)
#215 := (iff #132 #214)
#216 := [rewrite]: #215
#205 := (iff #125 #212)
#206 := [rewrite]: #205
#219 := [monotonicity #206 #216]: #218
#222 := [monotonicity #219]: #221
#225 := [monotonicity #222]: #224
#228 := [monotonicity #225]: #227
#231 := [quant-intro #228]: #230
#209 := (~ #147 #147)
#207 := (~ #144 #144)
#208 := [refl]: #207
#210 := [nnf-pos #208]: #209
#33 := (- #19)
#32 := (- #17)
#34 := (div #32 #33)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (ite #30 #31 #34)
#36 := (ite #24 0::Int #35)
#37 := (= #20 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#150 := (iff #38 #147)
#89 := (and #26 #28)
#93 := (or #27 #89)
#105 := (ite #93 #31 #102)
#108 := (ite #24 0::Int #105)
#111 := (= #20 #108)
#114 := (forall (vars (?v0 Int) (?v1 Int)) #111)
#148 := (iff #114 #147)
#145 := (iff #111 #144)
#142 := (= #108 #141)
#139 := (= #105 #138)
#136 := (iff #93 #135)
#133 := (iff #89 #132)
#130 := (iff #28 #129)
#131 := [rewrite]: #130
#123 := (iff #26 #122)
#124 := [rewrite]: #123
#134 := [monotonicity #124 #131]: #133
#126 := (iff #27 #125)
#119 := (iff #25 #118)
#120 := [rewrite]: #119
#127 := [monotonicity #120 #124]: #126
#137 := [monotonicity #127 #134]: #136
#140 := [monotonicity #137]: #139
#143 := [monotonicity #140]: #142
#146 := [monotonicity #143]: #145
#149 := [quant-intro #146]: #148
#115 := (iff #38 #114)
#112 := (iff #37 #111)
#109 := (= #36 #108)
#106 := (= #35 #105)
#103 := (= #34 #102)
#100 := (= #33 #99)
#101 := [rewrite]: #100
#97 := (= #32 #96)
#98 := [rewrite]: #97
#104 := [monotonicity #98 #101]: #103
#94 := (iff #30 #93)
#91 := (iff #29 #89)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#107 := [monotonicity #95 #104]: #106
#110 := [monotonicity #107]: #109
#113 := [monotonicity #110]: #112
#116 := [quant-intro #113]: #115
#151 := [trans #116 #149]: #150
#88 := [asserted]: #38
#152 := [mp #88 #151]: #147
#201 := [mp~ #152 #210]: #147
#232 := [mp #201 #231]: #229
#263 := [mp #232 #262]: #260
#756 := [mp #263 #755]: #751
#9 := 3::Int
#70 := -3::Int
#73 := (f4 f5 -3::Int)
#76 := (f3 #73 3::Int)
#82 := (= #76 -1::Int)
#85 := (not #82)
#13 := 1::Int
#14 := (- 1::Int)
#10 := (- 3::Int)
#11 := (f4 f5 #10)
#12 := (f3 #11 3::Int)
#15 := (= #12 #14)
#16 := (not #15)
#86 := (iff #16 #85)
#83 := (iff #15 #82)
#80 := (= #14 -1::Int)
#81 := [rewrite]: #80
#77 := (= #12 #76)
#74 := (= #11 #73)
#71 := (= #10 -3::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#84 := [monotonicity #78 #81]: #83
#87 := [monotonicity #84]: #86
#69 := [asserted]: #16
#90 := [mp #69 #87]: #85
#665 := (not #751)
#675 := (or #665 #82)
#337 := (* -1::Int 3::Int)
#421 := (* -1::Int -3::Int)
#422 := (div #421 #337)
#423 := (* -1::Int #422)
#414 := (+ #76 #423)
#425 := (= #414 0::Int)
#426 := (div -3::Int 3::Int)
#427 := (* -1::Int #426)
#424 := (+ #76 #427)
#428 := (= #424 0::Int)
#407 := (>= -3::Int 0::Int)
#742 := (<= 3::Int 0::Int)
#744 := (or #742 #407)
#401 := (not #744)
#531 := (<= -3::Int 0::Int)
#738 := (or #531 #742)
#412 := (not #738)
#413 := (or #412 #401)
#745 := (ite #413 #428 #425)
#746 := (= #76 0::Int)
#747 := (= 3::Int 0::Int)
#748 := (= -3::Int 0::Int)
#743 := (or #748 #747)
#749 := (ite #743 #746 #745)
#676 := (or #665 #749)
#673 := (iff #676 #675)
#667 := (iff #675 #675)
#668 := [rewrite]: #667
#666 := (iff #749 #82)
#684 := (ite false #746 #82)
#672 := (iff #684 #82)
#674 := [rewrite]: #672
#681 := (iff #749 #684)
#590 := (iff #745 #82)
#1 := true
#586 := (ite true #82 #82)
#588 := (iff #586 #82)
#589 := [rewrite]: #588
#579 := (iff #745 #586)
#583 := (iff #425 #82)
#710 := (+ 1::Int #76)
#696 := (= #710 0::Int)
#692 := (iff #696 #82)
#693 := [rewrite]: #692
#683 := (iff #425 #696)
#679 := (= #414 #710)
#708 := (+ #76 1::Int)
#551 := (= #708 #710)
#552 := [rewrite]: #551
#682 := (= #414 #708)
#575 := (= #423 1::Int)
#712 := (* -1::Int -1::Int)
#706 := (= #712 1::Int)
#707 := [rewrite]: #706
#573 := (= #423 #712)
#688 := (= #422 -1::Int)
#533 := (div 3::Int -3::Int)
#689 := (= #533 -1::Int)
#690 := [rewrite]: #689
#686 := (= #422 #533)
#530 := (= #337 -3::Int)
#532 := [rewrite]: #530
#694 := (= #421 3::Int)
#701 := [rewrite]: #694
#687 := [monotonicity #701 #532]: #686
#691 := [trans #687 #690]: #688
#574 := [monotonicity #691]: #573
#534 := [trans #574 #707]: #575
#584 := [monotonicity #534]: #682
#680 := [trans #584 #552]: #679
#568 := [monotonicity #680]: #683
#585 := [trans #568 #693]: #583
#699 := (iff #428 #82)
#697 := (iff #428 #696)
#553 := (= #424 #710)
#709 := (= #424 #708)
#702 := (= #427 1::Int)
#716 := (= #427 #712)
#711 := (= #426 -1::Int)
#715 := [rewrite]: #711
#705 := [monotonicity #715]: #716
#703 := [trans #705 #707]: #702
#704 := [monotonicity #703]: #709
#695 := [trans #704 #552]: #553
#698 := [monotonicity #695]: #697
#700 := [trans #698 #693]: #699
#714 := (iff #413 true)
#432 := (or false true)
#435 := (iff #432 true)
#713 := [rewrite]: #435
#433 := (iff #413 #432)
#718 := (iff #401 true)
#720 := (not false)
#717 := (iff #720 true)
#721 := [rewrite]: #717
#442 := (iff #401 #720)
#343 := (iff #744 false)
#400 := (or false false)
#725 := (iff #400 false)
#388 := [rewrite]: #725
#448 := (iff #744 #400)
#446 := (iff #407 false)
#447 := [rewrite]: #446
#728 := (iff #742 false)
#729 := [rewrite]: #728
#449 := [monotonicity #729 #447]: #448
#719 := [trans #449 #388]: #343
#443 := [monotonicity #719]: #442
#722 := [trans #443 #721]: #718
#723 := (iff #412 false)
#375 := (not true)
#734 := (iff #375 false)
#737 := [rewrite]: #734
#376 := (iff #412 #375)
#733 := (iff #738 true)
#730 := (or true false)
#732 := (iff #730 true)
#370 := [rewrite]: #732
#731 := (iff #738 #730)
#391 := (iff #531 true)
#727 := [rewrite]: #391
#726 := [monotonicity #727 #729]: #731
#735 := [trans #726 #370]: #733
#736 := [monotonicity #735]: #376
#724 := [trans #736 #737]: #723
#434 := [monotonicity #724 #722]: #433
#429 := [trans #434 #713]: #714
#587 := [monotonicity #429 #700 #585]: #579
#591 := [trans #587 #589]: #590
#389 := (iff #743 false)
#741 := (iff #743 #400)
#404 := (iff #747 false)
#740 := [rewrite]: #404
#739 := (iff #748 false)
#399 := [rewrite]: #739
#384 := [monotonicity #399 #740]: #741
#390 := [trans #384 #388]: #389
#685 := [monotonicity #390 #591]: #681
#663 := [trans #685 #674]: #666
#678 := [monotonicity #663]: #673
#669 := [trans #678 #668]: #673
#677 := [quant-inst #70 #9]: #676
#670 := [mp #677 #669]: #675
[unit-resolution #670 #90 #756]: false
unsat
b727e2bb2818b6309ef23720490cb0c379a73f89 332 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#19 := (f4 f5 #18)
#21 := (f3 #19 #20)
#753 := (pattern #21)
#22 := 0::Int
#97 := -1::Int
#101 := (* -1::Int #20)
#98 := (* -1::Int #18)
#104 := (div #98 #101)
#255 := (* -1::Int #104)
#256 := (+ #21 #255)
#257 := (= #256 0::Int)
#32 := (div #18 #20)
#252 := (* -1::Int #32)
#253 := (+ #21 #252)
#254 := (= #253 0::Int)
#130 := (>= #18 0::Int)
#123 := (<= #20 0::Int)
#215 := (or #123 #130)
#216 := (not #215)
#119 := (<= #18 0::Int)
#213 := (or #119 #123)
#214 := (not #213)
#219 := (or #214 #216)
#258 := (ite #219 #254 #257)
#251 := (= #21 0::Int)
#24 := (= #20 0::Int)
#23 := (= #18 0::Int)
#25 := (or #23 #24)
#259 := (ite #25 #251 #258)
#754 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #753) #259)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#757 := (iff #262 #754)
#755 := (iff #259 #259)
#756 := [refl]: #755
#758 := [quant-intro #756]: #757
#222 := (ite #219 #32 #104)
#225 := (ite #25 0::Int #222)
#228 := (= #21 #225)
#231 := (forall (vars (?v0 Int) (?v1 Int)) #228)
#263 := (iff #231 #262)
#260 := (iff #228 #259)
#261 := [rewrite]: #260
#264 := [quant-intro #261]: #263
#131 := (not #130)
#124 := (not #123)
#134 := (and #124 #131)
#120 := (not #119)
#127 := (and #120 #124)
#137 := (or #127 #134)
#140 := (ite #137 #32 #104)
#143 := (ite #25 0::Int #140)
#146 := (= #21 #143)
#149 := (forall (vars (?v0 Int) (?v1 Int)) #146)
#232 := (iff #149 #231)
#229 := (iff #146 #228)
#226 := (= #143 #225)
#223 := (= #140 #222)
#220 := (iff #137 #219)
#217 := (iff #134 #216)
#218 := [rewrite]: #217
#207 := (iff #127 #214)
#208 := [rewrite]: #207
#221 := [monotonicity #208 #218]: #220
#224 := [monotonicity #221]: #223
#227 := [monotonicity #224]: #226
#230 := [monotonicity #227]: #229
#233 := [quant-intro #230]: #232
#211 := (~ #149 #149)
#209 := (~ #146 #146)
#210 := [refl]: #209
#212 := [nnf-pos #210]: #211
#34 := (- #20)
#33 := (- #18)
#35 := (div #33 #34)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#36 := (ite #31 #32 #35)
#37 := (ite #25 0::Int #36)
#38 := (= #21 #37)
#39 := (forall (vars (?v0 Int) (?v1 Int)) #38)
#152 := (iff #39 #149)
#90 := (and #27 #29)
#94 := (or #28 #90)
#107 := (ite #94 #32 #104)
#110 := (ite #25 0::Int #107)
#113 := (= #21 #110)
#116 := (forall (vars (?v0 Int) (?v1 Int)) #113)
#150 := (iff #116 #149)
#147 := (iff #113 #146)
#144 := (= #110 #143)
#141 := (= #107 #140)
#138 := (iff #94 #137)
#135 := (iff #90 #134)
#132 := (iff #29 #131)
#133 := [rewrite]: #132
#125 := (iff #27 #124)
#126 := [rewrite]: #125
#136 := [monotonicity #126 #133]: #135
#128 := (iff #28 #127)
#121 := (iff #26 #120)
#122 := [rewrite]: #121
#129 := [monotonicity #122 #126]: #128
#139 := [monotonicity #129 #136]: #138
#142 := [monotonicity #139]: #141
#145 := [monotonicity #142]: #144
#148 := [monotonicity #145]: #147
#151 := [quant-intro #148]: #150
#117 := (iff #39 #116)
#114 := (iff #38 #113)
#111 := (= #37 #110)
#108 := (= #36 #107)
#105 := (= #35 #104)
#102 := (= #34 #101)
#103 := [rewrite]: #102
#99 := (= #33 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#95 := (iff #31 #94)
#92 := (iff #30 #90)
#93 := [rewrite]: #92
#96 := [monotonicity #93]: #95
#109 := [monotonicity #96 #106]: #108
#112 := [monotonicity #109]: #111
#115 := [monotonicity #112]: #114
#118 := [quant-intro #115]: #117
#153 := [trans #118 #151]: #152
#89 := [asserted]: #39
#154 := [mp #89 #153]: #149
#203 := [mp~ #154 #212]: #149
#234 := [mp #203 #233]: #231
#265 := [mp #234 #264]: #262
#759 := [mp #265 #758]: #754
#80 := -2::Int
#12 := 3::Int
#71 := -5::Int
#74 := (f4 f5 -5::Int)
#77 := (f3 #74 3::Int)
#83 := (= #77 -2::Int)
#86 := (not #83)
#14 := 2::Int
#15 := (- 2::Int)
#9 := 5::Int
#10 := (- 5::Int)
#11 := (f4 f5 #10)
#13 := (f3 #11 3::Int)
#16 := (= #13 #15)
#17 := (not #16)
#87 := (iff #17 #86)
#84 := (iff #16 #83)
#81 := (= #15 -2::Int)
#82 := [rewrite]: #81
#78 := (= #13 #77)
#75 := (= #11 #74)
#72 := (= #10 -5::Int)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#85 := [monotonicity #79 #82]: #84
#88 := [monotonicity #85]: #87
#70 := [asserted]: #17
#91 := [mp #70 #88]: #86
#658 := (not #754)
#659 := (or #658 #83)
#339 := (* -1::Int 3::Int)
#424 := (* -1::Int -5::Int)
#425 := (div #424 #339)
#426 := (* -1::Int #425)
#417 := (+ #77 #426)
#428 := (= #417 0::Int)
#429 := (div -5::Int 3::Int)
#357 := (* -1::Int #429)
#430 := (+ #77 #357)
#427 := (= #430 0::Int)
#431 := (>= -5::Int 0::Int)
#410 := (<= 3::Int 0::Int)
#745 := (or #410 #431)
#747 := (not #745)
#404 := (<= -5::Int 0::Int)
#534 := (or #404 #410)
#741 := (not #534)
#415 := (or #741 #747)
#416 := (ite #415 #427 #428)
#748 := (= #77 0::Int)
#749 := (= 3::Int 0::Int)
#750 := (= -5::Int 0::Int)
#751 := (or #750 #749)
#746 := (ite #751 #748 #416)
#661 := (or #658 #746)
#663 := (iff #661 #659)
#660 := (iff #659 #659)
#665 := [rewrite]: #660
#667 := (iff #746 #83)
#681 := (ite false #748 #83)
#672 := (iff #681 #83)
#673 := [rewrite]: #672
#670 := (iff #746 #681)
#680 := (iff #416 #83)
#687 := (= #77 -1::Int)
#1 := true
#669 := (ite true #83 #687)
#678 := (iff #669 #83)
#679 := [rewrite]: #678
#666 := (iff #416 #669)
#675 := (iff #428 #687)
#537 := 1::Int
#588 := (+ 1::Int #77)
#592 := (= #588 0::Int)
#684 := (iff #592 #687)
#688 := [rewrite]: #684
#593 := (iff #428 #592)
#590 := (= #417 #588)
#686 := (+ #77 1::Int)
#589 := (= #686 #588)
#582 := [rewrite]: #589
#571 := (= #417 #686)
#682 := (= #426 1::Int)
#576 := (* -1::Int -1::Int)
#685 := (= #576 1::Int)
#587 := [rewrite]: #685
#577 := (= #426 #576)
#691 := (= #425 -1::Int)
#704 := -3::Int
#536 := (div 5::Int -3::Int)
#692 := (= #536 -1::Int)
#693 := [rewrite]: #692
#689 := (= #425 #536)
#533 := (= #339 -3::Int)
#535 := [rewrite]: #533
#703 := (= #424 5::Int)
#697 := [rewrite]: #703
#690 := [monotonicity #697 #535]: #689
#694 := [trans #690 #693]: #691
#578 := [monotonicity #694]: #577
#683 := [trans #578 #587]: #682
#586 := [monotonicity #683]: #571
#591 := [trans #586 #582]: #590
#594 := [monotonicity #591]: #593
#677 := [trans #594 #688]: #675
#696 := (iff #427 #83)
#707 := (+ 2::Int #77)
#698 := (= #707 0::Int)
#701 := (iff #698 #83)
#695 := [rewrite]: #701
#699 := (iff #427 #698)
#555 := (= #430 #707)
#706 := (+ #77 2::Int)
#713 := (= #706 #707)
#554 := [rewrite]: #713
#711 := (= #430 #706)
#710 := (= #357 2::Int)
#718 := (* -1::Int -2::Int)
#708 := (= #718 2::Int)
#709 := [rewrite]: #708
#715 := (= #357 #718)
#432 := (= #429 -2::Int)
#714 := [rewrite]: #432
#719 := [monotonicity #714]: #715
#705 := [trans #719 #709]: #710
#712 := [monotonicity #705]: #711
#556 := [trans #712 #554]: #555
#700 := [monotonicity #556]: #699
#702 := [trans #700 #695]: #696
#716 := (iff #415 true)
#725 := (or false true)
#437 := (iff #725 true)
#438 := [rewrite]: #437
#435 := (iff #415 #725)
#724 := (iff #747 true)
#722 := (not false)
#446 := (iff #722 true)
#720 := [rewrite]: #446
#723 := (iff #747 #722)
#452 := (iff #745 false)
#743 := (or false false)
#387 := (iff #743 false)
#728 := [rewrite]: #387
#450 := (iff #745 #743)
#727 := (iff #431 false)
#449 := [rewrite]: #727
#730 := (iff #410 false)
#731 := [rewrite]: #730
#451 := [monotonicity #731 #449]: #450
#345 := [trans #451 #728]: #452
#445 := [monotonicity #345]: #723
#721 := [trans #445 #720]: #724
#740 := (iff #741 false)
#738 := (not true)
#739 := (iff #738 false)
#737 := [rewrite]: #739
#378 := (iff #741 #738)
#373 := (iff #534 true)
#732 := (or true false)
#729 := (iff #732 true)
#735 := [rewrite]: #729
#733 := (iff #534 #732)
#393 := (iff #404 true)
#394 := [rewrite]: #393
#734 := [monotonicity #394 #731]: #733
#736 := [trans #734 #735]: #373
#379 := [monotonicity #736]: #378
#726 := [trans #379 #737]: #740
#436 := [monotonicity #726 #721]: #435
#717 := [trans #436 #438]: #716
#668 := [monotonicity #717 #702 #677]: #666
#676 := [trans #668 #679]: #680
#391 := (iff #751 false)
#403 := (iff #751 #743)
#402 := (iff #749 false)
#407 := [rewrite]: #402
#752 := (iff #750 false)
#742 := [rewrite]: #752
#744 := [monotonicity #742 #407]: #403
#392 := [trans #744 #728]: #391
#671 := [monotonicity #392 #676]: #670
#674 := [trans #671 #673]: #667
#664 := [monotonicity #674]: #663
#651 := [trans #664 #665]: #663
#662 := [quant-inst #71 #12]: #661
#652 := [mp #662 #651]: #659
[unit-resolution #652 #91 #759]: false
unsat
6a8f77a157d7a4aa5835bfb290984ca56f4fde4e 345 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#19 := (f4 f5 #18)
#21 := (f3 #19 #20)
#777 := (pattern #21)
#15 := 0::Int
#70 := -1::Int
#120 := (* -1::Int #20)
#117 := (* -1::Int #18)
#123 := (div #117 #120)
#280 := (* -1::Int #123)
#281 := (+ #21 #280)
#282 := (= #281 0::Int)
#31 := (div #18 #20)
#277 := (* -1::Int #31)
#278 := (+ #21 #277)
#279 := (= #278 0::Int)
#155 := (>= #18 0::Int)
#148 := (<= #20 0::Int)
#240 := (or #148 #155)
#241 := (not #240)
#144 := (<= #18 0::Int)
#238 := (or #144 #148)
#239 := (not #238)
#244 := (or #239 #241)
#283 := (ite #244 #279 #282)
#276 := (= #21 0::Int)
#23 := (= #20 0::Int)
#22 := (= #18 0::Int)
#24 := (or #22 #23)
#284 := (ite #24 #276 #283)
#778 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #777) #284)
#287 := (forall (vars (?v0 Int) (?v1 Int)) #284)
#781 := (iff #287 #778)
#779 := (iff #284 #284)
#780 := [refl]: #779
#782 := [quant-intro #780]: #781
#247 := (ite #244 #31 #123)
#250 := (ite #24 0::Int #247)
#253 := (= #21 #250)
#256 := (forall (vars (?v0 Int) (?v1 Int)) #253)
#288 := (iff #256 #287)
#285 := (iff #253 #284)
#286 := [rewrite]: #285
#289 := [quant-intro #286]: #288
#156 := (not #155)
#149 := (not #148)
#159 := (and #149 #156)
#145 := (not #144)
#152 := (and #145 #149)
#162 := (or #152 #159)
#165 := (ite #162 #31 #123)
#168 := (ite #24 0::Int #165)
#171 := (= #21 #168)
#174 := (forall (vars (?v0 Int) (?v1 Int)) #171)
#257 := (iff #174 #256)
#254 := (iff #171 #253)
#251 := (= #168 #250)
#248 := (= #165 #247)
#245 := (iff #162 #244)
#242 := (iff #159 #241)
#243 := [rewrite]: #242
#232 := (iff #152 #239)
#233 := [rewrite]: #232
#246 := [monotonicity #233 #243]: #245
#249 := [monotonicity #246]: #248
#252 := [monotonicity #249]: #251
#255 := [monotonicity #252]: #254
#258 := [quant-intro #255]: #257
#236 := (~ #174 #174)
#234 := (~ #171 #171)
#235 := [refl]: #234
#237 := [nnf-pos #235]: #236
#33 := (- #20)
#32 := (- #18)
#34 := (div #32 #33)
#26 := (< 0::Int #20)
#28 := (< #18 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #18)
#27 := (and #25 #26)
#30 := (or #27 #29)
#35 := (ite #30 #31 #34)
#36 := (ite #24 0::Int #35)
#37 := (= #21 #36)
#38 := (forall (vars (?v0 Int) (?v1 Int)) #37)
#177 := (iff #38 #174)
#111 := (and #26 #28)
#114 := (or #27 #111)
#126 := (ite #114 #31 #123)
#105 := (= 0::Int #20)
#102 := (= 0::Int #18)
#108 := (or #102 #105)
#129 := (ite #108 0::Int #126)
#132 := (= #21 #129)
#135 := (forall (vars (?v0 Int) (?v1 Int)) #132)
#175 := (iff #135 #174)
#172 := (iff #132 #171)
#169 := (= #129 #168)
#166 := (= #126 #165)
#163 := (iff #114 #162)
#160 := (iff #111 #159)
#157 := (iff #28 #156)
#158 := [rewrite]: #157
#150 := (iff #26 #149)
#151 := [rewrite]: #150
#161 := [monotonicity #151 #158]: #160
#153 := (iff #27 #152)
#146 := (iff #25 #145)
#147 := [rewrite]: #146
#154 := [monotonicity #147 #151]: #153
#164 := [monotonicity #154 #161]: #163
#167 := [monotonicity #164]: #166
#142 := (iff #108 #24)
#140 := (iff #105 #23)
#141 := [rewrite]: #140
#138 := (iff #102 #22)
#139 := [rewrite]: #138
#143 := [monotonicity #139 #141]: #142
#170 := [monotonicity #143 #167]: #169
#173 := [monotonicity #170]: #172
#176 := [quant-intro #173]: #175
#136 := (iff #38 #135)
#133 := (iff #37 #132)
#130 := (= #36 #129)
#127 := (= #35 #126)
#124 := (= #34 #123)
#121 := (= #33 #120)
#122 := [rewrite]: #121
#118 := (= #32 #117)
#119 := [rewrite]: #118
#125 := [monotonicity #119 #122]: #124
#115 := (iff #30 #114)
#112 := (iff #29 #111)
#113 := [rewrite]: #112
#116 := [monotonicity #113]: #115
#128 := [monotonicity #116 #125]: #127
#109 := (iff #24 #108)
#106 := (iff #23 #105)
#107 := [rewrite]: #106
#103 := (iff #22 #102)
#104 := [rewrite]: #103
#110 := [monotonicity #104 #107]: #109
#131 := [monotonicity #110 #128]: #130
#134 := [monotonicity #131]: #133
#137 := [quant-intro #134]: #136
#178 := [trans #137 #176]: #177
#101 := [asserted]: #38
#179 := [mp #101 #178]: #174
#228 := [mp~ #179 #237]: #174
#259 := [mp #228 #258]: #256
#290 := [mp #259 #289]: #287
#783 := [mp #290 #782]: #778
#76 := -3::Int
#73 := (f4 f5 -1::Int)
#79 := (f3 #73 -3::Int)
#82 := (= #79 0::Int)
#95 := (not #82)
#12 := 3::Int
#13 := (- 3::Int)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (f4 f5 #10)
#14 := (f3 #11 #13)
#16 := (= #14 0::Int)
#17 := (not #16)
#98 := (iff #17 #95)
#85 := (= 0::Int #79)
#90 := (not #85)
#96 := (iff #90 #95)
#93 := (iff #85 #82)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#91 := (iff #17 #90)
#88 := (iff #16 #85)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #16 #82)
#80 := (= #14 #79)
#77 := (= #13 -3::Int)
#78 := [rewrite]: #77
#74 := (= #11 #73)
#71 := (= #10 -1::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#99 := [trans #92 #97]: #98
#69 := [asserted]: #17
#100 := [mp #69 #99]: #95
#702 := (not #778)
#703 := (or #702 #82)
#364 := (* -1::Int -3::Int)
#448 := (* -1::Int -1::Int)
#449 := (div #448 #364)
#450 := (* -1::Int #449)
#441 := (+ #79 #450)
#452 := (= #441 0::Int)
#453 := (div -1::Int -3::Int)
#454 := (* -1::Int #453)
#451 := (+ #79 #454)
#455 := (= #451 0::Int)
#434 := (>= -1::Int 0::Int)
#769 := (<= -3::Int 0::Int)
#771 := (or #769 #434)
#428 := (not #771)
#558 := (<= -1::Int 0::Int)
#765 := (or #558 #769)
#439 := (not #765)
#440 := (or #439 #428)
#772 := (ite #440 #455 #452)
#773 := (= -3::Int 0::Int)
#774 := (= -1::Int 0::Int)
#775 := (or #774 #773)
#770 := (ite #775 #82 #772)
#704 := (or #702 #770)
#705 := (iff #704 #703)
#695 := (iff #703 #703)
#696 := [rewrite]: #695
#690 := (iff #770 #82)
#708 := (ite false #82 #82)
#701 := (iff #708 #82)
#693 := [rewrite]: #701
#712 := (iff #770 #708)
#618 := (iff #772 #82)
#722 := (= #79 1::Int)
#606 := (ite false #722 #82)
#616 := (iff #606 #82)
#617 := [rewrite]: #616
#614 := (iff #772 #606)
#612 := (iff #452 #82)
#595 := (= #441 #79)
#709 := (+ #79 0::Int)
#707 := (= #709 #79)
#710 := [rewrite]: #707
#611 := (= #441 #709)
#602 := (= #450 0::Int)
#717 := (* -1::Int 0::Int)
#600 := (= #717 0::Int)
#601 := [rewrite]: #600
#715 := (= #450 #717)
#714 := (= #449 0::Int)
#728 := (div 1::Int 3::Int)
#560 := (= #728 0::Int)
#713 := [rewrite]: #560
#557 := (= #449 #728)
#727 := (= #364 3::Int)
#721 := [rewrite]: #727
#720 := (= #448 1::Int)
#726 := [rewrite]: #720
#559 := [monotonicity #726 #721]: #557
#716 := [trans #559 #713]: #714
#718 := [monotonicity #716]: #715
#561 := [trans #718 #601]: #602
#706 := [monotonicity #561]: #611
#610 := [trans #706 #710]: #595
#613 := [monotonicity #610]: #612
#725 := (iff #455 #722)
#730 := (+ -1::Int #79)
#578 := (= #730 0::Int)
#723 := (iff #578 #722)
#724 := [rewrite]: #723
#579 := (iff #455 #578)
#731 := (= #451 #730)
#733 := (+ #79 -1::Int)
#735 := (= #733 #730)
#736 := [rewrite]: #735
#734 := (= #451 #733)
#743 := (= #454 -1::Int)
#741 := (* -1::Int 1::Int)
#742 := (= #741 -1::Int)
#739 := [rewrite]: #742
#456 := (= #454 #741)
#462 := (= #453 1::Int)
#740 := [rewrite]: #462
#738 := [monotonicity #740]: #456
#732 := [trans #738 #739]: #743
#729 := [monotonicity #732]: #734
#737 := [trans #729 #736]: #731
#580 := [monotonicity #737]: #579
#719 := [trans #580 #724]: #725
#460 := (iff #440 false)
#767 := (or false false)
#411 := (iff #767 false)
#752 := [rewrite]: #411
#749 := (iff #440 #767)
#748 := (iff #428 false)
#1 := true
#762 := (not true)
#763 := (iff #762 false)
#761 := [rewrite]: #763
#470 := (iff #428 #762)
#747 := (iff #771 true)
#474 := (or true false)
#370 := (iff #474 true)
#746 := [rewrite]: #370
#475 := (iff #771 #474)
#751 := (iff #434 false)
#473 := [rewrite]: #751
#754 := (iff #769 true)
#755 := [rewrite]: #754
#476 := [monotonicity #755 #473]: #475
#469 := [trans #476 #746]: #747
#744 := [monotonicity #469]: #470
#745 := [trans #744 #761]: #748
#764 := (iff #439 false)
#402 := (iff #439 #762)
#397 := (iff #765 true)
#756 := (or true true)
#753 := (iff #756 true)
#759 := [rewrite]: #753
#757 := (iff #765 #756)
#417 := (iff #558 true)
#418 := [rewrite]: #417
#758 := [monotonicity #418 #755]: #757
#760 := [trans #758 #759]: #397
#403 := [monotonicity #760]: #402
#750 := [trans #403 #761]: #764
#459 := [monotonicity #750 #745]: #749
#461 := [trans #459 #752]: #460
#615 := [monotonicity #461 #719 #613]: #614
#711 := [trans #615 #617]: #618
#415 := (iff #775 false)
#427 := (iff #775 #767)
#426 := (iff #773 false)
#431 := [rewrite]: #426
#776 := (iff #774 false)
#766 := [rewrite]: #776
#768 := [monotonicity #766 #431]: #427
#416 := [trans #768 #752]: #415
#699 := [monotonicity #416 #711]: #712
#692 := [trans #699 #693]: #690
#694 := [monotonicity #692]: #705
#697 := [trans #694 #696]: #705
#700 := [quant-inst #70 #76]: #704
#691 := [mp #700 #697]: #703
[unit-resolution #691 #100 #783]: false
unsat
42d7b09a76594ba9de59690fd4e89ad80ae41c2d 314 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#17 := (f4 f5 #16)
#19 := (f3 #17 #18)
#759 := (pattern #19)
#20 := 0::Int
#104 := -1::Int
#108 := (* -1::Int #18)
#105 := (* -1::Int #16)
#111 := (div #105 #108)
#262 := (* -1::Int #111)
#263 := (+ #19 #262)
#264 := (= #263 0::Int)
#30 := (div #16 #18)
#259 := (* -1::Int #30)
#260 := (+ #19 #259)
#261 := (= #260 0::Int)
#137 := (>= #16 0::Int)
#130 := (<= #18 0::Int)
#222 := (or #130 #137)
#223 := (not #222)
#126 := (<= #16 0::Int)
#220 := (or #126 #130)
#221 := (not #220)
#226 := (or #221 #223)
#265 := (ite #226 #261 #264)
#258 := (= #19 0::Int)
#22 := (= #18 0::Int)
#21 := (= #16 0::Int)
#23 := (or #21 #22)
#266 := (ite #23 #258 #265)
#760 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #759) #266)
#269 := (forall (vars (?v0 Int) (?v1 Int)) #266)
#763 := (iff #269 #760)
#761 := (iff #266 #266)
#762 := [refl]: #761
#764 := [quant-intro #762]: #763
#229 := (ite #226 #30 #111)
#232 := (ite #23 0::Int #229)
#235 := (= #19 #232)
#238 := (forall (vars (?v0 Int) (?v1 Int)) #235)
#270 := (iff #238 #269)
#267 := (iff #235 #266)
#268 := [rewrite]: #267
#271 := [quant-intro #268]: #270
#138 := (not #137)
#131 := (not #130)
#141 := (and #131 #138)
#127 := (not #126)
#134 := (and #127 #131)
#144 := (or #134 #141)
#147 := (ite #144 #30 #111)
#150 := (ite #23 0::Int #147)
#153 := (= #19 #150)
#156 := (forall (vars (?v0 Int) (?v1 Int)) #153)
#239 := (iff #156 #238)
#236 := (iff #153 #235)
#233 := (= #150 #232)
#230 := (= #147 #229)
#227 := (iff #144 #226)
#224 := (iff #141 #223)
#225 := [rewrite]: #224
#214 := (iff #134 #221)
#215 := [rewrite]: #214
#228 := [monotonicity #215 #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [monotonicity #234]: #236
#240 := [quant-intro #237]: #239
#218 := (~ #156 #156)
#216 := (~ #153 #153)
#217 := [refl]: #216
#219 := [nnf-pos #217]: #218
#32 := (- #18)
#31 := (- #16)
#33 := (div #31 #32)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#34 := (ite #29 #30 #33)
#35 := (ite #23 0::Int #34)
#36 := (= #19 #35)
#37 := (forall (vars (?v0 Int) (?v1 Int)) #36)
#159 := (iff #37 #156)
#98 := (and #25 #27)
#101 := (or #26 #98)
#114 := (ite #101 #30 #111)
#117 := (ite #23 0::Int #114)
#120 := (= #19 #117)
#123 := (forall (vars (?v0 Int) (?v1 Int)) #120)
#157 := (iff #123 #156)
#154 := (iff #120 #153)
#151 := (= #117 #150)
#148 := (= #114 #147)
#145 := (iff #101 #144)
#142 := (iff #98 #141)
#139 := (iff #27 #138)
#140 := [rewrite]: #139
#132 := (iff #25 #131)
#133 := [rewrite]: #132
#143 := [monotonicity #133 #140]: #142
#135 := (iff #26 #134)
#128 := (iff #24 #127)
#129 := [rewrite]: #128
#136 := [monotonicity #129 #133]: #135
#146 := [monotonicity #136 #143]: #145
#149 := [monotonicity #146]: #148
#152 := [monotonicity #149]: #151
#155 := [monotonicity #152]: #154
#158 := [quant-intro #155]: #157
#124 := (iff #37 #123)
#121 := (iff #36 #120)
#118 := (= #35 #117)
#115 := (= #34 #114)
#112 := (= #33 #111)
#109 := (= #32 #108)
#110 := [rewrite]: #109
#106 := (= #31 #105)
#107 := [rewrite]: #106
#113 := [monotonicity #107 #110]: #112
#102 := (iff #29 #101)
#99 := (iff #28 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#116 := [monotonicity #103 #113]: #115
#119 := [monotonicity #116]: #118
#122 := [monotonicity #119]: #121
#125 := [quant-intro #122]: #124
#160 := [trans #125 #158]: #159
#97 := [asserted]: #37
#161 := [mp #97 #160]: #156
#210 := [mp~ #161 #219]: #156
#241 := [mp #210 #240]: #238
#272 := [mp #241 #271]: #269
#765 := [mp #272 #764]: #760
#13 := 1::Int
#69 := -3::Int
#72 := (f4 f5 -3::Int)
#75 := (f3 #72 -3::Int)
#78 := (= #75 1::Int)
#91 := (not #78)
#9 := 3::Int
#10 := (- 3::Int)
#11 := (f4 f5 #10)
#12 := (f3 #11 #10)
#14 := (= #12 1::Int)
#15 := (not #14)
#94 := (iff #15 #91)
#81 := (= 1::Int #75)
#86 := (not #81)
#92 := (iff #86 #91)
#89 := (iff #81 #78)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#87 := (iff #15 #86)
#84 := (iff #14 #81)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #14 #78)
#76 := (= #12 #75)
#70 := (= #10 -3::Int)
#71 := [rewrite]: #70
#73 := (= #11 #72)
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74 #71]: #76
#80 := [monotonicity #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#95 := [trans #88 #93]: #94
#68 := [asserted]: #15
#96 := [mp #68 #95]: #91
#596 := (not #760)
#597 := (or #596 #78)
#346 := (* -1::Int -3::Int)
#430 := (div #346 #346)
#431 := (* -1::Int #430)
#432 := (+ #75 #431)
#423 := (= #432 0::Int)
#434 := (div -3::Int -3::Int)
#435 := (* -1::Int #434)
#436 := (+ #75 #435)
#433 := (= #436 0::Int)
#437 := (>= -3::Int 0::Int)
#416 := (<= -3::Int 0::Int)
#751 := (or #416 #437)
#753 := (not #751)
#410 := (or #416 #416)
#540 := (not #410)
#747 := (or #540 #753)
#421 := (ite #747 #433 #423)
#422 := (= #75 0::Int)
#754 := (= -3::Int 0::Int)
#755 := (or #754 #754)
#756 := (ite #755 #422 #421)
#598 := (or #596 #756)
#600 := (iff #598 #597)
#690 := (iff #597 #597)
#694 := [rewrite]: #690
#595 := (iff #756 #78)
#689 := (ite false #422 #78)
#592 := (iff #689 #78)
#594 := [rewrite]: #592
#692 := (iff #756 #689)
#593 := (iff #421 #78)
#582 := (ite false #78 #78)
#543 := (iff #582 #78)
#691 := [rewrite]: #543
#583 := (iff #421 #582)
#697 := (iff #423 #78)
#721 := (+ -1::Int #75)
#711 := (= #721 0::Int)
#718 := (iff #711 #78)
#713 := [rewrite]: #718
#698 := (iff #423 #711)
#695 := (= #432 #721)
#438 := (+ #75 -1::Int)
#725 := (= #438 #721)
#714 := [rewrite]: #725
#541 := (= #432 #438)
#710 := (= #431 -1::Int)
#731 := (* -1::Int 1::Int)
#443 := (= #731 -1::Int)
#444 := [rewrite]: #443
#709 := (= #431 #731)
#702 := (= #430 1::Int)
#704 := (div 3::Int 3::Int)
#707 := (= #704 1::Int)
#701 := [rewrite]: #707
#705 := (= #430 #704)
#561 := (= #346 3::Int)
#562 := [rewrite]: #561
#706 := [monotonicity #562 #562]: #705
#708 := [trans #706 #701]: #702
#703 := [monotonicity #708]: #709
#539 := [trans #703 #444]: #710
#542 := [monotonicity #539]: #541
#696 := [trans #542 #714]: #695
#699 := [monotonicity #696]: #698
#700 := [trans #699 #713]: #697
#719 := (iff #433 #78)
#712 := (iff #433 #711)
#715 := (= #436 #721)
#720 := (= #436 #438)
#722 := (= #435 -1::Int)
#441 := (= #435 #731)
#730 := (= #434 1::Int)
#727 := [rewrite]: #730
#442 := [monotonicity #727]: #441
#723 := [trans #442 #444]: #722
#724 := [monotonicity #723]: #720
#716 := [trans #724 #714]: #715
#717 := [monotonicity #716]: #712
#560 := [trans #717 #713]: #719
#452 := (iff #747 false)
#758 := (or false false)
#413 := (iff #758 false)
#749 := [rewrite]: #413
#729 := (iff #747 #758)
#352 := (iff #753 false)
#1 := true
#739 := (not true)
#741 := (iff #739 false)
#379 := [rewrite]: #741
#457 := (iff #753 #739)
#455 := (iff #751 true)
#745 := (or true false)
#732 := (iff #745 true)
#733 := [rewrite]: #732
#743 := (iff #751 #745)
#384 := (iff #437 false)
#385 := [rewrite]: #384
#393 := (iff #416 true)
#734 := [rewrite]: #393
#746 := [monotonicity #734 #385]: #743
#456 := [trans #746 #733]: #455
#458 := [monotonicity #456]: #457
#728 := [trans #458 #379]: #352
#742 := (iff #540 false)
#740 := (iff #540 #739)
#737 := (iff #410 true)
#397 := (or true true)
#400 := (iff #397 true)
#736 := [rewrite]: #400
#398 := (iff #410 #397)
#399 := [monotonicity #734 #734]: #398
#738 := [trans #399 #736]: #737
#735 := [monotonicity #738]: #740
#744 := [trans #735 #379]: #742
#451 := [monotonicity #744 #728]: #729
#726 := [trans #451 #749]: #452
#584 := [monotonicity #726 #560 #700]: #583
#688 := [trans #584 #691]: #593
#409 := (iff #755 false)
#748 := (iff #755 #758)
#757 := (iff #754 false)
#752 := [rewrite]: #757
#408 := [monotonicity #752 #752]: #748
#750 := [trans #408 #749]: #409
#577 := [monotonicity #750 #688]: #692
#588 := [trans #577 #594]: #595
#693 := [monotonicity #588]: #600
#681 := [trans #693 #694]: #600
#599 := [quant-inst #69 #69]: #598
#683 := [mp #599 #681]: #597
[unit-resolution #683 #96 #765]: false
unsat
661d623240b7a8e55ac7487a194ea82048a9383e 341 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#19 := (f4 f5 #18)
#21 := (f3 #19 #20)
#764 := (pattern #21)
#22 := 0::Int
#109 := -1::Int
#113 := (* -1::Int #20)
#110 := (* -1::Int #18)
#116 := (div #110 #113)
#267 := (* -1::Int #116)
#268 := (+ #21 #267)
#269 := (= #268 0::Int)
#32 := (div #18 #20)
#264 := (* -1::Int #32)
#265 := (+ #21 #264)
#266 := (= #265 0::Int)
#142 := (>= #18 0::Int)
#135 := (<= #20 0::Int)
#227 := (or #135 #142)
#228 := (not #227)
#131 := (<= #18 0::Int)
#225 := (or #131 #135)
#226 := (not #225)
#231 := (or #226 #228)
#270 := (ite #231 #266 #269)
#263 := (= #21 0::Int)
#24 := (= #20 0::Int)
#23 := (= #18 0::Int)
#25 := (or #23 #24)
#271 := (ite #25 #263 #270)
#765 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #764) #271)
#274 := (forall (vars (?v0 Int) (?v1 Int)) #271)
#768 := (iff #274 #765)
#766 := (iff #271 #271)
#767 := [refl]: #766
#769 := [quant-intro #767]: #768
#234 := (ite #231 #32 #116)
#237 := (ite #25 0::Int #234)
#240 := (= #21 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#275 := (iff #243 #274)
#272 := (iff #240 #271)
#273 := [rewrite]: #272
#276 := [quant-intro #273]: #275
#143 := (not #142)
#136 := (not #135)
#146 := (and #136 #143)
#132 := (not #131)
#139 := (and #132 #136)
#149 := (or #139 #146)
#152 := (ite #149 #32 #116)
#155 := (ite #25 0::Int #152)
#158 := (= #21 #155)
#161 := (forall (vars (?v0 Int) (?v1 Int)) #158)
#244 := (iff #161 #243)
#241 := (iff #158 #240)
#238 := (= #155 #237)
#235 := (= #152 #234)
#232 := (iff #149 #231)
#229 := (iff #146 #228)
#230 := [rewrite]: #229
#219 := (iff #139 #226)
#220 := [rewrite]: #219
#233 := [monotonicity #220 #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#223 := (~ #161 #161)
#221 := (~ #158 #158)
#222 := [refl]: #221
#224 := [nnf-pos #222]: #223
#34 := (- #20)
#33 := (- #18)
#35 := (div #33 #34)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#36 := (ite #31 #32 #35)
#37 := (ite #25 0::Int #36)
#38 := (= #21 #37)
#39 := (forall (vars (?v0 Int) (?v1 Int)) #38)
#164 := (iff #39 #161)
#103 := (and #27 #29)
#106 := (or #28 #103)
#119 := (ite #106 #32 #116)
#122 := (ite #25 0::Int #119)
#125 := (= #21 #122)
#128 := (forall (vars (?v0 Int) (?v1 Int)) #125)
#162 := (iff #128 #161)
#159 := (iff #125 #158)
#156 := (= #122 #155)
#153 := (= #119 #152)
#150 := (iff #106 #149)
#147 := (iff #103 #146)
#144 := (iff #29 #143)
#145 := [rewrite]: #144
#137 := (iff #27 #136)
#138 := [rewrite]: #137
#148 := [monotonicity #138 #145]: #147
#140 := (iff #28 #139)
#133 := (iff #26 #132)
#134 := [rewrite]: #133
#141 := [monotonicity #134 #138]: #140
#151 := [monotonicity #141 #148]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [monotonicity #157]: #159
#163 := [quant-intro #160]: #162
#129 := (iff #39 #128)
#126 := (iff #38 #125)
#123 := (= #37 #122)
#120 := (= #36 #119)
#117 := (= #35 #116)
#114 := (= #34 #113)
#115 := [rewrite]: #114
#111 := (= #33 #110)
#112 := [rewrite]: #111
#118 := [monotonicity #112 #115]: #117
#107 := (iff #31 #106)
#104 := (iff #30 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#121 := [monotonicity #108 #118]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#130 := [quant-intro #127]: #129
#165 := [trans #130 #163]: #164
#102 := [asserted]: #39
#166 := [mp #102 #165]: #161
#215 := [mp~ #166 #224]: #161
#246 := [mp #215 #245]: #243
#277 := [mp #246 #276]: #274
#770 := [mp #277 #769]: #765
#15 := 1::Int
#77 := -3::Int
#71 := -5::Int
#74 := (f4 f5 -5::Int)
#80 := (f3 #74 -3::Int)
#83 := (= #80 1::Int)
#96 := (not #83)
#12 := 3::Int
#13 := (- 3::Int)
#9 := 5::Int
#10 := (- 5::Int)
#11 := (f4 f5 #10)
#14 := (f3 #11 #13)
#16 := (= #14 1::Int)
#17 := (not #16)
#99 := (iff #17 #96)
#86 := (= 1::Int #80)
#91 := (not #86)
#97 := (iff #91 #96)
#94 := (iff #86 #83)
#95 := [rewrite]: #94
#98 := [monotonicity #95]: #97
#92 := (iff #17 #91)
#89 := (iff #16 #86)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #16 #83)
#81 := (= #14 #80)
#78 := (= #13 -3::Int)
#79 := [rewrite]: #78
#75 := (= #11 #74)
#72 := (= #10 -5::Int)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#100 := [trans #93 #98]: #99
#70 := [asserted]: #17
#101 := [mp #70 #100]: #96
#678 := (not #765)
#685 := (or #678 #83)
#351 := (* -1::Int -3::Int)
#435 := (* -1::Int -5::Int)
#436 := (div #435 #351)
#437 := (* -1::Int #436)
#428 := (+ #80 #437)
#439 := (= #428 0::Int)
#440 := (div -5::Int -3::Int)
#441 := (* -1::Int #440)
#438 := (+ #80 #441)
#442 := (= #438 0::Int)
#421 := (>= -5::Int 0::Int)
#756 := (<= -3::Int 0::Int)
#758 := (or #756 #421)
#415 := (not #758)
#545 := (<= -5::Int 0::Int)
#752 := (or #545 #756)
#426 := (not #752)
#427 := (or #426 #415)
#759 := (ite #427 #442 #439)
#760 := (= #80 0::Int)
#761 := (= -3::Int 0::Int)
#762 := (= -5::Int 0::Int)
#757 := (or #762 #761)
#763 := (ite #757 #760 #759)
#669 := (or #678 #763)
#672 := (iff #669 #685)
#674 := (iff #685 #685)
#675 := [rewrite]: #674
#683 := (iff #763 #83)
#691 := (ite false #760 #83)
#681 := (iff #691 #83)
#682 := [rewrite]: #681
#687 := (iff #763 #691)
#689 := (iff #759 #83)
#727 := 2::Int
#712 := (= #80 2::Int)
#686 := (ite false #712 #83)
#677 := (iff #686 #83)
#679 := [rewrite]: #677
#688 := (iff #759 #686)
#695 := (iff #439 #83)
#597 := (+ -1::Int #80)
#602 := (= #597 0::Int)
#605 := (iff #602 #83)
#698 := [rewrite]: #605
#603 := (iff #439 #602)
#593 := (= #428 #597)
#694 := (+ #80 -1::Int)
#599 := (= #694 #597)
#600 := [rewrite]: #599
#697 := (= #428 #694)
#598 := (= #437 -1::Int)
#587 := (* -1::Int 1::Int)
#548 := (= #587 -1::Int)
#696 := [rewrite]: #548
#588 := (= #437 #587)
#702 := (= #436 1::Int)
#547 := (div 5::Int 3::Int)
#703 := (= #547 1::Int)
#704 := [rewrite]: #703
#700 := (= #436 #547)
#544 := (= #351 3::Int)
#546 := [rewrite]: #544
#708 := (= #435 5::Int)
#715 := [rewrite]: #708
#701 := [monotonicity #715 #546]: #700
#705 := [trans #701 #704]: #702
#589 := [monotonicity #705]: #588
#693 := [trans #589 #696]: #598
#582 := [monotonicity #693]: #697
#601 := [trans #582 #600]: #593
#604 := [monotonicity #601]: #603
#699 := [trans #604 #698]: #695
#713 := (iff #442 #712)
#730 := -2::Int
#718 := (+ -2::Int #80)
#709 := (= #718 0::Int)
#706 := (iff #709 #712)
#707 := [rewrite]: #706
#710 := (iff #442 #709)
#566 := (= #438 #718)
#717 := (+ #80 -2::Int)
#724 := (= #717 #718)
#565 := [rewrite]: #724
#722 := (= #438 #717)
#721 := (= #441 -2::Int)
#725 := (* -1::Int 2::Int)
#719 := (= #725 -2::Int)
#720 := [rewrite]: #719
#729 := (= #441 #725)
#728 := (= #440 2::Int)
#443 := [rewrite]: #728
#726 := [monotonicity #443]: #729
#716 := [trans #726 #720]: #721
#723 := [monotonicity #716]: #722
#567 := [trans #723 #565]: #566
#711 := [monotonicity #567]: #710
#714 := [trans #711 #707]: #713
#448 := (iff #427 false)
#414 := (or false false)
#739 := (iff #414 false)
#402 := [rewrite]: #739
#446 := (iff #427 #414)
#732 := (iff #415 false)
#1 := true
#389 := (not true)
#748 := (iff #389 false)
#751 := [rewrite]: #748
#731 := (iff #415 #389)
#456 := (iff #758 true)
#462 := (or true false)
#733 := (iff #462 true)
#734 := [rewrite]: #733
#463 := (iff #758 #462)
#460 := (iff #421 false)
#461 := [rewrite]: #460
#742 := (iff #756 true)
#743 := [rewrite]: #742
#357 := [monotonicity #743 #461]: #463
#457 := [trans #357 #734]: #456
#735 := [monotonicity #457]: #731
#736 := [trans #735 #751]: #732
#737 := (iff #426 false)
#390 := (iff #426 #389)
#747 := (iff #752 true)
#744 := (or true true)
#746 := (iff #744 true)
#384 := [rewrite]: #746
#745 := (iff #752 #744)
#405 := (iff #545 true)
#741 := [rewrite]: #405
#740 := [monotonicity #741 #743]: #745
#749 := [trans #740 #384]: #747
#750 := [monotonicity #749]: #390
#738 := [trans #750 #751]: #737
#447 := [monotonicity #738 #736]: #446
#449 := [trans #447 #402]: #448
#680 := [monotonicity #449 #714 #699]: #688
#690 := [trans #680 #679]: #689
#403 := (iff #757 false)
#755 := (iff #757 #414)
#418 := (iff #761 false)
#754 := [rewrite]: #418
#753 := (iff #762 false)
#413 := [rewrite]: #753
#398 := [monotonicity #413 #754]: #755
#404 := [trans #398 #402]: #403
#692 := [monotonicity #404 #690]: #687
#684 := [trans #692 #682]: #683
#673 := [monotonicity #684]: #672
#671 := [trans #673 #675]: #672
#670 := [quant-inst #71 #77]: #669
#676 := [mp #670 #671]: #685
[unit-resolution #676 #101 #770]: false
unsat
aab5c4c0313de0fd03391587f807d1eea6cbc4ca 278 0
#2 := false
decl f3 :: (-> S2 Int Int)
#17 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#15 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#36 := (f4 f5 #15)
#37 := (f3 #36 #17)
#761 := (pattern #37)
#9 := 0::Int
#92 := -1::Int
#96 := (* -1::Int #17)
#93 := (* -1::Int #15)
#157 := (mod #93 #96)
#272 := (+ #37 #157)
#273 := (= #272 0::Int)
#38 := (mod #15 #17)
#269 := (* -1::Int #38)
#270 := (+ #37 #269)
#271 := (= #270 0::Int)
#131 := (>= #15 0::Int)
#124 := (<= #17 0::Int)
#216 := (or #124 #131)
#217 := (not #216)
#120 := (<= #15 0::Int)
#214 := (or #120 #124)
#215 := (not #214)
#220 := (or #215 #217)
#274 := (ite #220 #271 #273)
#268 := (= #37 0::Int)
#19 := (= #15 0::Int)
#275 := (ite #19 #268 #274)
#267 := (= #15 #37)
#20 := (= #17 0::Int)
#276 := (ite #20 #267 #275)
#762 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #761) #276)
#279 := (forall (vars (?v0 Int) (?v1 Int)) #276)
#765 := (iff #279 #762)
#763 := (iff #276 #276)
#764 := [refl]: #763
#766 := [quant-intro #764]: #765
#163 := (* -1::Int #157)
#236 := (ite #220 #38 #163)
#239 := (ite #19 0::Int #236)
#242 := (ite #20 #15 #239)
#245 := (= #37 #242)
#248 := (forall (vars (?v0 Int) (?v1 Int)) #245)
#280 := (iff #248 #279)
#277 := (iff #245 #276)
#278 := [rewrite]: #277
#281 := [quant-intro #278]: #280
#132 := (not #131)
#125 := (not #124)
#135 := (and #125 #132)
#121 := (not #120)
#128 := (and #121 #125)
#138 := (or #128 #135)
#183 := (ite #138 #38 #163)
#186 := (ite #19 0::Int #183)
#189 := (ite #20 #15 #186)
#192 := (= #37 #189)
#195 := (forall (vars (?v0 Int) (?v1 Int)) #192)
#249 := (iff #195 #248)
#246 := (iff #192 #245)
#243 := (= #189 #242)
#240 := (= #186 #239)
#237 := (= #183 #236)
#221 := (iff #138 #220)
#218 := (iff #135 #217)
#219 := [rewrite]: #218
#208 := (iff #128 #215)
#209 := [rewrite]: #208
#222 := [monotonicity #209 #219]: #221
#238 := [monotonicity #222]: #237
#241 := [monotonicity #238]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [quant-intro #247]: #249
#206 := (~ #195 #195)
#205 := (~ #192 #192)
#202 := [refl]: #205
#207 := [nnf-pos #202]: #206
#30 := (- #17)
#29 := (- #15)
#39 := (mod #29 #30)
#40 := (- #39)
#23 := (< 0::Int #17)
#25 := (< #15 0::Int)
#26 := (and #25 #23)
#22 := (< 0::Int #15)
#24 := (and #22 #23)
#27 := (or #24 #26)
#41 := (ite #27 #38 #40)
#42 := (ite #19 0::Int #41)
#43 := (ite #20 #15 #42)
#44 := (= #37 #43)
#45 := (forall (vars (?v0 Int) (?v1 Int)) #44)
#198 := (iff #45 #195)
#86 := (and #23 #25)
#89 := (or #24 #86)
#168 := (ite #89 #38 #163)
#77 := (= 0::Int #15)
#171 := (ite #77 0::Int #168)
#80 := (= 0::Int #17)
#174 := (ite #80 #15 #171)
#177 := (= #37 #174)
#180 := (forall (vars (?v0 Int) (?v1 Int)) #177)
#196 := (iff #180 #195)
#193 := (iff #177 #192)
#190 := (= #174 #189)
#187 := (= #171 #186)
#184 := (= #168 #183)
#139 := (iff #89 #138)
#136 := (iff #86 #135)
#133 := (iff #25 #132)
#134 := [rewrite]: #133
#126 := (iff #23 #125)
#127 := [rewrite]: #126
#137 := [monotonicity #127 #134]: #136
#129 := (iff #24 #128)
#122 := (iff #22 #121)
#123 := [rewrite]: #122
#130 := [monotonicity #123 #127]: #129
#140 := [monotonicity #130 #137]: #139
#185 := [monotonicity #140]: #184
#114 := (iff #77 #19)
#115 := [rewrite]: #114
#188 := [monotonicity #115 #185]: #187
#116 := (iff #80 #20)
#117 := [rewrite]: #116
#191 := [monotonicity #117 #188]: #190
#194 := [monotonicity #191]: #193
#197 := [quant-intro #194]: #196
#181 := (iff #45 #180)
#178 := (iff #44 #177)
#175 := (= #43 #174)
#172 := (= #42 #171)
#169 := (= #41 #168)
#166 := (= #40 #163)
#160 := (- #157)
#164 := (= #160 #163)
#165 := [rewrite]: #164
#161 := (= #40 #160)
#158 := (= #39 #157)
#97 := (= #30 #96)
#98 := [rewrite]: #97
#94 := (= #29 #93)
#95 := [rewrite]: #94
#159 := [monotonicity #95 #98]: #158
#162 := [monotonicity #159]: #161
#167 := [trans #162 #165]: #166
#90 := (iff #27 #89)
#87 := (iff #26 #86)
#88 := [rewrite]: #87
#91 := [monotonicity #88]: #90
#170 := [monotonicity #91 #167]: #169
#78 := (iff #19 #77)
#79 := [rewrite]: #78
#173 := [monotonicity #79 #170]: #172
#81 := (iff #20 #80)
#82 := [rewrite]: #81
#176 := [monotonicity #82 #173]: #175
#179 := [monotonicity #176]: #178
#182 := [quant-intro #179]: #181
#199 := [trans #182 #197]: #198
#156 := [asserted]: #45
#200 := [mp #156 #199]: #195
#203 := [mp~ #200 #207]: #195
#251 := [mp #203 #250]: #248
#282 := [mp #251 #281]: #279
#767 := [mp #282 #766]: #762
#10 := (f4 f5 0::Int)
#11 := (f3 #10 0::Int)
#12 := (= #11 0::Int)
#13 := (not #12)
#65 := [asserted]: #13
#708 := (not #762)
#714 := (or #708 #12)
#340 := (* -1::Int 0::Int)
#425 := (mod #340 #340)
#426 := (+ #11 #425)
#427 := (= #426 0::Int)
#418 := (mod 0::Int 0::Int)
#429 := (* -1::Int #418)
#430 := (+ #11 #429)
#358 := (= #430 0::Int)
#431 := (>= 0::Int 0::Int)
#428 := (<= 0::Int 0::Int)
#432 := (or #428 #431)
#411 := (not #432)
#746 := (or #428 #428)
#748 := (not #746)
#405 := (or #748 #411)
#535 := (ite #405 #358 #427)
#742 := (= 0::Int 0::Int)
#416 := (ite #742 #12 #535)
#66 := (= 0::Int #11)
#417 := (ite #742 #66 #416)
#555 := (or #708 #417)
#557 := (iff #555 #714)
#700 := (iff #714 #714)
#701 := [rewrite]: #700
#712 := (iff #417 #12)
#1 := true
#709 := (ite true #12 #12)
#706 := (iff #709 #12)
#707 := [rewrite]: #706
#710 := (iff #417 #709)
#716 := (iff #416 #12)
#346 := (+ #11 #418)
#446 := (= #346 0::Int)
#717 := (ite true #12 #446)
#715 := (iff #717 #12)
#719 := [rewrite]: #715
#718 := (iff #416 #717)
#438 := (iff #535 #446)
#725 := (ite false #358 #446)
#436 := (iff #725 #446)
#437 := [rewrite]: #436
#722 := (iff #535 #725)
#447 := (iff #427 #446)
#723 := (= #426 #346)
#452 := (= #425 #418)
#450 := (= #340 0::Int)
#451 := [rewrite]: #450
#453 := [monotonicity #451 #451]: #452
#724 := [monotonicity #453]: #723
#721 := [monotonicity #724]: #447
#727 := (iff #405 false)
#379 := (or false false)
#738 := (iff #379 false)
#741 := [rewrite]: #738
#380 := (iff #405 #379)
#737 := (iff #411 false)
#745 := (not true)
#392 := (iff #745 false)
#393 := [rewrite]: #392
#736 := (iff #411 #745)
#735 := (iff #432 true)
#747 := (or true true)
#403 := (iff #747 true)
#408 := [rewrite]: #403
#733 := (iff #432 #747)
#731 := (iff #431 true)
#732 := [rewrite]: #731
#751 := (iff #428 true)
#752 := [rewrite]: #751
#734 := [monotonicity #752 #732]: #733
#730 := [trans #734 #408]: #735
#374 := [monotonicity #730]: #736
#739 := [trans #374 #393]: #737
#394 := (iff #748 false)
#388 := (iff #748 #745)
#744 := (iff #746 true)
#753 := (iff #746 #747)
#743 := [monotonicity #752 #752]: #753
#404 := [trans #743 #408]: #744
#729 := [monotonicity #404]: #388
#395 := [trans #729 #393]: #394
#740 := [monotonicity #395 #739]: #380
#728 := [trans #740 #741]: #727
#726 := [monotonicity #728 #721]: #722
#439 := [trans #726 #437]: #438
#749 := (iff #742 true)
#750 := [rewrite]: #749
#433 := [monotonicity #750 #439]: #718
#720 := [trans #433 #719]: #716
#72 := (iff #66 #12)
#73 := [rewrite]: #72
#711 := [monotonicity #750 #73 #720]: #710
#713 := [trans #711 #707]: #712
#699 := [monotonicity #713]: #557
#702 := [trans #699 #701]: #557
#556 := [quant-inst #9 #9]: #555
#696 := [mp #556 #702]: #714
[unit-resolution #696 #65 #767]: false
unsat
3f080b795c6233af5c4422b10a1f955ad6c02a32 286 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#759 := (pattern #38)
#11 := 0::Int
#90 := -1::Int
#94 := (* -1::Int #18)
#91 := (* -1::Int #16)
#155 := (mod #91 #94)
#270 := (+ #38 #155)
#271 := (= #270 0::Int)
#39 := (mod #16 #18)
#267 := (* -1::Int #39)
#268 := (+ #38 #267)
#269 := (= #268 0::Int)
#129 := (>= #16 0::Int)
#122 := (<= #18 0::Int)
#214 := (or #122 #129)
#215 := (not #214)
#118 := (<= #16 0::Int)
#212 := (or #118 #122)
#213 := (not #212)
#218 := (or #213 #215)
#272 := (ite #218 #269 #271)
#266 := (= #38 0::Int)
#20 := (= #16 0::Int)
#273 := (ite #20 #266 #272)
#265 := (= #16 #38)
#21 := (= #18 0::Int)
#274 := (ite #21 #265 #273)
#760 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #759) #274)
#277 := (forall (vars (?v0 Int) (?v1 Int)) #274)
#763 := (iff #277 #760)
#761 := (iff #274 #274)
#762 := [refl]: #761
#764 := [quant-intro #762]: #763
#161 := (* -1::Int #155)
#234 := (ite #218 #39 #161)
#237 := (ite #20 0::Int #234)
#240 := (ite #21 #16 #237)
#243 := (= #38 #240)
#246 := (forall (vars (?v0 Int) (?v1 Int)) #243)
#278 := (iff #246 #277)
#275 := (iff #243 #274)
#276 := [rewrite]: #275
#279 := [quant-intro #276]: #278
#130 := (not #129)
#123 := (not #122)
#133 := (and #123 #130)
#119 := (not #118)
#126 := (and #119 #123)
#136 := (or #126 #133)
#181 := (ite #136 #39 #161)
#184 := (ite #20 0::Int #181)
#187 := (ite #21 #16 #184)
#190 := (= #38 #187)
#193 := (forall (vars (?v0 Int) (?v1 Int)) #190)
#247 := (iff #193 #246)
#244 := (iff #190 #243)
#241 := (= #187 #240)
#238 := (= #184 #237)
#235 := (= #181 #234)
#219 := (iff #136 #218)
#216 := (iff #133 #215)
#217 := [rewrite]: #216
#206 := (iff #126 #213)
#207 := [rewrite]: #206
#220 := [monotonicity #207 #217]: #219
#236 := [monotonicity #220]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [quant-intro #245]: #247
#204 := (~ #193 #193)
#203 := (~ #190 #190)
#200 := [refl]: #203
#205 := [nnf-pos #200]: #204
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (ite #28 #39 #41)
#43 := (ite #20 0::Int #42)
#44 := (ite #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#196 := (iff #46 #193)
#84 := (and #24 #26)
#87 := (or #25 #84)
#166 := (ite #87 #39 #161)
#74 := (= 0::Int #16)
#169 := (ite #74 0::Int #166)
#78 := (= 0::Int #18)
#172 := (ite #78 #16 #169)
#175 := (= #38 #172)
#178 := (forall (vars (?v0 Int) (?v1 Int)) #175)
#194 := (iff #178 #193)
#191 := (iff #175 #190)
#188 := (= #172 #187)
#185 := (= #169 #184)
#182 := (= #166 #181)
#137 := (iff #87 #136)
#134 := (iff #84 #133)
#131 := (iff #26 #130)
#132 := [rewrite]: #131
#124 := (iff #24 #123)
#125 := [rewrite]: #124
#135 := [monotonicity #125 #132]: #134
#127 := (iff #25 #126)
#120 := (iff #23 #119)
#121 := [rewrite]: #120
#128 := [monotonicity #121 #125]: #127
#138 := [monotonicity #128 #135]: #137
#183 := [monotonicity #138]: #182
#112 := (iff #74 #20)
#113 := [rewrite]: #112
#186 := [monotonicity #113 #183]: #185
#114 := (iff #78 #21)
#115 := [rewrite]: #114
#189 := [monotonicity #115 #186]: #188
#192 := [monotonicity #189]: #191
#195 := [quant-intro #192]: #194
#179 := (iff #46 #178)
#176 := (iff #45 #175)
#173 := (= #44 #172)
#170 := (= #43 #169)
#167 := (= #42 #166)
#164 := (= #41 #161)
#158 := (- #155)
#162 := (= #158 #161)
#163 := [rewrite]: #162
#159 := (= #41 #158)
#156 := (= #40 #155)
#95 := (= #31 #94)
#96 := [rewrite]: #95
#92 := (= #30 #91)
#93 := [rewrite]: #92
#157 := [monotonicity #93 #96]: #156
#160 := [monotonicity #157]: #159
#165 := [trans #160 #163]: #164
#88 := (iff #28 #87)
#85 := (iff #27 #84)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#168 := [monotonicity #89 #165]: #167
#76 := (iff #20 #74)
#77 := [rewrite]: #76
#171 := [monotonicity #77 #168]: #170
#79 := (iff #21 #78)
#80 := [rewrite]: #79
#174 := [monotonicity #80 #171]: #173
#177 := [monotonicity #174]: #176
#180 := [quant-intro #177]: #179
#197 := [trans #180 #195]: #196
#154 := [asserted]: #46
#198 := [mp #154 #197]: #193
#201 := [mp~ #198 #205]: #193
#249 := [mp #201 #248]: #246
#280 := [mp #249 #279]: #277
#765 := [mp #280 #764]: #760
decl f6 :: Int
#9 := f6
#10 := (f4 f5 f6)
#12 := (f3 #10 0::Int)
#67 := (= f6 #12)
#70 := (not #67)
#13 := (= #12 f6)
#14 := (not #13)
#71 := (iff #14 #70)
#68 := (iff #13 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#66 := [asserted]: #14
#75 := [mp #66 #72]: #70
#553 := (not #760)
#554 := (or #553 #67)
#338 := (* -1::Int 0::Int)
#423 := (* -1::Int f6)
#424 := (mod #423 #338)
#425 := (+ #12 #424)
#416 := (= #425 0::Int)
#427 := (mod f6 0::Int)
#428 := (* -1::Int #427)
#356 := (+ #12 #428)
#429 := (= #356 0::Int)
#426 := (>= f6 0::Int)
#430 := (<= 0::Int 0::Int)
#409 := (or #430 #426)
#744 := (not #409)
#746 := (<= f6 0::Int)
#403 := (or #746 #430)
#533 := (not #403)
#740 := (or #533 #744)
#414 := (ite #740 #429 #416)
#415 := (= #12 0::Int)
#747 := (= f6 0::Int)
#748 := (ite #747 #415 #414)
#749 := (= 0::Int 0::Int)
#750 := (ite #749 #67 #748)
#555 := (or #553 #750)
#698 := (iff #555 #554)
#700 := (iff #554 #554)
#694 := [rewrite]: #700
#706 := (iff #750 #67)
#444 := (mod #423 0::Int)
#723 := (+ #12 #444)
#434 := (= #723 0::Int)
#718 := (ite #747 #415 #434)
#1 := true
#709 := (ite true #67 #718)
#710 := (iff #709 #67)
#711 := [rewrite]: #710
#704 := (iff #750 #709)
#707 := (iff #748 #718)
#717 := (iff #414 #434)
#437 := (ite false #429 #434)
#431 := (iff #437 #434)
#713 := [rewrite]: #431
#715 := (iff #414 #437)
#435 := (iff #416 #434)
#720 := (= #425 #723)
#445 := (= #424 #444)
#721 := (= #338 0::Int)
#722 := [rewrite]: #721
#719 := [monotonicity #722]: #445
#724 := [monotonicity #719]: #720
#436 := [monotonicity #724]: #435
#451 := (iff #740 false)
#725 := (or false false)
#449 := (iff #725 false)
#450 := [rewrite]: #449
#726 := (iff #740 #725)
#736 := (iff #744 false)
#391 := (not true)
#729 := (iff #391 false)
#730 := [rewrite]: #729
#378 := (iff #744 #391)
#737 := (iff #409 true)
#733 := (or true #426)
#372 := (iff #733 true)
#735 := [rewrite]: #372
#728 := (iff #409 #733)
#741 := (iff #430 true)
#401 := [rewrite]: #741
#734 := [monotonicity #401]: #728
#377 := [trans #734 #735]: #737
#738 := [monotonicity #377]: #378
#739 := [trans #738 #730]: #736
#731 := (iff #533 false)
#392 := (iff #533 #391)
#727 := (iff #403 true)
#406 := (or #746 true)
#743 := (iff #406 true)
#386 := [rewrite]: #743
#742 := (iff #403 #406)
#402 := [monotonicity #401]: #742
#390 := [trans #402 #386]: #727
#393 := [monotonicity #390]: #392
#732 := [trans #393 #730]: #731
#448 := [monotonicity #732 #739]: #726
#344 := [trans #448 #450]: #451
#716 := [monotonicity #344 #436]: #715
#714 := [trans #716 #713]: #717
#708 := [monotonicity #714]: #707
#745 := (iff #749 true)
#751 := [rewrite]: #745
#705 := [monotonicity #751 #708]: #704
#712 := [trans #705 #711]: #706
#699 := [monotonicity #712]: #698
#695 := [trans #699 #694]: #698
#697 := [quant-inst #9 #11]: #555
#701 := [mp #697 #695]: #554
[unit-resolution #701 #75 #765]: false
unsat
92fe8b3236e9b683646a61d1edaeb4be3eebbe17 308 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#761 := (pattern #38)
#9 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #18)
#94 := (* -1::Int #16)
#158 := (mod #94 #97)
#273 := (+ #38 #158)
#274 := (= #273 0::Int)
#39 := (mod #16 #18)
#270 := (* -1::Int #39)
#271 := (+ #38 #270)
#272 := (= #271 0::Int)
#132 := (>= #16 0::Int)
#125 := (<= #18 0::Int)
#217 := (or #125 #132)
#218 := (not #217)
#121 := (<= #16 0::Int)
#215 := (or #121 #125)
#216 := (not #215)
#221 := (or #216 #218)
#275 := (ite #221 #272 #274)
#269 := (= #38 0::Int)
#20 := (= #16 0::Int)
#276 := (ite #20 #269 #275)
#268 := (= #16 #38)
#21 := (= #18 0::Int)
#277 := (ite #21 #268 #276)
#762 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #761) #277)
#280 := (forall (vars (?v0 Int) (?v1 Int)) #277)
#765 := (iff #280 #762)
#763 := (iff #277 #277)
#764 := [refl]: #763
#766 := [quant-intro #764]: #765
#164 := (* -1::Int #158)
#237 := (ite #221 #39 #164)
#240 := (ite #20 0::Int #237)
#243 := (ite #21 #16 #240)
#246 := (= #38 #243)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#281 := (iff #249 #280)
#278 := (iff #246 #277)
#279 := [rewrite]: #278
#282 := [quant-intro #279]: #281
#133 := (not #132)
#126 := (not #125)
#136 := (and #126 #133)
#122 := (not #121)
#129 := (and #122 #126)
#139 := (or #129 #136)
#184 := (ite #139 #39 #164)
#187 := (ite #20 0::Int #184)
#190 := (ite #21 #16 #187)
#193 := (= #38 #190)
#196 := (forall (vars (?v0 Int) (?v1 Int)) #193)
#250 := (iff #196 #249)
#247 := (iff #193 #246)
#244 := (= #190 #243)
#241 := (= #187 #240)
#238 := (= #184 #237)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#220 := [rewrite]: #219
#209 := (iff #129 #216)
#210 := [rewrite]: #209
#223 := [monotonicity #210 #220]: #222
#239 := [monotonicity #223]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [quant-intro #248]: #250
#207 := (~ #196 #196)
#206 := (~ #193 #193)
#203 := [refl]: #206
#208 := [nnf-pos #203]: #207
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (ite #28 #39 #41)
#43 := (ite #20 0::Int #42)
#44 := (ite #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#199 := (iff #46 #196)
#87 := (and #24 #26)
#90 := (or #25 #87)
#169 := (ite #90 #39 #164)
#78 := (= 0::Int #16)
#172 := (ite #78 0::Int #169)
#81 := (= 0::Int #18)
#175 := (ite #81 #16 #172)
#178 := (= #38 #175)
#181 := (forall (vars (?v0 Int) (?v1 Int)) #178)
#197 := (iff #181 #196)
#194 := (iff #178 #193)
#191 := (= #175 #190)
#188 := (= #172 #187)
#185 := (= #169 #184)
#140 := (iff #90 #139)
#137 := (iff #87 #136)
#134 := (iff #26 #133)
#135 := [rewrite]: #134
#127 := (iff #24 #126)
#128 := [rewrite]: #127
#138 := [monotonicity #128 #135]: #137
#130 := (iff #25 #129)
#123 := (iff #23 #122)
#124 := [rewrite]: #123
#131 := [monotonicity #124 #128]: #130
#141 := [monotonicity #131 #138]: #140
#186 := [monotonicity #141]: #185
#115 := (iff #78 #20)
#116 := [rewrite]: #115
#189 := [monotonicity #116 #186]: #188
#117 := (iff #81 #21)
#118 := [rewrite]: #117
#192 := [monotonicity #118 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [quant-intro #195]: #197
#182 := (iff #46 #181)
#179 := (iff #45 #178)
#176 := (= #44 #175)
#173 := (= #43 #172)
#170 := (= #42 #169)
#167 := (= #41 #164)
#161 := (- #158)
#165 := (= #161 #164)
#166 := [rewrite]: #165
#162 := (= #41 #161)
#159 := (= #40 #158)
#98 := (= #31 #97)
#99 := [rewrite]: #98
#95 := (= #30 #94)
#96 := [rewrite]: #95
#160 := [monotonicity #96 #99]: #159
#163 := [monotonicity #160]: #162
#168 := [trans #163 #166]: #167
#91 := (iff #28 #90)
#88 := (iff #27 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#171 := [monotonicity #92 #168]: #170
#79 := (iff #20 #78)
#80 := [rewrite]: #79
#174 := [monotonicity #80 #171]: #173
#82 := (iff #21 #81)
#83 := [rewrite]: #82
#177 := [monotonicity #83 #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#200 := [trans #183 #198]: #199
#157 := [asserted]: #46
#201 := [mp #157 #200]: #196
#204 := [mp~ #201 #208]: #196
#252 := [mp #204 #251]: #249
#283 := [mp #252 #282]: #280
#767 := [mp #283 #766]: #762
#11 := 1::Int
#10 := (f4 f5 0::Int)
#12 := (f3 #10 1::Int)
#13 := (= #12 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#683 := (not #762)
#684 := (or #683 #13)
#341 := (* -1::Int 1::Int)
#425 := (* -1::Int 0::Int)
#426 := (mod #425 #341)
#427 := (+ #12 #426)
#418 := (= #427 0::Int)
#429 := (mod 0::Int 1::Int)
#430 := (* -1::Int #429)
#431 := (+ #12 #430)
#428 := (= #431 0::Int)
#432 := (>= 0::Int 0::Int)
#411 := (<= 1::Int 0::Int)
#746 := (or #411 #432)
#748 := (not #746)
#405 := (<= 0::Int 0::Int)
#535 := (or #405 #411)
#742 := (not #535)
#416 := (or #742 #748)
#417 := (ite #416 #428 #418)
#749 := (= 0::Int 0::Int)
#750 := (ite #749 #13 #417)
#67 := (= 0::Int #12)
#751 := (= 1::Int 0::Int)
#752 := (ite #751 #67 #750)
#687 := (or #683 #752)
#587 := (iff #687 #684)
#590 := (iff #684 #684)
#583 := [rewrite]: #590
#686 := (iff #752 #13)
#704 := (ite false #13 #13)
#534 := (iff #704 #13)
#536 := [rewrite]: #534
#579 := (iff #752 #704)
#577 := (iff #750 #13)
#1 := true
#691 := (ite true #13 #13)
#692 := (iff #691 #13)
#695 := [rewrite]: #692
#693 := (iff #750 #691)
#537 := (iff #417 #13)
#698 := (iff #417 #704)
#697 := (iff #418 #13)
#702 := (= #427 #12)
#433 := (+ #12 0::Int)
#716 := (= #433 #12)
#720 := [rewrite]: #716
#700 := (= #427 #433)
#557 := (= #426 0::Int)
#713 := (mod 0::Int -1::Int)
#555 := (= #713 0::Int)
#556 := [rewrite]: #555
#708 := (= #426 #713)
#707 := (= #341 -1::Int)
#712 := [rewrite]: #707
#438 := (= #425 0::Int)
#439 := [rewrite]: #438
#714 := [monotonicity #439 #712]: #708
#699 := [trans #714 #556]: #557
#701 := [monotonicity #699]: #700
#696 := [trans #701 #720]: #702
#703 := [monotonicity #696]: #697
#711 := (iff #428 #13)
#709 := (= #431 #12)
#715 := (= #431 #433)
#717 := (= #430 0::Int)
#436 := (= #430 #425)
#722 := (= #429 0::Int)
#726 := [rewrite]: #722
#437 := [monotonicity #726]: #436
#718 := [trans #437 #439]: #717
#719 := [monotonicity #718]: #715
#710 := [trans #719 #720]: #709
#706 := [monotonicity #710]: #711
#721 := (iff #416 false)
#347 := (or false false)
#446 := (iff #347 false)
#447 := [rewrite]: #446
#723 := (iff #416 #347)
#452 := (iff #748 false)
#732 := (not true)
#735 := (iff #732 false)
#730 := [rewrite]: #735
#450 := (iff #748 #732)
#727 := (iff #746 true)
#379 := (or false true)
#738 := (iff #379 true)
#741 := [rewrite]: #738
#380 := (iff #746 #379)
#737 := (iff #432 true)
#739 := [rewrite]: #737
#404 := (iff #411 false)
#745 := [rewrite]: #404
#740 := [monotonicity #745 #739]: #380
#728 := [trans #740 #741]: #727
#451 := [monotonicity #728]: #450
#453 := [trans #451 #730]: #452
#736 := (iff #742 false)
#733 := (iff #742 #732)
#395 := (iff #535 true)
#388 := (or true false)
#393 := (iff #388 true)
#394 := [rewrite]: #393
#729 := (iff #535 #388)
#408 := (iff #405 true)
#744 := [rewrite]: #408
#392 := [monotonicity #744 #745]: #729
#731 := [trans #392 #394]: #395
#734 := [monotonicity #731]: #733
#374 := [trans #734 #730]: #736
#724 := [monotonicity #374 #453]: #723
#725 := [trans #724 #447]: #721
#705 := [monotonicity #725 #706 #703]: #698
#690 := [trans #705 #536]: #537
#743 := (iff #749 true)
#403 := [rewrite]: #743
#694 := [monotonicity #403 #690]: #693
#578 := [trans #694 #695]: #577
#73 := (iff #67 #13)
#74 := [rewrite]: #73
#747 := (iff #751 false)
#753 := [rewrite]: #747
#538 := [monotonicity #753 #74 #578]: #579
#588 := [trans #538 #536]: #686
#589 := [monotonicity #588]: #587
#591 := [trans #589 #583]: #587
#572 := [quant-inst #9 #11]: #687
#592 := [mp #572 #591]: #684
[unit-resolution #592 #66 #767]: false
unsat
dbfbec508dfad574448ad70185c575b9e410bcdb 309 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#751 := (pattern #38)
#12 := 0::Int
#83 := -1::Int
#87 := (* -1::Int #18)
#84 := (* -1::Int #16)
#148 := (mod #84 #87)
#263 := (+ #38 #148)
#264 := (= #263 0::Int)
#39 := (mod #16 #18)
#260 := (* -1::Int #39)
#261 := (+ #38 #260)
#262 := (= #261 0::Int)
#122 := (>= #16 0::Int)
#115 := (<= #18 0::Int)
#207 := (or #115 #122)
#208 := (not #207)
#111 := (<= #16 0::Int)
#205 := (or #111 #115)
#206 := (not #205)
#211 := (or #206 #208)
#265 := (ite #211 #262 #264)
#259 := (= #38 0::Int)
#20 := (= #16 0::Int)
#266 := (ite #20 #259 #265)
#258 := (= #16 #38)
#21 := (= #18 0::Int)
#267 := (ite #21 #258 #266)
#752 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #751) #267)
#270 := (forall (vars (?v0 Int) (?v1 Int)) #267)
#755 := (iff #270 #752)
#753 := (iff #267 #267)
#754 := [refl]: #753
#756 := [quant-intro #754]: #755
#154 := (* -1::Int #148)
#227 := (ite #211 #39 #154)
#230 := (ite #20 0::Int #227)
#233 := (ite #21 #16 #230)
#236 := (= #38 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#271 := (iff #239 #270)
#268 := (iff #236 #267)
#269 := [rewrite]: #268
#272 := [quant-intro #269]: #271
#123 := (not #122)
#116 := (not #115)
#126 := (and #116 #123)
#112 := (not #111)
#119 := (and #112 #116)
#129 := (or #119 #126)
#174 := (ite #129 #39 #154)
#177 := (ite #20 0::Int #174)
#180 := (ite #21 #16 #177)
#183 := (= #38 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#240 := (iff #186 #239)
#237 := (iff #183 #236)
#234 := (= #180 #233)
#231 := (= #177 #230)
#228 := (= #174 #227)
#212 := (iff #129 #211)
#209 := (iff #126 #208)
#210 := [rewrite]: #209
#199 := (iff #119 #206)
#200 := [rewrite]: #199
#213 := [monotonicity #200 #210]: #212
#229 := [monotonicity #213]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#197 := (~ #186 #186)
#196 := (~ #183 #183)
#193 := [refl]: #196
#198 := [nnf-pos #193]: #197
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (ite #28 #39 #41)
#43 := (ite #20 0::Int #42)
#44 := (ite #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#189 := (iff #46 #186)
#77 := (and #24 #26)
#80 := (or #25 #77)
#159 := (ite #80 #39 #154)
#68 := (= 0::Int #16)
#162 := (ite #68 0::Int #159)
#71 := (= 0::Int #18)
#165 := (ite #71 #16 #162)
#168 := (= #38 #165)
#171 := (forall (vars (?v0 Int) (?v1 Int)) #168)
#187 := (iff #171 #186)
#184 := (iff #168 #183)
#181 := (= #165 #180)
#178 := (= #162 #177)
#175 := (= #159 #174)
#130 := (iff #80 #129)
#127 := (iff #77 #126)
#124 := (iff #26 #123)
#125 := [rewrite]: #124
#117 := (iff #24 #116)
#118 := [rewrite]: #117
#128 := [monotonicity #118 #125]: #127
#120 := (iff #25 #119)
#113 := (iff #23 #112)
#114 := [rewrite]: #113
#121 := [monotonicity #114 #118]: #120
#131 := [monotonicity #121 #128]: #130
#176 := [monotonicity #131]: #175
#105 := (iff #68 #20)
#106 := [rewrite]: #105
#179 := [monotonicity #106 #176]: #178
#107 := (iff #71 #21)
#108 := [rewrite]: #107
#182 := [monotonicity #108 #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#172 := (iff #46 #171)
#169 := (iff #45 #168)
#166 := (= #44 #165)
#163 := (= #43 #162)
#160 := (= #42 #159)
#157 := (= #41 #154)
#151 := (- #148)
#155 := (= #151 #154)
#156 := [rewrite]: #155
#152 := (= #41 #151)
#149 := (= #40 #148)
#88 := (= #31 #87)
#89 := [rewrite]: #88
#85 := (= #30 #84)
#86 := [rewrite]: #85
#150 := [monotonicity #86 #89]: #149
#153 := [monotonicity #150]: #152
#158 := [trans #153 #156]: #157
#81 := (iff #28 #80)
#78 := (iff #27 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#161 := [monotonicity #82 #158]: #160
#69 := (iff #20 #68)
#70 := [rewrite]: #69
#164 := [monotonicity #70 #161]: #163
#72 := (iff #21 #71)
#73 := [rewrite]: #72
#167 := [monotonicity #73 #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#190 := [trans #173 #188]: #189
#147 := [asserted]: #46
#191 := [mp #147 #190]: #186
#194 := [mp~ #191 #198]: #186
#242 := [mp #194 #241]: #239
#273 := [mp #242 #272]: #270
#757 := [mp #273 #756]: #752
#9 := 1::Int
#10 := (f4 f5 1::Int)
#11 := (f3 #10 1::Int)
#13 := (= #11 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#577 := (not #752)
#579 := (or #577 #13)
#331 := (* -1::Int 1::Int)
#415 := (mod #331 #331)
#416 := (+ #11 #415)
#417 := (= #416 0::Int)
#408 := (mod 1::Int 1::Int)
#419 := (* -1::Int #408)
#420 := (+ #11 #419)
#421 := (= #420 0::Int)
#418 := (>= 1::Int 0::Int)
#422 := (<= 1::Int 0::Int)
#401 := (or #422 #418)
#736 := (not #401)
#738 := (or #422 #422)
#395 := (not #738)
#525 := (or #395 #736)
#732 := (ite #525 #421 #417)
#406 := (= 1::Int 0::Int)
#407 := (ite #406 #13 #732)
#739 := (= 1::Int #11)
#740 := (ite #406 #739 #407)
#580 := (or #577 #740)
#581 := (iff #580 #579)
#583 := (iff #579 #579)
#584 := [rewrite]: #583
#677 := (iff #740 #13)
#743 := (= #11 1::Int)
#528 := (ite false #743 #13)
#673 := (iff #528 #13)
#674 := [rewrite]: #673
#676 := (iff #740 #528)
#568 := (iff #407 #13)
#683 := (ite false #13 #13)
#685 := (iff #683 #13)
#567 := [rewrite]: #685
#684 := (iff #407 #683)
#680 := (iff #732 #13)
#1 := true
#688 := (ite true #13 #13)
#526 := (iff #688 #13)
#527 := [rewrite]: #526
#695 := (iff #732 #688)
#693 := (iff #417 #13)
#686 := (= #416 #11)
#705 := (+ #11 0::Int)
#710 := (= #705 #11)
#699 := [rewrite]: #710
#691 := (= #416 #705)
#689 := (= #415 0::Int)
#698 := (mod -1::Int -1::Int)
#546 := (= #698 0::Int)
#547 := [rewrite]: #546
#704 := (= #415 #698)
#702 := (= #331 -1::Int)
#703 := [rewrite]: #702
#545 := [monotonicity #703 #703]: #704
#690 := [trans #545 #547]: #689
#692 := [monotonicity #690]: #691
#687 := [trans #692 #699]: #686
#694 := [monotonicity #687]: #693
#696 := (iff #421 #13)
#700 := (= #420 #11)
#709 := (= #420 #705)
#708 := (= #419 0::Int)
#426 := (* -1::Int 0::Int)
#429 := (= #426 0::Int)
#707 := [rewrite]: #429
#427 := (= #419 #426)
#712 := (= #408 0::Int)
#716 := [rewrite]: #712
#428 := [monotonicity #716]: #427
#423 := [trans #428 #707]: #708
#706 := [monotonicity #423]: #709
#701 := [trans #706 #699]: #700
#697 := [monotonicity #701]: #696
#711 := (iff #525 true)
#337 := (or true false)
#436 := (iff #337 true)
#437 := [rewrite]: #436
#713 := (iff #525 #337)
#442 := (iff #736 false)
#731 := (not true)
#440 := (iff #731 false)
#441 := [rewrite]: #440
#717 := (iff #736 #731)
#730 := (iff #401 true)
#364 := (or false true)
#369 := (iff #364 true)
#370 := [rewrite]: #369
#727 := (iff #401 #364)
#720 := (iff #418 true)
#726 := [rewrite]: #720
#393 := (iff #422 false)
#398 := [rewrite]: #393
#729 := [monotonicity #398 #726]: #727
#728 := [trans #729 #370]: #730
#718 := [monotonicity #728]: #717
#443 := [trans #718 #441]: #442
#724 := (iff #395 true)
#384 := (not false)
#722 := (iff #384 true)
#723 := [rewrite]: #722
#385 := (iff #395 #384)
#382 := (iff #738 false)
#734 := (or false false)
#378 := (iff #734 false)
#719 := [rewrite]: #378
#394 := (iff #738 #734)
#735 := [monotonicity #398 #398]: #394
#383 := [trans #735 #719]: #382
#721 := [monotonicity #383]: #385
#725 := [trans #721 #723]: #724
#714 := [monotonicity #725 #443]: #713
#715 := [trans #714 #437]: #711
#524 := [monotonicity #715 #697 #694]: #695
#681 := [trans #524 #527]: #680
#741 := (iff #406 false)
#742 := [rewrite]: #741
#682 := [monotonicity #742 #681]: #684
#569 := [trans #682 #567]: #568
#737 := (iff #739 #743)
#733 := [rewrite]: #737
#578 := [monotonicity #742 #733 #569]: #676
#562 := [trans #578 #674]: #677
#582 := [monotonicity #562]: #581
#585 := [trans #582 #584]: #581
#573 := [quant-inst #9 #9]: #580
#678 := [mp #573 #585]: #579
[unit-resolution #678 #66 #757]: false
unsat
85bd77bcf683d302943eca4a8f60f76dd09e8863 320 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#752 := (pattern #39)
#13 := 0::Int
#84 := -1::Int
#88 := (* -1::Int #19)
#85 := (* -1::Int #17)
#149 := (mod #85 #88)
#264 := (+ #39 #149)
#265 := (= #264 0::Int)
#40 := (mod #17 #19)
#261 := (* -1::Int #40)
#262 := (+ #39 #261)
#263 := (= #262 0::Int)
#123 := (>= #17 0::Int)
#116 := (<= #19 0::Int)
#208 := (or #116 #123)
#209 := (not #208)
#112 := (<= #17 0::Int)
#206 := (or #112 #116)
#207 := (not #206)
#212 := (or #207 #209)
#266 := (ite #212 #263 #265)
#260 := (= #39 0::Int)
#21 := (= #17 0::Int)
#267 := (ite #21 #260 #266)
#259 := (= #17 #39)
#22 := (= #19 0::Int)
#268 := (ite #22 #259 #267)
#753 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #752) #268)
#271 := (forall (vars (?v0 Int) (?v1 Int)) #268)
#756 := (iff #271 #753)
#754 := (iff #268 #268)
#755 := [refl]: #754
#757 := [quant-intro #755]: #756
#155 := (* -1::Int #149)
#228 := (ite #212 #40 #155)
#231 := (ite #21 0::Int #228)
#234 := (ite #22 #17 #231)
#237 := (= #39 #234)
#240 := (forall (vars (?v0 Int) (?v1 Int)) #237)
#272 := (iff #240 #271)
#269 := (iff #237 #268)
#270 := [rewrite]: #269
#273 := [quant-intro #270]: #272
#124 := (not #123)
#117 := (not #116)
#127 := (and #117 #124)
#113 := (not #112)
#120 := (and #113 #117)
#130 := (or #120 #127)
#175 := (ite #130 #40 #155)
#178 := (ite #21 0::Int #175)
#181 := (ite #22 #17 #178)
#184 := (= #39 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#241 := (iff #187 #240)
#238 := (iff #184 #237)
#235 := (= #181 #234)
#232 := (= #178 #231)
#229 := (= #175 #228)
#213 := (iff #130 #212)
#210 := (iff #127 #209)
#211 := [rewrite]: #210
#200 := (iff #120 #207)
#201 := [rewrite]: #200
#214 := [monotonicity #201 #211]: #213
#230 := [monotonicity #214]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [quant-intro #239]: #241
#198 := (~ #187 #187)
#197 := (~ #184 #184)
#194 := [refl]: #197
#199 := [nnf-pos #194]: #198
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#190 := (iff #47 #187)
#78 := (and #25 #27)
#81 := (or #26 #78)
#160 := (ite #81 #40 #155)
#69 := (= 0::Int #17)
#163 := (ite #69 0::Int #160)
#72 := (= 0::Int #19)
#166 := (ite #72 #17 #163)
#169 := (= #39 #166)
#172 := (forall (vars (?v0 Int) (?v1 Int)) #169)
#188 := (iff #172 #187)
#185 := (iff #169 #184)
#182 := (= #166 #181)
#179 := (= #163 #178)
#176 := (= #160 #175)
#131 := (iff #81 #130)
#128 := (iff #78 #127)
#125 := (iff #27 #124)
#126 := [rewrite]: #125
#118 := (iff #25 #117)
#119 := [rewrite]: #118
#129 := [monotonicity #119 #126]: #128
#121 := (iff #26 #120)
#114 := (iff #24 #113)
#115 := [rewrite]: #114
#122 := [monotonicity #115 #119]: #121
#132 := [monotonicity #122 #129]: #131
#177 := [monotonicity #132]: #176
#106 := (iff #69 #21)
#107 := [rewrite]: #106
#180 := [monotonicity #107 #177]: #179
#108 := (iff #72 #22)
#109 := [rewrite]: #108
#183 := [monotonicity #109 #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#173 := (iff #47 #172)
#170 := (iff #46 #169)
#167 := (= #45 #166)
#164 := (= #44 #163)
#161 := (= #43 #160)
#158 := (= #42 #155)
#152 := (- #149)
#156 := (= #152 #155)
#157 := [rewrite]: #156
#153 := (= #42 #152)
#150 := (= #41 #149)
#89 := (= #32 #88)
#90 := [rewrite]: #89
#86 := (= #31 #85)
#87 := [rewrite]: #86
#151 := [monotonicity #87 #90]: #150
#154 := [monotonicity #151]: #153
#159 := [trans #154 #157]: #158
#82 := (iff #29 #81)
#79 := (iff #28 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#162 := [monotonicity #83 #159]: #161
#70 := (iff #21 #69)
#71 := [rewrite]: #70
#165 := [monotonicity #71 #162]: #164
#73 := (iff #22 #72)
#74 := [rewrite]: #73
#168 := [monotonicity #74 #165]: #167
#171 := [monotonicity #168]: #170
#174 := [quant-intro #171]: #173
#191 := [trans #174 #189]: #190
#148 := [asserted]: #47
#192 := [mp #148 #191]: #187
#195 := [mp~ #192 #199]: #187
#243 := [mp #195 #242]: #240
#274 := [mp #243 #273]: #271
#758 := [mp #274 #757]: #753
#11 := 1::Int
#9 := 3::Int
#10 := (f4 f5 3::Int)
#12 := (f3 #10 1::Int)
#14 := (= #12 0::Int)
#15 := (not #14)
#67 := [asserted]: #15
#676 := (not #753)
#680 := (or #676 #14)
#332 := (* -1::Int 1::Int)
#416 := (* -1::Int 3::Int)
#417 := (mod #416 #332)
#418 := (+ #12 #417)
#409 := (= #418 0::Int)
#420 := (mod 3::Int 1::Int)
#421 := (* -1::Int #420)
#422 := (+ #12 #421)
#419 := (= #422 0::Int)
#423 := (>= 3::Int 0::Int)
#402 := (<= 1::Int 0::Int)
#737 := (or #402 #423)
#739 := (not #737)
#396 := (<= 3::Int 0::Int)
#526 := (or #396 #402)
#733 := (not #526)
#407 := (or #733 #739)
#408 := (ite #407 #419 #409)
#740 := (= 3::Int 0::Int)
#741 := (ite #740 #14 #408)
#742 := (= 3::Int #12)
#743 := (= 1::Int 0::Int)
#738 := (ite #743 #742 #741)
#667 := (or #676 #738)
#661 := (iff #667 #680)
#660 := (iff #680 #680)
#670 := [rewrite]: #660
#586 := (iff #738 #14)
#399 := (= #12 3::Int)
#574 := (ite false #399 #14)
#584 := (iff #574 #14)
#585 := [rewrite]: #584
#582 := (iff #738 #574)
#580 := (iff #741 #14)
#674 := (ite false #14 #14)
#563 := (iff #674 #14)
#578 := [rewrite]: #563
#675 := (iff #741 #674)
#677 := (iff #408 #14)
#1 := true
#686 := (ite true #14 #14)
#570 := (iff #686 #14)
#529 := [rewrite]: #570
#568 := (iff #408 #686)
#685 := (iff #409 #14)
#682 := (= #418 #12)
#697 := (+ #12 0::Int)
#704 := (= #697 #12)
#699 := [rewrite]: #704
#528 := (= #418 #697)
#525 := (= #417 0::Int)
#690 := -3::Int
#688 := (mod -3::Int -1::Int)
#689 := (= #688 0::Int)
#696 := [rewrite]: #689
#694 := (= #417 #688)
#693 := (= #332 -1::Int)
#687 := [rewrite]: #693
#691 := (= #416 -3::Int)
#692 := [rewrite]: #691
#695 := [monotonicity #692 #687]: #694
#527 := [trans #695 #696]: #525
#681 := [monotonicity #527]: #528
#684 := [trans #681 #699]: #682
#683 := [monotonicity #684]: #685
#547 := (iff #419 #14)
#705 := (= #422 #12)
#698 := (= #422 #697)
#701 := (= #421 0::Int)
#706 := (* -1::Int 0::Int)
#711 := (= #706 0::Int)
#700 := [rewrite]: #711
#710 := (= #421 #706)
#709 := (= #420 0::Int)
#424 := [rewrite]: #709
#707 := [monotonicity #424]: #710
#702 := [trans #707 #700]: #701
#703 := [monotonicity #702]: #698
#546 := [trans #703 #699]: #705
#548 := [monotonicity #546]: #547
#430 := (iff #407 true)
#713 := (or true false)
#428 := (iff #713 true)
#429 := [rewrite]: #428
#717 := (iff #407 #713)
#712 := (iff #739 false)
#338 := (not true)
#437 := (iff #338 false)
#438 := [rewrite]: #437
#714 := (iff #739 #338)
#443 := (iff #737 true)
#732 := (or false true)
#441 := (iff #732 true)
#442 := [rewrite]: #441
#718 := (iff #737 #732)
#731 := (iff #423 true)
#729 := [rewrite]: #731
#383 := (iff #402 false)
#384 := [rewrite]: #383
#719 := [monotonicity #384 #729]: #718
#444 := [trans #719 #442]: #443
#715 := [monotonicity #444]: #714
#716 := [trans #715 #438]: #712
#370 := (iff #733 true)
#721 := (not false)
#728 := (iff #721 true)
#730 := [rewrite]: #728
#727 := (iff #733 #721)
#725 := (iff #526 false)
#385 := (or false false)
#723 := (iff #385 false)
#724 := [rewrite]: #723
#386 := (iff #526 #385)
#379 := (iff #396 false)
#720 := [rewrite]: #379
#722 := [monotonicity #720 #384]: #386
#726 := [trans #722 #724]: #725
#365 := [monotonicity #726]: #727
#371 := [trans #365 #730]: #370
#427 := [monotonicity #371 #716]: #717
#708 := [trans #427 #429]: #430
#569 := [monotonicity #708 #548 #683]: #568
#579 := [trans #569 #529]: #677
#395 := (iff #740 false)
#736 := [rewrite]: #395
#678 := [monotonicity #736 #579]: #675
#581 := [trans #678 #578]: #580
#394 := (iff #742 #399)
#735 := [rewrite]: #394
#744 := (iff #743 false)
#734 := [rewrite]: #744
#583 := [monotonicity #734 #735 #581]: #582
#679 := [trans #583 #585]: #586
#658 := [monotonicity #679]: #661
#671 := [trans #658 #670]: #661
#669 := [quant-inst #9 #11]: #667
#672 := [mp #669 #671]: #680
[unit-resolution #672 #67 #758]: false
unsat
6be2ef74dd3e2bf3bb35431b62b3251c3cb851ce 318 0
#2 := false
#13 := 0::Int
decl f6 :: Int
#9 := f6
#740 := (= f6 0::Int)
#581 := (not #740)
#423 := (>= f6 0::Int)
#728 := (not #423)
#396 := (<= f6 0::Int)
#385 := (not #396)
#696 := (or #385 #728 #740)
#583 := (not #696)
#84 := -1::Int
#416 := (* -1::Int f6)
#708 := (mod #416 -1::Int)
decl f3 :: (-> S2 Int Int)
#11 := 1::Int
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#8 := f5
#10 := (f4 f5 f6)
#12 := (f3 #10 1::Int)
#706 := (+ #12 #708)
#711 := (= #706 0::Int)
#14 := (= #12 0::Int)
#528 := (ite #696 #14 #711)
#19 := (:var 0 Int)
#17 := (:var 1 Int)
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#752 := (pattern #39)
#88 := (* -1::Int #19)
#85 := (* -1::Int #17)
#149 := (mod #85 #88)
#264 := (+ #39 #149)
#265 := (= #264 0::Int)
#40 := (mod #17 #19)
#261 := (* -1::Int #40)
#262 := (+ #39 #261)
#263 := (= #262 0::Int)
#123 := (>= #17 0::Int)
#116 := (<= #19 0::Int)
#208 := (or #116 #123)
#209 := (not #208)
#112 := (<= #17 0::Int)
#206 := (or #112 #116)
#207 := (not #206)
#212 := (or #207 #209)
#266 := (ite #212 #263 #265)
#260 := (= #39 0::Int)
#21 := (= #17 0::Int)
#267 := (ite #21 #260 #266)
#259 := (= #17 #39)
#22 := (= #19 0::Int)
#268 := (ite #22 #259 #267)
#753 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #752) #268)
#271 := (forall (vars (?v0 Int) (?v1 Int)) #268)
#756 := (iff #271 #753)
#754 := (iff #268 #268)
#755 := [refl]: #754
#757 := [quant-intro #755]: #756
#155 := (* -1::Int #149)
#228 := (ite #212 #40 #155)
#231 := (ite #21 0::Int #228)
#234 := (ite #22 #17 #231)
#237 := (= #39 #234)
#240 := (forall (vars (?v0 Int) (?v1 Int)) #237)
#272 := (iff #240 #271)
#269 := (iff #237 #268)
#270 := [rewrite]: #269
#273 := [quant-intro #270]: #272
#124 := (not #123)
#117 := (not #116)
#127 := (and #117 #124)
#113 := (not #112)
#120 := (and #113 #117)
#130 := (or #120 #127)
#175 := (ite #130 #40 #155)
#178 := (ite #21 0::Int #175)
#181 := (ite #22 #17 #178)
#184 := (= #39 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#241 := (iff #187 #240)
#238 := (iff #184 #237)
#235 := (= #181 #234)
#232 := (= #178 #231)
#229 := (= #175 #228)
#213 := (iff #130 #212)
#210 := (iff #127 #209)
#211 := [rewrite]: #210
#200 := (iff #120 #207)
#201 := [rewrite]: #200
#214 := [monotonicity #201 #211]: #213
#230 := [monotonicity #214]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [quant-intro #239]: #241
#198 := (~ #187 #187)
#197 := (~ #184 #184)
#194 := [refl]: #197
#199 := [nnf-pos #194]: #198
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#190 := (iff #47 #187)
#78 := (and #25 #27)
#81 := (or #26 #78)
#160 := (ite #81 #40 #155)
#69 := (= 0::Int #17)
#163 := (ite #69 0::Int #160)
#72 := (= 0::Int #19)
#166 := (ite #72 #17 #163)
#169 := (= #39 #166)
#172 := (forall (vars (?v0 Int) (?v1 Int)) #169)
#188 := (iff #172 #187)
#185 := (iff #169 #184)
#182 := (= #166 #181)
#179 := (= #163 #178)
#176 := (= #160 #175)
#131 := (iff #81 #130)
#128 := (iff #78 #127)
#125 := (iff #27 #124)
#126 := [rewrite]: #125
#118 := (iff #25 #117)
#119 := [rewrite]: #118
#129 := [monotonicity #119 #126]: #128
#121 := (iff #26 #120)
#114 := (iff #24 #113)
#115 := [rewrite]: #114
#122 := [monotonicity #115 #119]: #121
#132 := [monotonicity #122 #129]: #131
#177 := [monotonicity #132]: #176
#106 := (iff #69 #21)
#107 := [rewrite]: #106
#180 := [monotonicity #107 #177]: #179
#108 := (iff #72 #22)
#109 := [rewrite]: #108
#183 := [monotonicity #109 #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#173 := (iff #47 #172)
#170 := (iff #46 #169)
#167 := (= #45 #166)
#164 := (= #44 #163)
#161 := (= #43 #160)
#158 := (= #42 #155)
#152 := (- #149)
#156 := (= #152 #155)
#157 := [rewrite]: #156
#153 := (= #42 #152)
#150 := (= #41 #149)
#89 := (= #32 #88)
#90 := [rewrite]: #89
#86 := (= #31 #85)
#87 := [rewrite]: #86
#151 := [monotonicity #87 #90]: #150
#154 := [monotonicity #151]: #153
#159 := [trans #154 #157]: #158
#82 := (iff #29 #81)
#79 := (iff #28 #78)
#80 := [rewrite]: #79
#83 := [monotonicity #80]: #82
#162 := [monotonicity #83 #159]: #161
#70 := (iff #21 #69)
#71 := [rewrite]: #70
#165 := [monotonicity #71 #162]: #164
#73 := (iff #22 #72)
#74 := [rewrite]: #73
#168 := [monotonicity #74 #165]: #167
#171 := [monotonicity #168]: #170
#174 := [quant-intro #171]: #173
#191 := [trans #174 #189]: #190
#148 := [asserted]: #47
#192 := [mp #148 #191]: #187
#195 := [mp~ #192 #199]: #187
#243 := [mp #195 #242]: #240
#274 := [mp #243 #273]: #271
#758 := [mp #274 #757]: #753
#683 := (not #753)
#686 := (or #683 #528)
#332 := (* -1::Int 1::Int)
#417 := (mod #416 #332)
#418 := (+ #12 #417)
#409 := (= #418 0::Int)
#420 := (mod f6 1::Int)
#421 := (* -1::Int #420)
#422 := (+ #12 #421)
#419 := (= #422 0::Int)
#402 := (<= 1::Int 0::Int)
#737 := (or #402 #423)
#739 := (not #737)
#526 := (or #396 #402)
#733 := (not #526)
#407 := (or #733 #739)
#408 := (ite #407 #419 #409)
#741 := (ite #740 #14 #408)
#742 := (= f6 #12)
#743 := (= 1::Int 0::Int)
#738 := (ite #743 #742 #741)
#568 := (or #683 #738)
#570 := (iff #568 #686)
#677 := (iff #686 #686)
#579 := [rewrite]: #677
#684 := (iff #738 #528)
#371 := (or #385 #728)
#705 := (or #371 #740)
#546 := (ite #705 #14 #711)
#681 := (iff #546 #528)
#525 := (iff #705 #696)
#527 := [rewrite]: #525
#682 := [monotonicity #527]: #681
#695 := (iff #738 #546)
#692 := (ite false #742 #546)
#688 := (iff #692 #546)
#694 := [rewrite]: #688
#693 := (iff #738 #692)
#690 := (iff #741 #546)
#702 := (ite #371 #14 #711)
#703 := (ite #740 #14 #702)
#547 := (iff #703 #546)
#548 := [rewrite]: #547
#704 := (iff #741 #703)
#697 := (iff #408 #702)
#700 := (iff #409 #711)
#710 := (= #418 #706)
#709 := (= #417 #708)
#429 := (= #332 -1::Int)
#430 := [rewrite]: #429
#424 := [monotonicity #430]: #709
#707 := [monotonicity #424]: #710
#701 := [monotonicity #707]: #700
#427 := (iff #419 #14)
#713 := (= #422 #12)
#715 := (+ #12 0::Int)
#712 := (= #715 #12)
#716 := [rewrite]: #712
#437 := (= #422 #715)
#338 := (= #421 0::Int)
#719 := (* -1::Int 0::Int)
#443 := (= #719 0::Int)
#444 := [rewrite]: #443
#441 := (= #421 #719)
#732 := (= #420 0::Int)
#718 := [rewrite]: #732
#442 := [monotonicity #718]: #441
#714 := [trans #442 #444]: #338
#438 := [monotonicity #714]: #437
#717 := [trans #438 #716]: #713
#428 := [monotonicity #717]: #427
#731 := (iff #407 #371)
#730 := (iff #739 #728)
#727 := (iff #737 #423)
#723 := (or false #423)
#726 := (iff #723 #423)
#721 := [rewrite]: #726
#724 := (iff #737 #723)
#394 := (iff #402 false)
#399 := [rewrite]: #394
#725 := [monotonicity #399]: #724
#365 := [trans #725 #721]: #727
#370 := [monotonicity #365]: #730
#386 := (iff #733 #385)
#383 := (iff #526 #396)
#735 := (or #396 false)
#379 := (iff #735 #396)
#720 := [rewrite]: #379
#395 := (iff #526 #735)
#736 := [monotonicity #399]: #395
#384 := [trans #736 #720]: #383
#722 := [monotonicity #384]: #386
#729 := [monotonicity #722 #370]: #731
#698 := [monotonicity #729 #428 #701]: #697
#699 := [monotonicity #698]: #704
#691 := [trans #699 #548]: #690
#744 := (iff #743 false)
#734 := [rewrite]: #744
#687 := [monotonicity #734 #691]: #693
#689 := [trans #687 #694]: #695
#685 := [trans #689 #682]: #684
#529 := [monotonicity #685]: #570
#674 := [trans #529 #579]: #570
#569 := [quant-inst #9 #11]: #568
#675 := [mp #569 #674]: #686
#668 := [unit-resolution #675 #758]: #528
#676 := (not #528)
#673 := (or #676 #583)
#15 := (not #14)
#67 := [asserted]: #15
#680 := (or #676 #583 #14)
#667 := [def-axiom]: #680
#662 := [unit-resolution #667 #67]: #673
#663 := [unit-resolution #662 #668]: #583
#574 := (or #696 #581)
#582 := [def-axiom]: #574
#664 := [unit-resolution #582 #663]: #581
#678 := (or #696 #396)
#563 := [def-axiom]: #678
#665 := [unit-resolution #563 #663]: #396
#578 := (or #696 #423)
#580 := [def-axiom]: #578
#659 := [unit-resolution #580 #663]: #423
#666 := (or #740 #385 #728)
#650 := [th-lemma arith triangle-eq]: #666
[unit-resolution #650 #659 #665 #664]: false
unsat
e7d5b6ef2ab2beae18b5430bef94875f7e4823b1 327 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#776 := (pattern #39)
#9 := 0::Int
#68 := -1::Int
#112 := (* -1::Int #19)
#109 := (* -1::Int #17)
#173 := (mod #109 #112)
#288 := (+ #39 #173)
#289 := (= #288 0::Int)
#40 := (mod #17 #19)
#285 := (* -1::Int #40)
#286 := (+ #39 #285)
#287 := (= #286 0::Int)
#147 := (>= #17 0::Int)
#140 := (<= #19 0::Int)
#232 := (or #140 #147)
#233 := (not #232)
#136 := (<= #17 0::Int)
#230 := (or #136 #140)
#231 := (not #230)
#236 := (or #231 #233)
#290 := (ite #236 #287 #289)
#284 := (= #39 0::Int)
#21 := (= #17 0::Int)
#291 := (ite #21 #284 #290)
#283 := (= #17 #39)
#22 := (= #19 0::Int)
#292 := (ite #22 #283 #291)
#777 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #776) #292)
#295 := (forall (vars (?v0 Int) (?v1 Int)) #292)
#780 := (iff #295 #777)
#778 := (iff #292 #292)
#779 := [refl]: #778
#781 := [quant-intro #779]: #780
#179 := (* -1::Int #173)
#252 := (ite #236 #40 #179)
#255 := (ite #21 0::Int #252)
#258 := (ite #22 #17 #255)
#261 := (= #39 #258)
#264 := (forall (vars (?v0 Int) (?v1 Int)) #261)
#296 := (iff #264 #295)
#293 := (iff #261 #292)
#294 := [rewrite]: #293
#297 := [quant-intro #294]: #296
#148 := (not #147)
#141 := (not #140)
#151 := (and #141 #148)
#137 := (not #136)
#144 := (and #137 #141)
#154 := (or #144 #151)
#199 := (ite #154 #40 #179)
#202 := (ite #21 0::Int #199)
#205 := (ite #22 #17 #202)
#208 := (= #39 #205)
#211 := (forall (vars (?v0 Int) (?v1 Int)) #208)
#265 := (iff #211 #264)
#262 := (iff #208 #261)
#259 := (= #205 #258)
#256 := (= #202 #255)
#253 := (= #199 #252)
#237 := (iff #154 #236)
#234 := (iff #151 #233)
#235 := [rewrite]: #234
#224 := (iff #144 #231)
#225 := [rewrite]: #224
#238 := [monotonicity #225 #235]: #237
#254 := [monotonicity #238]: #253
#257 := [monotonicity #254]: #256
#260 := [monotonicity #257]: #259
#263 := [monotonicity #260]: #262
#266 := [quant-intro #263]: #265
#222 := (~ #211 #211)
#221 := (~ #208 #208)
#218 := [refl]: #221
#223 := [nnf-pos #218]: #222
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#214 := (iff #47 #211)
#103 := (and #25 #27)
#106 := (or #26 #103)
#184 := (ite #106 #40 #179)
#94 := (= 0::Int #17)
#187 := (ite #94 0::Int #184)
#97 := (= 0::Int #19)
#190 := (ite #97 #17 #187)
#193 := (= #39 #190)
#196 := (forall (vars (?v0 Int) (?v1 Int)) #193)
#212 := (iff #196 #211)
#209 := (iff #193 #208)
#206 := (= #190 #205)
#203 := (= #187 #202)
#200 := (= #184 #199)
#155 := (iff #106 #154)
#152 := (iff #103 #151)
#149 := (iff #27 #148)
#150 := [rewrite]: #149
#142 := (iff #25 #141)
#143 := [rewrite]: #142
#153 := [monotonicity #143 #150]: #152
#145 := (iff #26 #144)
#138 := (iff #24 #137)
#139 := [rewrite]: #138
#146 := [monotonicity #139 #143]: #145
#156 := [monotonicity #146 #153]: #155
#201 := [monotonicity #156]: #200
#130 := (iff #94 #21)
#131 := [rewrite]: #130
#204 := [monotonicity #131 #201]: #203
#132 := (iff #97 #22)
#133 := [rewrite]: #132
#207 := [monotonicity #133 #204]: #206
#210 := [monotonicity #207]: #209
#213 := [quant-intro #210]: #212
#197 := (iff #47 #196)
#194 := (iff #46 #193)
#191 := (= #45 #190)
#188 := (= #44 #187)
#185 := (= #43 #184)
#182 := (= #42 #179)
#176 := (- #173)
#180 := (= #176 #179)
#181 := [rewrite]: #180
#177 := (= #42 #176)
#174 := (= #41 #173)
#113 := (= #32 #112)
#114 := [rewrite]: #113
#110 := (= #31 #109)
#111 := [rewrite]: #110
#175 := [monotonicity #111 #114]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#107 := (iff #29 #106)
#104 := (iff #28 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#186 := [monotonicity #108 #183]: #185
#95 := (iff #21 #94)
#96 := [rewrite]: #95
#189 := [monotonicity #96 #186]: #188
#98 := (iff #22 #97)
#99 := [rewrite]: #98
#192 := [monotonicity #99 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [quant-intro #195]: #197
#215 := [trans #198 #213]: #214
#172 := [asserted]: #47
#216 := [mp #172 #215]: #211
#219 := [mp~ #216 #223]: #211
#267 := [mp #219 #266]: #264
#298 := [mp #267 #297]: #295
#782 := [mp #298 #781]: #777
#10 := (f4 f5 0::Int)
#71 := (f3 #10 -1::Int)
#74 := (= #71 0::Int)
#87 := (not #74)
#11 := 1::Int
#12 := (- 1::Int)
#13 := (f3 #10 #12)
#14 := (= #13 0::Int)
#15 := (not #14)
#90 := (iff #15 #87)
#77 := (= 0::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #15 #82)
#80 := (iff #14 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #14 #74)
#72 := (= #13 #71)
#69 := (= #12 -1::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#67 := [asserted]: #15
#92 := [mp #67 #91]: #87
#553 := (not #777)
#701 := (or #553 #74)
#356 := (* -1::Int -1::Int)
#440 := (* -1::Int 0::Int)
#441 := (mod #440 #356)
#442 := (+ #71 #441)
#433 := (= #442 0::Int)
#444 := (mod 0::Int -1::Int)
#445 := (* -1::Int #444)
#446 := (+ #71 #445)
#443 := (= #446 0::Int)
#447 := (>= 0::Int 0::Int)
#426 := (<= -1::Int 0::Int)
#761 := (or #426 #447)
#763 := (not #761)
#420 := (<= 0::Int 0::Int)
#550 := (or #420 #426)
#757 := (not #550)
#431 := (or #757 #763)
#432 := (ite #431 #443 #433)
#764 := (= 0::Int 0::Int)
#765 := (ite #764 #74 #432)
#766 := (= -1::Int 0::Int)
#767 := (ite #766 #77 #765)
#603 := (or #553 #767)
#699 := (iff #603 #701)
#587 := (iff #701 #701)
#602 := [rewrite]: #587
#593 := (iff #767 #74)
#711 := (ite false #74 #74)
#719 := (iff #711 #74)
#713 := [rewrite]: #719
#710 := (iff #767 #711)
#709 := (iff #765 #74)
#1 := true
#551 := (ite true #74 #74)
#706 := (iff #551 #74)
#708 := [rewrite]: #706
#552 := (iff #765 #551)
#720 := (iff #432 #74)
#712 := (iff #432 #711)
#716 := (iff #433 #74)
#714 := (= #442 #71)
#454 := (+ #71 0::Int)
#448 := (= #454 #71)
#730 := [rewrite]: #448
#571 := (= #442 #454)
#729 := (= #441 0::Int)
#721 := (mod 0::Int 1::Int)
#728 := (= #721 0::Int)
#723 := [rewrite]: #728
#722 := (= #441 #721)
#725 := (= #356 1::Int)
#726 := [rewrite]: #725
#741 := (= #440 0::Int)
#451 := [rewrite]: #741
#727 := [monotonicity #451 #726]: #722
#570 := [trans #727 #723]: #729
#572 := [monotonicity #570]: #571
#715 := [trans #572 #730]: #714
#717 := [monotonicity #715]: #716
#735 := (iff #443 #74)
#734 := (= #446 #71)
#732 := (= #446 #454)
#452 := (= #445 0::Int)
#740 := (= #445 #440)
#462 := (= #444 0::Int)
#736 := [rewrite]: #462
#737 := [monotonicity #736]: #740
#453 := [trans #737 #451]: #452
#733 := [monotonicity #453]: #732
#731 := [trans #733 #730]: #734
#724 := [monotonicity #731]: #735
#739 := (iff #431 false)
#466 := (or false false)
#362 := (iff #466 false)
#738 := [rewrite]: #362
#467 := (iff #431 #466)
#743 := (iff #763 false)
#747 := (not true)
#750 := (iff #747 false)
#745 := [rewrite]: #750
#756 := (iff #763 #747)
#755 := (iff #761 true)
#403 := (or true true)
#408 := (iff #403 true)
#409 := [rewrite]: #408
#394 := (iff #761 #403)
#752 := (iff #447 true)
#754 := [rewrite]: #752
#419 := (iff #426 true)
#760 := [rewrite]: #419
#395 := [monotonicity #760 #754]: #394
#753 := [trans #395 #409]: #755
#742 := [monotonicity #753]: #756
#465 := [trans #742 #745]: #743
#751 := (iff #757 false)
#748 := (iff #757 #747)
#410 := (iff #550 true)
#744 := (iff #550 #403)
#423 := (iff #420 true)
#759 := [rewrite]: #423
#407 := [monotonicity #759 #760]: #744
#746 := [trans #407 #409]: #410
#749 := [monotonicity #746]: #748
#389 := [trans #749 #745]: #751
#468 := [monotonicity #389 #465]: #467
#461 := [trans #468 #738]: #739
#718 := [monotonicity #461 #724 #717]: #712
#549 := [trans #718 #713]: #720
#758 := (iff #764 true)
#418 := [rewrite]: #758
#705 := [monotonicity #418 #549]: #552
#707 := [trans #705 #708]: #709
#762 := (iff #766 false)
#768 := [rewrite]: #762
#592 := [monotonicity #768 #86 #707]: #710
#594 := [trans #592 #713]: #593
#702 := [monotonicity #594]: #699
#604 := [trans #702 #602]: #699
#698 := [quant-inst #9 #68]: #603
#605 := [mp #698 #604]: #701
[unit-resolution #605 #92 #782]: false
unsat
53e960c63036f749bc0e8a6a50570c720042f356 337 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#776 := (pattern #39)
#13 := 0::Int
#68 := -1::Int
#112 := (* -1::Int #19)
#109 := (* -1::Int #17)
#173 := (mod #109 #112)
#288 := (+ #39 #173)
#289 := (= #288 0::Int)
#40 := (mod #17 #19)
#285 := (* -1::Int #40)
#286 := (+ #39 #285)
#287 := (= #286 0::Int)
#147 := (>= #17 0::Int)
#140 := (<= #19 0::Int)
#232 := (or #140 #147)
#233 := (not #232)
#136 := (<= #17 0::Int)
#230 := (or #136 #140)
#231 := (not #230)
#236 := (or #231 #233)
#290 := (ite #236 #287 #289)
#284 := (= #39 0::Int)
#21 := (= #17 0::Int)
#291 := (ite #21 #284 #290)
#283 := (= #17 #39)
#22 := (= #19 0::Int)
#292 := (ite #22 #283 #291)
#777 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #776) #292)
#295 := (forall (vars (?v0 Int) (?v1 Int)) #292)
#780 := (iff #295 #777)
#778 := (iff #292 #292)
#779 := [refl]: #778
#781 := [quant-intro #779]: #780
#179 := (* -1::Int #173)
#252 := (ite #236 #40 #179)
#255 := (ite #21 0::Int #252)
#258 := (ite #22 #17 #255)
#261 := (= #39 #258)
#264 := (forall (vars (?v0 Int) (?v1 Int)) #261)
#296 := (iff #264 #295)
#293 := (iff #261 #292)
#294 := [rewrite]: #293
#297 := [quant-intro #294]: #296
#148 := (not #147)
#141 := (not #140)
#151 := (and #141 #148)
#137 := (not #136)
#144 := (and #137 #141)
#154 := (or #144 #151)
#199 := (ite #154 #40 #179)
#202 := (ite #21 0::Int #199)
#205 := (ite #22 #17 #202)
#208 := (= #39 #205)
#211 := (forall (vars (?v0 Int) (?v1 Int)) #208)
#265 := (iff #211 #264)
#262 := (iff #208 #261)
#259 := (= #205 #258)
#256 := (= #202 #255)
#253 := (= #199 #252)
#237 := (iff #154 #236)
#234 := (iff #151 #233)
#235 := [rewrite]: #234
#224 := (iff #144 #231)
#225 := [rewrite]: #224
#238 := [monotonicity #225 #235]: #237
#254 := [monotonicity #238]: #253
#257 := [monotonicity #254]: #256
#260 := [monotonicity #257]: #259
#263 := [monotonicity #260]: #262
#266 := [quant-intro #263]: #265
#222 := (~ #211 #211)
#221 := (~ #208 #208)
#218 := [refl]: #221
#223 := [nnf-pos #218]: #222
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#214 := (iff #47 #211)
#103 := (and #25 #27)
#106 := (or #26 #103)
#184 := (ite #106 #40 #179)
#94 := (= 0::Int #17)
#187 := (ite #94 0::Int #184)
#97 := (= 0::Int #19)
#190 := (ite #97 #17 #187)
#193 := (= #39 #190)
#196 := (forall (vars (?v0 Int) (?v1 Int)) #193)
#212 := (iff #196 #211)
#209 := (iff #193 #208)
#206 := (= #190 #205)
#203 := (= #187 #202)
#200 := (= #184 #199)
#155 := (iff #106 #154)
#152 := (iff #103 #151)
#149 := (iff #27 #148)
#150 := [rewrite]: #149
#142 := (iff #25 #141)
#143 := [rewrite]: #142
#153 := [monotonicity #143 #150]: #152
#145 := (iff #26 #144)
#138 := (iff #24 #137)
#139 := [rewrite]: #138
#146 := [monotonicity #139 #143]: #145
#156 := [monotonicity #146 #153]: #155
#201 := [monotonicity #156]: #200
#130 := (iff #94 #21)
#131 := [rewrite]: #130
#204 := [monotonicity #131 #201]: #203
#132 := (iff #97 #22)
#133 := [rewrite]: #132
#207 := [monotonicity #133 #204]: #206
#210 := [monotonicity #207]: #209
#213 := [quant-intro #210]: #212
#197 := (iff #47 #196)
#194 := (iff #46 #193)
#191 := (= #45 #190)
#188 := (= #44 #187)
#185 := (= #43 #184)
#182 := (= #42 #179)
#176 := (- #173)
#180 := (= #176 #179)
#181 := [rewrite]: #180
#177 := (= #42 #176)
#174 := (= #41 #173)
#113 := (= #32 #112)
#114 := [rewrite]: #113
#110 := (= #31 #109)
#111 := [rewrite]: #110
#175 := [monotonicity #111 #114]: #174
#178 := [monotonicity #175]: #177
#183 := [trans #178 #181]: #182
#107 := (iff #29 #106)
#104 := (iff #28 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#186 := [monotonicity #108 #183]: #185
#95 := (iff #21 #94)
#96 := [rewrite]: #95
#189 := [monotonicity #96 #186]: #188
#98 := (iff #22 #97)
#99 := [rewrite]: #98
#192 := [monotonicity #99 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [quant-intro #195]: #197
#215 := [trans #198 #213]: #214
#172 := [asserted]: #47
#216 := [mp #172 #215]: #211
#219 := [mp~ #216 #223]: #211
#267 := [mp #219 #266]: #264
#298 := [mp #267 #297]: #295
#782 := [mp #298 #781]: #777
#9 := 1::Int
#10 := (f4 f5 1::Int)
#71 := (f3 #10 -1::Int)
#74 := (= #71 0::Int)
#87 := (not #74)
#11 := (- 1::Int)
#12 := (f3 #10 #11)
#14 := (= #12 0::Int)
#15 := (not #14)
#90 := (iff #15 #87)
#77 := (= 0::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #15 #82)
#80 := (iff #14 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #14 #74)
#72 := (= #12 #71)
#69 := (= #11 -1::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#67 := [asserted]: #15
#92 := [mp #67 #91]: #87
#598 := (not #777)
#606 := (or #598 #74)
#356 := (* -1::Int -1::Int)
#440 := (* -1::Int 1::Int)
#441 := (mod #440 #356)
#442 := (+ #71 #441)
#433 := (= #442 0::Int)
#444 := (mod 1::Int -1::Int)
#445 := (* -1::Int #444)
#446 := (+ #71 #445)
#443 := (= #446 0::Int)
#447 := (>= 1::Int 0::Int)
#426 := (<= -1::Int 0::Int)
#761 := (or #426 #447)
#763 := (not #761)
#420 := (<= 1::Int 0::Int)
#550 := (or #420 #426)
#757 := (not #550)
#431 := (or #757 #763)
#432 := (ite #431 #443 #433)
#764 := (= 1::Int 0::Int)
#765 := (ite #764 #74 #432)
#766 := (= 1::Int #71)
#767 := (= -1::Int 0::Int)
#762 := (ite #767 #766 #765)
#607 := (or #598 #762)
#609 := (iff #607 #606)
#703 := (iff #606 #606)
#700 := [rewrite]: #703
#604 := (iff #762 #74)
#423 := (= #71 1::Int)
#698 := (ite false #423 #74)
#587 := (iff #698 #74)
#602 := [rewrite]: #587
#699 := (iff #762 #698)
#701 := (iff #765 #74)
#706 := (ite false #74 #74)
#707 := (iff #706 #74)
#710 := [rewrite]: #707
#594 := (iff #765 #706)
#592 := (iff #432 #74)
#708 := (iff #432 #706)
#552 := (iff #433 #74)
#549 := (= #442 #71)
#724 := (+ #71 0::Int)
#721 := (= #724 #71)
#722 := [rewrite]: #721
#713 := (= #442 #724)
#718 := (= #441 0::Int)
#715 := (mod -1::Int 1::Int)
#711 := (= #715 0::Int)
#712 := [rewrite]: #711
#716 := (= #441 #715)
#572 := (= #356 1::Int)
#714 := [rewrite]: #572
#570 := (= #440 -1::Int)
#571 := [rewrite]: #570
#717 := [monotonicity #571 #714]: #716
#719 := [trans #717 #712]: #718
#720 := [monotonicity #719]: #713
#551 := [trans #720 #722]: #549
#705 := [monotonicity #551]: #552
#723 := (iff #443 #74)
#727 := (= #446 #71)
#725 := (= #446 #724)
#731 := (= #445 0::Int)
#732 := (* -1::Int 0::Int)
#730 := (= #732 0::Int)
#734 := [rewrite]: #730
#733 := (= #445 #732)
#453 := (= #444 0::Int)
#454 := [rewrite]: #453
#448 := [monotonicity #454]: #733
#735 := [trans #448 #734]: #731
#726 := [monotonicity #735]: #725
#728 := [trans #726 #722]: #727
#729 := [monotonicity #728]: #723
#451 := (iff #431 false)
#462 := (or false false)
#737 := (iff #462 false)
#741 := [rewrite]: #737
#736 := (iff #431 #462)
#739 := (iff #763 false)
#1 := true
#745 := (not true)
#752 := (iff #745 false)
#754 := [rewrite]: #752
#362 := (iff #763 #745)
#467 := (iff #761 true)
#756 := (or true true)
#465 := (iff #756 true)
#466 := [rewrite]: #465
#742 := (iff #761 #756)
#755 := (iff #447 true)
#753 := [rewrite]: #755
#407 := (iff #426 true)
#408 := [rewrite]: #407
#743 := [monotonicity #408 #753]: #742
#468 := [trans #743 #466]: #467
#738 := [monotonicity #468]: #362
#461 := [trans #738 #754]: #739
#394 := (iff #757 false)
#751 := (iff #757 #745)
#749 := (iff #550 true)
#409 := (or false true)
#747 := (iff #409 true)
#748 := [rewrite]: #747
#410 := (iff #550 #409)
#403 := (iff #420 false)
#744 := [rewrite]: #403
#746 := [monotonicity #744 #408]: #410
#750 := [trans #746 #748]: #749
#389 := [monotonicity #750]: #751
#395 := [trans #389 #754]: #394
#740 := [monotonicity #395 #461]: #736
#452 := [trans #740 #741]: #451
#709 := [monotonicity #452 #729 #705]: #708
#593 := [trans #709 #710]: #592
#419 := (iff #764 false)
#760 := [rewrite]: #419
#553 := [monotonicity #760 #593]: #594
#603 := [trans #553 #710]: #701
#418 := (iff #766 #423)
#759 := [rewrite]: #418
#768 := (iff #767 false)
#758 := [rewrite]: #768
#702 := [monotonicity #758 #759 #603]: #699
#605 := [trans #702 #602]: #604
#610 := [monotonicity #605]: #609
#704 := [trans #610 #700]: #609
#608 := [quant-inst #9 #68]: #607
#691 := [mp #608 #704]: #606
[unit-resolution #691 #92 #782]: false
unsat
46dff7eaa6576ae6594696f52887db6fa7375f00 339 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#39 := (f4 f5 #18)
#40 := (f3 #39 #20)
#777 := (pattern #40)
#14 := 0::Int
#69 := -1::Int
#113 := (* -1::Int #20)
#110 := (* -1::Int #18)
#174 := (mod #110 #113)
#289 := (+ #40 #174)
#290 := (= #289 0::Int)
#41 := (mod #18 #20)
#286 := (* -1::Int #41)
#287 := (+ #40 #286)
#288 := (= #287 0::Int)
#148 := (>= #18 0::Int)
#141 := (<= #20 0::Int)
#233 := (or #141 #148)
#234 := (not #233)
#137 := (<= #18 0::Int)
#231 := (or #137 #141)
#232 := (not #231)
#237 := (or #232 #234)
#291 := (ite #237 #288 #290)
#285 := (= #40 0::Int)
#22 := (= #18 0::Int)
#292 := (ite #22 #285 #291)
#284 := (= #18 #40)
#23 := (= #20 0::Int)
#293 := (ite #23 #284 #292)
#778 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #777) #293)
#296 := (forall (vars (?v0 Int) (?v1 Int)) #293)
#781 := (iff #296 #778)
#779 := (iff #293 #293)
#780 := [refl]: #779
#782 := [quant-intro #780]: #781
#180 := (* -1::Int #174)
#253 := (ite #237 #41 #180)
#256 := (ite #22 0::Int #253)
#259 := (ite #23 #18 #256)
#262 := (= #40 #259)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#297 := (iff #265 #296)
#294 := (iff #262 #293)
#295 := [rewrite]: #294
#298 := [quant-intro #295]: #297
#149 := (not #148)
#142 := (not #141)
#152 := (and #142 #149)
#138 := (not #137)
#145 := (and #138 #142)
#155 := (or #145 #152)
#200 := (ite #155 #41 #180)
#203 := (ite #22 0::Int #200)
#206 := (ite #23 #18 #203)
#209 := (= #40 #206)
#212 := (forall (vars (?v0 Int) (?v1 Int)) #209)
#266 := (iff #212 #265)
#263 := (iff #209 #262)
#260 := (= #206 #259)
#257 := (= #203 #256)
#254 := (= #200 #253)
#238 := (iff #155 #237)
#235 := (iff #152 #234)
#236 := [rewrite]: #235
#225 := (iff #145 #232)
#226 := [rewrite]: #225
#239 := [monotonicity #226 #236]: #238
#255 := [monotonicity #239]: #254
#258 := [monotonicity #255]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [quant-intro #264]: #266
#223 := (~ #212 #212)
#222 := (~ #209 #209)
#219 := [refl]: #222
#224 := [nnf-pos #219]: #223
#33 := (- #20)
#32 := (- #18)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #20)
#28 := (< #18 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #18)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (ite #30 #41 #43)
#45 := (ite #22 0::Int #44)
#46 := (ite #23 #18 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#215 := (iff #48 #212)
#104 := (and #26 #28)
#107 := (or #27 #104)
#185 := (ite #107 #41 #180)
#95 := (= 0::Int #18)
#188 := (ite #95 0::Int #185)
#98 := (= 0::Int #20)
#191 := (ite #98 #18 #188)
#194 := (= #40 #191)
#197 := (forall (vars (?v0 Int) (?v1 Int)) #194)
#213 := (iff #197 #212)
#210 := (iff #194 #209)
#207 := (= #191 #206)
#204 := (= #188 #203)
#201 := (= #185 #200)
#156 := (iff #107 #155)
#153 := (iff #104 #152)
#150 := (iff #28 #149)
#151 := [rewrite]: #150
#143 := (iff #26 #142)
#144 := [rewrite]: #143
#154 := [monotonicity #144 #151]: #153
#146 := (iff #27 #145)
#139 := (iff #25 #138)
#140 := [rewrite]: #139
#147 := [monotonicity #140 #144]: #146
#157 := [monotonicity #147 #154]: #156
#202 := [monotonicity #157]: #201
#131 := (iff #95 #22)
#132 := [rewrite]: #131
#205 := [monotonicity #132 #202]: #204
#133 := (iff #98 #23)
#134 := [rewrite]: #133
#208 := [monotonicity #134 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [quant-intro #211]: #213
#198 := (iff #48 #197)
#195 := (iff #47 #194)
#192 := (= #46 #191)
#189 := (= #45 #188)
#186 := (= #44 #185)
#183 := (= #43 #180)
#177 := (- #174)
#181 := (= #177 #180)
#182 := [rewrite]: #181
#178 := (= #43 #177)
#175 := (= #42 #174)
#114 := (= #33 #113)
#115 := [rewrite]: #114
#111 := (= #32 #110)
#112 := [rewrite]: #111
#176 := [monotonicity #112 #115]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#108 := (iff #30 #107)
#105 := (iff #29 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#187 := [monotonicity #109 #184]: #186
#96 := (iff #22 #95)
#97 := [rewrite]: #96
#190 := [monotonicity #97 #187]: #189
#99 := (iff #23 #98)
#100 := [rewrite]: #99
#193 := [monotonicity #100 #190]: #192
#196 := [monotonicity #193]: #195
#199 := [quant-intro #196]: #198
#216 := [trans #199 #214]: #215
#173 := [asserted]: #48
#217 := [mp #173 #216]: #212
#220 := [mp~ #217 #224]: #212
#268 := [mp #220 #267]: #265
#299 := [mp #268 #298]: #296
#783 := [mp #299 #782]: #778
#9 := 3::Int
#10 := (f4 f5 3::Int)
#72 := (f3 #10 -1::Int)
#75 := (= #72 0::Int)
#88 := (not #75)
#11 := 1::Int
#12 := (- 1::Int)
#13 := (f3 #10 #12)
#15 := (= #13 0::Int)
#16 := (not #15)
#91 := (iff #16 #88)
#78 := (= 0::Int #72)
#83 := (not #78)
#89 := (iff #83 #88)
#86 := (iff #78 #75)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#84 := (iff #16 #83)
#81 := (iff #15 #78)
#79 := (iff #75 #78)
#80 := [rewrite]: #79
#76 := (iff #15 #75)
#73 := (= #13 #72)
#70 := (= #12 -1::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#82 := [trans #77 #80]: #81
#85 := [monotonicity #82]: #84
#92 := [trans #85 #90]: #91
#68 := [asserted]: #16
#93 := [mp #68 #92]: #88
#607 := (not #778)
#608 := (or #607 #75)
#357 := (* -1::Int -1::Int)
#441 := (* -1::Int 3::Int)
#442 := (mod #441 #357)
#443 := (+ #72 #442)
#434 := (= #443 0::Int)
#445 := (mod 3::Int -1::Int)
#446 := (* -1::Int #445)
#447 := (+ #72 #446)
#444 := (= #447 0::Int)
#448 := (>= 3::Int 0::Int)
#427 := (<= -1::Int 0::Int)
#762 := (or #427 #448)
#764 := (not #762)
#421 := (<= 3::Int 0::Int)
#551 := (or #421 #427)
#758 := (not #551)
#432 := (or #758 #764)
#433 := (ite #432 #444 #434)
#765 := (= 3::Int 0::Int)
#766 := (ite #765 #75 #433)
#767 := (= 3::Int #72)
#768 := (= -1::Int 0::Int)
#763 := (ite #768 #767 #766)
#609 := (or #607 #763)
#611 := (iff #609 #608)
#701 := (iff #608 #608)
#705 := [rewrite]: #701
#606 := (iff #763 #75)
#424 := (= #72 3::Int)
#700 := (ite false #424 #75)
#603 := (iff #700 #75)
#605 := [rewrite]: #603
#703 := (iff #763 #700)
#604 := (iff #766 #75)
#709 := (ite false #75 #75)
#711 := (iff #709 #75)
#593 := [rewrite]: #711
#554 := (iff #766 #709)
#594 := (iff #433 #75)
#710 := (iff #433 #709)
#706 := (iff #434 #75)
#552 := (= #443 #72)
#725 := (+ #72 0::Int)
#722 := (= #725 #72)
#723 := [rewrite]: #722
#721 := (= #443 #725)
#720 := (= #442 0::Int)
#571 := -3::Int
#717 := (mod -3::Int 1::Int)
#713 := (= #717 0::Int)
#719 := [rewrite]: #713
#718 := (= #442 #717)
#715 := (= #357 1::Int)
#716 := [rewrite]: #715
#572 := (= #441 -3::Int)
#573 := [rewrite]: #572
#712 := [monotonicity #573 #716]: #718
#714 := [trans #712 #719]: #720
#550 := [monotonicity #714]: #721
#553 := [trans #550 #723]: #552
#707 := [monotonicity #553]: #706
#724 := (iff #444 #75)
#728 := (= #447 #72)
#726 := (= #447 #725)
#732 := (= #446 0::Int)
#733 := (* -1::Int 0::Int)
#731 := (= #733 0::Int)
#735 := [rewrite]: #731
#734 := (= #446 #733)
#454 := (= #445 0::Int)
#455 := [rewrite]: #454
#449 := [monotonicity #455]: #734
#736 := [trans #449 #735]: #732
#727 := [monotonicity #736]: #726
#729 := [trans #727 #723]: #728
#730 := [monotonicity #729]: #724
#452 := (iff #432 false)
#463 := (or false false)
#738 := (iff #463 false)
#742 := [rewrite]: #738
#737 := (iff #432 #463)
#740 := (iff #764 false)
#1 := true
#746 := (not true)
#753 := (iff #746 false)
#755 := [rewrite]: #753
#363 := (iff #764 #746)
#468 := (iff #762 true)
#757 := (or true true)
#466 := (iff #757 true)
#467 := [rewrite]: #466
#743 := (iff #762 #757)
#756 := (iff #448 true)
#754 := [rewrite]: #756
#408 := (iff #427 true)
#409 := [rewrite]: #408
#744 := [monotonicity #409 #754]: #743
#469 := [trans #744 #467]: #468
#739 := [monotonicity #469]: #363
#462 := [trans #739 #755]: #740
#395 := (iff #758 false)
#752 := (iff #758 #746)
#750 := (iff #551 true)
#410 := (or false true)
#748 := (iff #410 true)
#749 := [rewrite]: #748
#411 := (iff #551 #410)
#404 := (iff #421 false)
#745 := [rewrite]: #404
#747 := [monotonicity #745 #409]: #411
#751 := [trans #747 #749]: #750
#390 := [monotonicity #751]: #752
#396 := [trans #390 #755]: #395
#741 := [monotonicity #396 #462]: #737
#453 := [trans #741 #742]: #452
#708 := [monotonicity #453 #730 #707]: #710
#595 := [trans #708 #593]: #594
#420 := (iff #765 false)
#761 := [rewrite]: #420
#702 := [monotonicity #761 #595]: #554
#699 := [trans #702 #593]: #604
#419 := (iff #767 #424)
#760 := [rewrite]: #419
#769 := (iff #768 false)
#759 := [rewrite]: #769
#588 := [monotonicity #759 #760 #699]: #703
#599 := [trans #588 #605]: #606
#704 := [monotonicity #599]: #611
#692 := [trans #704 #705]: #611
#610 := [quant-inst #9 #69]: #609
#694 := [mp #610 #692]: #608
[unit-resolution #694 #93 #783]: false
unsat
9887f50578ea703040a91b60b0f2bf0bf6647706 316 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#39 := (f4 f5 #18)
#40 := (f3 #39 #20)
#777 := (pattern #40)
#14 := 0::Int
#69 := -1::Int
#113 := (* -1::Int #20)
#110 := (* -1::Int #18)
#174 := (mod #110 #113)
#289 := (+ #40 #174)
#290 := (= #289 0::Int)
#41 := (mod #18 #20)
#286 := (* -1::Int #41)
#287 := (+ #40 #286)
#288 := (= #287 0::Int)
#148 := (>= #18 0::Int)
#141 := (<= #20 0::Int)
#233 := (or #141 #148)
#234 := (not #233)
#137 := (<= #18 0::Int)
#231 := (or #137 #141)
#232 := (not #231)
#237 := (or #232 #234)
#291 := (ite #237 #288 #290)
#285 := (= #40 0::Int)
#22 := (= #18 0::Int)
#292 := (ite #22 #285 #291)
#284 := (= #18 #40)
#23 := (= #20 0::Int)
#293 := (ite #23 #284 #292)
#778 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #777) #293)
#296 := (forall (vars (?v0 Int) (?v1 Int)) #293)
#781 := (iff #296 #778)
#779 := (iff #293 #293)
#780 := [refl]: #779
#782 := [quant-intro #780]: #781
#180 := (* -1::Int #174)
#253 := (ite #237 #41 #180)
#256 := (ite #22 0::Int #253)
#259 := (ite #23 #18 #256)
#262 := (= #40 #259)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#297 := (iff #265 #296)
#294 := (iff #262 #293)
#295 := [rewrite]: #294
#298 := [quant-intro #295]: #297
#149 := (not #148)
#142 := (not #141)
#152 := (and #142 #149)
#138 := (not #137)
#145 := (and #138 #142)
#155 := (or #145 #152)
#200 := (ite #155 #41 #180)
#203 := (ite #22 0::Int #200)
#206 := (ite #23 #18 #203)
#209 := (= #40 #206)
#212 := (forall (vars (?v0 Int) (?v1 Int)) #209)
#266 := (iff #212 #265)
#263 := (iff #209 #262)
#260 := (= #206 #259)
#257 := (= #203 #256)
#254 := (= #200 #253)
#238 := (iff #155 #237)
#235 := (iff #152 #234)
#236 := [rewrite]: #235
#225 := (iff #145 #232)
#226 := [rewrite]: #225
#239 := [monotonicity #226 #236]: #238
#255 := [monotonicity #239]: #254
#258 := [monotonicity #255]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [quant-intro #264]: #266
#223 := (~ #212 #212)
#222 := (~ #209 #209)
#219 := [refl]: #222
#224 := [nnf-pos #219]: #223
#33 := (- #20)
#32 := (- #18)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #20)
#28 := (< #18 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #18)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (ite #30 #41 #43)
#45 := (ite #22 0::Int #44)
#46 := (ite #23 #18 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#215 := (iff #48 #212)
#104 := (and #26 #28)
#107 := (or #27 #104)
#185 := (ite #107 #41 #180)
#95 := (= 0::Int #18)
#188 := (ite #95 0::Int #185)
#98 := (= 0::Int #20)
#191 := (ite #98 #18 #188)
#194 := (= #40 #191)
#197 := (forall (vars (?v0 Int) (?v1 Int)) #194)
#213 := (iff #197 #212)
#210 := (iff #194 #209)
#207 := (= #191 #206)
#204 := (= #188 #203)
#201 := (= #185 #200)
#156 := (iff #107 #155)
#153 := (iff #104 #152)
#150 := (iff #28 #149)
#151 := [rewrite]: #150
#143 := (iff #26 #142)
#144 := [rewrite]: #143
#154 := [monotonicity #144 #151]: #153
#146 := (iff #27 #145)
#139 := (iff #25 #138)
#140 := [rewrite]: #139
#147 := [monotonicity #140 #144]: #146
#157 := [monotonicity #147 #154]: #156
#202 := [monotonicity #157]: #201
#131 := (iff #95 #22)
#132 := [rewrite]: #131
#205 := [monotonicity #132 #202]: #204
#133 := (iff #98 #23)
#134 := [rewrite]: #133
#208 := [monotonicity #134 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [quant-intro #211]: #213
#198 := (iff #48 #197)
#195 := (iff #47 #194)
#192 := (= #46 #191)
#189 := (= #45 #188)
#186 := (= #44 #185)
#183 := (= #43 #180)
#177 := (- #174)
#181 := (= #177 #180)
#182 := [rewrite]: #181
#178 := (= #43 #177)
#175 := (= #42 #174)
#114 := (= #33 #113)
#115 := [rewrite]: #114
#111 := (= #32 #110)
#112 := [rewrite]: #111
#176 := [monotonicity #112 #115]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#108 := (iff #30 #107)
#105 := (iff #29 #104)
#106 := [rewrite]: #105
#109 := [monotonicity #106]: #108
#187 := [monotonicity #109 #184]: #186
#96 := (iff #22 #95)
#97 := [rewrite]: #96
#190 := [monotonicity #97 #187]: #189
#99 := (iff #23 #98)
#100 := [rewrite]: #99
#193 := [monotonicity #100 #190]: #192
#196 := [monotonicity #193]: #195
#199 := [quant-intro #196]: #198
#216 := [trans #199 #214]: #215
#173 := [asserted]: #48
#217 := [mp #173 #216]: #212
#220 := [mp~ #217 #224]: #212
#268 := [mp #220 #267]: #265
#299 := [mp #268 #298]: #296
#783 := [mp #299 #782]: #778
decl f6 :: Int
#9 := f6
#10 := (f4 f5 f6)
#72 := (f3 #10 -1::Int)
#75 := (= #72 0::Int)
#88 := (not #75)
#11 := 1::Int
#12 := (- 1::Int)
#13 := (f3 #10 #12)
#15 := (= #13 0::Int)
#16 := (not #15)
#91 := (iff #16 #88)
#78 := (= 0::Int #72)
#83 := (not #78)
#89 := (iff #83 #88)
#86 := (iff #78 #75)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#84 := (iff #16 #83)
#81 := (iff #15 #78)
#79 := (iff #75 #78)
#80 := [rewrite]: #79
#76 := (iff #15 #75)
#73 := (= #13 #72)
#70 := (= #12 -1::Int)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [monotonicity #74]: #76
#82 := [trans #77 #80]: #81
#85 := [monotonicity #82]: #84
#92 := [trans #85 #90]: #91
#68 := [asserted]: #16
#93 := [mp #68 #92]: #88
#721 := (not #778)
#550 := (or #721 #75)
#357 := (* -1::Int -1::Int)
#441 := (* -1::Int f6)
#442 := (mod #441 #357)
#443 := (+ #72 #442)
#434 := (= #443 0::Int)
#445 := (mod f6 -1::Int)
#446 := (* -1::Int #445)
#447 := (+ #72 #446)
#444 := (= #447 0::Int)
#448 := (>= f6 0::Int)
#427 := (<= -1::Int 0::Int)
#762 := (or #427 #448)
#764 := (not #762)
#421 := (<= f6 0::Int)
#551 := (or #421 #427)
#758 := (not #551)
#432 := (or #758 #764)
#433 := (ite #432 #444 #434)
#765 := (= f6 0::Int)
#766 := (ite #765 #75 #433)
#767 := (= f6 #72)
#768 := (= -1::Int 0::Int)
#763 := (ite #768 #767 #766)
#552 := (or #721 #763)
#706 := (iff #552 #550)
#709 := (iff #550 #550)
#710 := [rewrite]: #709
#720 := (iff #763 #75)
#717 := (ite false #767 #75)
#713 := (iff #717 #75)
#719 := [rewrite]: #713
#718 := (iff #763 #717)
#715 := (iff #766 #75)
#724 := (ite #765 #75 #75)
#572 := (iff #724 #75)
#573 := [rewrite]: #572
#730 := (iff #766 #724)
#728 := (iff #433 #75)
#725 := (ite false #444 #75)
#722 := (iff #725 #75)
#723 := [rewrite]: #722
#726 := (iff #433 #725)
#732 := (iff #434 #75)
#731 := (= #443 #72)
#454 := (+ #72 0::Int)
#734 := (= #454 #72)
#449 := [rewrite]: #734
#455 := (= #443 #454)
#452 := (= #442 0::Int)
#463 := (mod #441 1::Int)
#738 := (= #463 0::Int)
#742 := [rewrite]: #738
#737 := (= #442 #463)
#740 := (= #357 1::Int)
#462 := [rewrite]: #740
#741 := [monotonicity #462]: #737
#453 := [trans #741 #742]: #452
#733 := [monotonicity #453]: #455
#735 := [trans #733 #449]: #731
#736 := [monotonicity #735]: #732
#363 := (iff #432 false)
#744 := (or false false)
#468 := (iff #744 false)
#469 := [rewrite]: #468
#466 := (iff #432 #744)
#757 := (iff #764 false)
#1 := true
#410 := (not true)
#748 := (iff #410 false)
#749 := [rewrite]: #748
#756 := (iff #764 #410)
#395 := (iff #762 true)
#746 := (or true #448)
#753 := (iff #746 true)
#755 := [rewrite]: #753
#752 := (iff #762 #746)
#419 := (iff #427 true)
#424 := [rewrite]: #419
#390 := [monotonicity #424]: #752
#396 := [trans #390 #755]: #395
#754 := [monotonicity #396]: #756
#743 := [trans #754 #749]: #757
#750 := (iff #758 false)
#411 := (iff #758 #410)
#408 := (iff #551 true)
#760 := (or #421 true)
#404 := (iff #760 true)
#745 := [rewrite]: #404
#420 := (iff #551 #760)
#761 := [monotonicity #424]: #420
#409 := [trans #761 #745]: #408
#747 := [monotonicity #409]: #411
#751 := [trans #747 #749]: #750
#467 := [monotonicity #751 #743]: #466
#739 := [trans #467 #469]: #363
#727 := [monotonicity #739 #736]: #726
#729 := [trans #727 #723]: #728
#571 := [monotonicity #729]: #730
#716 := [trans #571 #573]: #715
#769 := (iff #768 false)
#759 := [rewrite]: #769
#712 := [monotonicity #759 #716]: #718
#714 := [trans #712 #719]: #720
#707 := [monotonicity #714]: #706
#708 := [trans #707 #710]: #706
#553 := [quant-inst #9 #69]: #552
#711 := [mp #553 #708]: #550
[unit-resolution #711 #93 #783]: false
unsat
5eb728f1a53457d95412080a923ac7601ce16a78 309 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#762 := (pattern #38)
#9 := 0::Int
#93 := -1::Int
#97 := (* -1::Int #18)
#94 := (* -1::Int #16)
#158 := (mod #94 #97)
#273 := (+ #38 #158)
#274 := (= #273 0::Int)
#39 := (mod #16 #18)
#270 := (* -1::Int #39)
#271 := (+ #38 #270)
#272 := (= #271 0::Int)
#132 := (>= #16 0::Int)
#125 := (<= #18 0::Int)
#217 := (or #125 #132)
#218 := (not #217)
#121 := (<= #16 0::Int)
#215 := (or #121 #125)
#216 := (not #215)
#221 := (or #216 #218)
#275 := (ite #221 #272 #274)
#269 := (= #38 0::Int)
#20 := (= #16 0::Int)
#276 := (ite #20 #269 #275)
#268 := (= #16 #38)
#21 := (= #18 0::Int)
#277 := (ite #21 #268 #276)
#763 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #762) #277)
#280 := (forall (vars (?v0 Int) (?v1 Int)) #277)
#766 := (iff #280 #763)
#764 := (iff #277 #277)
#765 := [refl]: #764
#767 := [quant-intro #765]: #766
#164 := (* -1::Int #158)
#237 := (ite #221 #39 #164)
#240 := (ite #20 0::Int #237)
#243 := (ite #21 #16 #240)
#246 := (= #38 #243)
#249 := (forall (vars (?v0 Int) (?v1 Int)) #246)
#281 := (iff #249 #280)
#278 := (iff #246 #277)
#279 := [rewrite]: #278
#282 := [quant-intro #279]: #281
#133 := (not #132)
#126 := (not #125)
#136 := (and #126 #133)
#122 := (not #121)
#129 := (and #122 #126)
#139 := (or #129 #136)
#184 := (ite #139 #39 #164)
#187 := (ite #20 0::Int #184)
#190 := (ite #21 #16 #187)
#193 := (= #38 #190)
#196 := (forall (vars (?v0 Int) (?v1 Int)) #193)
#250 := (iff #196 #249)
#247 := (iff #193 #246)
#244 := (= #190 #243)
#241 := (= #187 #240)
#238 := (= #184 #237)
#222 := (iff #139 #221)
#219 := (iff #136 #218)
#220 := [rewrite]: #219
#209 := (iff #129 #216)
#210 := [rewrite]: #209
#223 := [monotonicity #210 #220]: #222
#239 := [monotonicity #223]: #238
#242 := [monotonicity #239]: #241
#245 := [monotonicity #242]: #244
#248 := [monotonicity #245]: #247
#251 := [quant-intro #248]: #250
#207 := (~ #196 #196)
#206 := (~ #193 #193)
#203 := [refl]: #206
#208 := [nnf-pos #203]: #207
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (ite #28 #39 #41)
#43 := (ite #20 0::Int #42)
#44 := (ite #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#199 := (iff #46 #196)
#87 := (and #24 #26)
#90 := (or #25 #87)
#169 := (ite #90 #39 #164)
#78 := (= 0::Int #16)
#172 := (ite #78 0::Int #169)
#81 := (= 0::Int #18)
#175 := (ite #81 #16 #172)
#178 := (= #38 #175)
#181 := (forall (vars (?v0 Int) (?v1 Int)) #178)
#197 := (iff #181 #196)
#194 := (iff #178 #193)
#191 := (= #175 #190)
#188 := (= #172 #187)
#185 := (= #169 #184)
#140 := (iff #90 #139)
#137 := (iff #87 #136)
#134 := (iff #26 #133)
#135 := [rewrite]: #134
#127 := (iff #24 #126)
#128 := [rewrite]: #127
#138 := [monotonicity #128 #135]: #137
#130 := (iff #25 #129)
#123 := (iff #23 #122)
#124 := [rewrite]: #123
#131 := [monotonicity #124 #128]: #130
#141 := [monotonicity #131 #138]: #140
#186 := [monotonicity #141]: #185
#115 := (iff #78 #20)
#116 := [rewrite]: #115
#189 := [monotonicity #116 #186]: #188
#117 := (iff #81 #21)
#118 := [rewrite]: #117
#192 := [monotonicity #118 #189]: #191
#195 := [monotonicity #192]: #194
#198 := [quant-intro #195]: #197
#182 := (iff #46 #181)
#179 := (iff #45 #178)
#176 := (= #44 #175)
#173 := (= #43 #172)
#170 := (= #42 #169)
#167 := (= #41 #164)
#161 := (- #158)
#165 := (= #161 #164)
#166 := [rewrite]: #165
#162 := (= #41 #161)
#159 := (= #40 #158)
#98 := (= #31 #97)
#99 := [rewrite]: #98
#95 := (= #30 #94)
#96 := [rewrite]: #95
#160 := [monotonicity #96 #99]: #159
#163 := [monotonicity #160]: #162
#168 := [trans #163 #166]: #167
#91 := (iff #28 #90)
#88 := (iff #27 #87)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#171 := [monotonicity #92 #168]: #170
#79 := (iff #20 #78)
#80 := [rewrite]: #79
#174 := [monotonicity #80 #171]: #173
#82 := (iff #21 #81)
#83 := [rewrite]: #82
#177 := [monotonicity #83 #174]: #176
#180 := [monotonicity #177]: #179
#183 := [quant-intro #180]: #182
#200 := [trans #183 #198]: #199
#157 := [asserted]: #46
#201 := [mp #157 #200]: #196
#204 := [mp~ #201 #208]: #196
#252 := [mp #204 #251]: #249
#283 := [mp #252 #282]: #280
#768 := [mp #283 #767]: #763
#11 := 3::Int
#10 := (f4 f5 0::Int)
#12 := (f3 #10 3::Int)
#13 := (= #12 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#684 := (not #763)
#685 := (or #684 #13)
#341 := (* -1::Int 3::Int)
#426 := (* -1::Int 0::Int)
#427 := (mod #426 #341)
#428 := (+ #12 #427)
#419 := (= #428 0::Int)
#430 := (mod 0::Int 3::Int)
#431 := (* -1::Int #430)
#359 := (+ #12 #431)
#432 := (= #359 0::Int)
#429 := (>= 0::Int 0::Int)
#433 := (<= 3::Int 0::Int)
#412 := (or #433 #429)
#747 := (not #412)
#749 := (<= 0::Int 0::Int)
#406 := (or #749 #433)
#536 := (not #406)
#743 := (or #536 #747)
#417 := (ite #743 #432 #419)
#418 := (= 0::Int 0::Int)
#750 := (ite #418 #13 #417)
#67 := (= 0::Int #12)
#751 := (= 3::Int 0::Int)
#752 := (ite #751 #67 #750)
#688 := (or #684 #752)
#588 := (iff #688 #685)
#591 := (iff #685 #685)
#584 := [rewrite]: #591
#687 := (iff #752 #13)
#705 := (ite false #13 #13)
#535 := (iff #705 #13)
#537 := [rewrite]: #535
#580 := (iff #752 #705)
#578 := (iff #750 #13)
#1 := true
#692 := (ite true #13 #13)
#693 := (iff #692 #13)
#696 := [rewrite]: #693
#694 := (iff #750 #692)
#538 := (iff #417 #13)
#699 := (iff #417 #705)
#698 := (iff #419 #13)
#703 := (= #428 #12)
#719 := (+ #12 0::Int)
#720 := (= #719 #12)
#717 := [rewrite]: #720
#701 := (= #428 #719)
#558 := (= #427 0::Int)
#707 := -3::Int
#714 := (mod 0::Int -3::Int)
#556 := (= #714 0::Int)
#557 := [rewrite]: #556
#709 := (= #427 #714)
#708 := (= #341 -3::Int)
#713 := [rewrite]: #708
#438 := (= #426 0::Int)
#439 := [rewrite]: #438
#715 := [monotonicity #439 #713]: #709
#700 := [trans #715 #557]: #558
#702 := [monotonicity #700]: #701
#697 := [trans #702 #717]: #703
#704 := [monotonicity #697]: #698
#711 := (iff #432 #13)
#721 := (= #359 #12)
#434 := (= #359 #719)
#440 := (= #431 0::Int)
#727 := (= #431 #426)
#726 := (= #430 0::Int)
#723 := [rewrite]: #726
#437 := [monotonicity #723]: #727
#718 := [trans #437 #439]: #440
#716 := [monotonicity #718]: #434
#710 := [trans #716 #717]: #721
#712 := [monotonicity #710]: #711
#448 := (iff #743 false)
#454 := (or false false)
#725 := (iff #454 false)
#447 := [rewrite]: #725
#347 := (iff #743 #454)
#452 := (iff #747 false)
#732 := (not true)
#735 := (iff #732 false)
#736 := [rewrite]: #735
#729 := (iff #747 #732)
#742 := (iff #412 true)
#740 := (or false true)
#741 := (iff #740 true)
#739 := [rewrite]: #741
#380 := (iff #412 #740)
#375 := (iff #429 true)
#738 := [rewrite]: #375
#745 := (iff #433 false)
#405 := [rewrite]: #745
#381 := [monotonicity #405 #738]: #380
#728 := [trans #381 #739]: #742
#451 := [monotonicity #728]: #729
#453 := [trans #451 #736]: #452
#731 := (iff #536 false)
#733 := (iff #536 #732)
#395 := (iff #406 true)
#746 := (or true false)
#393 := (iff #746 true)
#394 := [rewrite]: #393
#389 := (iff #406 #746)
#404 := (iff #749 true)
#409 := [rewrite]: #404
#730 := [monotonicity #409 #405]: #389
#396 := [trans #730 #394]: #395
#734 := [monotonicity #396]: #733
#737 := [trans #734 #736]: #731
#724 := [monotonicity #737 #453]: #347
#722 := [trans #724 #447]: #448
#706 := [monotonicity #722 #712 #704]: #699
#691 := [trans #706 #537]: #538
#754 := (iff #418 true)
#744 := [rewrite]: #754
#695 := [monotonicity #744 #691]: #694
#579 := [trans #695 #696]: #578
#73 := (iff #67 #13)
#74 := [rewrite]: #73
#753 := (iff #751 false)
#748 := [rewrite]: #753
#539 := [monotonicity #748 #74 #579]: #580
#589 := [trans #539 #537]: #687
#590 := [monotonicity #589]: #588
#592 := [trans #590 #584]: #588
#573 := [quant-inst #9 #11]: #688
#593 := [mp #573 #592]: #685
[unit-resolution #593 #66 #768]: false
unsat
e2cefcec1679e5c68460de294f66a29521651aff 328 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#778 := (pattern #39)
#9 := 0::Int
#109 := -1::Int
#113 := (* -1::Int #19)
#110 := (* -1::Int #17)
#174 := (mod #110 #113)
#289 := (+ #39 #174)
#290 := (= #289 0::Int)
#40 := (mod #17 #19)
#286 := (* -1::Int #40)
#287 := (+ #39 #286)
#288 := (= #287 0::Int)
#148 := (>= #17 0::Int)
#141 := (<= #19 0::Int)
#233 := (or #141 #148)
#234 := (not #233)
#137 := (<= #17 0::Int)
#231 := (or #137 #141)
#232 := (not #231)
#237 := (or #232 #234)
#291 := (ite #237 #288 #290)
#285 := (= #39 0::Int)
#21 := (= #17 0::Int)
#292 := (ite #21 #285 #291)
#284 := (= #17 #39)
#22 := (= #19 0::Int)
#293 := (ite #22 #284 #292)
#779 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #778) #293)
#296 := (forall (vars (?v0 Int) (?v1 Int)) #293)
#782 := (iff #296 #779)
#780 := (iff #293 #293)
#781 := [refl]: #780
#783 := [quant-intro #781]: #782
#180 := (* -1::Int #174)
#253 := (ite #237 #40 #180)
#256 := (ite #21 0::Int #253)
#259 := (ite #22 #17 #256)
#262 := (= #39 #259)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#297 := (iff #265 #296)
#294 := (iff #262 #293)
#295 := [rewrite]: #294
#298 := [quant-intro #295]: #297
#149 := (not #148)
#142 := (not #141)
#152 := (and #142 #149)
#138 := (not #137)
#145 := (and #138 #142)
#155 := (or #145 #152)
#200 := (ite #155 #40 #180)
#203 := (ite #21 0::Int #200)
#206 := (ite #22 #17 #203)
#209 := (= #39 #206)
#212 := (forall (vars (?v0 Int) (?v1 Int)) #209)
#266 := (iff #212 #265)
#263 := (iff #209 #262)
#260 := (= #206 #259)
#257 := (= #203 #256)
#254 := (= #200 #253)
#238 := (iff #155 #237)
#235 := (iff #152 #234)
#236 := [rewrite]: #235
#225 := (iff #145 #232)
#226 := [rewrite]: #225
#239 := [monotonicity #226 #236]: #238
#255 := [monotonicity #239]: #254
#258 := [monotonicity #255]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [quant-intro #264]: #266
#223 := (~ #212 #212)
#222 := (~ #209 #209)
#219 := [refl]: #222
#224 := [nnf-pos #219]: #223
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#215 := (iff #47 #212)
#103 := (and #25 #27)
#106 := (or #26 #103)
#185 := (ite #106 #40 #180)
#94 := (= 0::Int #17)
#188 := (ite #94 0::Int #185)
#97 := (= 0::Int #19)
#191 := (ite #97 #17 #188)
#194 := (= #39 #191)
#197 := (forall (vars (?v0 Int) (?v1 Int)) #194)
#213 := (iff #197 #212)
#210 := (iff #194 #209)
#207 := (= #191 #206)
#204 := (= #188 #203)
#201 := (= #185 #200)
#156 := (iff #106 #155)
#153 := (iff #103 #152)
#150 := (iff #27 #149)
#151 := [rewrite]: #150
#143 := (iff #25 #142)
#144 := [rewrite]: #143
#154 := [monotonicity #144 #151]: #153
#146 := (iff #26 #145)
#139 := (iff #24 #138)
#140 := [rewrite]: #139
#147 := [monotonicity #140 #144]: #146
#157 := [monotonicity #147 #154]: #156
#202 := [monotonicity #157]: #201
#131 := (iff #94 #21)
#132 := [rewrite]: #131
#205 := [monotonicity #132 #202]: #204
#133 := (iff #97 #22)
#134 := [rewrite]: #133
#208 := [monotonicity #134 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [quant-intro #211]: #213
#198 := (iff #47 #197)
#195 := (iff #46 #194)
#192 := (= #45 #191)
#189 := (= #44 #188)
#186 := (= #43 #185)
#183 := (= #42 #180)
#177 := (- #174)
#181 := (= #177 #180)
#182 := [rewrite]: #181
#178 := (= #42 #177)
#175 := (= #41 #174)
#114 := (= #32 #113)
#115 := [rewrite]: #114
#111 := (= #31 #110)
#112 := [rewrite]: #111
#176 := [monotonicity #112 #115]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#107 := (iff #29 #106)
#104 := (iff #28 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#187 := [monotonicity #108 #184]: #186
#95 := (iff #21 #94)
#96 := [rewrite]: #95
#190 := [monotonicity #96 #187]: #189
#98 := (iff #22 #97)
#99 := [rewrite]: #98
#193 := [monotonicity #99 #190]: #192
#196 := [monotonicity #193]: #195
#199 := [quant-intro #196]: #198
#216 := [trans #199 #214]: #215
#173 := [asserted]: #47
#217 := [mp #173 #216]: #212
#220 := [mp~ #217 #224]: #212
#268 := [mp #220 #267]: #265
#299 := [mp #268 #298]: #296
#784 := [mp #299 #783]: #779
#68 := -3::Int
#10 := (f4 f5 0::Int)
#71 := (f3 #10 -3::Int)
#74 := (= #71 0::Int)
#87 := (not #74)
#11 := 3::Int
#12 := (- 3::Int)
#13 := (f3 #10 #12)
#14 := (= #13 0::Int)
#15 := (not #14)
#90 := (iff #15 #87)
#77 := (= 0::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #15 #82)
#80 := (iff #14 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #14 #74)
#72 := (= #13 #71)
#69 := (= #12 -3::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#67 := [asserted]: #15
#92 := [mp #67 #91]: #87
#596 := (not #779)
#555 := (or #596 #74)
#357 := (* -1::Int -3::Int)
#442 := (* -1::Int 0::Int)
#443 := (mod #442 #357)
#444 := (+ #71 #443)
#435 := (= #444 0::Int)
#446 := (mod 0::Int -3::Int)
#447 := (* -1::Int #446)
#375 := (+ #71 #447)
#448 := (= #375 0::Int)
#445 := (>= 0::Int 0::Int)
#449 := (<= -3::Int 0::Int)
#428 := (or #449 #445)
#763 := (not #428)
#765 := (<= 0::Int 0::Int)
#422 := (or #765 #449)
#552 := (not #422)
#759 := (or #552 #763)
#433 := (ite #759 #448 #435)
#434 := (= 0::Int 0::Int)
#766 := (ite #434 #74 #433)
#767 := (= -3::Int 0::Int)
#768 := (ite #767 #77 #766)
#703 := (or #596 #768)
#700 := (iff #703 #555)
#704 := (iff #555 #555)
#589 := [rewrite]: #704
#594 := (iff #768 #74)
#719 := (ite false #74 #74)
#720 := (iff #719 #74)
#721 := [rewrite]: #720
#709 := (iff #768 #719)
#710 := (iff #766 #74)
#1 := true
#551 := (ite true #74 #74)
#707 := (iff #551 #74)
#708 := [rewrite]: #707
#553 := (iff #766 #551)
#715 := (iff #433 #74)
#713 := (iff #433 #719)
#717 := (iff #435 #74)
#574 := (= #444 #71)
#455 := (+ #71 0::Int)
#735 := (= #455 #71)
#450 := [rewrite]: #735
#572 := (= #444 #455)
#725 := (= #443 0::Int)
#728 := (mod 0::Int 3::Int)
#729 := (= #728 0::Int)
#730 := [rewrite]: #729
#723 := (= #443 #728)
#726 := (= #357 3::Int)
#727 := [rewrite]: #726
#739 := (= #442 0::Int)
#743 := [rewrite]: #739
#724 := [monotonicity #743 #727]: #723
#731 := [trans #724 #730]: #725
#573 := [monotonicity #731]: #572
#716 := [trans #573 #450]: #574
#718 := [monotonicity #716]: #717
#733 := (iff #448 #74)
#732 := (= #375 #71)
#456 := (= #375 #455)
#453 := (= #447 0::Int)
#738 := (= #447 #442)
#463 := (= #446 0::Int)
#464 := [rewrite]: #463
#742 := [monotonicity #464]: #738
#454 := [trans #742 #743]: #453
#734 := [monotonicity #454]: #456
#736 := [trans #734 #450]: #732
#737 := [monotonicity #736]: #733
#740 := (iff #759 false)
#467 := (or false false)
#470 := (iff #467 false)
#363 := [rewrite]: #470
#468 := (iff #759 #467)
#744 := (iff #763 false)
#748 := (not true)
#751 := (iff #748 false)
#752 := [rewrite]: #751
#755 := (iff #763 #748)
#397 := (iff #428 true)
#762 := (or true true)
#409 := (iff #762 true)
#410 := [rewrite]: #409
#756 := (iff #428 #762)
#391 := (iff #445 true)
#754 := [rewrite]: #391
#761 := (iff #449 true)
#421 := [rewrite]: #761
#396 := [monotonicity #421 #754]: #756
#757 := [trans #396 #410]: #397
#758 := [monotonicity #757]: #755
#745 := [trans #758 #752]: #744
#747 := (iff #552 false)
#749 := (iff #552 #748)
#411 := (iff #422 true)
#405 := (iff #422 #762)
#420 := (iff #765 true)
#425 := [rewrite]: #420
#746 := [monotonicity #425 #421]: #405
#412 := [trans #746 #410]: #411
#750 := [monotonicity #412]: #749
#753 := [trans #750 #752]: #747
#469 := [monotonicity #753 #745]: #468
#741 := [trans #469 #363]: #740
#714 := [monotonicity #741 #737 #718]: #713
#722 := [trans #714 #721]: #715
#770 := (iff #434 true)
#760 := [rewrite]: #770
#554 := [monotonicity #760 #722]: #553
#711 := [trans #554 #708]: #710
#769 := (iff #767 false)
#764 := [rewrite]: #769
#712 := [monotonicity #764 #86 #711]: #709
#595 := [trans #712 #721]: #594
#701 := [monotonicity #595]: #700
#604 := [trans #701 #589]: #700
#605 := [quant-inst #9 #68]: #703
#606 := [mp #605 #604]: #555
[unit-resolution #606 #92 #784]: false
unsat
8523f126ec39b5b31cca78036b23ebeb91082249 325 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#38 := (f4 f5 #16)
#39 := (f3 #38 #18)
#747 := (pattern #39)
#20 := 0::Int
#85 := -1::Int
#89 := (* -1::Int #18)
#86 := (* -1::Int #16)
#144 := (mod #86 #89)
#259 := (+ #39 #144)
#260 := (= #259 0::Int)
#40 := (mod #16 #18)
#256 := (* -1::Int #40)
#257 := (+ #39 #256)
#258 := (= #257 0::Int)
#118 := (>= #16 0::Int)
#111 := (<= #18 0::Int)
#203 := (or #111 #118)
#204 := (not #203)
#107 := (<= #16 0::Int)
#201 := (or #107 #111)
#202 := (not #201)
#207 := (or #202 #204)
#261 := (ite #207 #258 #260)
#255 := (= #39 0::Int)
#21 := (= #16 0::Int)
#262 := (ite #21 #255 #261)
#254 := (= #16 #39)
#22 := (= #18 0::Int)
#263 := (ite #22 #254 #262)
#748 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #747) #263)
#266 := (forall (vars (?v0 Int) (?v1 Int)) #263)
#751 := (iff #266 #748)
#749 := (iff #263 #263)
#750 := [refl]: #749
#752 := [quant-intro #750]: #751
#150 := (* -1::Int #144)
#223 := (ite #207 #40 #150)
#226 := (ite #21 0::Int #223)
#229 := (ite #22 #16 #226)
#232 := (= #39 #229)
#235 := (forall (vars (?v0 Int) (?v1 Int)) #232)
#267 := (iff #235 #266)
#264 := (iff #232 #263)
#265 := [rewrite]: #264
#268 := [quant-intro #265]: #267
#119 := (not #118)
#112 := (not #111)
#122 := (and #112 #119)
#108 := (not #107)
#115 := (and #108 #112)
#125 := (or #115 #122)
#170 := (ite #125 #40 #150)
#173 := (ite #21 0::Int #170)
#176 := (ite #22 #16 #173)
#179 := (= #39 #176)
#182 := (forall (vars (?v0 Int) (?v1 Int)) #179)
#236 := (iff #182 #235)
#233 := (iff #179 #232)
#230 := (= #176 #229)
#227 := (= #173 #226)
#224 := (= #170 #223)
#208 := (iff #125 #207)
#205 := (iff #122 #204)
#206 := [rewrite]: #205
#195 := (iff #115 #202)
#196 := [rewrite]: #195
#209 := [monotonicity #196 #206]: #208
#225 := [monotonicity #209]: #224
#228 := [monotonicity #225]: #227
#231 := [monotonicity #228]: #230
#234 := [monotonicity #231]: #233
#237 := [quant-intro #234]: #236
#193 := (~ #182 #182)
#192 := (~ #179 #179)
#189 := [refl]: #192
#194 := [nnf-pos #189]: #193
#32 := (- #18)
#31 := (- #16)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #16 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#185 := (iff #47 #182)
#79 := (and #25 #27)
#82 := (or #26 #79)
#155 := (ite #82 #40 #150)
#158 := (ite #21 0::Int #155)
#161 := (ite #22 #16 #158)
#164 := (= #39 #161)
#167 := (forall (vars (?v0 Int) (?v1 Int)) #164)
#183 := (iff #167 #182)
#180 := (iff #164 #179)
#177 := (= #161 #176)
#174 := (= #158 #173)
#171 := (= #155 #170)
#126 := (iff #82 #125)
#123 := (iff #79 #122)
#120 := (iff #27 #119)
#121 := [rewrite]: #120
#113 := (iff #25 #112)
#114 := [rewrite]: #113
#124 := [monotonicity #114 #121]: #123
#116 := (iff #26 #115)
#109 := (iff #24 #108)
#110 := [rewrite]: #109
#117 := [monotonicity #110 #114]: #116
#127 := [monotonicity #117 #124]: #126
#172 := [monotonicity #127]: #171
#175 := [monotonicity #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [quant-intro #181]: #183
#168 := (iff #47 #167)
#165 := (iff #46 #164)
#162 := (= #45 #161)
#159 := (= #44 #158)
#156 := (= #43 #155)
#153 := (= #42 #150)
#147 := (- #144)
#151 := (= #147 #150)
#152 := [rewrite]: #151
#148 := (= #42 #147)
#145 := (= #41 #144)
#90 := (= #32 #89)
#91 := [rewrite]: #90
#87 := (= #31 #86)
#88 := [rewrite]: #87
#146 := [monotonicity #88 #91]: #145
#149 := [monotonicity #146]: #148
#154 := [trans #149 #152]: #153
#83 := (iff #29 #82)
#80 := (iff #28 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#157 := [monotonicity #84 #154]: #156
#160 := [monotonicity #157]: #159
#163 := [monotonicity #160]: #162
#166 := [monotonicity #163]: #165
#169 := [quant-intro #166]: #168
#186 := [trans #169 #184]: #185
#143 := [asserted]: #47
#187 := [mp #143 #186]: #182
#190 := [mp~ #187 #194]: #182
#238 := [mp #190 #237]: #235
#269 := [mp #238 #268]: #266
#753 := [mp #269 #752]: #748
#9 := 1::Int
#11 := 3::Int
#10 := (f4 f5 1::Int)
#12 := (f3 #10 3::Int)
#13 := (= #12 1::Int)
#14 := (not #13)
#67 := [asserted]: #14
#657 := (not #748)
#658 := (or #657 #13)
#327 := (* -1::Int 3::Int)
#411 := (* -1::Int 1::Int)
#412 := (mod #411 #327)
#413 := (+ #12 #412)
#404 := (= #413 0::Int)
#415 := (mod 1::Int 3::Int)
#416 := (* -1::Int #415)
#417 := (+ #12 #416)
#414 := (= #417 0::Int)
#418 := (>= 1::Int 0::Int)
#397 := (<= 3::Int 0::Int)
#732 := (or #397 #418)
#734 := (not #732)
#391 := (<= 1::Int 0::Int)
#521 := (or #391 #397)
#728 := (not #521)
#402 := (or #728 #734)
#403 := (ite #402 #414 #404)
#735 := (= #12 0::Int)
#736 := (= 1::Int 0::Int)
#737 := (ite #736 #735 #403)
#68 := (= 1::Int #12)
#738 := (= 3::Int 0::Int)
#733 := (ite #738 #68 #737)
#659 := (or #657 #733)
#654 := (iff #659 #658)
#645 := (iff #658 #658)
#646 := [rewrite]: #645
#663 := (iff #733 #13)
#653 := (ite false #13 #13)
#666 := (iff #653 #13)
#667 := [rewrite]: #666
#655 := (iff #733 #653)
#664 := (iff #737 #13)
#581 := (ite false #735 #13)
#675 := (iff #581 #13)
#662 := [rewrite]: #675
#674 := (iff #737 #581)
#579 := (iff #403 #13)
#574 := -2::Int
#669 := (= #12 -2::Int)
#1 := true
#575 := (ite true #13 #669)
#577 := (iff #575 #13)
#578 := [rewrite]: #577
#576 := (iff #403 #575)
#558 := (iff #404 #669)
#684 := 2::Int
#680 := (+ 2::Int #12)
#565 := (= #680 0::Int)
#670 := (iff #565 #669)
#673 := [rewrite]: #670
#524 := (iff #404 #565)
#563 := (= #413 #680)
#676 := (+ #12 2::Int)
#678 := (= #676 #680)
#681 := [rewrite]: #678
#677 := (= #413 #676)
#522 := (= #412 2::Int)
#687 := -3::Int
#683 := (mod -1::Int -3::Int)
#691 := (= #683 2::Int)
#520 := [rewrite]: #691
#689 := (= #412 #683)
#688 := (= #327 -3::Int)
#682 := [rewrite]: #688
#419 := (= #411 -1::Int)
#701 := [rewrite]: #419
#690 := [monotonicity #701 #682]: #689
#523 := [trans #690 #520]: #522
#679 := [monotonicity #523]: #677
#564 := [trans #679 #681]: #563
#672 := [monotonicity #564]: #524
#573 := [trans #672 #673]: #558
#685 := (iff #414 #13)
#697 := (+ -1::Int #12)
#694 := (= #697 0::Int)
#542 := (iff #694 #13)
#543 := [rewrite]: #542
#700 := (iff #414 #694)
#698 := (= #417 #697)
#706 := (+ #12 -1::Int)
#692 := (= #706 #697)
#693 := [rewrite]: #692
#695 := (= #417 #706)
#705 := (= #416 -1::Int)
#703 := (= #416 #411)
#424 := (= #415 1::Int)
#425 := [rewrite]: #424
#704 := [monotonicity #425]: #703
#702 := [trans #704 #701]: #705
#696 := [monotonicity #702]: #695
#699 := [trans #696 #693]: #698
#541 := [monotonicity #699]: #700
#686 := [trans #541 #543]: #685
#422 := (iff #402 true)
#433 := (or true false)
#708 := (iff #433 true)
#712 := [rewrite]: #708
#707 := (iff #402 #433)
#710 := (iff #734 false)
#437 := (not true)
#333 := (iff #437 false)
#709 := [rewrite]: #333
#438 := (iff #734 #437)
#714 := (iff #732 true)
#366 := (or false true)
#727 := (iff #366 true)
#713 := [rewrite]: #727
#726 := (iff #732 #366)
#725 := (iff #418 true)
#365 := [rewrite]: #725
#731 := (iff #397 false)
#374 := [rewrite]: #731
#724 := [monotonicity #374 #365]: #726
#436 := [trans #724 #713]: #714
#439 := [monotonicity #436]: #438
#432 := [trans #439 #709]: #710
#360 := (iff #728 true)
#719 := (not false)
#716 := (iff #719 true)
#722 := [rewrite]: #716
#720 := (iff #728 #719)
#717 := (iff #521 false)
#715 := (or false false)
#380 := (iff #715 false)
#381 := [rewrite]: #380
#378 := (iff #521 #715)
#730 := (iff #391 false)
#390 := [rewrite]: #730
#379 := [monotonicity #390 #374]: #378
#718 := [trans #379 #381]: #717
#721 := [monotonicity #718]: #720
#723 := [trans #721 #722]: #360
#711 := [monotonicity #723 #432]: #707
#423 := [trans #711 #712]: #422
#569 := [monotonicity #423 #686 #573]: #576
#580 := [trans #569 #578]: #579
#389 := (iff #736 false)
#394 := [rewrite]: #389
#671 := [monotonicity #394 #580]: #674
#656 := [trans #671 #662]: #664
#74 := (iff #68 #13)
#75 := [rewrite]: #74
#739 := (iff #738 false)
#729 := [rewrite]: #739
#665 := [monotonicity #729 #75 #656]: #655
#668 := [trans #665 #667]: #663
#661 := [monotonicity #668]: #654
#648 := [trans #661 #646]: #654
#660 := [quant-inst #9 #11]: #659
#649 := [mp #660 #648]: #658
[unit-resolution #649 #67 #753]: false
unsat
78bb6b5ca52ee61b969e810f583df52ff03038e8 310 0
#2 := false
decl f3 :: (-> S2 Int Int)
#18 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#16 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#37 := (f4 f5 #16)
#38 := (f3 #37 #18)
#752 := (pattern #38)
#12 := 0::Int
#83 := -1::Int
#87 := (* -1::Int #18)
#84 := (* -1::Int #16)
#148 := (mod #84 #87)
#263 := (+ #38 #148)
#264 := (= #263 0::Int)
#39 := (mod #16 #18)
#260 := (* -1::Int #39)
#261 := (+ #38 #260)
#262 := (= #261 0::Int)
#122 := (>= #16 0::Int)
#115 := (<= #18 0::Int)
#207 := (or #115 #122)
#208 := (not #207)
#111 := (<= #16 0::Int)
#205 := (or #111 #115)
#206 := (not #205)
#211 := (or #206 #208)
#265 := (ite #211 #262 #264)
#259 := (= #38 0::Int)
#20 := (= #16 0::Int)
#266 := (ite #20 #259 #265)
#258 := (= #16 #38)
#21 := (= #18 0::Int)
#267 := (ite #21 #258 #266)
#753 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #752) #267)
#270 := (forall (vars (?v0 Int) (?v1 Int)) #267)
#756 := (iff #270 #753)
#754 := (iff #267 #267)
#755 := [refl]: #754
#757 := [quant-intro #755]: #756
#154 := (* -1::Int #148)
#227 := (ite #211 #39 #154)
#230 := (ite #20 0::Int #227)
#233 := (ite #21 #16 #230)
#236 := (= #38 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#271 := (iff #239 #270)
#268 := (iff #236 #267)
#269 := [rewrite]: #268
#272 := [quant-intro #269]: #271
#123 := (not #122)
#116 := (not #115)
#126 := (and #116 #123)
#112 := (not #111)
#119 := (and #112 #116)
#129 := (or #119 #126)
#174 := (ite #129 #39 #154)
#177 := (ite #20 0::Int #174)
#180 := (ite #21 #16 #177)
#183 := (= #38 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#240 := (iff #186 #239)
#237 := (iff #183 #236)
#234 := (= #180 #233)
#231 := (= #177 #230)
#228 := (= #174 #227)
#212 := (iff #129 #211)
#209 := (iff #126 #208)
#210 := [rewrite]: #209
#199 := (iff #119 #206)
#200 := [rewrite]: #199
#213 := [monotonicity #200 #210]: #212
#229 := [monotonicity #213]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#197 := (~ #186 #186)
#196 := (~ #183 #183)
#193 := [refl]: #196
#198 := [nnf-pos #193]: #197
#31 := (- #18)
#30 := (- #16)
#40 := (mod #30 #31)
#41 := (- #40)
#24 := (< 0::Int #18)
#26 := (< #16 0::Int)
#27 := (and #26 #24)
#23 := (< 0::Int #16)
#25 := (and #23 #24)
#28 := (or #25 #27)
#42 := (ite #28 #39 #41)
#43 := (ite #20 0::Int #42)
#44 := (ite #21 #16 #43)
#45 := (= #38 #44)
#46 := (forall (vars (?v0 Int) (?v1 Int)) #45)
#189 := (iff #46 #186)
#77 := (and #24 #26)
#80 := (or #25 #77)
#159 := (ite #80 #39 #154)
#68 := (= 0::Int #16)
#162 := (ite #68 0::Int #159)
#71 := (= 0::Int #18)
#165 := (ite #71 #16 #162)
#168 := (= #38 #165)
#171 := (forall (vars (?v0 Int) (?v1 Int)) #168)
#187 := (iff #171 #186)
#184 := (iff #168 #183)
#181 := (= #165 #180)
#178 := (= #162 #177)
#175 := (= #159 #174)
#130 := (iff #80 #129)
#127 := (iff #77 #126)
#124 := (iff #26 #123)
#125 := [rewrite]: #124
#117 := (iff #24 #116)
#118 := [rewrite]: #117
#128 := [monotonicity #118 #125]: #127
#120 := (iff #25 #119)
#113 := (iff #23 #112)
#114 := [rewrite]: #113
#121 := [monotonicity #114 #118]: #120
#131 := [monotonicity #121 #128]: #130
#176 := [monotonicity #131]: #175
#105 := (iff #68 #20)
#106 := [rewrite]: #105
#179 := [monotonicity #106 #176]: #178
#107 := (iff #71 #21)
#108 := [rewrite]: #107
#182 := [monotonicity #108 #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#172 := (iff #46 #171)
#169 := (iff #45 #168)
#166 := (= #44 #165)
#163 := (= #43 #162)
#160 := (= #42 #159)
#157 := (= #41 #154)
#151 := (- #148)
#155 := (= #151 #154)
#156 := [rewrite]: #155
#152 := (= #41 #151)
#149 := (= #40 #148)
#88 := (= #31 #87)
#89 := [rewrite]: #88
#85 := (= #30 #84)
#86 := [rewrite]: #85
#150 := [monotonicity #86 #89]: #149
#153 := [monotonicity #150]: #152
#158 := [trans #153 #156]: #157
#81 := (iff #28 #80)
#78 := (iff #27 #77)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#161 := [monotonicity #82 #158]: #160
#69 := (iff #20 #68)
#70 := [rewrite]: #69
#164 := [monotonicity #70 #161]: #163
#72 := (iff #21 #71)
#73 := [rewrite]: #72
#167 := [monotonicity #73 #164]: #166
#170 := [monotonicity #167]: #169
#173 := [quant-intro #170]: #172
#190 := [trans #173 #188]: #189
#147 := [asserted]: #46
#191 := [mp #147 #190]: #186
#194 := [mp~ #191 #198]: #186
#242 := [mp #194 #241]: #239
#273 := [mp #242 #272]: #270
#758 := [mp #273 #757]: #753
#9 := 3::Int
#10 := (f4 f5 3::Int)
#11 := (f3 #10 3::Int)
#13 := (= #11 0::Int)
#14 := (not #13)
#66 := [asserted]: #14
#578 := (not #753)
#580 := (or #578 #13)
#331 := (* -1::Int 3::Int)
#416 := (mod #331 #331)
#417 := (+ #11 #416)
#418 := (= #417 0::Int)
#409 := (mod 3::Int 3::Int)
#420 := (* -1::Int #409)
#421 := (+ #11 #420)
#349 := (= #421 0::Int)
#422 := (>= 3::Int 0::Int)
#419 := (<= 3::Int 0::Int)
#423 := (or #419 #422)
#402 := (not #423)
#737 := (or #419 #419)
#739 := (not #737)
#396 := (or #739 #402)
#526 := (ite #396 #349 #418)
#733 := (= 3::Int 0::Int)
#407 := (ite #733 #13 #526)
#408 := (= 3::Int #11)
#740 := (ite #733 #408 #407)
#581 := (or #578 #740)
#582 := (iff #581 #580)
#584 := (iff #580 #580)
#585 := [rewrite]: #584
#678 := (iff #740 #13)
#738 := (= #11 3::Int)
#529 := (ite false #738 #13)
#674 := (iff #529 #13)
#675 := [rewrite]: #674
#677 := (iff #740 #529)
#569 := (iff #407 #13)
#684 := (ite false #13 #13)
#686 := (iff #684 #13)
#568 := [rewrite]: #686
#685 := (iff #407 #684)
#681 := (iff #526 #13)
#1 := true
#689 := (ite true #13 #13)
#527 := (iff #689 #13)
#528 := [rewrite]: #527
#696 := (iff #526 #689)
#694 := (iff #418 #13)
#687 := (= #417 #11)
#424 := (+ #11 0::Int)
#707 := (= #424 #11)
#711 := [rewrite]: #707
#692 := (= #417 #424)
#690 := (= #416 0::Int)
#698 := -3::Int
#699 := (mod -3::Int -3::Int)
#547 := (= #699 0::Int)
#548 := [rewrite]: #547
#705 := (= #416 #699)
#703 := (= #331 -3::Int)
#704 := [rewrite]: #703
#546 := [monotonicity #704 #704]: #705
#691 := [trans #546 #548]: #690
#693 := [monotonicity #691]: #692
#688 := [trans #693 #711]: #687
#695 := [monotonicity #688]: #694
#702 := (iff #349 #13)
#700 := (= #421 #11)
#706 := (= #421 #424)
#708 := (= #420 0::Int)
#717 := (* -1::Int 0::Int)
#429 := (= #717 0::Int)
#430 := [rewrite]: #429
#427 := (= #420 #717)
#716 := (= #409 0::Int)
#713 := [rewrite]: #716
#428 := [monotonicity #713]: #427
#709 := [trans #428 #430]: #708
#710 := [monotonicity #709]: #706
#701 := [trans #710 #711]: #700
#697 := [monotonicity #701]: #702
#438 := (iff #396 true)
#444 := (or true false)
#715 := (iff #444 true)
#437 := [rewrite]: #715
#337 := (iff #396 #444)
#442 := (iff #402 false)
#729 := (not true)
#719 := (iff #729 false)
#441 := [rewrite]: #719
#732 := (iff #402 #729)
#371 := (iff #423 true)
#727 := (or false true)
#730 := (iff #727 true)
#370 := [rewrite]: #730
#365 := (iff #423 #727)
#726 := (iff #422 true)
#721 := [rewrite]: #726
#734 := (iff #419 false)
#394 := [rewrite]: #734
#728 := [monotonicity #394 #721]: #365
#731 := [trans #728 #370]: #371
#718 := [monotonicity #731]: #732
#443 := [trans #718 #441]: #442
#724 := (iff #739 true)
#384 := (not false)
#722 := (iff #384 true)
#723 := [rewrite]: #722
#385 := (iff #739 #384)
#720 := (iff #737 false)
#399 := (or false false)
#736 := (iff #399 false)
#379 := [rewrite]: #736
#735 := (iff #737 #399)
#395 := [monotonicity #394 #394]: #735
#383 := [trans #395 #379]: #720
#386 := [monotonicity #383]: #385
#725 := [trans #386 #723]: #724
#714 := [monotonicity #725 #443]: #337
#712 := [trans #714 #437]: #438
#525 := [monotonicity #712 #697 #695]: #696
#682 := [trans #525 #528]: #681
#741 := (iff #733 false)
#742 := [rewrite]: #741
#683 := [monotonicity #742 #682]: #685
#570 := [trans #683 #568]: #569
#743 := (iff #408 #738)
#744 := [rewrite]: #743
#579 := [monotonicity #742 #744 #570]: #677
#563 := [trans #579 #675]: #678
#583 := [monotonicity #563]: #582
#586 := [trans #583 #585]: #582
#574 := [quant-inst #9 #9]: #581
#679 := [mp #574 #586]: #580
[unit-resolution #679 #66 #758]: false
unsat
152b4464bef887bf549316fec07a40602d181255 331 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#39 := (f4 f5 #17)
#40 := (f3 #39 #19)
#739 := (pattern #40)
#21 := 0::Int
#76 := -1::Int
#80 := (* -1::Int #19)
#77 := (* -1::Int #17)
#135 := (mod #77 #80)
#250 := (+ #40 #135)
#251 := (= #250 0::Int)
#41 := (mod #17 #19)
#247 := (* -1::Int #41)
#248 := (+ #40 #247)
#249 := (= #248 0::Int)
#109 := (>= #17 0::Int)
#102 := (<= #19 0::Int)
#194 := (or #102 #109)
#195 := (not #194)
#98 := (<= #17 0::Int)
#192 := (or #98 #102)
#193 := (not #192)
#198 := (or #193 #195)
#252 := (ite #198 #249 #251)
#246 := (= #40 0::Int)
#22 := (= #17 0::Int)
#253 := (ite #22 #246 #252)
#245 := (= #17 #40)
#23 := (= #19 0::Int)
#254 := (ite #23 #245 #253)
#740 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #739) #254)
#257 := (forall (vars (?v0 Int) (?v1 Int)) #254)
#743 := (iff #257 #740)
#741 := (iff #254 #254)
#742 := [refl]: #741
#744 := [quant-intro #742]: #743
#141 := (* -1::Int #135)
#214 := (ite #198 #41 #141)
#217 := (ite #22 0::Int #214)
#220 := (ite #23 #17 #217)
#223 := (= #40 #220)
#226 := (forall (vars (?v0 Int) (?v1 Int)) #223)
#258 := (iff #226 #257)
#255 := (iff #223 #254)
#256 := [rewrite]: #255
#259 := [quant-intro #256]: #258
#110 := (not #109)
#103 := (not #102)
#113 := (and #103 #110)
#99 := (not #98)
#106 := (and #99 #103)
#116 := (or #106 #113)
#161 := (ite #116 #41 #141)
#164 := (ite #22 0::Int #161)
#167 := (ite #23 #17 #164)
#170 := (= #40 #167)
#173 := (forall (vars (?v0 Int) (?v1 Int)) #170)
#227 := (iff #173 #226)
#224 := (iff #170 #223)
#221 := (= #167 #220)
#218 := (= #164 #217)
#215 := (= #161 #214)
#199 := (iff #116 #198)
#196 := (iff #113 #195)
#197 := [rewrite]: #196
#186 := (iff #106 #193)
#187 := [rewrite]: #186
#200 := [monotonicity #187 #197]: #199
#216 := [monotonicity #200]: #215
#219 := [monotonicity #216]: #218
#222 := [monotonicity #219]: #221
#225 := [monotonicity #222]: #224
#228 := [quant-intro #225]: #227
#184 := (~ #173 #173)
#183 := (~ #170 #170)
#180 := [refl]: #183
#185 := [nnf-pos #180]: #184
#33 := (- #19)
#32 := (- #17)
#42 := (mod #32 #33)
#43 := (- #42)
#26 := (< 0::Int #19)
#28 := (< #17 0::Int)
#29 := (and #28 #26)
#25 := (< 0::Int #17)
#27 := (and #25 #26)
#30 := (or #27 #29)
#44 := (ite #30 #41 #43)
#45 := (ite #22 0::Int #44)
#46 := (ite #23 #17 #45)
#47 := (= #40 #46)
#48 := (forall (vars (?v0 Int) (?v1 Int)) #47)
#176 := (iff #48 #173)
#70 := (and #26 #28)
#73 := (or #27 #70)
#146 := (ite #73 #41 #141)
#149 := (ite #22 0::Int #146)
#152 := (ite #23 #17 #149)
#155 := (= #40 #152)
#158 := (forall (vars (?v0 Int) (?v1 Int)) #155)
#174 := (iff #158 #173)
#171 := (iff #155 #170)
#168 := (= #152 #167)
#165 := (= #149 #164)
#162 := (= #146 #161)
#117 := (iff #73 #116)
#114 := (iff #70 #113)
#111 := (iff #28 #110)
#112 := [rewrite]: #111
#104 := (iff #26 #103)
#105 := [rewrite]: #104
#115 := [monotonicity #105 #112]: #114
#107 := (iff #27 #106)
#100 := (iff #25 #99)
#101 := [rewrite]: #100
#108 := [monotonicity #101 #105]: #107
#118 := [monotonicity #108 #115]: #117
#163 := [monotonicity #118]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#172 := [monotonicity #169]: #171
#175 := [quant-intro #172]: #174
#159 := (iff #48 #158)
#156 := (iff #47 #155)
#153 := (= #46 #152)
#150 := (= #45 #149)
#147 := (= #44 #146)
#144 := (= #43 #141)
#138 := (- #135)
#142 := (= #138 #141)
#143 := [rewrite]: #142
#139 := (= #43 #138)
#136 := (= #42 #135)
#81 := (= #33 #80)
#82 := [rewrite]: #81
#78 := (= #32 #77)
#79 := [rewrite]: #78
#137 := [monotonicity #79 #82]: #136
#140 := [monotonicity #137]: #139
#145 := [trans #140 #143]: #144
#74 := (iff #30 #73)
#71 := (iff #29 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#148 := [monotonicity #75 #145]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#157 := [monotonicity #154]: #156
#160 := [quant-intro #157]: #159
#177 := [trans #160 #175]: #176
#134 := [asserted]: #48
#178 := [mp #134 #177]: #173
#181 := [mp~ #178 #185]: #173
#229 := [mp #181 #228]: #226
#260 := [mp #229 #259]: #257
#745 := [mp #260 #744]: #740
#13 := 2::Int
#11 := 3::Int
#9 := 5::Int
#10 := (f4 f5 5::Int)
#12 := (f3 #10 3::Int)
#14 := (= #12 2::Int)
#15 := (not #14)
#68 := [asserted]: #15
#638 := (not #740)
#640 := (or #638 #14)
#318 := (* -1::Int 3::Int)
#403 := (* -1::Int 5::Int)
#404 := (mod #403 #318)
#405 := (+ #12 #404)
#396 := (= #405 0::Int)
#407 := (mod 5::Int 3::Int)
#408 := (* -1::Int #407)
#336 := (+ #12 #408)
#409 := (= #336 0::Int)
#406 := (>= 5::Int 0::Int)
#410 := (<= 3::Int 0::Int)
#389 := (or #410 #406)
#724 := (not #389)
#726 := (<= 5::Int 0::Int)
#383 := (or #726 #410)
#513 := (not #383)
#720 := (or #513 #724)
#394 := (ite #720 #409 #396)
#395 := (= #12 0::Int)
#727 := (= 5::Int 0::Int)
#728 := (ite #727 #395 #394)
#729 := (= 5::Int #12)
#730 := (= 3::Int 0::Int)
#725 := (ite #730 #729 #728)
#641 := (or #638 #725)
#643 := (iff #641 #640)
#644 := (iff #640 #640)
#630 := [rewrite]: #644
#653 := (iff #725 #14)
#386 := (= #12 5::Int)
#649 := (ite false #386 #14)
#652 := (iff #649 #14)
#646 := [rewrite]: #652
#650 := (iff #725 #649)
#655 := (iff #728 #14)
#645 := (ite false #395 #14)
#658 := (iff #645 #14)
#659 := [rewrite]: #658
#647 := (iff #728 #645)
#656 := (iff #394 #14)
#561 := (= #12 -1::Int)
#1 := true
#573 := (ite true #14 #561)
#667 := (iff #573 #14)
#654 := [rewrite]: #667
#666 := (iff #394 #573)
#571 := (iff #396 #561)
#672 := 1::Int
#566 := (+ 1::Int #12)
#565 := (= #566 0::Int)
#569 := (iff #565 #561)
#570 := [rewrite]: #569
#567 := (iff #396 #565)
#665 := (= #405 #566)
#557 := (+ #12 1::Int)
#661 := (= #557 #566)
#662 := [rewrite]: #661
#516 := (= #405 #557)
#555 := (= #404 1::Int)
#512 := -3::Int
#682 := -5::Int
#668 := (mod -5::Int -3::Int)
#670 := (= #668 1::Int)
#673 := [rewrite]: #670
#669 := (= #404 #668)
#514 := (= #318 -3::Int)
#515 := [rewrite]: #514
#676 := (= #403 -5::Int)
#683 := [rewrite]: #676
#671 := [monotonicity #683 #515]: #669
#556 := [trans #671 #673]: #555
#664 := [monotonicity #556]: #516
#550 := [trans #664 #662]: #665
#568 := [monotonicity #550]: #567
#572 := [trans #568 #570]: #571
#675 := (iff #409 #14)
#698 := -2::Int
#686 := (+ -2::Int #12)
#677 := (= #686 0::Int)
#680 := (iff #677 #14)
#674 := [rewrite]: #680
#678 := (iff #409 #677)
#534 := (= #336 #686)
#685 := (+ #12 -2::Int)
#692 := (= #685 #686)
#533 := [rewrite]: #692
#690 := (= #336 #685)
#689 := (= #408 -2::Int)
#693 := (* -1::Int 2::Int)
#687 := (= #693 -2::Int)
#688 := [rewrite]: #687
#697 := (= #408 #693)
#696 := (= #407 2::Int)
#411 := [rewrite]: #696
#694 := [monotonicity #411]: #697
#684 := [trans #694 #688]: #689
#691 := [monotonicity #684]: #690
#535 := [trans #691 #533]: #534
#679 := [monotonicity #535]: #678
#681 := [trans #679 #674]: #675
#417 := (iff #720 true)
#700 := (or true false)
#415 := (iff #700 true)
#416 := [rewrite]: #415
#704 := (iff #720 #700)
#699 := (iff #724 false)
#324 := (not true)
#424 := (iff #324 false)
#425 := [rewrite]: #424
#701 := (iff #724 #324)
#430 := (iff #389 true)
#719 := (or false true)
#428 := (iff #719 true)
#429 := [rewrite]: #428
#705 := (iff #389 #719)
#718 := (iff #406 true)
#716 := [rewrite]: #718
#370 := (iff #410 false)
#371 := [rewrite]: #370
#706 := [monotonicity #371 #716]: #705
#431 := [trans #706 #429]: #430
#702 := [monotonicity #431]: #701
#703 := [trans #702 #425]: #699
#357 := (iff #513 true)
#708 := (not false)
#715 := (iff #708 true)
#717 := [rewrite]: #715
#714 := (iff #513 #708)
#712 := (iff #383 false)
#372 := (or false false)
#710 := (iff #372 false)
#711 := [rewrite]: #710
#373 := (iff #383 #372)
#366 := (iff #726 false)
#707 := [rewrite]: #366
#709 := [monotonicity #707 #371]: #373
#713 := [trans #709 #711]: #712
#352 := [monotonicity #713]: #714
#358 := [trans #352 #717]: #357
#414 := [monotonicity #358 #703]: #704
#695 := [trans #414 #416]: #417
#663 := [monotonicity #695 #681 #572]: #666
#648 := [trans #663 #654]: #656
#382 := (iff #727 false)
#723 := [rewrite]: #382
#657 := [monotonicity #723 #648]: #647
#660 := [trans #657 #659]: #655
#381 := (iff #729 #386)
#722 := [rewrite]: #381
#731 := (iff #730 false)
#721 := [rewrite]: #731
#651 := [monotonicity #721 #722 #660]: #650
#637 := [trans #651 #646]: #653
#639 := [monotonicity #637]: #643
#631 := [trans #639 #630]: #643
#642 := [quant-inst #9 #11]: #641
#633 := [mp #642 #631]: #640
[unit-resolution #633 #68 #745]: false
unsat
d63f13b3722fcb24456a709ef1b920eb8e1c1645 335 0
#2 := false
decl f3 :: (-> S2 Int Int)
#21 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#19 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#41 := (f4 f5 #19)
#42 := (f3 #41 #21)
#756 := (pattern #42)
#23 := 0::Int
#94 := -1::Int
#98 := (* -1::Int #21)
#95 := (* -1::Int #19)
#153 := (mod #95 #98)
#268 := (+ #42 #153)
#269 := (= #268 0::Int)
#43 := (mod #19 #21)
#265 := (* -1::Int #43)
#266 := (+ #42 #265)
#267 := (= #266 0::Int)
#127 := (>= #19 0::Int)
#120 := (<= #21 0::Int)
#212 := (or #120 #127)
#213 := (not #212)
#116 := (<= #19 0::Int)
#210 := (or #116 #120)
#211 := (not #210)
#216 := (or #211 #213)
#270 := (ite #216 #267 #269)
#264 := (= #42 0::Int)
#24 := (= #19 0::Int)
#271 := (ite #24 #264 #270)
#263 := (= #19 #42)
#25 := (= #21 0::Int)
#272 := (ite #25 #263 #271)
#757 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #756) #272)
#275 := (forall (vars (?v0 Int) (?v1 Int)) #272)
#760 := (iff #275 #757)
#758 := (iff #272 #272)
#759 := [refl]: #758
#761 := [quant-intro #759]: #760
#159 := (* -1::Int #153)
#232 := (ite #216 #43 #159)
#235 := (ite #24 0::Int #232)
#238 := (ite #25 #19 #235)
#241 := (= #42 #238)
#244 := (forall (vars (?v0 Int) (?v1 Int)) #241)
#276 := (iff #244 #275)
#273 := (iff #241 #272)
#274 := [rewrite]: #273
#277 := [quant-intro #274]: #276
#128 := (not #127)
#121 := (not #120)
#131 := (and #121 #128)
#117 := (not #116)
#124 := (and #117 #121)
#134 := (or #124 #131)
#179 := (ite #134 #43 #159)
#182 := (ite #24 0::Int #179)
#185 := (ite #25 #19 #182)
#188 := (= #42 #185)
#191 := (forall (vars (?v0 Int) (?v1 Int)) #188)
#245 := (iff #191 #244)
#242 := (iff #188 #241)
#239 := (= #185 #238)
#236 := (= #182 #235)
#233 := (= #179 #232)
#217 := (iff #134 #216)
#214 := (iff #131 #213)
#215 := [rewrite]: #214
#204 := (iff #124 #211)
#205 := [rewrite]: #204
#218 := [monotonicity #205 #215]: #217
#234 := [monotonicity #218]: #233
#237 := [monotonicity #234]: #236
#240 := [monotonicity #237]: #239
#243 := [monotonicity #240]: #242
#246 := [quant-intro #243]: #245
#202 := (~ #191 #191)
#201 := (~ #188 #188)
#198 := [refl]: #201
#203 := [nnf-pos #198]: #202
#35 := (- #21)
#34 := (- #19)
#44 := (mod #34 #35)
#45 := (- #44)
#28 := (< 0::Int #21)
#30 := (< #19 0::Int)
#31 := (and #30 #28)
#27 := (< 0::Int #19)
#29 := (and #27 #28)
#32 := (or #29 #31)
#46 := (ite #32 #43 #45)
#47 := (ite #24 0::Int #46)
#48 := (ite #25 #19 #47)
#49 := (= #42 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#194 := (iff #50 #191)
#87 := (and #28 #30)
#91 := (or #29 #87)
#164 := (ite #91 #43 #159)
#167 := (ite #24 0::Int #164)
#170 := (ite #25 #19 #167)
#173 := (= #42 #170)
#176 := (forall (vars (?v0 Int) (?v1 Int)) #173)
#192 := (iff #176 #191)
#189 := (iff #173 #188)
#186 := (= #170 #185)
#183 := (= #167 #182)
#180 := (= #164 #179)
#135 := (iff #91 #134)
#132 := (iff #87 #131)
#129 := (iff #30 #128)
#130 := [rewrite]: #129
#122 := (iff #28 #121)
#123 := [rewrite]: #122
#133 := [monotonicity #123 #130]: #132
#125 := (iff #29 #124)
#118 := (iff #27 #117)
#119 := [rewrite]: #118
#126 := [monotonicity #119 #123]: #125
#136 := [monotonicity #126 #133]: #135
#181 := [monotonicity #136]: #180
#184 := [monotonicity #181]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#193 := [quant-intro #190]: #192
#177 := (iff #50 #176)
#174 := (iff #49 #173)
#171 := (= #48 #170)
#168 := (= #47 #167)
#165 := (= #46 #164)
#162 := (= #45 #159)
#156 := (- #153)
#160 := (= #156 #159)
#161 := [rewrite]: #160
#157 := (= #45 #156)
#154 := (= #44 #153)
#99 := (= #35 #98)
#100 := [rewrite]: #99
#96 := (= #34 #95)
#97 := [rewrite]: #96
#155 := [monotonicity #97 #100]: #154
#158 := [monotonicity #155]: #157
#163 := [trans #158 #161]: #162
#92 := (iff #32 #91)
#89 := (iff #31 #87)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#166 := [monotonicity #93 #163]: #165
#169 := [monotonicity #166]: #168
#172 := [monotonicity #169]: #171
#175 := [monotonicity #172]: #174
#178 := [quant-intro #175]: #177
#195 := [trans #178 #193]: #194
#152 := [asserted]: #50
#196 := [mp #152 #195]: #191
#199 := [mp~ #196 #203]: #191
#247 := [mp #199 #246]: #244
#278 := [mp #247 #277]: #275
#762 := [mp #278 #761]: #757
#77 := -2::Int
#71 := -3::Int
#9 := 1::Int
#10 := (f4 f5 1::Int)
#74 := (f3 #10 -3::Int)
#80 := (= #74 -2::Int)
#83 := (not #80)
#14 := 2::Int
#15 := (- 2::Int)
#11 := 3::Int
#12 := (- 3::Int)
#13 := (f3 #10 #12)
#16 := (= #13 #15)
#17 := (not #16)
#84 := (iff #17 #83)
#81 := (iff #16 #80)
#78 := (= #15 -2::Int)
#79 := [rewrite]: #78
#75 := (= #13 #74)
#72 := (= #12 -3::Int)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#85 := [monotonicity #82]: #84
#70 := [asserted]: #17
#88 := [mp #70 #85]: #83
#664 := (not #757)
#674 := (or #664 #80)
#336 := (* -1::Int -3::Int)
#420 := (* -1::Int 1::Int)
#421 := (mod #420 #336)
#422 := (+ #74 #421)
#413 := (= #422 0::Int)
#424 := (mod 1::Int -3::Int)
#425 := (* -1::Int #424)
#426 := (+ #74 #425)
#423 := (= #426 0::Int)
#427 := (>= 1::Int 0::Int)
#406 := (<= -3::Int 0::Int)
#741 := (or #406 #427)
#743 := (not #741)
#400 := (<= 1::Int 0::Int)
#530 := (or #400 #406)
#737 := (not #530)
#411 := (or #737 #743)
#412 := (ite #411 #423 #413)
#744 := (= #74 0::Int)
#745 := (= 1::Int 0::Int)
#746 := (ite #745 #744 #412)
#747 := (= 1::Int #74)
#742 := (= -3::Int 0::Int)
#748 := (ite #742 #747 #746)
#675 := (or #664 #748)
#672 := (iff #675 #674)
#666 := (iff #674 #674)
#667 := [rewrite]: #666
#665 := (iff #748 #80)
#739 := (= #74 1::Int)
#682 := (ite false #739 #80)
#584 := (iff #682 #80)
#585 := [rewrite]: #584
#671 := (iff #748 #682)
#680 := (iff #746 #80)
#587 := (ite false #744 #80)
#590 := (iff #587 #80)
#683 := [rewrite]: #590
#588 := (iff #746 #587)
#578 := (iff #412 #80)
#567 := (iff #412 #682)
#678 := (iff #413 #80)
#688 := (+ 2::Int #74)
#573 := (= #688 0::Int)
#681 := (iff #573 #80)
#583 := [rewrite]: #681
#574 := (iff #413 #573)
#690 := (= #422 #688)
#532 := (+ #74 2::Int)
#689 := (= #532 #688)
#687 := [rewrite]: #689
#685 := (= #422 #532)
#529 := (= #421 2::Int)
#692 := (mod -1::Int 3::Int)
#693 := (= #692 2::Int)
#700 := [rewrite]: #693
#698 := (= #421 #692)
#697 := (= #336 3::Int)
#691 := [rewrite]: #697
#710 := (= #420 -1::Int)
#714 := [rewrite]: #710
#699 := [monotonicity #714 #691]: #698
#531 := [trans #699 #700]: #529
#686 := [monotonicity #531]: #685
#572 := [trans #686 #687]: #690
#533 := [monotonicity #572]: #574
#679 := [trans #533 #583]: #678
#695 := (iff #423 #739)
#701 := (+ -1::Int #74)
#709 := (= #701 0::Int)
#552 := (iff #709 #739)
#694 := [rewrite]: #552
#550 := (iff #423 #709)
#708 := (= #426 #701)
#704 := (+ #74 -1::Int)
#702 := (= #704 #701)
#707 := [rewrite]: #702
#705 := (= #426 #704)
#711 := (= #425 -1::Int)
#713 := (= #425 #420)
#434 := (= #424 1::Int)
#712 := [rewrite]: #434
#428 := [monotonicity #712]: #713
#715 := [trans #428 #714]: #711
#706 := [monotonicity #715]: #705
#703 := [trans #706 #707]: #708
#551 := [monotonicity #703]: #550
#696 := [trans #551 #694]: #695
#432 := (iff #411 false)
#716 := (or false false)
#721 := (iff #716 false)
#431 := [rewrite]: #721
#720 := (iff #411 #716)
#441 := (iff #743 false)
#1 := true
#731 := (not true)
#734 := (iff #731 false)
#374 := [rewrite]: #734
#718 := (iff #743 #731)
#448 := (iff #741 true)
#722 := (or true true)
#446 := (iff #722 true)
#447 := [rewrite]: #446
#723 := (iff #741 #722)
#733 := (iff #427 true)
#736 := [rewrite]: #733
#388 := (iff #406 true)
#389 := [rewrite]: #388
#445 := [monotonicity #389 #736]: #723
#342 := [trans #445 #447]: #448
#719 := [monotonicity #342]: #718
#442 := [trans #719 #374]: #441
#375 := (iff #737 false)
#369 := (iff #737 #731)
#730 := (iff #530 true)
#390 := (or false true)
#728 := (iff #390 true)
#729 := [rewrite]: #728
#726 := (iff #530 #390)
#724 := (iff #400 false)
#387 := [rewrite]: #724
#727 := [monotonicity #387 #389]: #726
#725 := [trans #727 #729]: #730
#732 := [monotonicity #725]: #369
#735 := [trans #732 #374]: #375
#717 := [monotonicity #735 #442]: #720
#433 := [trans #717 #431]: #432
#582 := [monotonicity #433 #696 #679]: #567
#586 := [trans #582 #585]: #578
#740 := (iff #745 false)
#383 := [rewrite]: #740
#589 := [monotonicity #383 #586]: #588
#684 := [trans #589 #683]: #680
#403 := (iff #747 #739)
#399 := [rewrite]: #403
#738 := (iff #742 false)
#398 := [rewrite]: #738
#673 := [monotonicity #398 #399 #684]: #671
#662 := [trans #673 #585]: #665
#677 := [monotonicity #662]: #672
#668 := [trans #677 #667]: #672
#676 := [quant-inst #9 #71]: #675
#669 := [mp #676 #668]: #674
[unit-resolution #669 #88 #762]: false
unsat
77f73bbea5ab8b6fc826eede2973becc83be2b99 338 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#778 := (pattern #39)
#13 := 0::Int
#109 := -1::Int
#113 := (* -1::Int #19)
#110 := (* -1::Int #17)
#174 := (mod #110 #113)
#289 := (+ #39 #174)
#290 := (= #289 0::Int)
#40 := (mod #17 #19)
#286 := (* -1::Int #40)
#287 := (+ #39 #286)
#288 := (= #287 0::Int)
#148 := (>= #17 0::Int)
#141 := (<= #19 0::Int)
#233 := (or #141 #148)
#234 := (not #233)
#137 := (<= #17 0::Int)
#231 := (or #137 #141)
#232 := (not #231)
#237 := (or #232 #234)
#291 := (ite #237 #288 #290)
#285 := (= #39 0::Int)
#21 := (= #17 0::Int)
#292 := (ite #21 #285 #291)
#284 := (= #17 #39)
#22 := (= #19 0::Int)
#293 := (ite #22 #284 #292)
#779 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #778) #293)
#296 := (forall (vars (?v0 Int) (?v1 Int)) #293)
#782 := (iff #296 #779)
#780 := (iff #293 #293)
#781 := [refl]: #780
#783 := [quant-intro #781]: #782
#180 := (* -1::Int #174)
#253 := (ite #237 #40 #180)
#256 := (ite #21 0::Int #253)
#259 := (ite #22 #17 #256)
#262 := (= #39 #259)
#265 := (forall (vars (?v0 Int) (?v1 Int)) #262)
#297 := (iff #265 #296)
#294 := (iff #262 #293)
#295 := [rewrite]: #294
#298 := [quant-intro #295]: #297
#149 := (not #148)
#142 := (not #141)
#152 := (and #142 #149)
#138 := (not #137)
#145 := (and #138 #142)
#155 := (or #145 #152)
#200 := (ite #155 #40 #180)
#203 := (ite #21 0::Int #200)
#206 := (ite #22 #17 #203)
#209 := (= #39 #206)
#212 := (forall (vars (?v0 Int) (?v1 Int)) #209)
#266 := (iff #212 #265)
#263 := (iff #209 #262)
#260 := (= #206 #259)
#257 := (= #203 #256)
#254 := (= #200 #253)
#238 := (iff #155 #237)
#235 := (iff #152 #234)
#236 := [rewrite]: #235
#225 := (iff #145 #232)
#226 := [rewrite]: #225
#239 := [monotonicity #226 #236]: #238
#255 := [monotonicity #239]: #254
#258 := [monotonicity #255]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [quant-intro #264]: #266
#223 := (~ #212 #212)
#222 := (~ #209 #209)
#219 := [refl]: #222
#224 := [nnf-pos #219]: #223
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#215 := (iff #47 #212)
#103 := (and #25 #27)
#106 := (or #26 #103)
#185 := (ite #106 #40 #180)
#94 := (= 0::Int #17)
#188 := (ite #94 0::Int #185)
#97 := (= 0::Int #19)
#191 := (ite #97 #17 #188)
#194 := (= #39 #191)
#197 := (forall (vars (?v0 Int) (?v1 Int)) #194)
#213 := (iff #197 #212)
#210 := (iff #194 #209)
#207 := (= #191 #206)
#204 := (= #188 #203)
#201 := (= #185 #200)
#156 := (iff #106 #155)
#153 := (iff #103 #152)
#150 := (iff #27 #149)
#151 := [rewrite]: #150
#143 := (iff #25 #142)
#144 := [rewrite]: #143
#154 := [monotonicity #144 #151]: #153
#146 := (iff #26 #145)
#139 := (iff #24 #138)
#140 := [rewrite]: #139
#147 := [monotonicity #140 #144]: #146
#157 := [monotonicity #147 #154]: #156
#202 := [monotonicity #157]: #201
#131 := (iff #94 #21)
#132 := [rewrite]: #131
#205 := [monotonicity #132 #202]: #204
#133 := (iff #97 #22)
#134 := [rewrite]: #133
#208 := [monotonicity #134 #205]: #207
#211 := [monotonicity #208]: #210
#214 := [quant-intro #211]: #213
#198 := (iff #47 #197)
#195 := (iff #46 #194)
#192 := (= #45 #191)
#189 := (= #44 #188)
#186 := (= #43 #185)
#183 := (= #42 #180)
#177 := (- #174)
#181 := (= #177 #180)
#182 := [rewrite]: #181
#178 := (= #42 #177)
#175 := (= #41 #174)
#114 := (= #32 #113)
#115 := [rewrite]: #114
#111 := (= #31 #110)
#112 := [rewrite]: #111
#176 := [monotonicity #112 #115]: #175
#179 := [monotonicity #176]: #178
#184 := [trans #179 #182]: #183
#107 := (iff #29 #106)
#104 := (iff #28 #103)
#105 := [rewrite]: #104
#108 := [monotonicity #105]: #107
#187 := [monotonicity #108 #184]: #186
#95 := (iff #21 #94)
#96 := [rewrite]: #95
#190 := [monotonicity #96 #187]: #189
#98 := (iff #22 #97)
#99 := [rewrite]: #98
#193 := [monotonicity #99 #190]: #192
#196 := [monotonicity #193]: #195
#199 := [quant-intro #196]: #198
#216 := [trans #199 #214]: #215
#173 := [asserted]: #47
#217 := [mp #173 #216]: #212
#220 := [mp~ #217 #224]: #212
#268 := [mp #220 #267]: #265
#299 := [mp #268 #298]: #296
#784 := [mp #299 #783]: #779
#68 := -3::Int
#9 := 3::Int
#10 := (f4 f5 3::Int)
#71 := (f3 #10 -3::Int)
#74 := (= #71 0::Int)
#87 := (not #74)
#11 := (- 3::Int)
#12 := (f3 #10 #11)
#14 := (= #12 0::Int)
#15 := (not #14)
#90 := (iff #15 #87)
#77 := (= 0::Int #71)
#82 := (not #77)
#88 := (iff #82 #87)
#85 := (iff #77 #74)
#86 := [rewrite]: #85
#89 := [monotonicity #86]: #88
#83 := (iff #15 #82)
#80 := (iff #14 #77)
#78 := (iff #74 #77)
#79 := [rewrite]: #78
#75 := (iff #14 #74)
#72 := (= #12 #71)
#69 := (= #11 -3::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#84 := [monotonicity #81]: #83
#91 := [trans #84 #89]: #90
#67 := [asserted]: #15
#92 := [mp #67 #91]: #87
#607 := (not #779)
#600 := (or #607 #74)
#357 := (* -1::Int -3::Int)
#442 := (* -1::Int 3::Int)
#443 := (mod #442 #357)
#444 := (+ #71 #443)
#435 := (= #444 0::Int)
#446 := (mod 3::Int -3::Int)
#447 := (* -1::Int #446)
#375 := (+ #71 #447)
#448 := (= #375 0::Int)
#445 := (>= 3::Int 0::Int)
#449 := (<= -3::Int 0::Int)
#428 := (or #449 #445)
#763 := (not #428)
#765 := (<= 3::Int 0::Int)
#422 := (or #765 #449)
#552 := (not #422)
#759 := (or #552 #763)
#433 := (ite #759 #448 #435)
#434 := (= 3::Int 0::Int)
#766 := (ite #434 #74 #433)
#767 := (= 3::Int #71)
#768 := (= -3::Int 0::Int)
#769 := (ite #768 #767 #766)
#608 := (or #607 #769)
#610 := (iff #608 #600)
#612 := (iff #600 #600)
#705 := [rewrite]: #612
#604 := (iff #769 #74)
#420 := (= #71 3::Int)
#605 := (ite false #420 #74)
#704 := (iff #605 #74)
#589 := [rewrite]: #704
#700 := (iff #769 #605)
#555 := (iff #766 #74)
#707 := (ite false #74 #74)
#711 := (iff #707 #74)
#709 := [rewrite]: #711
#595 := (iff #766 #707)
#712 := (iff #433 #74)
#708 := (iff #433 #707)
#553 := (iff #435 #74)
#722 := (= #444 #71)
#737 := (+ #71 0::Int)
#728 := (= #737 #71)
#723 := [rewrite]: #728
#721 := (= #444 #737)
#714 := (= #443 0::Int)
#716 := (mod -3::Int 3::Int)
#719 := (= #716 0::Int)
#713 := [rewrite]: #719
#717 := (= #443 #716)
#573 := (= #357 3::Int)
#574 := [rewrite]: #573
#731 := (= #442 -3::Int)
#572 := [rewrite]: #731
#718 := [monotonicity #572 #574]: #717
#720 := [trans #718 #713]: #714
#715 := [monotonicity #720]: #721
#551 := [trans #715 #723]: #722
#554 := [monotonicity #551]: #553
#730 := (iff #448 #74)
#724 := (= #375 #71)
#726 := (= #375 #737)
#736 := (= #447 0::Int)
#456 := (* -1::Int 0::Int)
#450 := (= #456 0::Int)
#732 := [rewrite]: #450
#734 := (= #447 #456)
#454 := (= #446 0::Int)
#455 := [rewrite]: #454
#735 := [monotonicity #455]: #734
#733 := [trans #735 #732]: #736
#727 := [monotonicity #733]: #726
#729 := [trans #727 #723]: #724
#725 := [monotonicity #729]: #730
#743 := (iff #759 false)
#463 := (or false false)
#742 := (iff #463 false)
#739 := [rewrite]: #742
#464 := (iff #759 #463)
#740 := (iff #763 false)
#1 := true
#752 := (not true)
#391 := (iff #752 false)
#754 := [rewrite]: #391
#470 := (iff #763 #752)
#468 := (iff #428 true)
#755 := (or true true)
#745 := (iff #755 true)
#467 := [rewrite]: #745
#758 := (iff #428 #755)
#397 := (iff #445 true)
#757 := [rewrite]: #397
#746 := (iff #449 true)
#409 := [rewrite]: #746
#744 := [monotonicity #409 #757]: #758
#469 := [trans #744 #467]: #468
#363 := [monotonicity #469]: #470
#741 := [trans #363 #754]: #740
#756 := (iff #552 false)
#747 := (iff #552 #752)
#750 := (iff #422 true)
#410 := (or false true)
#748 := (iff #410 true)
#749 := [rewrite]: #748
#411 := (iff #422 #410)
#762 := (iff #765 false)
#405 := [rewrite]: #762
#412 := [monotonicity #405 #409]: #411
#751 := [trans #412 #749]: #750
#753 := [monotonicity #751]: #747
#396 := [trans #753 #754]: #756
#738 := [monotonicity #396 #741]: #464
#453 := [trans #738 #739]: #743
#710 := [monotonicity #453 #725 #554]: #708
#594 := [trans #710 #709]: #712
#761 := (iff #434 false)
#421 := [rewrite]: #761
#596 := [monotonicity #421 #594]: #595
#703 := [trans #596 #709]: #555
#760 := (iff #767 #420)
#425 := [rewrite]: #760
#764 := (iff #768 false)
#770 := [rewrite]: #764
#701 := [monotonicity #770 #425 #703]: #700
#606 := [trans #701 #589]: #604
#611 := [monotonicity #606]: #610
#702 := [trans #611 #705]: #610
#609 := [quant-inst #9 #68]: #608
#706 := [mp #609 #702]: #600
[unit-resolution #706 #92 #784]: false
unsat
adc5ede35f5125662d49d00be9296579ea259f42 344 0
#2 := false
decl f3 :: (-> S2 Int Int)
#21 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#19 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#41 := (f4 f5 #19)
#42 := (f3 #41 #21)
#755 := (pattern #42)
#23 := 0::Int
#77 := -1::Int
#97 := (* -1::Int #21)
#94 := (* -1::Int #19)
#152 := (mod #94 #97)
#267 := (+ #42 #152)
#268 := (= #267 0::Int)
#43 := (mod #19 #21)
#264 := (* -1::Int #43)
#265 := (+ #42 #264)
#266 := (= #265 0::Int)
#126 := (>= #19 0::Int)
#119 := (<= #21 0::Int)
#211 := (or #119 #126)
#212 := (not #211)
#115 := (<= #19 0::Int)
#209 := (or #115 #119)
#210 := (not #209)
#215 := (or #210 #212)
#269 := (ite #215 #266 #268)
#263 := (= #42 0::Int)
#24 := (= #19 0::Int)
#270 := (ite #24 #263 #269)
#262 := (= #19 #42)
#25 := (= #21 0::Int)
#271 := (ite #25 #262 #270)
#756 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #755) #271)
#274 := (forall (vars (?v0 Int) (?v1 Int)) #271)
#759 := (iff #274 #756)
#757 := (iff #271 #271)
#758 := [refl]: #757
#760 := [quant-intro #758]: #759
#158 := (* -1::Int #152)
#231 := (ite #215 #43 #158)
#234 := (ite #24 0::Int #231)
#237 := (ite #25 #19 #234)
#240 := (= #42 #237)
#243 := (forall (vars (?v0 Int) (?v1 Int)) #240)
#275 := (iff #243 #274)
#272 := (iff #240 #271)
#273 := [rewrite]: #272
#276 := [quant-intro #273]: #275
#127 := (not #126)
#120 := (not #119)
#130 := (and #120 #127)
#116 := (not #115)
#123 := (and #116 #120)
#133 := (or #123 #130)
#178 := (ite #133 #43 #158)
#181 := (ite #24 0::Int #178)
#184 := (ite #25 #19 #181)
#187 := (= #42 #184)
#190 := (forall (vars (?v0 Int) (?v1 Int)) #187)
#244 := (iff #190 #243)
#241 := (iff #187 #240)
#238 := (= #184 #237)
#235 := (= #181 #234)
#232 := (= #178 #231)
#216 := (iff #133 #215)
#213 := (iff #130 #212)
#214 := [rewrite]: #213
#203 := (iff #123 #210)
#204 := [rewrite]: #203
#217 := [monotonicity #204 #214]: #216
#233 := [monotonicity #217]: #232
#236 := [monotonicity #233]: #235
#239 := [monotonicity #236]: #238
#242 := [monotonicity #239]: #241
#245 := [quant-intro #242]: #244
#201 := (~ #190 #190)
#200 := (~ #187 #187)
#197 := [refl]: #200
#202 := [nnf-pos #197]: #201
#35 := (- #21)
#34 := (- #19)
#44 := (mod #34 #35)
#45 := (- #44)
#28 := (< 0::Int #21)
#30 := (< #19 0::Int)
#31 := (and #30 #28)
#27 := (< 0::Int #19)
#29 := (and #27 #28)
#32 := (or #29 #31)
#46 := (ite #32 #43 #45)
#47 := (ite #24 0::Int #46)
#48 := (ite #25 #19 #47)
#49 := (= #42 #48)
#50 := (forall (vars (?v0 Int) (?v1 Int)) #49)
#193 := (iff #50 #190)
#87 := (and #28 #30)
#91 := (or #29 #87)
#163 := (ite #91 #43 #158)
#166 := (ite #24 0::Int #163)
#169 := (ite #25 #19 #166)
#172 := (= #42 #169)
#175 := (forall (vars (?v0 Int) (?v1 Int)) #172)
#191 := (iff #175 #190)
#188 := (iff #172 #187)
#185 := (= #169 #184)
#182 := (= #166 #181)
#179 := (= #163 #178)
#134 := (iff #91 #133)
#131 := (iff #87 #130)
#128 := (iff #30 #127)
#129 := [rewrite]: #128
#121 := (iff #28 #120)
#122 := [rewrite]: #121
#132 := [monotonicity #122 #129]: #131
#124 := (iff #29 #123)
#117 := (iff #27 #116)
#118 := [rewrite]: #117
#125 := [monotonicity #118 #122]: #124
#135 := [monotonicity #125 #132]: #134
#180 := [monotonicity #135]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [monotonicity #186]: #188
#192 := [quant-intro #189]: #191
#176 := (iff #50 #175)
#173 := (iff #49 #172)
#170 := (= #48 #169)
#167 := (= #47 #166)
#164 := (= #46 #163)
#161 := (= #45 #158)
#155 := (- #152)
#159 := (= #155 #158)
#160 := [rewrite]: #159
#156 := (= #45 #155)
#153 := (= #44 #152)
#98 := (= #35 #97)
#99 := [rewrite]: #98
#95 := (= #34 #94)
#96 := [rewrite]: #95
#154 := [monotonicity #96 #99]: #153
#157 := [monotonicity #154]: #156
#162 := [trans #157 #160]: #161
#92 := (iff #32 #91)
#89 := (iff #31 #87)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#165 := [monotonicity #93 #162]: #164
#168 := [monotonicity #165]: #167
#171 := [monotonicity #168]: #170
#174 := [monotonicity #171]: #173
#177 := [quant-intro #174]: #176
#194 := [trans #177 #192]: #193
#151 := [asserted]: #50
#195 := [mp #151 #194]: #190
#198 := [mp~ #195 #202]: #190
#246 := [mp #198 #245]: #243
#277 := [mp #246 #276]: #274
#761 := [mp #277 #760]: #756
#71 := -3::Int
#9 := 5::Int
#10 := (f4 f5 5::Int)
#74 := (f3 #10 -3::Int)
#80 := (= #74 -1::Int)
#83 := (not #80)
#14 := 1::Int
#15 := (- 1::Int)
#11 := 3::Int
#12 := (- 3::Int)
#13 := (f3 #10 #12)
#16 := (= #13 #15)
#17 := (not #16)
#84 := (iff #17 #83)
#81 := (iff #16 #80)
#78 := (= #15 -1::Int)
#79 := [rewrite]: #78
#75 := (= #13 #74)
#72 := (= #12 -3::Int)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#82 := [monotonicity #76 #79]: #81
#85 := [monotonicity #82]: #84
#70 := [asserted]: #17
#88 := [mp #70 #85]: #83
#662 := (not #756)
#669 := (or #662 #80)
#335 := (* -1::Int -3::Int)
#419 := (* -1::Int 5::Int)
#420 := (mod #419 #335)
#421 := (+ #74 #420)
#412 := (= #421 0::Int)
#423 := (mod 5::Int -3::Int)
#424 := (* -1::Int #423)
#425 := (+ #74 #424)
#422 := (= #425 0::Int)
#426 := (>= 5::Int 0::Int)
#405 := (<= -3::Int 0::Int)
#740 := (or #405 #426)
#742 := (not #740)
#399 := (<= 5::Int 0::Int)
#529 := (or #399 #405)
#736 := (not #529)
#410 := (or #736 #742)
#411 := (ite #410 #422 #412)
#743 := (= #74 0::Int)
#744 := (= 5::Int 0::Int)
#745 := (ite #744 #743 #411)
#746 := (= 5::Int #74)
#741 := (= -3::Int 0::Int)
#747 := (ite #741 #746 #745)
#653 := (or #662 #747)
#656 := (iff #653 #669)
#658 := (iff #669 #669)
#659 := [rewrite]: #658
#667 := (iff #747 #80)
#738 := (= #74 5::Int)
#675 := (ite false #738 #80)
#665 := (iff #675 #80)
#666 := [rewrite]: #665
#671 := (iff #747 #675)
#673 := (iff #745 #80)
#670 := (ite false #743 #80)
#661 := (iff #670 #80)
#663 := [rewrite]: #661
#672 := (iff #745 #670)
#679 := (iff #411 #80)
#433 := 2::Int
#695 := (= #74 2::Int)
#586 := (ite false #695 #80)
#589 := (iff #586 #80)
#682 := [rewrite]: #589
#587 := (iff #411 #586)
#577 := (iff #412 #80)
#532 := (+ 1::Int #74)
#681 := (= #532 0::Int)
#583 := (iff #681 #80)
#584 := [rewrite]: #583
#566 := (iff #412 #681)
#677 := (= #421 #532)
#571 := (+ #74 1::Int)
#680 := (= #571 #532)
#582 := [rewrite]: #680
#572 := (= #421 #571)
#686 := (= #420 1::Int)
#698 := -5::Int
#531 := (mod -5::Int 3::Int)
#687 := (= #531 1::Int)
#688 := [rewrite]: #687
#684 := (= #420 #531)
#528 := (= #335 3::Int)
#530 := [rewrite]: #528
#692 := (= #419 -5::Int)
#699 := [rewrite]: #692
#685 := [monotonicity #699 #530]: #684
#689 := [trans #685 #688]: #686
#573 := [monotonicity #689]: #572
#678 := [trans #573 #582]: #677
#581 := [monotonicity #678]: #566
#585 := [trans #581 #584]: #577
#691 := (iff #422 #695)
#710 := -2::Int
#707 := (+ -2::Int #74)
#551 := (= #707 0::Int)
#696 := (iff #551 #695)
#690 := [rewrite]: #696
#693 := (iff #422 #551)
#549 := (= #425 #707)
#700 := (+ #74 -2::Int)
#702 := (= #700 #707)
#708 := [rewrite]: #702
#701 := (= #425 #700)
#704 := (= #424 -2::Int)
#427 := (* -1::Int 2::Int)
#714 := (= #427 -2::Int)
#703 := [rewrite]: #714
#709 := (= #424 #427)
#711 := (= #423 2::Int)
#712 := [rewrite]: #711
#713 := [monotonicity #712]: #709
#705 := [trans #713 #703]: #704
#706 := [monotonicity #705]: #701
#550 := [trans #706 #708]: #549
#694 := [monotonicity #550]: #693
#697 := [trans #694 #690]: #691
#431 := (iff #410 false)
#715 := (or false false)
#720 := (iff #715 false)
#430 := [rewrite]: #720
#719 := (iff #410 #715)
#440 := (iff #742 false)
#1 := true
#730 := (not true)
#733 := (iff #730 false)
#373 := [rewrite]: #733
#717 := (iff #742 #730)
#447 := (iff #740 true)
#721 := (or true true)
#445 := (iff #721 true)
#446 := [rewrite]: #445
#722 := (iff #740 #721)
#732 := (iff #426 true)
#735 := [rewrite]: #732
#387 := (iff #405 true)
#388 := [rewrite]: #387
#444 := [monotonicity #388 #735]: #722
#341 := [trans #444 #446]: #447
#718 := [monotonicity #341]: #717
#441 := [trans #718 #373]: #440
#374 := (iff #736 false)
#368 := (iff #736 #730)
#729 := (iff #529 true)
#389 := (or false true)
#727 := (iff #389 true)
#728 := [rewrite]: #727
#725 := (iff #529 #389)
#723 := (iff #399 false)
#386 := [rewrite]: #723
#726 := [monotonicity #386 #388]: #725
#724 := [trans #726 #728]: #729
#731 := [monotonicity #724]: #368
#734 := [trans #731 #373]: #374
#716 := [monotonicity #734 #441]: #719
#432 := [trans #716 #430]: #431
#588 := [monotonicity #432 #697 #585]: #587
#683 := [trans #588 #682]: #679
#739 := (iff #744 false)
#382 := [rewrite]: #739
#664 := [monotonicity #382 #683]: #672
#674 := [trans #664 #663]: #673
#402 := (iff #746 #738)
#398 := [rewrite]: #402
#737 := (iff #741 false)
#397 := [rewrite]: #737
#676 := [monotonicity #397 #398 #674]: #671
#668 := [trans #676 #666]: #667
#657 := [monotonicity #668]: #656
#655 := [trans #657 #659]: #656
#654 := [quant-inst #9 #71]: #653
#660 := [mp #654 #655]: #669
[unit-resolution #660 #88 #761]: false
unsat
61bb705d2a320e5bbcedd3ebd2ddae1fc4faa170 356 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#40 := (f4 f5 #18)
#41 := (f3 #40 #20)
#766 := (pattern #41)
#22 := 0::Int
#70 := -1::Int
#108 := (* -1::Int #20)
#105 := (* -1::Int #18)
#163 := (mod #105 #108)
#278 := (+ #41 #163)
#279 := (= #278 0::Int)
#42 := (mod #18 #20)
#275 := (* -1::Int #42)
#276 := (+ #41 #275)
#277 := (= #276 0::Int)
#137 := (>= #18 0::Int)
#130 := (<= #20 0::Int)
#222 := (or #130 #137)
#223 := (not #222)
#126 := (<= #18 0::Int)
#220 := (or #126 #130)
#221 := (not #220)
#226 := (or #221 #223)
#280 := (ite #226 #277 #279)
#274 := (= #41 0::Int)
#23 := (= #18 0::Int)
#281 := (ite #23 #274 #280)
#273 := (= #18 #41)
#24 := (= #20 0::Int)
#282 := (ite #24 #273 #281)
#767 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #766) #282)
#285 := (forall (vars (?v0 Int) (?v1 Int)) #282)
#770 := (iff #285 #767)
#768 := (iff #282 #282)
#769 := [refl]: #768
#771 := [quant-intro #769]: #770
#169 := (* -1::Int #163)
#242 := (ite #226 #42 #169)
#245 := (ite #23 0::Int #242)
#248 := (ite #24 #18 #245)
#251 := (= #41 #248)
#254 := (forall (vars (?v0 Int) (?v1 Int)) #251)
#286 := (iff #254 #285)
#283 := (iff #251 #282)
#284 := [rewrite]: #283
#287 := [quant-intro #284]: #286
#138 := (not #137)
#131 := (not #130)
#141 := (and #131 #138)
#127 := (not #126)
#134 := (and #127 #131)
#144 := (or #134 #141)
#189 := (ite #144 #42 #169)
#192 := (ite #23 0::Int #189)
#195 := (ite #24 #18 #192)
#198 := (= #41 #195)
#201 := (forall (vars (?v0 Int) (?v1 Int)) #198)
#255 := (iff #201 #254)
#252 := (iff #198 #251)
#249 := (= #195 #248)
#246 := (= #192 #245)
#243 := (= #189 #242)
#227 := (iff #144 #226)
#224 := (iff #141 #223)
#225 := [rewrite]: #224
#214 := (iff #134 #221)
#215 := [rewrite]: #214
#228 := [monotonicity #215 #225]: #227
#244 := [monotonicity #228]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [monotonicity #250]: #252
#256 := [quant-intro #253]: #255
#212 := (~ #201 #201)
#211 := (~ #198 #198)
#208 := [refl]: #211
#213 := [nnf-pos #208]: #212
#34 := (- #20)
#33 := (- #18)
#43 := (mod #33 #34)
#44 := (- #43)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#45 := (ite #31 #42 #44)
#46 := (ite #23 0::Int #45)
#47 := (ite #24 #18 #46)
#48 := (= #41 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#204 := (iff #49 #201)
#99 := (and #27 #29)
#102 := (or #28 #99)
#174 := (ite #102 #42 #169)
#177 := (ite #23 0::Int #174)
#180 := (ite #24 #18 #177)
#183 := (= #41 #180)
#186 := (forall (vars (?v0 Int) (?v1 Int)) #183)
#202 := (iff #186 #201)
#199 := (iff #183 #198)
#196 := (= #180 #195)
#193 := (= #177 #192)
#190 := (= #174 #189)
#145 := (iff #102 #144)
#142 := (iff #99 #141)
#139 := (iff #29 #138)
#140 := [rewrite]: #139
#132 := (iff #27 #131)
#133 := [rewrite]: #132
#143 := [monotonicity #133 #140]: #142
#135 := (iff #28 #134)
#128 := (iff #26 #127)
#129 := [rewrite]: #128
#136 := [monotonicity #129 #133]: #135
#146 := [monotonicity #136 #143]: #145
#191 := [monotonicity #146]: #190
#194 := [monotonicity #191]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [quant-intro #200]: #202
#187 := (iff #49 #186)
#184 := (iff #48 #183)
#181 := (= #47 #180)
#178 := (= #46 #177)
#175 := (= #45 #174)
#172 := (= #44 #169)
#166 := (- #163)
#170 := (= #166 #169)
#171 := [rewrite]: #170
#167 := (= #44 #166)
#164 := (= #43 #163)
#109 := (= #34 #108)
#110 := [rewrite]: #109
#106 := (= #33 #105)
#107 := [rewrite]: #106
#165 := [monotonicity #107 #110]: #164
#168 := [monotonicity #165]: #167
#173 := [trans #168 #171]: #172
#103 := (iff #31 #102)
#100 := (iff #30 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#176 := [monotonicity #104 #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [quant-intro #185]: #187
#205 := [trans #188 #203]: #204
#162 := [asserted]: #49
#206 := [mp #162 #205]: #201
#209 := [mp~ #206 #213]: #201
#257 := [mp #209 #256]: #254
#288 := [mp #257 #287]: #285
#772 := [mp #288 #771]: #767
#14 := 2::Int
#12 := 3::Int
#73 := (f4 f5 -1::Int)
#76 := (f3 #73 3::Int)
#79 := (= #76 2::Int)
#92 := (not #79)
#9 := 1::Int
#10 := (- 1::Int)
#11 := (f4 f5 #10)
#13 := (f3 #11 3::Int)
#15 := (= #13 2::Int)
#16 := (not #15)
#95 := (iff #16 #92)
#82 := (= 2::Int #76)
#87 := (not #82)
#93 := (iff #87 #92)
#90 := (iff #82 #79)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#88 := (iff #16 #87)
#85 := (iff #15 #82)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #15 #79)
#77 := (= #13 #76)
#74 := (= #11 #73)
#71 := (= #10 -1::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [monotonicity #86]: #88
#96 := [trans #89 #94]: #95
#69 := [asserted]: #16
#97 := [mp #69 #96]: #92
#680 := (not #767)
#664 := (or #680 #79)
#346 := (* -1::Int 3::Int)
#430 := (* -1::Int -1::Int)
#431 := (mod #430 #346)
#432 := (+ #76 #431)
#423 := (= #432 0::Int)
#434 := (mod -1::Int 3::Int)
#435 := (* -1::Int #434)
#436 := (+ #76 #435)
#433 := (= #436 0::Int)
#437 := (>= -1::Int 0::Int)
#416 := (<= 3::Int 0::Int)
#751 := (or #416 #437)
#753 := (not #751)
#410 := (<= -1::Int 0::Int)
#540 := (or #410 #416)
#747 := (not #540)
#421 := (or #747 #753)
#422 := (ite #421 #433 #423)
#754 := (= #76 0::Int)
#755 := (= -1::Int 0::Int)
#756 := (ite #755 #754 #422)
#757 := (= -1::Int #76)
#752 := (= 3::Int 0::Int)
#758 := (ite #752 #757 #756)
#665 := (or #680 #758)
#668 := (iff #665 #664)
#670 := (iff #664 #664)
#666 := [rewrite]: #670
#679 := (iff #758 #79)
#749 := (= #76 -1::Int)
#682 := (ite false #749 #79)
#677 := (iff #682 #79)
#678 := [rewrite]: #677
#687 := (iff #758 #682)
#685 := (iff #756 #79)
#683 := (ite false #754 #79)
#674 := (iff #683 #79)
#684 := [rewrite]: #674
#675 := (iff #756 #683)
#694 := (iff #422 #79)
#1 := true
#598 := (ite true #79 #749)
#693 := (iff #598 #79)
#690 := [rewrite]: #693
#599 := (iff #422 #598)
#596 := (iff #423 #749)
#691 := (+ 1::Int #76)
#577 := (= #691 0::Int)
#595 := (iff #577 #749)
#588 := [rewrite]: #595
#592 := (iff #423 #577)
#689 := (= #432 #691)
#583 := (+ #76 1::Int)
#593 := (= #583 #691)
#688 := [rewrite]: #593
#584 := (= #432 #583)
#700 := (= #431 1::Int)
#539 := -3::Int
#695 := (mod 1::Int -3::Int)
#699 := (= #695 1::Int)
#697 := [rewrite]: #699
#696 := (= #431 #695)
#541 := (= #346 -3::Int)
#542 := [rewrite]: #541
#703 := (= #430 1::Int)
#710 := [rewrite]: #703
#698 := [monotonicity #710 #542]: #696
#582 := [trans #698 #697]: #700
#543 := [monotonicity #582]: #584
#692 := [trans #543 #688]: #689
#594 := [monotonicity #692]: #592
#597 := [trans #594 #588]: #596
#708 := (iff #433 #79)
#714 := -2::Int
#719 := (+ -2::Int #76)
#705 := (= #719 0::Int)
#701 := (iff #705 #79)
#702 := [rewrite]: #701
#706 := (iff #433 #705)
#562 := (= #436 #719)
#717 := (+ #76 -2::Int)
#560 := (= #717 #719)
#561 := [rewrite]: #560
#718 := (= #436 #717)
#711 := (= #435 -2::Int)
#724 := (* -1::Int 2::Int)
#715 := (= #724 -2::Int)
#716 := [rewrite]: #715
#721 := (= #435 #724)
#438 := (= #434 2::Int)
#720 := [rewrite]: #438
#725 := [monotonicity #720]: #721
#712 := [trans #725 #716]: #711
#713 := [monotonicity #712]: #718
#704 := [trans #713 #561]: #562
#707 := [monotonicity #704]: #706
#709 := [trans #707 #702]: #708
#722 := (iff #421 true)
#731 := (or false true)
#443 := (iff #731 true)
#444 := [rewrite]: #443
#441 := (iff #421 #731)
#730 := (iff #753 true)
#728 := (not false)
#452 := (iff #728 true)
#726 := [rewrite]: #452
#729 := (iff #753 #728)
#458 := (iff #751 false)
#732 := (or false false)
#456 := (iff #732 false)
#457 := [rewrite]: #456
#733 := (iff #751 #732)
#743 := (iff #437 false)
#746 := [rewrite]: #743
#398 := (iff #416 false)
#399 := [rewrite]: #398
#455 := [monotonicity #399 #746]: #733
#352 := [trans #455 #457]: #458
#451 := [monotonicity #352]: #729
#727 := [trans #451 #726]: #730
#385 := (iff #747 false)
#741 := (not true)
#744 := (iff #741 false)
#384 := [rewrite]: #744
#379 := (iff #747 #741)
#740 := (iff #540 true)
#400 := (or true false)
#738 := (iff #400 true)
#739 := [rewrite]: #738
#736 := (iff #540 #400)
#734 := (iff #410 true)
#397 := [rewrite]: #734
#737 := [monotonicity #397 #399]: #736
#735 := [trans #737 #739]: #740
#742 := [monotonicity #735]: #379
#745 := [trans #742 #384]: #385
#442 := [monotonicity #745 #727]: #441
#723 := [trans #442 #444]: #722
#600 := [monotonicity #723 #709 #597]: #599
#681 := [trans #600 #690]: #694
#750 := (iff #755 false)
#393 := [rewrite]: #750
#672 := [monotonicity #393 #681]: #675
#686 := [trans #672 #684]: #685
#413 := (iff #757 #749)
#409 := [rewrite]: #413
#748 := (iff #752 false)
#408 := [rewrite]: #748
#676 := [monotonicity #408 #409 #686]: #687
#673 := [trans #676 #678]: #679
#669 := [monotonicity #673]: #668
#671 := [trans #669 #666]: #668
#667 := [quant-inst #70 #12]: #665
#657 := [mp #667 #671]: #664
[unit-resolution #657 #97 #772]: false
unsat
1b6da3cc7294aa933e099fc6231e1c711dbb5442 347 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#781 := (pattern #39)
#13 := 0::Int
#112 := -1::Int
#116 := (* -1::Int #19)
#113 := (* -1::Int #17)
#177 := (mod #113 #116)
#292 := (+ #39 #177)
#293 := (= #292 0::Int)
#40 := (mod #17 #19)
#289 := (* -1::Int #40)
#290 := (+ #39 #289)
#291 := (= #290 0::Int)
#151 := (>= #17 0::Int)
#144 := (<= #19 0::Int)
#236 := (or #144 #151)
#237 := (not #236)
#140 := (<= #17 0::Int)
#234 := (or #140 #144)
#235 := (not #234)
#240 := (or #235 #237)
#294 := (ite #240 #291 #293)
#288 := (= #39 0::Int)
#21 := (= #17 0::Int)
#295 := (ite #21 #288 #294)
#287 := (= #17 #39)
#22 := (= #19 0::Int)
#296 := (ite #22 #287 #295)
#782 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #781) #296)
#299 := (forall (vars (?v0 Int) (?v1 Int)) #296)
#785 := (iff #299 #782)
#783 := (iff #296 #296)
#784 := [refl]: #783
#786 := [quant-intro #784]: #785
#183 := (* -1::Int #177)
#256 := (ite #240 #40 #183)
#259 := (ite #21 0::Int #256)
#262 := (ite #22 #17 #259)
#265 := (= #39 #262)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#300 := (iff #268 #299)
#297 := (iff #265 #296)
#298 := [rewrite]: #297
#301 := [quant-intro #298]: #300
#152 := (not #151)
#145 := (not #144)
#155 := (and #145 #152)
#141 := (not #140)
#148 := (and #141 #145)
#158 := (or #148 #155)
#203 := (ite #158 #40 #183)
#206 := (ite #21 0::Int #203)
#209 := (ite #22 #17 #206)
#212 := (= #39 #209)
#215 := (forall (vars (?v0 Int) (?v1 Int)) #212)
#269 := (iff #215 #268)
#266 := (iff #212 #265)
#263 := (= #209 #262)
#260 := (= #206 #259)
#257 := (= #203 #256)
#241 := (iff #158 #240)
#238 := (iff #155 #237)
#239 := [rewrite]: #238
#228 := (iff #148 #235)
#229 := [rewrite]: #228
#242 := [monotonicity #229 #239]: #241
#258 := [monotonicity #242]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [monotonicity #264]: #266
#270 := [quant-intro #267]: #269
#226 := (~ #215 #215)
#225 := (~ #212 #212)
#222 := [refl]: #225
#227 := [nnf-pos #222]: #226
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#218 := (iff #47 #215)
#106 := (and #25 #27)
#109 := (or #26 #106)
#188 := (ite #109 #40 #183)
#97 := (= 0::Int #17)
#191 := (ite #97 0::Int #188)
#100 := (= 0::Int #19)
#194 := (ite #100 #17 #191)
#197 := (= #39 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#216 := (iff #200 #215)
#213 := (iff #197 #212)
#210 := (= #194 #209)
#207 := (= #191 #206)
#204 := (= #188 #203)
#159 := (iff #109 #158)
#156 := (iff #106 #155)
#153 := (iff #27 #152)
#154 := [rewrite]: #153
#146 := (iff #25 #145)
#147 := [rewrite]: #146
#157 := [monotonicity #147 #154]: #156
#149 := (iff #26 #148)
#142 := (iff #24 #141)
#143 := [rewrite]: #142
#150 := [monotonicity #143 #147]: #149
#160 := [monotonicity #150 #157]: #159
#205 := [monotonicity #160]: #204
#134 := (iff #97 #21)
#135 := [rewrite]: #134
#208 := [monotonicity #135 #205]: #207
#136 := (iff #100 #22)
#137 := [rewrite]: #136
#211 := [monotonicity #137 #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#201 := (iff #47 #200)
#198 := (iff #46 #197)
#195 := (= #45 #194)
#192 := (= #44 #191)
#189 := (= #43 #188)
#186 := (= #42 #183)
#180 := (- #177)
#184 := (= #180 #183)
#185 := [rewrite]: #184
#181 := (= #42 #180)
#178 := (= #41 #177)
#117 := (= #32 #116)
#118 := [rewrite]: #117
#114 := (= #31 #113)
#115 := [rewrite]: #114
#179 := [monotonicity #115 #118]: #178
#182 := [monotonicity #179]: #181
#187 := [trans #182 #185]: #186
#110 := (iff #29 #109)
#107 := (iff #28 #106)
#108 := [rewrite]: #107
#111 := [monotonicity #108]: #110
#190 := [monotonicity #111 #187]: #189
#98 := (iff #21 #97)
#99 := [rewrite]: #98
#193 := [monotonicity #99 #190]: #192
#101 := (iff #22 #100)
#102 := [rewrite]: #101
#196 := [monotonicity #102 #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#219 := [trans #202 #217]: #218
#176 := [asserted]: #47
#220 := [mp #176 #219]: #215
#223 := [mp~ #220 #227]: #215
#271 := [mp #223 #270]: #268
#302 := [mp #271 #301]: #299
#787 := [mp #302 #786]: #782
#9 := 3::Int
#68 := -3::Int
#71 := (f4 f5 -3::Int)
#74 := (f3 #71 3::Int)
#77 := (= #74 0::Int)
#90 := (not #77)
#10 := (- 3::Int)
#11 := (f4 f5 #10)
#12 := (f3 #11 3::Int)
#14 := (= #12 0::Int)
#15 := (not #14)
#93 := (iff #15 #90)
#80 := (= 0::Int #74)
#85 := (not #80)
#91 := (iff #85 #90)
#88 := (iff #80 #77)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#86 := (iff #15 #85)
#83 := (iff #14 #80)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #14 #77)
#75 := (= #12 #74)
#72 := (= #11 #71)
#69 := (= #10 -3::Int)
#70 := [rewrite]: #69
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#84 := [trans #79 #82]: #83
#87 := [monotonicity #84]: #86
#94 := [trans #87 #92]: #93
#67 := [asserted]: #15
#95 := [mp #67 #94]: #90
#615 := (not #782)
#708 := (or #615 #77)
#360 := (* -1::Int 3::Int)
#445 := (* -1::Int -3::Int)
#446 := (mod #445 #360)
#447 := (+ #74 #446)
#438 := (= #447 0::Int)
#449 := (mod -3::Int 3::Int)
#450 := (* -1::Int #449)
#378 := (+ #74 #450)
#451 := (= #378 0::Int)
#448 := (>= -3::Int 0::Int)
#452 := (<= 3::Int 0::Int)
#431 := (or #452 #448)
#766 := (not #431)
#768 := (<= -3::Int 0::Int)
#425 := (or #768 #452)
#555 := (not #425)
#762 := (or #555 #766)
#436 := (ite #762 #451 #438)
#437 := (= -3::Int 0::Int)
#769 := (ite #437 #77 #436)
#770 := (= -3::Int #74)
#771 := (= 3::Int 0::Int)
#772 := (ite #771 #770 #769)
#705 := (or #615 #772)
#696 := (iff #705 #708)
#690 := (iff #708 #708)
#687 := [rewrite]: #690
#613 := (iff #772 #77)
#423 := (= #74 -3::Int)
#609 := (ite false #423 #77)
#611 := (iff #609 #77)
#612 := [rewrite]: #611
#610 := (iff #772 #609)
#592 := (iff #769 #77)
#706 := (ite false #77 #77)
#704 := (iff #706 #77)
#707 := [rewrite]: #704
#608 := (iff #769 #706)
#599 := (iff #436 #77)
#1 := true
#714 := (ite true #77 #77)
#597 := (iff #714 #77)
#598 := [rewrite]: #597
#712 := (iff #436 #714)
#711 := (iff #438 #77)
#557 := (= #447 #74)
#731 := (+ #74 0::Int)
#732 := (= #731 #74)
#733 := [rewrite]: #732
#554 := (= #447 #731)
#718 := (= #446 0::Int)
#722 := (mod 3::Int -3::Int)
#723 := (= #722 0::Int)
#724 := [rewrite]: #723
#716 := (= #446 #722)
#720 := (= #360 -3::Int)
#721 := [rewrite]: #720
#577 := (= #445 3::Int)
#719 := [rewrite]: #577
#717 := [monotonicity #719 #721]: #716
#725 := [trans #717 #724]: #718
#556 := [monotonicity #725]: #554
#710 := [trans #556 #733]: #557
#713 := [monotonicity #710]: #711
#575 := (iff #451 #77)
#728 := (= #378 #74)
#726 := (= #378 #731)
#729 := (= #450 0::Int)
#453 := (* -1::Int 0::Int)
#736 := (= #453 0::Int)
#740 := [rewrite]: #736
#735 := (= #450 #453)
#737 := (= #449 0::Int)
#738 := [rewrite]: #737
#739 := [monotonicity #738]: #735
#730 := [trans #739 #740]: #729
#727 := [monotonicity #730]: #726
#734 := [trans #727 #733]: #728
#576 := [monotonicity #734]: #575
#458 := (iff #762 true)
#745 := (or false true)
#456 := (iff #745 true)
#457 := [rewrite]: #456
#742 := (iff #762 #745)
#467 := (iff #766 true)
#473 := (not false)
#744 := (iff #473 true)
#466 := [rewrite]: #744
#366 := (iff #766 #473)
#471 := (iff #431 false)
#758 := (or false false)
#748 := (iff #758 false)
#470 := [rewrite]: #748
#761 := (iff #431 #758)
#400 := (iff #448 false)
#760 := [rewrite]: #400
#749 := (iff #452 false)
#412 := [rewrite]: #749
#747 := [monotonicity #412 #760]: #761
#472 := [trans #747 #470]: #471
#743 := [monotonicity #472]: #366
#741 := [trans #743 #466]: #467
#759 := (iff #555 false)
#755 := (not true)
#394 := (iff #755 false)
#757 := [rewrite]: #394
#750 := (iff #555 #755)
#753 := (iff #425 true)
#413 := (or true false)
#751 := (iff #413 true)
#752 := [rewrite]: #751
#414 := (iff #425 #413)
#765 := (iff #768 true)
#408 := [rewrite]: #765
#415 := [monotonicity #408 #412]: #414
#754 := [trans #415 #752]: #753
#756 := [monotonicity #754]: #750
#399 := [trans #756 #757]: #759
#746 := [monotonicity #399 #741]: #742
#459 := [trans #746 #457]: #458
#715 := [monotonicity #459 #576 #713]: #712
#558 := [trans #715 #598]: #599
#764 := (iff #437 false)
#424 := [rewrite]: #764
#703 := [monotonicity #424 #558]: #608
#607 := [trans #703 #707]: #592
#763 := (iff #770 #423)
#428 := [rewrite]: #763
#767 := (iff #771 false)
#773 := [rewrite]: #767
#603 := [monotonicity #773 #428 #607]: #610
#614 := [trans #603 #612]: #613
#698 := [monotonicity #614]: #696
#689 := [trans #698 #687]: #696
#709 := [quant-inst #68 #9]: #705
#699 := [mp #709 #689]: #708
[unit-resolution #699 #95 #787]: false
unsat
87d1d567f09067d2cc55adc1f2aa0c235a1e5e4a 359 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#40 := (f4 f5 #18)
#41 := (f3 #40 #20)
#767 := (pattern #41)
#22 := 0::Int
#105 := -1::Int
#109 := (* -1::Int #20)
#106 := (* -1::Int #18)
#164 := (mod #106 #109)
#279 := (+ #41 #164)
#280 := (= #279 0::Int)
#42 := (mod #18 #20)
#276 := (* -1::Int #42)
#277 := (+ #41 #276)
#278 := (= #277 0::Int)
#138 := (>= #18 0::Int)
#131 := (<= #20 0::Int)
#223 := (or #131 #138)
#224 := (not #223)
#127 := (<= #18 0::Int)
#221 := (or #127 #131)
#222 := (not #221)
#227 := (or #222 #224)
#281 := (ite #227 #278 #280)
#275 := (= #41 0::Int)
#23 := (= #18 0::Int)
#282 := (ite #23 #275 #281)
#274 := (= #18 #41)
#24 := (= #20 0::Int)
#283 := (ite #24 #274 #282)
#768 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #767) #283)
#286 := (forall (vars (?v0 Int) (?v1 Int)) #283)
#771 := (iff #286 #768)
#769 := (iff #283 #283)
#770 := [refl]: #769
#772 := [quant-intro #770]: #771
#170 := (* -1::Int #164)
#243 := (ite #227 #42 #170)
#246 := (ite #23 0::Int #243)
#249 := (ite #24 #18 #246)
#252 := (= #41 #249)
#255 := (forall (vars (?v0 Int) (?v1 Int)) #252)
#287 := (iff #255 #286)
#284 := (iff #252 #283)
#285 := [rewrite]: #284
#288 := [quant-intro #285]: #287
#139 := (not #138)
#132 := (not #131)
#142 := (and #132 #139)
#128 := (not #127)
#135 := (and #128 #132)
#145 := (or #135 #142)
#190 := (ite #145 #42 #170)
#193 := (ite #23 0::Int #190)
#196 := (ite #24 #18 #193)
#199 := (= #41 #196)
#202 := (forall (vars (?v0 Int) (?v1 Int)) #199)
#256 := (iff #202 #255)
#253 := (iff #199 #252)
#250 := (= #196 #249)
#247 := (= #193 #246)
#244 := (= #190 #243)
#228 := (iff #145 #227)
#225 := (iff #142 #224)
#226 := [rewrite]: #225
#215 := (iff #135 #222)
#216 := [rewrite]: #215
#229 := [monotonicity #216 #226]: #228
#245 := [monotonicity #229]: #244
#248 := [monotonicity #245]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [quant-intro #254]: #256
#213 := (~ #202 #202)
#212 := (~ #199 #199)
#209 := [refl]: #212
#214 := [nnf-pos #209]: #213
#34 := (- #20)
#33 := (- #18)
#43 := (mod #33 #34)
#44 := (- #43)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#45 := (ite #31 #42 #44)
#46 := (ite #23 0::Int #45)
#47 := (ite #24 #18 #46)
#48 := (= #41 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#205 := (iff #49 #202)
#99 := (and #27 #29)
#102 := (or #28 #99)
#175 := (ite #102 #42 #170)
#178 := (ite #23 0::Int #175)
#181 := (ite #24 #18 #178)
#184 := (= #41 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#203 := (iff #187 #202)
#200 := (iff #184 #199)
#197 := (= #181 #196)
#194 := (= #178 #193)
#191 := (= #175 #190)
#146 := (iff #102 #145)
#143 := (iff #99 #142)
#140 := (iff #29 #139)
#141 := [rewrite]: #140
#133 := (iff #27 #132)
#134 := [rewrite]: #133
#144 := [monotonicity #134 #141]: #143
#136 := (iff #28 #135)
#129 := (iff #26 #128)
#130 := [rewrite]: #129
#137 := [monotonicity #130 #134]: #136
#147 := [monotonicity #137 #144]: #146
#192 := [monotonicity #147]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [quant-intro #201]: #203
#188 := (iff #49 #187)
#185 := (iff #48 #184)
#182 := (= #47 #181)
#179 := (= #46 #178)
#176 := (= #45 #175)
#173 := (= #44 #170)
#167 := (- #164)
#171 := (= #167 #170)
#172 := [rewrite]: #171
#168 := (= #44 #167)
#165 := (= #43 #164)
#110 := (= #34 #109)
#111 := [rewrite]: #110
#107 := (= #33 #106)
#108 := [rewrite]: #107
#166 := [monotonicity #108 #111]: #165
#169 := [monotonicity #166]: #168
#174 := [trans #169 #172]: #173
#103 := (iff #31 #102)
#100 := (iff #30 #99)
#101 := [rewrite]: #100
#104 := [monotonicity #101]: #103
#177 := [monotonicity #104 #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#206 := [trans #189 #204]: #205
#163 := [asserted]: #49
#207 := [mp #163 #206]: #202
#210 := [mp~ #207 #214]: #202
#258 := [mp #210 #257]: #255
#289 := [mp #258 #288]: #286
#773 := [mp #289 #772]: #768
#14 := 1::Int
#12 := 3::Int
#70 := -5::Int
#73 := (f4 f5 -5::Int)
#76 := (f3 #73 3::Int)
#79 := (= #76 1::Int)
#92 := (not #79)
#9 := 5::Int
#10 := (- 5::Int)
#11 := (f4 f5 #10)
#13 := (f3 #11 3::Int)
#15 := (= #13 1::Int)
#16 := (not #15)
#95 := (iff #16 #92)
#82 := (= 1::Int #76)
#87 := (not #82)
#93 := (iff #87 #92)
#90 := (iff #82 #79)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#88 := (iff #16 #87)
#85 := (iff #15 #82)
#83 := (iff #79 #82)
#84 := [rewrite]: #83
#80 := (iff #15 #79)
#77 := (= #13 #76)
#74 := (= #11 #73)
#71 := (= #10 -5::Int)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#86 := [trans #81 #84]: #85
#89 := [monotonicity #86]: #88
#96 := [trans #89 #94]: #95
#69 := [asserted]: #16
#97 := [mp #69 #96]: #92
#666 := (not #768)
#668 := (or #666 #79)
#347 := (* -1::Int 3::Int)
#431 := (* -1::Int -5::Int)
#432 := (mod #431 #347)
#433 := (+ #76 #432)
#424 := (= #433 0::Int)
#435 := (mod -5::Int 3::Int)
#436 := (* -1::Int #435)
#437 := (+ #76 #436)
#434 := (= #437 0::Int)
#438 := (>= -5::Int 0::Int)
#417 := (<= 3::Int 0::Int)
#752 := (or #417 #438)
#754 := (not #752)
#411 := (<= -5::Int 0::Int)
#541 := (or #411 #417)
#748 := (not #541)
#422 := (or #748 #754)
#423 := (ite #422 #434 #424)
#755 := (= #76 0::Int)
#756 := (= -5::Int 0::Int)
#757 := (ite #756 #755 #423)
#758 := (= -5::Int #76)
#753 := (= 3::Int 0::Int)
#759 := (ite #753 #758 #757)
#669 := (or #666 #759)
#671 := (iff #669 #668)
#672 := (iff #668 #668)
#658 := [rewrite]: #672
#681 := (iff #759 #79)
#750 := (= #76 -5::Int)
#677 := (ite false #750 #79)
#680 := (iff #677 #79)
#674 := [rewrite]: #680
#678 := (iff #759 #677)
#683 := (iff #757 #79)
#673 := (ite false #755 #79)
#686 := (iff #673 #79)
#687 := [rewrite]: #686
#675 := (iff #757 #673)
#684 := (iff #423 #79)
#596 := -2::Int
#589 := (= #76 -2::Int)
#1 := true
#601 := (ite true #79 #589)
#695 := (iff #601 #79)
#682 := [rewrite]: #695
#694 := (iff #423 #601)
#599 := (iff #424 #589)
#699 := 2::Int
#692 := (+ 2::Int #76)
#578 := (= #692 0::Int)
#597 := (iff #578 #589)
#598 := [rewrite]: #597
#593 := (iff #424 #578)
#690 := (= #433 #692)
#584 := (+ #76 2::Int)
#594 := (= #584 #692)
#689 := [rewrite]: #594
#585 := (= #433 #584)
#701 := (= #432 2::Int)
#711 := -3::Int
#543 := (mod 5::Int -3::Int)
#700 := (= #543 2::Int)
#698 := [rewrite]: #700
#696 := (= #432 #543)
#540 := (= #347 -3::Int)
#542 := [rewrite]: #540
#710 := (= #431 5::Int)
#704 := [rewrite]: #710
#697 := [monotonicity #704 #542]: #696
#583 := [trans #697 #698]: #701
#544 := [monotonicity #583]: #585
#693 := [trans #544 #689]: #690
#595 := [monotonicity #693]: #593
#600 := [trans #595 #598]: #599
#703 := (iff #434 #79)
#714 := (+ -1::Int #76)
#705 := (= #714 0::Int)
#708 := (iff #705 #79)
#702 := [rewrite]: #708
#706 := (iff #434 #705)
#562 := (= #437 #714)
#713 := (+ #76 -1::Int)
#720 := (= #713 #714)
#561 := [rewrite]: #720
#718 := (= #437 #713)
#717 := (= #436 -1::Int)
#725 := (* -1::Int 1::Int)
#715 := (= #725 -1::Int)
#716 := [rewrite]: #715
#722 := (= #436 #725)
#439 := (= #435 1::Int)
#721 := [rewrite]: #439
#726 := [monotonicity #721]: #722
#712 := [trans #726 #716]: #717
#719 := [monotonicity #712]: #718
#563 := [trans #719 #561]: #562
#707 := [monotonicity #563]: #706
#709 := [trans #707 #702]: #703
#723 := (iff #422 true)
#732 := (or false true)
#444 := (iff #732 true)
#445 := [rewrite]: #444
#442 := (iff #422 #732)
#731 := (iff #754 true)
#729 := (not false)
#453 := (iff #729 true)
#727 := [rewrite]: #453
#730 := (iff #754 #729)
#459 := (iff #752 false)
#733 := (or false false)
#457 := (iff #733 false)
#458 := [rewrite]: #457
#734 := (iff #752 #733)
#744 := (iff #438 false)
#747 := [rewrite]: #744
#399 := (iff #417 false)
#400 := [rewrite]: #399
#456 := [monotonicity #400 #747]: #734
#353 := [trans #456 #458]: #459
#452 := [monotonicity #353]: #730
#728 := [trans #452 #727]: #731
#386 := (iff #748 false)
#742 := (not true)
#745 := (iff #742 false)
#385 := [rewrite]: #745
#380 := (iff #748 #742)
#741 := (iff #541 true)
#401 := (or true false)
#739 := (iff #401 true)
#740 := [rewrite]: #739
#737 := (iff #541 #401)
#735 := (iff #411 true)
#398 := [rewrite]: #735
#738 := [monotonicity #398 #400]: #737
#736 := [trans #738 #740]: #741
#743 := [monotonicity #736]: #380
#746 := [trans #743 #385]: #386
#443 := [monotonicity #746 #728]: #442
#724 := [trans #443 #445]: #723
#691 := [monotonicity #724 #709 #600]: #694
#676 := [trans #691 #682]: #684
#751 := (iff #756 false)
#394 := [rewrite]: #751
#685 := [monotonicity #394 #676]: #675
#688 := [trans #685 #687]: #683
#414 := (iff #758 #750)
#410 := [rewrite]: #414
#749 := (iff #753 false)
#409 := [rewrite]: #749
#679 := [monotonicity #409 #410 #688]: #678
#665 := [trans #679 #674]: #681
#667 := [monotonicity #665]: #671
#659 := [trans #667 #658]: #671
#670 := [quant-inst #70 #12]: #669
#661 := [mp #670 #659]: #668
[unit-resolution #661 #97 #773]: false
unsat
a9cfdba4600f8dcec381f4d9749257e8345a31c8 353 0
#2 := false
decl f3 :: (-> S2 Int Int)
#20 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#18 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#40 := (f4 f5 #18)
#41 := (f3 #40 #20)
#769 := (pattern #41)
#22 := 0::Int
#70 := -1::Int
#111 := (* -1::Int #20)
#108 := (* -1::Int #18)
#166 := (mod #108 #111)
#281 := (+ #41 #166)
#282 := (= #281 0::Int)
#42 := (mod #18 #20)
#278 := (* -1::Int #42)
#279 := (+ #41 #278)
#280 := (= #279 0::Int)
#140 := (>= #18 0::Int)
#133 := (<= #20 0::Int)
#225 := (or #133 #140)
#226 := (not #225)
#129 := (<= #18 0::Int)
#223 := (or #129 #133)
#224 := (not #223)
#229 := (or #224 #226)
#283 := (ite #229 #280 #282)
#277 := (= #41 0::Int)
#23 := (= #18 0::Int)
#284 := (ite #23 #277 #283)
#276 := (= #18 #41)
#24 := (= #20 0::Int)
#285 := (ite #24 #276 #284)
#770 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #769) #285)
#288 := (forall (vars (?v0 Int) (?v1 Int)) #285)
#773 := (iff #288 #770)
#771 := (iff #285 #285)
#772 := [refl]: #771
#774 := [quant-intro #772]: #773
#172 := (* -1::Int #166)
#245 := (ite #229 #42 #172)
#248 := (ite #23 0::Int #245)
#251 := (ite #24 #18 #248)
#254 := (= #41 #251)
#257 := (forall (vars (?v0 Int) (?v1 Int)) #254)
#289 := (iff #257 #288)
#286 := (iff #254 #285)
#287 := [rewrite]: #286
#290 := [quant-intro #287]: #289
#141 := (not #140)
#134 := (not #133)
#144 := (and #134 #141)
#130 := (not #129)
#137 := (and #130 #134)
#147 := (or #137 #144)
#192 := (ite #147 #42 #172)
#195 := (ite #23 0::Int #192)
#198 := (ite #24 #18 #195)
#201 := (= #41 #198)
#204 := (forall (vars (?v0 Int) (?v1 Int)) #201)
#258 := (iff #204 #257)
#255 := (iff #201 #254)
#252 := (= #198 #251)
#249 := (= #195 #248)
#246 := (= #192 #245)
#230 := (iff #147 #229)
#227 := (iff #144 #226)
#228 := [rewrite]: #227
#217 := (iff #137 #224)
#218 := [rewrite]: #217
#231 := [monotonicity #218 #228]: #230
#247 := [monotonicity #231]: #246
#250 := [monotonicity #247]: #249
#253 := [monotonicity #250]: #252
#256 := [monotonicity #253]: #255
#259 := [quant-intro #256]: #258
#215 := (~ #204 #204)
#214 := (~ #201 #201)
#211 := [refl]: #214
#216 := [nnf-pos #211]: #215
#34 := (- #20)
#33 := (- #18)
#43 := (mod #33 #34)
#44 := (- #43)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#45 := (ite #31 #42 #44)
#46 := (ite #23 0::Int #45)
#47 := (ite #24 #18 #46)
#48 := (= #41 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#207 := (iff #49 #204)
#102 := (and #27 #29)
#105 := (or #28 #102)
#177 := (ite #105 #42 #172)
#180 := (ite #23 0::Int #177)
#183 := (ite #24 #18 #180)
#186 := (= #41 #183)
#189 := (forall (vars (?v0 Int) (?v1 Int)) #186)
#205 := (iff #189 #204)
#202 := (iff #186 #201)
#199 := (= #183 #198)
#196 := (= #180 #195)
#193 := (= #177 #192)
#148 := (iff #105 #147)
#145 := (iff #102 #144)
#142 := (iff #29 #141)
#143 := [rewrite]: #142
#135 := (iff #27 #134)
#136 := [rewrite]: #135
#146 := [monotonicity #136 #143]: #145
#138 := (iff #28 #137)
#131 := (iff #26 #130)
#132 := [rewrite]: #131
#139 := [monotonicity #132 #136]: #138
#149 := [monotonicity #139 #146]: #148
#194 := [monotonicity #149]: #193
#197 := [monotonicity #194]: #196
#200 := [monotonicity #197]: #199
#203 := [monotonicity #200]: #202
#206 := [quant-intro #203]: #205
#190 := (iff #49 #189)
#187 := (iff #48 #186)
#184 := (= #47 #183)
#181 := (= #46 #180)
#178 := (= #45 #177)
#175 := (= #44 #172)
#169 := (- #166)
#173 := (= #169 #172)
#174 := [rewrite]: #173
#170 := (= #44 #169)
#167 := (= #43 #166)
#112 := (= #34 #111)
#113 := [rewrite]: #112
#109 := (= #33 #108)
#110 := [rewrite]: #109
#168 := [monotonicity #110 #113]: #167
#171 := [monotonicity #168]: #170
#176 := [trans #171 #174]: #175
#106 := (iff #31 #105)
#103 := (iff #30 #102)
#104 := [rewrite]: #103
#107 := [monotonicity #104]: #106
#179 := [monotonicity #107 #176]: #178
#182 := [monotonicity #179]: #181
#185 := [monotonicity #182]: #184
#188 := [monotonicity #185]: #187
#191 := [quant-intro #188]: #190
#208 := [trans #191 #206]: #207
#165 := [asserted]: #49
#209 := [mp #165 #208]: #204
#212 := [mp~ #209 #216]: #204
#260 := [mp #212 #259]: #257
#291 := [mp #260 #290]: #288
#775 := [mp #291 #774]: #770
#76 := -3::Int
#73 := (f4 f5 -1::Int)
#79 := (f3 #73 -3::Int)
#82 := (= #79 -1::Int)
#95 := (not #82)
#9 := 1::Int
#10 := (- 1::Int)
#12 := 3::Int
#13 := (- 3::Int)
#11 := (f4 f5 #10)
#14 := (f3 #11 #13)
#15 := (= #14 #10)
#16 := (not #15)
#98 := (iff #16 #95)
#85 := (= -1::Int #79)
#90 := (not #85)
#96 := (iff #90 #95)
#93 := (iff #85 #82)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#91 := (iff #16 #90)
#88 := (iff #15 #85)
#86 := (iff #82 #85)
#87 := [rewrite]: #86
#83 := (iff #15 #82)
#71 := (= #10 -1::Int)
#72 := [rewrite]: #71
#80 := (= #14 #79)
#77 := (= #13 -3::Int)
#78 := [rewrite]: #77
#74 := (= #11 #73)
#75 := [monotonicity #72]: #74
#81 := [monotonicity #75 #78]: #80
#84 := [monotonicity #81 #72]: #83
#89 := [trans #84 #87]: #88
#92 := [monotonicity #89]: #91
#99 := [trans #92 #97]: #98
#69 := [asserted]: #16
#100 := [mp #69 #99]: #95
#690 := (not #770)
#679 := (or #690 #82)
#349 := (* -1::Int -3::Int)
#433 := (* -1::Int -1::Int)
#434 := (mod #433 #349)
#435 := (+ #79 #434)
#426 := (= #435 0::Int)
#437 := (mod -1::Int -3::Int)
#438 := (* -1::Int #437)
#439 := (+ #79 #438)
#436 := (= #439 0::Int)
#440 := (>= -1::Int 0::Int)
#419 := (<= -3::Int 0::Int)
#754 := (or #419 #440)
#756 := (not #754)
#413 := (<= -1::Int 0::Int)
#543 := (or #413 #419)
#750 := (not #543)
#424 := (or #750 #756)
#425 := (ite #424 #436 #426)
#757 := (= #79 0::Int)
#758 := (= -1::Int 0::Int)
#759 := (ite #758 #757 #425)
#760 := (= -3::Int 0::Int)
#755 := (ite #760 #85 #759)
#680 := (or #690 #755)
#682 := (iff #680 #679)
#683 := (iff #679 #679)
#667 := [rewrite]: #683
#689 := (iff #755 #82)
#678 := (ite false #82 #82)
#687 := (iff #678 #82)
#688 := [rewrite]: #687
#675 := (iff #755 #678)
#684 := (iff #759 #82)
#602 := (ite false #757 #82)
#693 := (iff #602 #82)
#697 := [rewrite]: #693
#603 := (iff #759 #602)
#600 := (iff #425 #82)
#734 := 2::Int
#564 := (= #79 2::Int)
#595 := (ite false #564 #82)
#591 := (iff #595 #82)
#599 := [rewrite]: #591
#597 := (iff #425 #595)
#695 := (iff #426 #82)
#700 := (+ 1::Int #79)
#546 := (= #700 0::Int)
#691 := (iff #546 #82)
#692 := [rewrite]: #691
#694 := (iff #426 #546)
#586 := (= #435 #700)
#699 := (+ #79 1::Int)
#703 := (= #699 #700)
#585 := [rewrite]: #703
#701 := (= #435 #699)
#545 := (= #434 1::Int)
#712 := (mod 1::Int 3::Int)
#542 := (= #712 1::Int)
#544 := [rewrite]: #542
#706 := (= #434 #712)
#705 := (= #349 3::Int)
#711 := [rewrite]: #705
#710 := (= #433 1::Int)
#704 := [rewrite]: #710
#713 := [monotonicity #704 #711]: #706
#698 := [trans #713 #544]: #545
#702 := [monotonicity #698]: #701
#587 := [trans #702 #585]: #586
#596 := [monotonicity #587]: #694
#580 := [trans #596 #692]: #695
#708 := (iff #436 #564)
#726 := -2::Int
#719 := (+ -2::Int #79)
#716 := (= #719 0::Int)
#565 := (iff #716 #564)
#707 := [rewrite]: #565
#722 := (iff #436 #716)
#720 := (= #439 #719)
#728 := (+ #79 -2::Int)
#714 := (= #728 #719)
#715 := [rewrite]: #714
#717 := (= #439 #728)
#727 := (= #438 -2::Int)
#446 := (* -1::Int 2::Int)
#441 := (= #446 -2::Int)
#723 := [rewrite]: #441
#447 := (= #438 #446)
#444 := (= #437 2::Int)
#445 := [rewrite]: #444
#725 := [monotonicity #445]: #447
#724 := [trans #725 #723]: #727
#718 := [monotonicity #724]: #717
#721 := [trans #718 #715]: #720
#563 := [monotonicity #721]: #722
#709 := [trans #563 #707]: #708
#733 := (iff #424 false)
#731 := (or false false)
#455 := (iff #731 false)
#729 := [rewrite]: #455
#732 := (iff #424 #731)
#461 := (iff #756 false)
#1 := true
#741 := (not true)
#738 := (iff #741 false)
#744 := [rewrite]: #738
#459 := (iff #756 #741)
#736 := (iff #754 true)
#388 := (or true false)
#749 := (iff #388 true)
#735 := [rewrite]: #749
#748 := (iff #754 #388)
#747 := (iff #440 false)
#387 := [rewrite]: #747
#753 := (iff #419 true)
#396 := [rewrite]: #753
#746 := [monotonicity #396 #387]: #748
#458 := [trans #746 #735]: #736
#460 := [monotonicity #458]: #459
#355 := [trans #460 #744]: #461
#382 := (iff #750 false)
#742 := (iff #750 #741)
#739 := (iff #543 true)
#737 := (or true true)
#402 := (iff #737 true)
#403 := [rewrite]: #402
#400 := (iff #543 #737)
#752 := (iff #413 true)
#412 := [rewrite]: #752
#401 := [monotonicity #412 #396]: #400
#740 := [trans #401 #403]: #739
#743 := [monotonicity #740]: #742
#745 := [trans #743 #744]: #382
#454 := [monotonicity #745 #355]: #732
#730 := [trans #454 #729]: #733
#598 := [monotonicity #730 #709 #580]: #597
#601 := [trans #598 #599]: #600
#411 := (iff #758 false)
#416 := [rewrite]: #411
#696 := [monotonicity #416 #601]: #603
#686 := [trans #696 #697]: #684
#761 := (iff #760 false)
#751 := [rewrite]: #761
#677 := [monotonicity #751 #94 #686]: #675
#685 := [trans #677 #688]: #689
#676 := [monotonicity #685]: #682
#668 := [trans #676 #667]: #682
#681 := [quant-inst #70 #76]: #680
#670 := [mp #681 #668]: #679
[unit-resolution #670 #100 #775]: false
unsat
e557b56f13f4c7ec4bdb16e86d786c044fb1042a 332 0
#2 := false
decl f3 :: (-> S2 Int Int)
#19 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#17 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#38 := (f4 f5 #17)
#39 := (f3 #38 #19)
#781 := (pattern #39)
#13 := 0::Int
#112 := -1::Int
#116 := (* -1::Int #19)
#113 := (* -1::Int #17)
#177 := (mod #113 #116)
#292 := (+ #39 #177)
#293 := (= #292 0::Int)
#40 := (mod #17 #19)
#289 := (* -1::Int #40)
#290 := (+ #39 #289)
#291 := (= #290 0::Int)
#151 := (>= #17 0::Int)
#144 := (<= #19 0::Int)
#236 := (or #144 #151)
#237 := (not #236)
#140 := (<= #17 0::Int)
#234 := (or #140 #144)
#235 := (not #234)
#240 := (or #235 #237)
#294 := (ite #240 #291 #293)
#288 := (= #39 0::Int)
#21 := (= #17 0::Int)
#295 := (ite #21 #288 #294)
#287 := (= #17 #39)
#22 := (= #19 0::Int)
#296 := (ite #22 #287 #295)
#782 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #781) #296)
#299 := (forall (vars (?v0 Int) (?v1 Int)) #296)
#785 := (iff #299 #782)
#783 := (iff #296 #296)
#784 := [refl]: #783
#786 := [quant-intro #784]: #785
#183 := (* -1::Int #177)
#256 := (ite #240 #40 #183)
#259 := (ite #21 0::Int #256)
#262 := (ite #22 #17 #259)
#265 := (= #39 #262)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#300 := (iff #268 #299)
#297 := (iff #265 #296)
#298 := [rewrite]: #297
#301 := [quant-intro #298]: #300
#152 := (not #151)
#145 := (not #144)
#155 := (and #145 #152)
#141 := (not #140)
#148 := (and #141 #145)
#158 := (or #148 #155)
#203 := (ite #158 #40 #183)
#206 := (ite #21 0::Int #203)
#209 := (ite #22 #17 #206)
#212 := (= #39 #209)
#215 := (forall (vars (?v0 Int) (?v1 Int)) #212)
#269 := (iff #215 #268)
#266 := (iff #212 #265)
#263 := (= #209 #262)
#260 := (= #206 #259)
#257 := (= #203 #256)
#241 := (iff #158 #240)
#238 := (iff #155 #237)
#239 := [rewrite]: #238
#228 := (iff #148 #235)
#229 := [rewrite]: #228
#242 := [monotonicity #229 #239]: #241
#258 := [monotonicity #242]: #257
#261 := [monotonicity #258]: #260
#264 := [monotonicity #261]: #263
#267 := [monotonicity #264]: #266
#270 := [quant-intro #267]: #269
#226 := (~ #215 #215)
#225 := (~ #212 #212)
#222 := [refl]: #225
#227 := [nnf-pos #222]: #226
#32 := (- #19)
#31 := (- #17)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #19)
#27 := (< #17 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #17)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #17 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#218 := (iff #47 #215)
#106 := (and #25 #27)
#109 := (or #26 #106)
#188 := (ite #109 #40 #183)
#97 := (= 0::Int #17)
#191 := (ite #97 0::Int #188)
#100 := (= 0::Int #19)
#194 := (ite #100 #17 #191)
#197 := (= #39 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#216 := (iff #200 #215)
#213 := (iff #197 #212)
#210 := (= #194 #209)
#207 := (= #191 #206)
#204 := (= #188 #203)
#159 := (iff #109 #158)
#156 := (iff #106 #155)
#153 := (iff #27 #152)
#154 := [rewrite]: #153
#146 := (iff #25 #145)
#147 := [rewrite]: #146
#157 := [monotonicity #147 #154]: #156
#149 := (iff #26 #148)
#142 := (iff #24 #141)
#143 := [rewrite]: #142
#150 := [monotonicity #143 #147]: #149
#160 := [monotonicity #150 #157]: #159
#205 := [monotonicity #160]: #204
#134 := (iff #97 #21)
#135 := [rewrite]: #134
#208 := [monotonicity #135 #205]: #207
#136 := (iff #100 #22)
#137 := [rewrite]: #136
#211 := [monotonicity #137 #208]: #210
#214 := [monotonicity #211]: #213
#217 := [quant-intro #214]: #216
#201 := (iff #47 #200)
#198 := (iff #46 #197)
#195 := (= #45 #194)
#192 := (= #44 #191)
#189 := (= #43 #188)
#186 := (= #42 #183)
#180 := (- #177)
#184 := (= #180 #183)
#185 := [rewrite]: #184
#181 := (= #42 #180)
#178 := (= #41 #177)
#117 := (= #32 #116)
#118 := [rewrite]: #117
#114 := (= #31 #113)
#115 := [rewrite]: #114
#179 := [monotonicity #115 #118]: #178
#182 := [monotonicity #179]: #181
#187 := [trans #182 #185]: #186
#110 := (iff #29 #109)
#107 := (iff #28 #106)
#108 := [rewrite]: #107
#111 := [monotonicity #108]: #110
#190 := [monotonicity #111 #187]: #189
#98 := (iff #21 #97)
#99 := [rewrite]: #98
#193 := [monotonicity #99 #190]: #192
#101 := (iff #22 #100)
#102 := [rewrite]: #101
#196 := [monotonicity #102 #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#219 := [trans #202 #217]: #218
#176 := [asserted]: #47
#220 := [mp #176 #219]: #215
#223 := [mp~ #220 #227]: #215
#271 := [mp #223 #270]: #268
#302 := [mp #271 #301]: #299
#787 := [mp #302 #786]: #782
#68 := -3::Int
#71 := (f4 f5 -3::Int)
#74 := (f3 #71 -3::Int)
#77 := (= #74 0::Int)
#90 := (not #77)
#9 := 3::Int
#10 := (- 3::Int)
#11 := (f4 f5 #10)
#12 := (f3 #11 #10)
#14 := (= #12 0::Int)
#15 := (not #14)
#93 := (iff #15 #90)
#80 := (= 0::Int #74)
#85 := (not #80)
#91 := (iff #85 #90)
#88 := (iff #80 #77)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#86 := (iff #15 #85)
#83 := (iff #14 #80)
#81 := (iff #77 #80)
#82 := [rewrite]: #81
#78 := (iff #14 #77)
#75 := (= #12 #74)
#69 := (= #10 -3::Int)
#70 := [rewrite]: #69
#72 := (= #11 #71)
#73 := [monotonicity #70]: #72
#76 := [monotonicity #73 #70]: #75
#79 := [monotonicity #76]: #78
#84 := [trans #79 #82]: #83
#87 := [monotonicity #84]: #86
#94 := [trans #87 #92]: #93
#67 := [asserted]: #15
#95 := [mp #67 #94]: #90
#558 := (not #782)
#706 := (or #558 #77)
#360 := (* -1::Int -3::Int)
#445 := (mod #360 #360)
#446 := (+ #74 #445)
#447 := (= #446 0::Int)
#438 := (mod -3::Int -3::Int)
#449 := (* -1::Int #438)
#450 := (+ #74 #449)
#378 := (= #450 0::Int)
#451 := (>= -3::Int 0::Int)
#448 := (<= -3::Int 0::Int)
#452 := (or #448 #451)
#431 := (not #452)
#766 := (or #448 #448)
#768 := (not #766)
#425 := (or #768 #431)
#555 := (ite #425 #378 #447)
#762 := (= -3::Int 0::Int)
#436 := (ite #762 #77 #555)
#437 := (= -3::Int #74)
#769 := (ite #762 #437 #436)
#608 := (or #558 #769)
#704 := (iff #608 #706)
#592 := (iff #706 #706)
#607 := [rewrite]: #592
#598 := (iff #769 #77)
#767 := (= #74 -3::Int)
#713 := (ite false #767 #77)
#715 := (iff #713 #77)
#597 := [rewrite]: #715
#714 := (iff #769 #713)
#710 := (iff #436 #77)
#716 := (ite false #77 #77)
#724 := (iff #716 #77)
#718 := [rewrite]: #724
#556 := (iff #436 #716)
#725 := (iff #555 #77)
#717 := (iff #555 #716)
#721 := (iff #447 #77)
#719 := (= #446 #74)
#459 := (+ #74 0::Int)
#453 := (= #459 #74)
#735 := [rewrite]: #453
#576 := (= #446 #459)
#734 := (= #445 0::Int)
#726 := (mod 3::Int 3::Int)
#733 := (= #726 0::Int)
#728 := [rewrite]: #733
#727 := (= #445 #726)
#730 := (= #360 3::Int)
#731 := [rewrite]: #730
#732 := [monotonicity #731 #731]: #727
#575 := [trans #732 #728]: #734
#577 := [monotonicity #575]: #576
#720 := [trans #577 #735]: #719
#722 := [monotonicity #720]: #721
#740 := (iff #378 #77)
#739 := (= #450 #74)
#737 := (= #450 #459)
#457 := (= #449 0::Int)
#741 := (* -1::Int 0::Int)
#746 := (= #741 0::Int)
#456 := [rewrite]: #746
#745 := (= #449 #741)
#466 := (= #438 0::Int)
#467 := [rewrite]: #466
#742 := [monotonicity #467]: #745
#458 := [trans #742 #456]: #457
#738 := [monotonicity #458]: #737
#736 := [trans #738 #735]: #739
#729 := [monotonicity #736]: #740
#743 := (iff #425 false)
#470 := (or false false)
#473 := (iff #470 false)
#366 := [rewrite]: #473
#471 := (iff #425 #470)
#747 := (iff #431 false)
#1 := true
#413 := (not true)
#751 := (iff #413 false)
#752 := [rewrite]: #751
#758 := (iff #431 #413)
#400 := (iff #452 true)
#756 := (or true false)
#759 := (iff #756 true)
#399 := [rewrite]: #759
#394 := (iff #452 #756)
#755 := (iff #451 false)
#750 := [rewrite]: #755
#763 := (iff #448 true)
#423 := [rewrite]: #763
#757 := [monotonicity #423 #750]: #394
#760 := [trans #757 #399]: #400
#761 := [monotonicity #760]: #758
#748 := [trans #761 #752]: #747
#753 := (iff #768 false)
#414 := (iff #768 #413)
#749 := (iff #766 true)
#428 := (or true true)
#765 := (iff #428 true)
#408 := [rewrite]: #765
#764 := (iff #766 #428)
#424 := [monotonicity #423 #423]: #764
#412 := [trans #424 #408]: #749
#415 := [monotonicity #412]: #414
#754 := [trans #415 #752]: #753
#472 := [monotonicity #754 #748]: #471
#744 := [trans #472 #366]: #743
#723 := [monotonicity #744 #729 #722]: #717
#554 := [trans #723 #718]: #725
#770 := (iff #762 false)
#771 := [rewrite]: #770
#557 := [monotonicity #771 #554]: #556
#711 := [trans #557 #718]: #710
#772 := (iff #437 #767)
#773 := [rewrite]: #772
#712 := [monotonicity #771 #773 #711]: #714
#599 := [trans #712 #597]: #598
#707 := [monotonicity #599]: #704
#609 := [trans #707 #607]: #704
#703 := [quant-inst #68 #68]: #608
#610 := [mp #703 #609]: #706
[unit-resolution #610 #95 #787]: false
unsat
23e66f7963331f26fca16a882456c891068f1234 350 0
#2 := false
decl f3 :: (-> S2 Int Int)
#22 := (:var 0 Int)
decl f4 :: (-> S3 Int S2)
#20 := (:var 1 Int)
decl f5 :: S3
#8 := f5
#42 := (f4 f5 #20)
#43 := (f3 #42 #22)
#764 := (pattern #43)
#24 := 0::Int
#101 := -1::Int
#105 := (* -1::Int #22)
#102 := (* -1::Int #20)
#160 := (mod #102 #105)
#275 := (+ #43 #160)
#276 := (= #275 0::Int)
#44 := (mod #20 #22)
#272 := (* -1::Int #44)
#273 := (+ #43 #272)
#274 := (= #273 0::Int)
#134 := (>= #20 0::Int)
#127 := (<= #22 0::Int)
#219 := (or #127 #134)
#220 := (not #219)
#123 := (<= #20 0::Int)
#217 := (or #123 #127)
#218 := (not #217)
#223 := (or #218 #220)
#277 := (ite #223 #274 #276)
#271 := (= #43 0::Int)
#25 := (= #20 0::Int)
#278 := (ite #25 #271 #277)
#270 := (= #20 #43)
#26 := (= #22 0::Int)
#279 := (ite #26 #270 #278)
#765 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #764) #279)
#282 := (forall (vars (?v0 Int) (?v1 Int)) #279)
#768 := (iff #282 #765)
#766 := (iff #279 #279)
#767 := [refl]: #766
#769 := [quant-intro #767]: #768
#166 := (* -1::Int #160)
#239 := (ite #223 #44 #166)
#242 := (ite #25 0::Int #239)
#245 := (ite #26 #20 #242)
#248 := (= #43 #245)
#251 := (forall (vars (?v0 Int) (?v1 Int)) #248)
#283 := (iff #251 #282)
#280 := (iff #248 #279)
#281 := [rewrite]: #280
#284 := [quant-intro #281]: #283
#135 := (not #134)
#128 := (not #127)
#138 := (and #128 #135)
#124 := (not #123)
#131 := (and #124 #128)
#141 := (or #131 #138)
#186 := (ite #141 #44 #166)
#189 := (ite #25 0::Int #186)
#192 := (ite #26 #20 #189)
#195 := (= #43 #192)
#198 := (forall (vars (?v0 Int) (?v1 Int)) #195)
#252 := (iff #198 #251)
#249 := (iff #195 #248)
#246 := (= #192 #245)
#243 := (= #189 #242)
#240 := (= #186 #239)
#224 := (iff #141 #223)
#221 := (iff #138 #220)
#222 := [rewrite]: #221
#211 := (iff #131 #218)
#212 := [rewrite]: #211
#225 := [monotonicity #212 #222]: #224
#241 := [monotonicity #225]: #240
#244 := [monotonicity #241]: #243
#247 := [monotonicity #244]: #246
#250 := [monotonicity #247]: #249
#253 := [quant-intro #250]: #252
#209 := (~ #198 #198)
#208 := (~ #195 #195)
#205 := [refl]: #208
#210 := [nnf-pos #205]: #209
#36 := (- #22)
#35 := (- #20)
#45 := (mod #35 #36)
#46 := (- #45)
#29 := (< 0::Int #22)
#31 := (< #20 0::Int)
#32 := (and #31 #29)
#28 := (< 0::Int #20)
#30 := (and #28 #29)
#33 := (or #30 #32)
#47 := (ite #33 #44 #46)
#48 := (ite #25 0::Int #47)
#49 := (ite #26 #20 #48)
#50 := (= #43 #49)
#51 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#201 := (iff #51 #198)
#94 := (and #29 #31)
#98 := (or #30 #94)
#171 := (ite #98 #44 #166)
#174 := (ite #25 0::Int #171)
#177 := (ite #26 #20 #174)
#180 := (= #43 #177)
#183 := (forall (vars (?v0 Int) (?v1 Int)) #180)
#199 := (iff #183 #198)
#196 := (iff #180 #195)
#193 := (= #177 #192)
#190 := (= #174 #189)
#187 := (= #171 #186)
#142 := (iff #98 #141)
#139 := (iff #94 #138)
#136 := (iff #31 #135)
#137 := [rewrite]: #136
#129 := (iff #29 #128)
#130 := [rewrite]: #129
#140 := [monotonicity #130 #137]: #139
#132 := (iff #30 #131)
#125 := (iff #28 #124)
#126 := [rewrite]: #125
#133 := [monotonicity #126 #130]: #132
#143 := [monotonicity #133 #140]: #142
#188 := [monotonicity #143]: #187
#191 := [monotonicity #188]: #190
#194 := [monotonicity #191]: #193
#197 := [monotonicity #194]: #196
#200 := [quant-intro #197]: #199
#184 := (iff #51 #183)
#181 := (iff #50 #180)
#178 := (= #49 #177)
#175 := (= #48 #174)
#172 := (= #47 #171)
#169 := (= #46 #166)
#163 := (- #160)
#167 := (= #163 #166)
#168 := [rewrite]: #167
#164 := (= #46 #163)
#161 := (= #45 #160)
#106 := (= #36 #105)
#107 := [rewrite]: #106
#103 := (= #35 #102)
#104 := [rewrite]: #103
#162 := [monotonicity #104 #107]: #161
#165 := [monotonicity #162]: #164
#170 := [trans #165 #168]: #169
#99 := (iff #33 #98)
#96 := (iff #32 #94)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#173 := [monotonicity #100 #170]: #172
#176 := [monotonicity #173]: #175
#179 := [monotonicity #176]: #178
#182 := [monotonicity #179]: #181
#185 := [quant-intro #182]: #184
#202 := [trans #185 #200]: #201
#159 := [asserted]: #51
#203 := [mp #159 #202]: #198
#206 := [mp~ #203 #210]: #198
#254 := [mp #206 #253]: #251
#285 := [mp #254 #284]: #282
#770 := [mp #285 #769]: #765
#84 := -2::Int
#78 := -3::Int
#72 := -5::Int
#75 := (f4 f5 -5::Int)
#81 := (f3 #75 -3::Int)
#87 := (= #81 -2::Int)
#90 := (not #87)
#15 := 2::Int
#16 := (- 2::Int)
#12 := 3::Int
#13 := (- 3::Int)
#9 := 5::Int
#10 := (- 5::Int)
#11 := (f4 f5 #10)
#14 := (f3 #11 #13)
#17 := (= #14 #16)
#18 := (not #17)
#91 := (iff #18 #90)
#88 := (iff #17 #87)
#85 := (= #16 -2::Int)
#86 := [rewrite]: #85
#82 := (= #14 #81)
#79 := (= #13 -3::Int)
#80 := [rewrite]: #79
#76 := (= #11 #75)
#73 := (= #10 -5::Int)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#83 := [monotonicity #77 #80]: #82
#89 := [monotonicity #83 #86]: #88
#92 := [monotonicity #89]: #91
#71 := [asserted]: #18
#95 := [mp #71 #92]: #90
#675 := (not #765)
#676 := (or #675 #87)
#343 := (* -1::Int -3::Int)
#428 := (* -1::Int -5::Int)
#429 := (mod #428 #343)
#430 := (+ #81 #429)
#421 := (= #430 0::Int)
#432 := (mod -5::Int -3::Int)
#433 := (* -1::Int #432)
#361 := (+ #81 #433)
#434 := (= #361 0::Int)
#431 := (>= -5::Int 0::Int)
#435 := (<= -3::Int 0::Int)
#414 := (or #435 #431)
#749 := (not #414)
#751 := (<= -5::Int 0::Int)
#408 := (or #751 #435)
#538 := (not #408)
#745 := (or #538 #749)
#419 := (ite #745 #434 #421)
#420 := (= #81 0::Int)
#752 := (= -5::Int 0::Int)
#753 := (ite #752 #420 #419)
#754 := (= -5::Int #81)
#755 := (= -3::Int 0::Int)
#750 := (ite #755 #754 #753)
#677 := (or #675 #750)
#678 := (iff #677 #676)
#663 := (iff #676 #676)
#665 := [rewrite]: #663
#685 := (iff #750 #87)
#411 := (= #81 -5::Int)
#672 := (ite false #411 #87)
#684 := (iff #672 #87)
#680 := [rewrite]: #684
#682 := (iff #750 #672)
#673 := (iff #753 #87)
#691 := (ite false #420 #87)
#679 := (iff #691 #87)
#681 := [rewrite]: #679
#688 := (iff #753 #691)
#597 := (iff #419 #87)
#441 := 1::Int
#702 := (= #81 1::Int)
#593 := (ite false #702 #87)
#595 := (iff #593 #87)
#596 := [rewrite]: #595
#586 := (iff #419 #593)
#590 := (iff #421 #87)
#580 := (+ 2::Int #81)
#591 := (= #580 0::Int)
#690 := (iff #591 #87)
#575 := [rewrite]: #690
#686 := (iff #421 #591)
#541 := (= #430 #580)
#697 := (+ #81 2::Int)
#581 := (= #697 #580)
#582 := [rewrite]: #581
#695 := (= #430 #697)
#694 := (= #429 2::Int)
#708 := (mod 5::Int 3::Int)
#540 := (= #708 2::Int)
#693 := [rewrite]: #540
#537 := (= #429 #708)
#707 := (= #343 3::Int)
#701 := [rewrite]: #707
#700 := (= #428 5::Int)
#706 := [rewrite]: #700
#539 := [monotonicity #706 #701]: #537
#696 := [trans #539 #693]: #694
#698 := [monotonicity #696]: #695
#689 := [trans #698 #582]: #541
#687 := [monotonicity #689]: #686
#592 := [trans #687 #575]: #590
#705 := (iff #434 #702)
#710 := (+ -1::Int #81)
#558 := (= #710 0::Int)
#703 := (iff #558 #702)
#704 := [rewrite]: #703
#559 := (iff #434 #558)
#711 := (= #361 #710)
#713 := (+ #81 -1::Int)
#715 := (= #713 #710)
#716 := [rewrite]: #715
#714 := (= #361 #713)
#723 := (= #433 -1::Int)
#721 := (* -1::Int 1::Int)
#722 := (= #721 -1::Int)
#719 := [rewrite]: #722
#436 := (= #433 #721)
#442 := (= #432 1::Int)
#720 := [rewrite]: #442
#718 := [monotonicity #720]: #436
#712 := [trans #718 #719]: #723
#709 := [monotonicity #712]: #714
#717 := [trans #709 #716]: #711
#560 := [monotonicity #717]: #559
#699 := [trans #560 #704]: #705
#439 := (iff #745 false)
#450 := (or false false)
#725 := (iff #450 false)
#729 := [rewrite]: #725
#724 := (iff #745 #450)
#727 := (iff #749 false)
#1 := true
#733 := (not true)
#740 := (iff #733 false)
#742 := [rewrite]: #740
#349 := (iff #749 #733)
#455 := (iff #414 true)
#744 := (or true false)
#453 := (iff #744 true)
#454 := [rewrite]: #453
#730 := (iff #414 #744)
#743 := (iff #431 false)
#741 := [rewrite]: #743
#395 := (iff #435 true)
#396 := [rewrite]: #395
#731 := [monotonicity #396 #741]: #730
#456 := [trans #731 #454]: #455
#726 := [monotonicity #456]: #349
#449 := [trans #726 #742]: #727
#382 := (iff #538 false)
#739 := (iff #538 #733)
#737 := (iff #408 true)
#397 := (or true true)
#735 := (iff #397 true)
#736 := [rewrite]: #735
#398 := (iff #408 #397)
#391 := (iff #751 true)
#732 := [rewrite]: #391
#734 := [monotonicity #732 #396]: #398
#738 := [trans #734 #736]: #737
#377 := [monotonicity #738]: #739
#383 := [trans #377 #742]: #382
#728 := [monotonicity #383 #449]: #724
#440 := [trans #728 #729]: #439
#594 := [monotonicity #440 #699 #592]: #586
#598 := [trans #594 #596]: #597
#407 := (iff #752 false)
#748 := [rewrite]: #407
#692 := [monotonicity #748 #598]: #688
#670 := [trans #692 #681]: #673
#406 := (iff #754 #411)
#747 := [rewrite]: #406
#756 := (iff #755 false)
#746 := [rewrite]: #756
#683 := [monotonicity #746 #747 #670]: #682
#674 := [trans #683 #680]: #685
#662 := [monotonicity #674]: #678
#666 := [trans #662 #665]: #678
#671 := [quant-inst #72 #78]: #677
#667 := [mp #671 #666]: #676
[unit-resolution #667 #95 #770]: false
unsat
7e8a6b37c3c101f2391dcbe7edf0f351fd77cf0f 327 0
#2 := false
#20 := 0::Int
decl f6 :: Int
#9 := f6
#417 := (>= f6 0::Int)
#737 := (<= f6 0::Int)
#383 := (not #737)
#726 := (not #417)
#730 := (or #726 #383)
#693 := (not #730)
#11 := 3::Int
#418 := (mod f6 3::Int)
#87 := -1::Int
#419 := (* -1::Int #418)
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#8 := f5
#10 := (f4 f5 f6)
#12 := (f3 #10 3::Int)
#347 := (+ #12 #419)
#420 := (= #347 0::Int)
#566 := (not #420)
#523 := (<= #347 0::Int)
#626 := (not #523)
#634 := (>= #418 3::Int)
#635 := (not #634)
#1 := true
#65 := [true-axiom]: true
#622 := (or false #635)
#623 := [th-lemma arith]: #622
#624 := [unit-resolution #623 #65]: #635
#625 := [hypothesis]: #523
#72 := (>= #12 3::Int)
#13 := (< #12 3::Int)
#14 := (not #13)
#79 := (iff #14 #72)
#70 := (not #72)
#74 := (not #70)
#77 := (iff #74 #72)
#78 := [rewrite]: #77
#75 := (iff #14 #74)
#71 := (iff #13 #70)
#73 := [rewrite]: #71
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#67 := [asserted]: #14
#81 := [mp #67 #80]: #72
#620 := [th-lemma arith farkas -1 1 1 #81 #625 #624]: false
#612 := [lemma #620]: #626
#629 := (or #566 #523)
#640 := [th-lemma arith triangle-eq]: #629
#618 := [unit-resolution #640 #612]: #566
#617 := (or #693 #420)
#441 := -3::Int
#414 := (* -1::Int f6)
#712 := (mod #414 -3::Int)
#436 := (+ #12 #712)
#711 := (= #436 0::Int)
#426 := (ite #730 #420 #711)
#406 := (= #12 0::Int)
#738 := (= f6 0::Int)
#706 := (ite #738 #406 #426)
#18 := (:var 0 Int)
#16 := (:var 1 Int)
#38 := (f4 f5 #16)
#39 := (f3 #38 #18)
#750 := (pattern #39)
#91 := (* -1::Int #18)
#88 := (* -1::Int #16)
#146 := (mod #88 #91)
#261 := (+ #39 #146)
#262 := (= #261 0::Int)
#40 := (mod #16 #18)
#258 := (* -1::Int #40)
#259 := (+ #39 #258)
#260 := (= #259 0::Int)
#120 := (>= #16 0::Int)
#113 := (<= #18 0::Int)
#205 := (or #113 #120)
#206 := (not #205)
#109 := (<= #16 0::Int)
#203 := (or #109 #113)
#204 := (not #203)
#209 := (or #204 #206)
#263 := (ite #209 #260 #262)
#257 := (= #39 0::Int)
#21 := (= #16 0::Int)
#264 := (ite #21 #257 #263)
#256 := (= #16 #39)
#22 := (= #18 0::Int)
#265 := (ite #22 #256 #264)
#751 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #750) #265)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#754 := (iff #268 #751)
#752 := (iff #265 #265)
#753 := [refl]: #752
#755 := [quant-intro #753]: #754
#152 := (* -1::Int #146)
#225 := (ite #209 #40 #152)
#228 := (ite #21 0::Int #225)
#231 := (ite #22 #16 #228)
#234 := (= #39 #231)
#237 := (forall (vars (?v0 Int) (?v1 Int)) #234)
#269 := (iff #237 #268)
#266 := (iff #234 #265)
#267 := [rewrite]: #266
#270 := [quant-intro #267]: #269
#121 := (not #120)
#114 := (not #113)
#124 := (and #114 #121)
#110 := (not #109)
#117 := (and #110 #114)
#127 := (or #117 #124)
#172 := (ite #127 #40 #152)
#175 := (ite #21 0::Int #172)
#178 := (ite #22 #16 #175)
#181 := (= #39 #178)
#184 := (forall (vars (?v0 Int) (?v1 Int)) #181)
#238 := (iff #184 #237)
#235 := (iff #181 #234)
#232 := (= #178 #231)
#229 := (= #175 #228)
#226 := (= #172 #225)
#210 := (iff #127 #209)
#207 := (iff #124 #206)
#208 := [rewrite]: #207
#197 := (iff #117 #204)
#198 := [rewrite]: #197
#211 := [monotonicity #198 #208]: #210
#227 := [monotonicity #211]: #226
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [quant-intro #236]: #238
#195 := (~ #184 #184)
#194 := (~ #181 #181)
#191 := [refl]: #194
#196 := [nnf-pos #191]: #195
#32 := (- #18)
#31 := (- #16)
#41 := (mod #31 #32)
#42 := (- #41)
#25 := (< 0::Int #18)
#27 := (< #16 0::Int)
#28 := (and #27 #25)
#24 := (< 0::Int #16)
#26 := (and #24 #25)
#29 := (or #26 #28)
#43 := (ite #29 #40 #42)
#44 := (ite #21 0::Int #43)
#45 := (ite #22 #16 #44)
#46 := (= #39 #45)
#47 := (forall (vars (?v0 Int) (?v1 Int)) #46)
#187 := (iff #47 #184)
#69 := (and #25 #27)
#84 := (or #26 #69)
#157 := (ite #84 #40 #152)
#160 := (ite #21 0::Int #157)
#163 := (ite #22 #16 #160)
#166 := (= #39 #163)
#169 := (forall (vars (?v0 Int) (?v1 Int)) #166)
#185 := (iff #169 #184)
#182 := (iff #166 #181)
#179 := (= #163 #178)
#176 := (= #160 #175)
#173 := (= #157 #172)
#128 := (iff #84 #127)
#125 := (iff #69 #124)
#122 := (iff #27 #121)
#123 := [rewrite]: #122
#115 := (iff #25 #114)
#116 := [rewrite]: #115
#126 := [monotonicity #116 #123]: #125
#118 := (iff #26 #117)
#111 := (iff #24 #110)
#112 := [rewrite]: #111
#119 := [monotonicity #112 #116]: #118
#129 := [monotonicity #119 #126]: #128
#174 := [monotonicity #129]: #173
#177 := [monotonicity #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [quant-intro #183]: #185
#170 := (iff #47 #169)
#167 := (iff #46 #166)
#164 := (= #45 #163)
#161 := (= #44 #160)
#158 := (= #43 #157)
#155 := (= #42 #152)
#149 := (- #146)
#153 := (= #149 #152)
#154 := [rewrite]: #153
#150 := (= #42 #149)
#147 := (= #41 #146)
#92 := (= #32 #91)
#93 := [rewrite]: #92
#89 := (= #31 #88)
#90 := [rewrite]: #89
#148 := [monotonicity #90 #93]: #147
#151 := [monotonicity #148]: #150
#156 := [trans #151 #154]: #155
#85 := (iff #29 #84)
#82 := (iff #28 #69)
#83 := [rewrite]: #82
#86 := [monotonicity #83]: #85
#159 := [monotonicity #86 #156]: #158
#162 := [monotonicity #159]: #161
#165 := [monotonicity #162]: #164
#168 := [monotonicity #165]: #167
#171 := [quant-intro #168]: #170
#188 := [trans #171 #186]: #187
#145 := [asserted]: #47
#189 := [mp #145 #188]: #184
#192 := [mp~ #189 #196]: #184
#240 := [mp #192 #239]: #237
#271 := [mp #240 #270]: #268
#756 := [mp #271 #755]: #751
#695 := (not #751)
#696 := (or #695 #706)
#329 := (* -1::Int 3::Int)
#415 := (mod #414 #329)
#416 := (+ #12 #415)
#407 := (= #416 0::Int)
#421 := (<= 3::Int 0::Int)
#400 := (or #421 #417)
#735 := (not #400)
#394 := (or #737 #421)
#524 := (not #394)
#731 := (or #524 #735)
#405 := (ite #731 #420 #407)
#739 := (ite #738 #406 #405)
#740 := (= f6 #12)
#741 := (= 3::Int 0::Int)
#736 := (ite #741 #740 #739)
#701 := (or #695 #736)
#697 := (iff #701 #696)
#544 := (iff #696 #696)
#545 := [rewrite]: #544
#699 := (iff #736 #706)
#704 := (ite false #740 #706)
#709 := (iff #704 #706)
#698 := [rewrite]: #709
#708 := (iff #736 #704)
#707 := (iff #739 #706)
#427 := (iff #405 #426)
#715 := (iff #407 #711)
#710 := (= #416 #436)
#713 := (= #415 #712)
#442 := (= #329 -3::Int)
#335 := [rewrite]: #442
#435 := [monotonicity #335]: #713
#714 := [monotonicity #435]: #710
#425 := [monotonicity #714]: #715
#439 := (iff #731 #730)
#369 := (or #383 #726)
#716 := (iff #369 #730)
#717 := [rewrite]: #716
#729 := (iff #731 #369)
#728 := (iff #735 #726)
#725 := (iff #400 #417)
#721 := (or false #417)
#724 := (iff #721 #417)
#719 := [rewrite]: #724
#722 := (iff #400 #721)
#392 := (iff #421 false)
#397 := [rewrite]: #392
#723 := [monotonicity #397]: #722
#363 := [trans #723 #719]: #725
#368 := [monotonicity #363]: #728
#384 := (iff #524 #383)
#381 := (iff #394 #737)
#733 := (or #737 false)
#377 := (iff #733 #737)
#718 := [rewrite]: #377
#393 := (iff #394 #733)
#734 := [monotonicity #397]: #393
#382 := [trans #734 #718]: #381
#720 := [monotonicity #382]: #384
#727 := [monotonicity #720 #368]: #729
#440 := [trans #727 #717]: #439
#428 := [monotonicity #440 #425]: #427
#422 := [monotonicity #428]: #707
#742 := (iff #741 false)
#732 := [rewrite]: #742
#705 := [monotonicity #732 #422]: #708
#700 := [trans #705 #698]: #699
#703 := [monotonicity #700]: #697
#546 := [trans #703 #545]: #697
#702 := [quant-inst #9 #11]: #701
#688 := [mp #702 #546]: #696
#619 := [unit-resolution #688 #756]: #706
#673 := (not #738)
#672 := (not #706)
#614 := (or #672 #673)
#579 := (not #406)
#689 := (<= #12 0::Int)
#621 := (not #689)
#651 := (or #621 #70)
#652 := [th-lemma arith farkas 1 1]: #651
#608 := [unit-resolution #652 #81]: #621
#609 := (or #579 #689)
#610 := [th-lemma arith triangle-eq]: #609
#613 := [unit-resolution #610 #608]: #579
#676 := (or #672 #673 #406)
#561 := [def-axiom]: #676
#615 := [unit-resolution #561 #613]: #614
#616 := [unit-resolution #615 #619]: #673
#576 := (or #672 #738 #426)
#578 := [def-axiom]: #576
#611 := [unit-resolution #578 #616 #619]: #426
#680 := (not #426)
#682 := (or #680 #693 #420)
#683 := [def-axiom]: #682
#590 := [unit-resolution #683 #611]: #617
#591 := [unit-resolution #590 #618]: #693
#691 := (or #730 #417)
#685 := [def-axiom]: #691
#592 := [unit-resolution #685 #591]: #417
#686 := (or #730 #737)
#692 := [def-axiom]: #686
#485 := [unit-resolution #692 #591]: #737
#596 := (or #738 #383 #726)
#597 := [th-lemma arith triangle-eq]: #596
#598 := [unit-resolution #597 #616]: #369
[unit-resolution #598 #485 #592]: false
unsat
c1c2bfe366703ecc21257a3d4934900d916d5721 365 0
#2 := false
#11 := 3::Int
decl f3 :: (-> S2 Int Int)
decl f4 :: (-> S3 Int S2)
decl f6 :: Int
#9 := f6
decl f5 :: S3
#8 := f5
#10 := (f4 f5 f6)
#12 := (f3 #10 3::Int)
#372 := (mod #12 3::Int)
#634 := (>= #372 3::Int)
#635 := (not #634)
#1 := true
#67 := [true-axiom]: true
#622 := (or false #635)
#623 := [th-lemma arith]: #622
#628 := [unit-resolution #623 #67]: #635
#22 := 0::Int
#112 := -1::Int
#439 := (* -1::Int #12)
#691 := (+ f6 #439)
#696 := (<= #691 0::Int)
#70 := (= f6 #12)
#87 := (>= f6 3::Int)
#85 := (not #87)
#76 := (not #70)
#92 := (or #76 #85)
#97 := (not #92)
#14 := (< f6 3::Int)
#13 := (= #12 f6)
#15 := (implies #13 #14)
#16 := (not #15)
#100 := (iff #16 #97)
#77 := (or #14 #76)
#82 := (not #77)
#98 := (iff #82 #97)
#95 := (iff #77 #92)
#89 := (or #85 #76)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #77 #89)
#86 := (iff #14 #85)
#88 := [rewrite]: #86
#91 := [monotonicity #88]: #90
#96 := [trans #91 #94]: #95
#99 := [monotonicity #96]: #98
#83 := (iff #16 #82)
#80 := (iff #15 #77)
#73 := (implies #70 #14)
#78 := (iff #73 #77)
#79 := [rewrite]: #78
#74 := (iff #15 #73)
#71 := (iff #13 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#81 := [trans #75 #79]: #80
#84 := [monotonicity #81]: #83
#101 := [trans #84 #99]: #100
#69 := [asserted]: #16
#102 := [mp #69 #101]: #97
#103 := [not-or-elim #102]: #70
#624 := (or #76 #696)
#625 := [th-lemma arith triangle-eq]: #624
#626 := [unit-resolution #625 #103]: #696
#104 := [not-or-elim #102]: #87
#441 := (f4 f5 #12)
#432 := (f3 #441 3::Int)
#739 := (* -1::Int #432)
#686 := (+ #12 #739)
#687 := (<= #686 0::Int)
#761 := (= #12 #432)
#627 := (= #432 #12)
#630 := (= #441 #10)
#629 := [symm #103]: #13
#631 := [monotonicity #629]: #630
#632 := [monotonicity #631]: #627
#612 := [symm #632]: #761
#558 := (not #761)
#613 := (or #558 #687)
#594 := [th-lemma arith triangle-eq]: #613
#618 := [unit-resolution #594 #612]: #687
#736 := (+ #372 #739)
#602 := (>= #736 0::Int)
#740 := (= #736 0::Int)
#731 := -3::Int
#729 := (mod #439 -3::Int)
#734 := (+ #432 #729)
#725 := (= #734 0::Int)
#549 := (<= #12 0::Int)
#745 := (not #549)
#425 := (>= #12 0::Int)
#393 := (not #425)
#742 := (or #393 #745)
#726 := (ite #742 #740 #725)
#764 := (= #432 0::Int)
#765 := (= #12 0::Int)
#728 := (ite #765 #764 #726)
#20 := (:var 0 Int)
#18 := (:var 1 Int)
#40 := (f4 f5 #18)
#41 := (f3 #40 #20)
#775 := (pattern #41)
#116 := (* -1::Int #20)
#113 := (* -1::Int #18)
#171 := (mod #113 #116)
#286 := (+ #41 #171)
#287 := (= #286 0::Int)
#42 := (mod #18 #20)
#283 := (* -1::Int #42)
#284 := (+ #41 #283)
#285 := (= #284 0::Int)
#145 := (>= #18 0::Int)
#138 := (<= #20 0::Int)
#230 := (or #138 #145)
#231 := (not #230)
#134 := (<= #18 0::Int)
#216 := (or #134 #138)
#217 := (not #216)
#234 := (or #217 #231)
#288 := (ite #234 #285 #287)
#282 := (= #41 0::Int)
#23 := (= #18 0::Int)
#289 := (ite #23 #282 #288)
#281 := (= #18 #41)
#24 := (= #20 0::Int)
#290 := (ite #24 #281 #289)
#776 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #775) #290)
#293 := (forall (vars (?v0 Int) (?v1 Int)) #290)
#779 := (iff #293 #776)
#777 := (iff #290 #290)
#778 := [refl]: #777
#780 := [quant-intro #778]: #779
#177 := (* -1::Int #171)
#250 := (ite #234 #42 #177)
#253 := (ite #23 0::Int #250)
#256 := (ite #24 #18 #253)
#259 := (= #41 #256)
#262 := (forall (vars (?v0 Int) (?v1 Int)) #259)
#294 := (iff #262 #293)
#291 := (iff #259 #290)
#292 := [rewrite]: #291
#295 := [quant-intro #292]: #294
#146 := (not #145)
#139 := (not #138)
#149 := (and #139 #146)
#135 := (not #134)
#142 := (and #135 #139)
#152 := (or #142 #149)
#197 := (ite #152 #42 #177)
#200 := (ite #23 0::Int #197)
#203 := (ite #24 #18 #200)
#206 := (= #41 #203)
#209 := (forall (vars (?v0 Int) (?v1 Int)) #206)
#263 := (iff #209 #262)
#260 := (iff #206 #259)
#257 := (= #203 #256)
#254 := (= #200 #253)
#251 := (= #197 #250)
#235 := (iff #152 #234)
#232 := (iff #149 #231)
#233 := [rewrite]: #232
#224 := (iff #142 #217)
#225 := [rewrite]: #224
#236 := [monotonicity #225 #233]: #235
#252 := [monotonicity #236]: #251
#255 := [monotonicity #252]: #254
#258 := [monotonicity #255]: #257
#261 := [monotonicity #258]: #260
#264 := [quant-intro #261]: #263
#222 := (~ #209 #209)
#221 := (~ #206 #206)
#218 := [refl]: #221
#223 := [nnf-pos #218]: #222
#34 := (- #20)
#33 := (- #18)
#43 := (mod #33 #34)
#44 := (- #43)
#27 := (< 0::Int #20)
#29 := (< #18 0::Int)
#30 := (and #29 #27)
#26 := (< 0::Int #18)
#28 := (and #26 #27)
#31 := (or #28 #30)
#45 := (ite #31 #42 #44)
#46 := (ite #23 0::Int #45)
#47 := (ite #24 #18 #46)
#48 := (= #41 #47)
#49 := (forall (vars (?v0 Int) (?v1 Int)) #48)
#212 := (iff #49 #209)
#106 := (and #27 #29)
#109 := (or #28 #106)
#182 := (ite #109 #42 #177)
#185 := (ite #23 0::Int #182)
#188 := (ite #24 #18 #185)
#191 := (= #41 #188)
#194 := (forall (vars (?v0 Int) (?v1 Int)) #191)
#210 := (iff #194 #209)
#207 := (iff #191 #206)
#204 := (= #188 #203)
#201 := (= #185 #200)
#198 := (= #182 #197)
#153 := (iff #109 #152)
#150 := (iff #106 #149)
#147 := (iff #29 #146)
#148 := [rewrite]: #147
#140 := (iff #27 #139)
#141 := [rewrite]: #140
#151 := [monotonicity #141 #148]: #150
#143 := (iff #28 #142)
#136 := (iff #26 #135)
#137 := [rewrite]: #136
#144 := [monotonicity #137 #141]: #143
#154 := [monotonicity #144 #151]: #153
#199 := [monotonicity #154]: #198
#202 := [monotonicity #199]: #201
#205 := [monotonicity #202]: #204
#208 := [monotonicity #205]: #207
#211 := [quant-intro #208]: #210
#195 := (iff #49 #194)
#192 := (iff #48 #191)
#189 := (= #47 #188)
#186 := (= #46 #185)
#183 := (= #45 #182)
#180 := (= #44 #177)
#174 := (- #171)
#178 := (= #174 #177)
#179 := [rewrite]: #178
#175 := (= #44 #174)
#172 := (= #43 #171)
#117 := (= #34 #116)
#118 := [rewrite]: #117
#114 := (= #33 #113)
#115 := [rewrite]: #114
#173 := [monotonicity #115 #118]: #172
#176 := [monotonicity #173]: #175
#181 := [trans #176 #179]: #180
#110 := (iff #31 #109)
#107 := (iff #30 #106)
#108 := [rewrite]: #107
#111 := [monotonicity #108]: #110
#184 := [monotonicity #111 #181]: #183
#187 := [monotonicity #184]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#196 := [quant-intro #193]: #195
#213 := [trans #196 #211]: #212
#170 := [asserted]: #49
#214 := [mp #170 #213]: #209
#219 := [mp~ #214 #223]: #209
#265 := [mp #219 #264]: #262
#296 := [mp #265 #295]: #293
#781 := [mp #296 #780]: #776
#717 := (not #776)
#718 := (or #717 #728)
#354 := (* -1::Int 3::Int)
#440 := (mod #439 #354)
#443 := (+ #432 #440)
#444 := (= #443 0::Int)
#445 := (* -1::Int #372)
#442 := (+ #432 #445)
#446 := (= #442 0::Int)
#760 := (<= 3::Int 0::Int)
#762 := (or #760 #425)
#419 := (not #762)
#756 := (or #549 #760)
#430 := (not #756)
#431 := (or #430 #419)
#763 := (ite #431 #446 #444)
#766 := (ite #765 #764 #763)
#767 := (= 3::Int 0::Int)
#757 := (ite #767 #761 #766)
#712 := (or #717 #757)
#548 := (iff #712 #718)
#551 := (iff #718 #718)
#704 := [rewrite]: #551
#710 := (iff #757 #728)
#571 := (ite false #761 #728)
#715 := (iff #571 #728)
#716 := [rewrite]: #715
#713 := (iff #757 #571)
#569 := (iff #766 #728)
#727 := (iff #763 #726)
#720 := (iff #444 #725)
#723 := (= #443 #734)
#733 := (= #440 #729)
#732 := (= #354 -3::Int)
#447 := [rewrite]: #732
#730 := [monotonicity #447]: #733
#724 := [monotonicity #730]: #723
#721 := [monotonicity #724]: #720
#452 := (iff #446 #740)
#360 := (+ #445 #432)
#460 := (= #360 0::Int)
#450 := (iff #460 #740)
#451 := [rewrite]: #450
#461 := (iff #446 #460)
#737 := (= #442 #360)
#738 := [rewrite]: #737
#735 := [monotonicity #738]: #461
#453 := [trans #735 #451]: #452
#466 := (iff #431 #742)
#752 := (or #745 #393)
#464 := (iff #752 #742)
#465 := [rewrite]: #464
#755 := (iff #431 #752)
#394 := (iff #419 #393)
#751 := (iff #762 #425)
#748 := (or false #425)
#750 := (iff #748 #425)
#388 := [rewrite]: #750
#749 := (iff #762 #748)
#758 := (iff #760 false)
#418 := [rewrite]: #758
#744 := [monotonicity #418]: #749
#753 := [trans #744 #388]: #751
#754 := [monotonicity #753]: #394
#746 := (iff #430 #745)
#408 := (iff #756 #549)
#759 := (or #549 false)
#406 := (iff #759 #549)
#407 := [rewrite]: #406
#402 := (iff #756 #759)
#743 := [monotonicity #418]: #402
#409 := [trans #743 #407]: #408
#747 := [monotonicity #409]: #746
#741 := [monotonicity #747 #754]: #755
#467 := [trans #741 #465]: #466
#722 := [monotonicity #467 #453 #721]: #727
#570 := [monotonicity #722]: #569
#417 := (iff #767 false)
#422 := [rewrite]: #417
#714 := [monotonicity #422 #570]: #713
#711 := [trans #714 #716]: #710
#550 := [monotonicity #711]: #548
#705 := [trans #550 #704]: #548
#719 := [quant-inst #12 #11]: #712
#707 := [mp #719 #705]: #718
#619 := [unit-resolution #707 #781]: #728
#699 := (not #765)
#614 := (not #696)
#620 := (or #745 #85 #614)
#588 := [th-lemma arith assign-bounds 1 1]: #620
#595 := [unit-resolution #588 #104 #626]: #745
#554 := (or #699 #549)
#585 := [th-lemma arith triangle-eq]: #554
#587 := [unit-resolution #585 #595]: #699
#702 := (not #728)
#692 := (or #702 #765 #726)
#684 := [def-axiom]: #692
#589 := [unit-resolution #684 #587 #619]: #726
#709 := (or #742 #549)
#591 := [def-axiom]: #709
#596 := [unit-resolution #591 #595]: #742
#592 := (not #742)
#701 := (not #726)
#586 := (or #701 #592 #740)
#601 := [def-axiom]: #586
#598 := [unit-resolution #601 #596 #589]: #740
#597 := (not #740)
#599 := (or #597 #602)
#600 := [th-lemma arith triangle-eq]: #599
#610 := [unit-resolution #600 #598]: #602
[th-lemma arith farkas -1 1 -1 1 1 #610 #618 #104 #626 #628]: false
unsat
b4c5fd98177a46b2cc0b910f32ebb8121f604602 575 0
#2 := false
#24 := 0::Int
decl f4 :: (-> S2 Int Int)
#11 := 1::Int
decl f5 :: (-> S3 Int S2)
decl f3 :: Int
#8 := f3
decl f7 :: S3
#14 := f7
#15 := (f5 f7 f3)
#16 := (f4 #15 1::Int)
#83 := -1::Int
#85 := (* -1::Int #16)
decl f6 :: S3
#9 := f6
#10 := (f5 f6 f3)
#12 := (f4 #10 1::Int)
#84 := (* -1::Int #12)
#86 := (+ #84 #85)
#87 := (+ f3 #86)
#429 := (>= #87 0::Int)
#602 := (<= #16 0::Int)
#673 := (= #16 0::Int)
#757 := (= f3 0::Int)
#752 := (>= f3 0::Int)
#455 := (not #752)
#420 := (<= f3 0::Int)
#741 := (not #420)
#641 := (or #741 #455 #757)
#621 := (not #641)
#588 := [hypothesis]: #621
#615 := (or #641 #752)
#616 := [def-axiom]: #615
#589 := [unit-resolution #616 #588]: #752
#618 := (or #641 #420)
#614 := [def-axiom]: #618
#590 := [unit-resolution #614 #588]: #420
#576 := (not #757)
#619 := (or #641 #576)
#620 := [def-axiom]: #619
#600 := [unit-resolution #620 #588]: #576
#580 := (or #757 #741 #455)
#601 := [th-lemma arith triangle-eq]: #580
#556 := [unit-resolution #601 #600 #590 #589]: false
#557 := [lemma #556]: #641
#504 := (or #621 #673)
#431 := (* -1::Int f3)
#694 := (mod #431 -1::Int)
#661 := (+ #16 #694)
#642 := (= #661 0::Int)
#624 := (ite #641 #673 #642)
#22 := (:var 0 Int)
#20 := (:var 1 Int)
#42 := (f5 f7 #20)
#43 := (f4 #42 #22)
#765 := (pattern #43)
#107 := (* -1::Int #22)
#104 := (* -1::Int #20)
#162 := (mod #104 #107)
#277 := (+ #43 #162)
#278 := (= #277 0::Int)
#44 := (mod #20 #22)
#274 := (* -1::Int #44)
#275 := (+ #43 #274)
#276 := (= #275 0::Int)
#136 := (>= #20 0::Int)
#129 := (<= #22 0::Int)
#221 := (or #129 #136)
#222 := (not #221)
#125 := (<= #20 0::Int)
#219 := (or #125 #129)
#220 := (not #219)
#225 := (or #220 #222)
#279 := (ite #225 #276 #278)
#273 := (= #43 0::Int)
#25 := (= #20 0::Int)
#280 := (ite #25 #273 #279)
#272 := (= #20 #43)
#26 := (= #22 0::Int)
#281 := (ite #26 #272 #280)
#766 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #765) #281)
#284 := (forall (vars (?v0 Int) (?v1 Int)) #281)
#769 := (iff #284 #766)
#767 := (iff #281 #281)
#768 := [refl]: #767
#770 := [quant-intro #768]: #769
#168 := (* -1::Int #162)
#241 := (ite #225 #44 #168)
#244 := (ite #25 0::Int #241)
#247 := (ite #26 #20 #244)
#250 := (= #43 #247)
#253 := (forall (vars (?v0 Int) (?v1 Int)) #250)
#285 := (iff #253 #284)
#282 := (iff #250 #281)
#283 := [rewrite]: #282
#286 := [quant-intro #283]: #285
#137 := (not #136)
#130 := (not #129)
#140 := (and #130 #137)
#126 := (not #125)
#133 := (and #126 #130)
#143 := (or #133 #140)
#188 := (ite #143 #44 #168)
#191 := (ite #25 0::Int #188)
#194 := (ite #26 #20 #191)
#197 := (= #43 #194)
#200 := (forall (vars (?v0 Int) (?v1 Int)) #197)
#254 := (iff #200 #253)
#251 := (iff #197 #250)
#248 := (= #194 #247)
#245 := (= #191 #244)
#242 := (= #188 #241)
#226 := (iff #143 #225)
#223 := (iff #140 #222)
#224 := [rewrite]: #223
#213 := (iff #133 #220)
#214 := [rewrite]: #213
#227 := [monotonicity #214 #224]: #226
#243 := [monotonicity #227]: #242
#246 := [monotonicity #243]: #245
#249 := [monotonicity #246]: #248
#252 := [monotonicity #249]: #251
#255 := [quant-intro #252]: #254
#211 := (~ #200 #200)
#210 := (~ #197 #197)
#207 := [refl]: #210
#212 := [nnf-pos #207]: #211
#36 := (- #22)
#35 := (- #20)
#45 := (mod #35 #36)
#46 := (- #45)
#29 := (< 0::Int #22)
#31 := (< #20 0::Int)
#32 := (and #31 #29)
#28 := (< 0::Int #20)
#30 := (and #28 #29)
#33 := (or #30 #32)
#47 := (ite #33 #44 #46)
#48 := (ite #25 0::Int #47)
#49 := (ite #26 #20 #48)
#50 := (= #43 #49)
#51 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#203 := (iff #51 #200)
#98 := (and #29 #31)
#101 := (or #30 #98)
#173 := (ite #101 #44 #168)
#176 := (ite #25 0::Int #173)
#179 := (ite #26 #20 #176)
#182 := (= #43 #179)
#185 := (forall (vars (?v0 Int) (?v1 Int)) #182)
#201 := (iff #185 #200)
#198 := (iff #182 #197)
#195 := (= #179 #194)
#192 := (= #176 #191)
#189 := (= #173 #188)
#144 := (iff #101 #143)
#141 := (iff #98 #140)
#138 := (iff #31 #137)
#139 := [rewrite]: #138
#131 := (iff #29 #130)
#132 := [rewrite]: #131
#142 := [monotonicity #132 #139]: #141
#134 := (iff #30 #133)
#127 := (iff #28 #126)
#128 := [rewrite]: #127
#135 := [monotonicity #128 #132]: #134
#145 := [monotonicity #135 #142]: #144
#190 := [monotonicity #145]: #189
#193 := [monotonicity #190]: #192
#196 := [monotonicity #193]: #195
#199 := [monotonicity #196]: #198
#202 := [quant-intro #199]: #201
#186 := (iff #51 #185)
#183 := (iff #50 #182)
#180 := (= #49 #179)
#177 := (= #48 #176)
#174 := (= #47 #173)
#171 := (= #46 #168)
#165 := (- #162)
#169 := (= #165 #168)
#170 := [rewrite]: #169
#166 := (= #46 #165)
#163 := (= #45 #162)
#108 := (= #36 #107)
#109 := [rewrite]: #108
#105 := (= #35 #104)
#106 := [rewrite]: #105
#164 := [monotonicity #106 #109]: #163
#167 := [monotonicity #164]: #166
#172 := [trans #167 #170]: #171
#102 := (iff #33 #101)
#99 := (iff #32 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#175 := [monotonicity #103 #172]: #174
#178 := [monotonicity #175]: #177
#181 := [monotonicity #178]: #180
#184 := [monotonicity #181]: #183
#187 := [quant-intro #184]: #186
#204 := [trans #187 #202]: #203
#161 := [asserted]: #51
#205 := [mp #161 #204]: #200
#208 := [mp~ #205 #212]: #200
#256 := [mp #208 #255]: #253
#287 := [mp #256 #286]: #284
#771 := [mp #287 #770]: #766
#631 := (not #766)
#626 := (or #631 #624)
#430 := (* -1::Int 1::Int)
#692 := (mod #431 #430)
#689 := (+ #16 #692)
#693 := (= #689 0::Int)
#538 := (mod f3 1::Int)
#680 := (* -1::Int #538)
#682 := (+ #16 #680)
#674 := (= #682 0::Int)
#409 := (<= 1::Int 0::Int)
#539 := (or #409 #752)
#746 := (not #539)
#421 := (or #420 #409)
#753 := (not #421)
#754 := (or #753 #746)
#671 := (ite #754 #674 #693)
#683 := (ite #757 #673 #671)
#684 := (= f3 #16)
#751 := (= 1::Int 0::Int)
#685 := (ite #751 #684 #683)
#632 := (or #631 #685)
#606 := (iff #632 #626)
#500 := (iff #626 #626)
#611 := [rewrite]: #500
#629 := (iff #685 #624)
#351 := (or #741 #455)
#652 := (or #351 #757)
#653 := (ite #652 #673 #642)
#625 := (iff #653 #624)
#627 := (iff #652 #641)
#623 := [rewrite]: #627
#628 := [monotonicity #623]: #625
#640 := (iff #685 #653)
#634 := (ite false #684 #653)
#638 := (iff #634 #653)
#639 := [rewrite]: #638
#636 := (iff #685 #634)
#655 := (iff #683 #653)
#646 := (ite #351 #673 #642)
#649 := (ite #757 #673 #646)
#654 := (iff #649 #653)
#644 := [rewrite]: #654
#650 := (iff #683 #649)
#647 := (iff #671 #646)
#643 := (iff #693 #642)
#658 := (= #689 #661)
#659 := (= #692 #694)
#450 := (= #430 -1::Int)
#451 := [rewrite]: #450
#660 := [monotonicity #451]: #659
#662 := [monotonicity #660]: #658
#645 := [monotonicity #662]: #643
#656 := (iff #674 #673)
#665 := (= #682 #16)
#664 := (+ #16 0::Int)
#668 := (= #664 #16)
#669 := [rewrite]: #668
#666 := (= #682 #664)
#679 := (= #680 0::Int)
#675 := (* -1::Int 0::Int)
#678 := (= #675 0::Int)
#672 := [rewrite]: #678
#676 := (= #680 #675)
#681 := (= #538 0::Int)
#686 := [rewrite]: #681
#677 := [monotonicity #686]: #676
#663 := [trans #677 #672]: #679
#667 := [monotonicity #663]: #666
#670 := [trans #667 #669]: #665
#657 := [monotonicity #670]: #656
#727 := (iff #754 #351)
#456 := (iff #746 #455)
#732 := (iff #539 #752)
#384 := (or false #752)
#745 := (iff #384 #752)
#731 := [rewrite]: #745
#744 := (iff #539 #384)
#399 := (iff #409 false)
#735 := [rewrite]: #399
#742 := [monotonicity #735]: #744
#454 := [trans #742 #731]: #732
#457 := [monotonicity #454]: #456
#743 := (iff #753 #741)
#740 := (iff #421 #420)
#736 := (or #420 false)
#739 := (iff #736 #420)
#734 := [rewrite]: #739
#737 := (iff #421 #736)
#738 := [monotonicity #735]: #737
#378 := [trans #738 #734]: #740
#383 := [monotonicity #378]: #743
#728 := [monotonicity #383 #457]: #727
#648 := [monotonicity #728 #657 #645]: #647
#651 := [monotonicity #648]: #650
#633 := [trans #651 #644]: #655
#412 := (iff #751 false)
#748 := [rewrite]: #412
#637 := [monotonicity #748 #633]: #636
#635 := [trans #637 #639]: #640
#630 := [trans #635 #628]: #629
#607 := [monotonicity #630]: #606
#612 := [trans #607 #611]: #606
#605 := [quant-inst #8 #11]: #632
#613 := [mp #605 #612]: #626
#511 := [unit-resolution #613 #771]: #624
#608 := (not #624)
#609 := (or #608 #621 #673)
#604 := [def-axiom]: #609
#507 := [unit-resolution #604 #511]: #504
#508 := [unit-resolution #507 #557]: #673
#585 := (not #673)
#494 := (or #585 #602)
#496 := [th-lemma arith triangle-eq]: #494
#497 := [unit-resolution #496 #508]: #602
#704 := (<= #12 0::Int)
#756 := (= #12 0::Int)
#459 := [hypothesis]: #576
#708 := (not #351)
#432 := (div f3 1::Int)
#436 := (* -1::Int #432)
#415 := (+ #12 #436)
#750 := (= #415 0::Int)
#583 := (not #750)
#550 := (+ f3 #436)
#555 := (>= #550 0::Int)
#549 := (= #550 0::Int)
#1 := true
#69 := [true-axiom]: true
#499 := (or false #549)
#501 := [th-lemma arith]: #499
#502 := [unit-resolution #501 #69]: #549
#505 := (not #549)
#506 := (or #505 #555)
#510 := [th-lemma arith triangle-eq]: #506
#503 := [unit-resolution #510 #502]: #555
#540 := (<= #415 0::Int)
#495 := [hypothesis]: #750
#498 := (or #583 #540)
#480 := [th-lemma arith triangle-eq]: #498
#482 := [unit-resolution #480 #495]: #540
#485 := (not #555)
#484 := (not #540)
#483 := (not #602)
#486 := (or #429 #483 #484 #485)
#487 := [th-lemma arith assign-bounds 1 1 -1]: #486
#488 := [unit-resolution #487 #482 #497 #503]: #429
#345 := (<= #87 0::Int)
#537 := (<= #550 0::Int)
#489 := (or #505 #537)
#490 := [th-lemma arith triangle-eq]: #489
#491 := [unit-resolution #490 #502]: #537
#548 := (>= #16 0::Int)
#492 := (or #585 #548)
#481 := [th-lemma arith triangle-eq]: #492
#493 := [unit-resolution #481 #508]: #548
#541 := (>= #415 0::Int)
#470 := (or #583 #541)
#472 := [th-lemma arith triangle-eq]: #470
#473 := [unit-resolution #472 #495]: #541
#476 := (not #537)
#475 := (not #541)
#474 := (not #548)
#477 := (or #345 #474 #475 #476)
#478 := [th-lemma arith assign-bounds 1 1 -1]: #477
#471 := [unit-resolution #478 #473 #493 #491]: #345
#464 := (not #429)
#479 := (not #345)
#468 := (or #479 #464)
#88 := (= #87 0::Int)
#91 := (not #88)
#13 := (* #12 1::Int)
#17 := (+ #13 #16)
#18 := (= f3 #17)
#19 := (not #18)
#94 := (iff #19 #91)
#74 := (+ #12 #16)
#77 := (= f3 #74)
#80 := (not #77)
#92 := (iff #80 #91)
#89 := (iff #77 #88)
#90 := [rewrite]: #89
#93 := [monotonicity #90]: #92
#81 := (iff #19 #80)
#78 := (iff #18 #77)
#75 := (= #17 #74)
#72 := (= #13 #12)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#79 := [monotonicity #76]: #78
#82 := [monotonicity #79]: #81
#95 := [trans #82 #93]: #94
#71 := [asserted]: #19
#96 := [mp #71 #95]: #91
#465 := (or #88 #479 #464)
#466 := [th-lemma arith triangle-eq]: #465
#467 := [unit-resolution #466 #96]: #468
#469 := [unit-resolution #467 #471 #488]: false
#458 := [lemma #469]: #583
#725 := (div #431 -1::Int)
#730 := (* -1::Int #725)
#442 := (+ #12 #730)
#722 := (= #442 0::Int)
#723 := (ite #351 #750 #722)
#452 := (or #757 #723)
#713 := (ite #757 #756 #723)
#21 := (f5 f6 #20)
#23 := (f4 #21 #22)
#758 := (pattern #23)
#110 := (div #104 #107)
#261 := (* -1::Int #110)
#262 := (+ #23 #261)
#263 := (= #262 0::Int)
#34 := (div #20 #22)
#258 := (* -1::Int #34)
#259 := (+ #23 #258)
#260 := (= #259 0::Int)
#264 := (ite #225 #260 #263)
#257 := (= #23 0::Int)
#27 := (or #25 #26)
#265 := (ite #27 #257 #264)
#759 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #758) #265)
#268 := (forall (vars (?v0 Int) (?v1 Int)) #265)
#762 := (iff #268 #759)
#760 := (iff #265 #265)
#761 := [refl]: #760
#763 := [quant-intro #761]: #762
#228 := (ite #225 #34 #110)
#231 := (ite #27 0::Int #228)
#234 := (= #23 #231)
#237 := (forall (vars (?v0 Int) (?v1 Int)) #234)
#269 := (iff #237 #268)
#266 := (iff #234 #265)
#267 := [rewrite]: #266
#270 := [quant-intro #267]: #269
#146 := (ite #143 #34 #110)
#149 := (ite #27 0::Int #146)
#152 := (= #23 #149)
#155 := (forall (vars (?v0 Int) (?v1 Int)) #152)
#238 := (iff #155 #237)
#235 := (iff #152 #234)
#232 := (= #149 #231)
#229 := (= #146 #228)
#230 := [monotonicity #227]: #229
#233 := [monotonicity #230]: #232
#236 := [monotonicity #233]: #235
#239 := [quant-intro #236]: #238
#217 := (~ #155 #155)
#215 := (~ #152 #152)
#216 := [refl]: #215
#218 := [nnf-pos #216]: #217
#37 := (div #35 #36)
#38 := (ite #33 #34 #37)
#39 := (ite #27 0::Int #38)
#40 := (= #23 #39)
#41 := (forall (vars (?v0 Int) (?v1 Int)) #40)
#158 := (iff #41 #155)
#113 := (ite #101 #34 #110)
#116 := (ite #27 0::Int #113)
#119 := (= #23 #116)
#122 := (forall (vars (?v0 Int) (?v1 Int)) #119)
#156 := (iff #122 #155)
#153 := (iff #119 #152)
#150 := (= #116 #149)
#147 := (= #113 #146)
#148 := [monotonicity #145]: #147
#151 := [monotonicity #148]: #150
#154 := [monotonicity #151]: #153
#157 := [quant-intro #154]: #156
#123 := (iff #41 #122)
#120 := (iff #40 #119)
#117 := (= #39 #116)
#114 := (= #38 #113)
#111 := (= #37 #110)
#112 := [monotonicity #106 #109]: #111
#115 := [monotonicity #103 #112]: #114
#118 := [monotonicity #115]: #117
#121 := [monotonicity #118]: #120
#124 := [quant-intro #121]: #123
#159 := [trans #124 #157]: #158
#97 := [asserted]: #41
#160 := [mp #97 #159]: #155
#209 := [mp~ #160 #218]: #155
#240 := [mp #209 #239]: #237
#271 := [mp #240 #270]: #268
#764 := [mp #271 #763]: #759
#710 := (not #759)
#711 := (or #710 #713)
#422 := (div #431 #430)
#433 := (* -1::Int #422)
#434 := (+ #12 #433)
#435 := (= #434 0::Int)
#755 := (ite #754 #750 #435)
#747 := (or #757 #751)
#407 := (ite #747 #756 #755)
#716 := (or #710 #407)
#712 := (iff #716 #711)
#559 := (iff #711 #711)
#560 := [rewrite]: #559
#714 := (iff #407 #713)
#720 := (iff #755 #723)
#437 := (iff #435 #722)
#443 := (= #434 #442)
#440 := (= #433 #730)
#729 := (= #422 #725)
#726 := [monotonicity #451]: #729
#441 := [monotonicity #726]: #440
#721 := [monotonicity #441]: #443
#719 := [monotonicity #721]: #437
#724 := [monotonicity #728 #719]: #720
#397 := (iff #747 #757)
#408 := (or #757 false)
#733 := (iff #408 #757)
#396 := [rewrite]: #733
#749 := (iff #747 #408)
#392 := [monotonicity #748]: #749
#398 := [trans #392 #396]: #397
#715 := [monotonicity #398 #724]: #714
#718 := [monotonicity #715]: #712
#561 := [trans #718 #560]: #712
#717 := [quant-inst #8 #11]: #716
#703 := [mp #717 #561]: #711
#460 := [unit-resolution #703 #764]: #713
#691 := (not #713)
#594 := (or #691 #757 #723)
#587 := [def-axiom]: #594
#461 := [unit-resolution #587 #460]: #452
#462 := [unit-resolution #461 #459]: #723
#698 := (not #723)
#696 := (or #698 #708 #750)
#699 := [def-axiom]: #696
#453 := [unit-resolution #699 #462 #458]: #708
#706 := (or #351 #420)
#700 := [def-axiom]: #706
#463 := [unit-resolution #700 #453]: #420
#701 := (or #351 #752)
#707 := [def-axiom]: #701
#444 := [unit-resolution #707 #453]: #752
#445 := [unit-resolution #601 #444 #463 #459]: false
#446 := [lemma #445]: #757
#438 := (or #576 #756)
#591 := (or #691 #576 #756)
#593 := [def-axiom]: #591
#447 := [unit-resolution #593 #460]: #438
#448 := [unit-resolution #447 #446]: #756
#595 := (not #756)
#439 := (or #595 #704)
#449 := [th-lemma arith triangle-eq]: #439
#416 := [unit-resolution #449 #448]: #704
#418 := (or #576 #752)
#419 := [th-lemma arith triangle-eq]: #418
#410 := [unit-resolution #419 #446]: #752
#423 := (not #704)
#424 := (or #429 #423 #483 #455)
#425 := [th-lemma arith assign-bounds 1 1 -1]: #424
#426 := [unit-resolution #425 #410 #416 #497]: #429
#705 := (>= #12 0::Int)
#427 := (or #595 #705)
#417 := [th-lemma arith triangle-eq]: #427
#428 := [unit-resolution #417 #448]: #705
#411 := (or #576 #420)
#413 := [th-lemma arith triangle-eq]: #411
#414 := [unit-resolution #413 #446]: #420
#393 := (not #705)
#395 := (or #345 #393 #474 #741)
#400 := [th-lemma arith assign-bounds 1 1 -1]: #395
#401 := [unit-resolution #400 #414 #428 #493]: #345
[unit-resolution #467 #401 #426]: false
unsat
29994559a294fef222a1bfa1d73aa449b16d980f 552 0
#2 := false
#24 := 0::Int
decl f4 :: (-> S2 Int Int)
#11 := 3::Int
decl f5 :: (-> S3 Int S2)
decl f3 :: Int
#8 := f3
decl f6 :: S3
#9 := f6
#10 := (f5 f6 f3)
#12 := (f4 #10 3::Int)
#707 := (>= #12 0::Int)
#758 := (= #12 0::Int)
#754 := (= f3 0::Int)
#694 := (not #754)
#566 := [hypothesis]: #694
#749 := (<= f3 0::Int)
#753 := (>= f3 0::Int)
#457 := (not #753)
#381 := (not #749)
#460 := (or #381 #457)
#710 := (not #460)
#84 := -3::Int
#86 := -1::Int
#434 := (* -1::Int f3)
#454 := (div #434 -3::Int)
#729 := (* -1::Int #454)
#444 := (+ #12 #729)
#724 := (= #444 0::Int)
#438 := (div f3 3::Int)
#435 := (* -1::Int #438)
#439 := (+ #12 #435)
#418 := (= #439 0::Int)
#722 := (ite #460 #418 #724)
#568 := (or #754 #722)
#727 := (ite #754 #758 #722)
#22 := (:var 0 Int)
#20 := (:var 1 Int)
#21 := (f5 f6 #20)
#23 := (f4 #21 #22)
#761 := (pattern #23)
#109 := (* -1::Int #22)
#106 := (* -1::Int #20)
#112 := (div #106 #109)
#263 := (* -1::Int #112)
#264 := (+ #23 #263)
#265 := (= #264 0::Int)
#34 := (div #20 #22)
#260 := (* -1::Int #34)
#261 := (+ #23 #260)
#262 := (= #261 0::Int)
#138 := (>= #20 0::Int)
#131 := (<= #22 0::Int)
#223 := (or #131 #138)
#224 := (not #223)
#127 := (<= #20 0::Int)
#221 := (or #127 #131)
#222 := (not #221)
#227 := (or #222 #224)
#266 := (ite #227 #262 #265)
#259 := (= #23 0::Int)
#26 := (= #22 0::Int)
#25 := (= #20 0::Int)
#27 := (or #25 #26)
#267 := (ite #27 #259 #266)
#762 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #761) #267)
#270 := (forall (vars (?v0 Int) (?v1 Int)) #267)
#765 := (iff #270 #762)
#763 := (iff #267 #267)
#764 := [refl]: #763
#766 := [quant-intro #764]: #765
#230 := (ite #227 #34 #112)
#233 := (ite #27 0::Int #230)
#236 := (= #23 #233)
#239 := (forall (vars (?v0 Int) (?v1 Int)) #236)
#271 := (iff #239 #270)
#268 := (iff #236 #267)
#269 := [rewrite]: #268
#272 := [quant-intro #269]: #271
#139 := (not #138)
#132 := (not #131)
#142 := (and #132 #139)
#128 := (not #127)
#135 := (and #128 #132)
#145 := (or #135 #142)
#148 := (ite #145 #34 #112)
#151 := (ite #27 0::Int #148)
#154 := (= #23 #151)
#157 := (forall (vars (?v0 Int) (?v1 Int)) #154)
#240 := (iff #157 #239)
#237 := (iff #154 #236)
#234 := (= #151 #233)
#231 := (= #148 #230)
#228 := (iff #145 #227)
#225 := (iff #142 #224)
#226 := [rewrite]: #225
#215 := (iff #135 #222)
#216 := [rewrite]: #215
#229 := [monotonicity #216 #226]: #228
#232 := [monotonicity #229]: #231
#235 := [monotonicity #232]: #234
#238 := [monotonicity #235]: #237
#241 := [quant-intro #238]: #240
#219 := (~ #157 #157)
#217 := (~ #154 #154)
#218 := [refl]: #217
#220 := [nnf-pos #218]: #219
#36 := (- #22)
#35 := (- #20)
#37 := (div #35 #36)
#29 := (< 0::Int #22)
#31 := (< #20 0::Int)
#32 := (and #31 #29)
#28 := (< 0::Int #20)
#30 := (and #28 #29)
#33 := (or #30 #32)
#38 := (ite #33 #34 #37)
#39 := (ite #27 0::Int #38)
#40 := (= #23 #39)
#41 := (forall (vars (?v0 Int) (?v1 Int)) #40)
#160 := (iff #41 #157)
#100 := (and #29 #31)
#103 := (or #30 #100)
#115 := (ite #103 #34 #112)
#118 := (ite #27 0::Int #115)
#121 := (= #23 #118)
#124 := (forall (vars (?v0 Int) (?v1 Int)) #121)
#158 := (iff #124 #157)
#155 := (iff #121 #154)
#152 := (= #118 #151)
#149 := (= #115 #148)
#146 := (iff #103 #145)
#143 := (iff #100 #142)
#140 := (iff #31 #139)
#141 := [rewrite]: #140
#133 := (iff #29 #132)
#134 := [rewrite]: #133
#144 := [monotonicity #134 #141]: #143
#136 := (iff #30 #135)
#129 := (iff #28 #128)
#130 := [rewrite]: #129
#137 := [monotonicity #130 #134]: #136
#147 := [monotonicity #137 #144]: #146
#150 := [monotonicity #147]: #149
#153 := [monotonicity #150]: #152
#156 := [monotonicity #153]: #155
#159 := [quant-intro #156]: #158
#125 := (iff #41 #124)
#122 := (iff #40 #121)
#119 := (= #39 #118)
#116 := (= #38 #115)
#113 := (= #37 #112)
#110 := (= #36 #109)
#111 := [rewrite]: #110
#107 := (= #35 #106)
#108 := [rewrite]: #107
#114 := [monotonicity #108 #111]: #113
#104 := (iff #33 #103)
#101 := (iff #32 #100)
#102 := [rewrite]: #101
#105 := [monotonicity #102]: #104
#117 := [monotonicity #105 #114]: #116
#120 := [monotonicity #117]: #119
#123 := [monotonicity #120]: #122
#126 := [quant-intro #123]: #125
#161 := [trans #126 #159]: #160
#99 := [asserted]: #41
#162 := [mp #99 #161]: #157
#211 := [mp~ #162 #220]: #157
#242 := [mp #211 #241]: #239
#273 := [mp #242 #272]: #270
#767 := [mp #273 #766]: #762
#718 := (not #762)
#713 := (or #718 #727)
#433 := (* -1::Int 3::Int)
#425 := (div #434 #433)
#436 := (* -1::Int #425)
#437 := (+ #12 #436)
#365 := (= #437 0::Int)
#755 := (<= 3::Int 0::Int)
#412 := (or #755 #753)
#542 := (not #412)
#423 := (or #749 #755)
#424 := (not #423)
#756 := (or #424 #542)
#757 := (ite #756 #418 #365)
#759 := (= 3::Int 0::Int)
#760 := (or #754 #759)
#750 := (ite #760 #758 #757)
#714 := (or #718 #750)
#720 := (iff #714 #713)
#721 := (iff #713 #713)
#562 := [rewrite]: #721
#716 := (iff #750 #727)
#726 := (iff #757 #722)
#725 := (iff #365 #724)
#445 := (= #437 #444)
#733 := (= #436 #729)
#728 := (= #425 #454)
#731 := (= #433 -3::Int)
#453 := [rewrite]: #731
#732 := [monotonicity #453]: #728
#443 := [monotonicity #732]: #733
#446 := [monotonicity #443]: #445
#440 := [monotonicity #446]: #725
#353 := (iff #756 #460)
#458 := (iff #542 #457)
#734 := (iff #412 #753)
#386 := (or false #753)
#745 := (iff #386 #753)
#748 := [rewrite]: #745
#387 := (iff #412 #386)
#401 := (iff #755 false)
#402 := [rewrite]: #401
#747 := [monotonicity #402]: #387
#735 := [trans #747 #748]: #734
#459 := [monotonicity #735]: #458
#744 := (iff #424 #381)
#737 := (iff #423 #749)
#738 := (or #749 false)
#741 := (iff #738 #749)
#742 := [rewrite]: #741
#739 := (iff #423 #738)
#740 := [monotonicity #402]: #739
#743 := [trans #740 #742]: #737
#746 := [monotonicity #743]: #744
#730 := [monotonicity #746 #459]: #353
#723 := [monotonicity #730 #440]: #726
#399 := (iff #760 #754)
#751 := (or #754 false)
#395 := (iff #751 #754)
#736 := [rewrite]: #395
#411 := (iff #760 #751)
#410 := (iff #759 false)
#415 := [rewrite]: #410
#752 := [monotonicity #415]: #411
#400 := [trans #752 #736]: #399
#717 := [monotonicity #400 #723]: #716
#715 := [monotonicity #717]: #720
#563 := [trans #715 #562]: #720
#719 := [quant-inst #8 #11]: #714
#564 := [mp #719 #563]: #713
#567 := [unit-resolution #564 #767]: #727
#691 := (not #727)
#596 := (or #691 #754 #722)
#597 := [def-axiom]: #596
#569 := [unit-resolution #597 #567]: #568
#570 := [unit-resolution #569 #566]: #722
#544 := (mod #434 -3::Int)
decl f7 :: S3
#14 := f7
#15 := (f5 f7 f3)
#16 := (f4 #15 3::Int)
#689 := (+ #16 #544)
#680 := (= #689 0::Int)
#712 := (mod f3 3::Int)
#696 := (* -1::Int #712)
#683 := (+ #16 #696)
#685 := (= #683 0::Int)
#682 := (ite #460 #685 #680)
#529 := (or #754 #682)
#674 := (= #16 0::Int)
#669 := (ite #754 #674 #682)
#42 := (f5 f7 #20)
#43 := (f4 #42 #22)
#768 := (pattern #43)
#164 := (mod #106 #109)
#279 := (+ #43 #164)
#280 := (= #279 0::Int)
#44 := (mod #20 #22)
#276 := (* -1::Int #44)
#277 := (+ #43 #276)
#278 := (= #277 0::Int)
#281 := (ite #227 #278 #280)
#275 := (= #43 0::Int)
#282 := (ite #25 #275 #281)
#274 := (= #20 #43)
#283 := (ite #26 #274 #282)
#769 := (forall (vars (?v0 Int) (?v1 Int)) (:pat #768) #283)
#286 := (forall (vars (?v0 Int) (?v1 Int)) #283)
#772 := (iff #286 #769)
#770 := (iff #283 #283)
#771 := [refl]: #770
#773 := [quant-intro #771]: #772
#170 := (* -1::Int #164)
#243 := (ite #227 #44 #170)
#246 := (ite #25 0::Int #243)
#249 := (ite #26 #20 #246)
#252 := (= #43 #249)
#255 := (forall (vars (?v0 Int) (?v1 Int)) #252)
#287 := (iff #255 #286)
#284 := (iff #252 #283)
#285 := [rewrite]: #284
#288 := [quant-intro #285]: #287
#190 := (ite #145 #44 #170)
#193 := (ite #25 0::Int #190)
#196 := (ite #26 #20 #193)
#199 := (= #43 #196)
#202 := (forall (vars (?v0 Int) (?v1 Int)) #199)
#256 := (iff #202 #255)
#253 := (iff #199 #252)
#250 := (= #196 #249)
#247 := (= #193 #246)
#244 := (= #190 #243)
#245 := [monotonicity #229]: #244
#248 := [monotonicity #245]: #247
#251 := [monotonicity #248]: #250
#254 := [monotonicity #251]: #253
#257 := [quant-intro #254]: #256
#213 := (~ #202 #202)
#212 := (~ #199 #199)
#209 := [refl]: #212
#214 := [nnf-pos #209]: #213
#45 := (mod #35 #36)
#46 := (- #45)
#47 := (ite #33 #44 #46)
#48 := (ite #25 0::Int #47)
#49 := (ite #26 #20 #48)
#50 := (= #43 #49)
#51 := (forall (vars (?v0 Int) (?v1 Int)) #50)
#205 := (iff #51 #202)
#175 := (ite #103 #44 #170)
#178 := (ite #25 0::Int #175)
#181 := (ite #26 #20 #178)
#184 := (= #43 #181)
#187 := (forall (vars (?v0 Int) (?v1 Int)) #184)
#203 := (iff #187 #202)
#200 := (iff #184 #199)
#197 := (= #181 #196)
#194 := (= #178 #193)
#191 := (= #175 #190)
#192 := [monotonicity #147]: #191
#195 := [monotonicity #192]: #194
#198 := [monotonicity #195]: #197
#201 := [monotonicity #198]: #200
#204 := [quant-intro #201]: #203
#188 := (iff #51 #187)
#185 := (iff #50 #184)
#182 := (= #49 #181)
#179 := (= #48 #178)
#176 := (= #47 #175)
#173 := (= #46 #170)
#167 := (- #164)
#171 := (= #167 #170)
#172 := [rewrite]: #171
#168 := (= #46 #167)
#165 := (= #45 #164)
#166 := [monotonicity #108 #111]: #165
#169 := [monotonicity #166]: #168
#174 := [trans #169 #172]: #173
#177 := [monotonicity #105 #174]: #176
#180 := [monotonicity #177]: #179
#183 := [monotonicity #180]: #182
#186 := [monotonicity #183]: #185
#189 := [quant-intro #186]: #188
#206 := [trans #189 #204]: #205
#163 := [asserted]: #51
#207 := [mp #163 #206]: #202
#210 := [mp~ #207 #214]: #202
#258 := [mp #210 #257]: #255
#289 := [mp #258 #288]: #286
#774 := [mp #289 #773]: #769
#664 := (not #769)
#661 := (or #664 #669)
#602 := (mod #434 #433)
#695 := (+ #16 #602)
#692 := (= #695 0::Int)
#677 := (ite #756 #685 #692)
#676 := (ite #754 #674 #677)
#686 := (= f3 #16)
#687 := (ite #759 #686 #676)
#665 := (or #664 #687)
#646 := (iff #665 #661)
#649 := (iff #661 #661)
#650 := [rewrite]: #649
#662 := (iff #687 #669)
#672 := (ite false #686 #669)
#659 := (iff #672 #669)
#660 := [rewrite]: #659
#668 := (iff #687 #672)
#670 := (iff #676 #669)
#666 := (iff #677 #682)
#681 := (iff #692 #680)
#678 := (= #695 #689)
#688 := (= #602 #544)
#684 := [monotonicity #453]: #688
#679 := [monotonicity #684]: #678
#675 := [monotonicity #679]: #681
#667 := [monotonicity #730 #675]: #666
#671 := [monotonicity #667]: #670
#673 := [monotonicity #415 #671]: #668
#663 := [trans #673 #660]: #662
#648 := [monotonicity #663]: #646
#651 := [trans #648 #650]: #646
#645 := [quant-inst #8 #11]: #665
#652 := [mp #645 #651]: #661
#625 := [unit-resolution #652 #774]: #669
#626 := (not #669)
#631 := (or #626 #754 #682)
#632 := [def-axiom]: #631
#530 := [unit-resolution #632 #625]: #529
#531 := [unit-resolution #530 #566]: #682
#700 := (not #722)
#658 := (not #682)
#495 := (or #710 #658 #700)
#656 := (>= #683 0::Int)
#571 := [hypothesis]: #682
#572 := [hypothesis]: #460
#636 := (or #658 #710 #685)
#637 := [def-axiom]: #636
#573 := [unit-resolution #637 #572 #571]: #685
#641 := (not #685)
#497 := (or #641 #656)
#499 := [th-lemma arith triangle-eq]: #497
#500 := [unit-resolution #499 #573]: #656
#543 := (>= #439 0::Int)
#553 := [hypothesis]: #722
#701 := (or #700 #710 #418)
#699 := [def-axiom]: #701
#554 := [unit-resolution #699 #572 #553]: #418
#585 := (not #418)
#498 := (or #585 #543)
#501 := [th-lemma arith triangle-eq]: #498
#483 := [unit-resolution #501 #554]: #543
#87 := (* -1::Int #16)
#85 := (* -3::Int #12)
#88 := (+ #85 #87)
#89 := (+ f3 #88)
#347 := (<= #89 0::Int)
#485 := (not #347)
#432 := (>= #89 0::Int)
#561 := (not #432)
#577 := [hypothesis]: #561
#537 := (or #754 #432)
#558 := (or #710 #432 #658 #700)
#655 := (<= #683 0::Int)
#574 := (or #641 #655)
#575 := [th-lemma arith triangle-eq]: #574
#576 := [unit-resolution #575 #573]: #655
#619 := (* -3::Int #438)
#622 := (+ #619 #696)
#623 := (+ f3 #622)
#605 := (>= #623 0::Int)
#618 := (= #623 0::Int)
#1 := true
#69 := [true-axiom]: true
#538 := (or false #618)
#539 := [th-lemma arith]: #538
#546 := [unit-resolution #539 #69]: #618
#548 := (not #618)
#549 := (or #548 #605)
#550 := [th-lemma arith triangle-eq]: #549
#552 := [unit-resolution #550 #546]: #605
#541 := (<= #439 0::Int)
#555 := (or #585 #541)
#556 := [th-lemma arith triangle-eq]: #555
#557 := [unit-resolution #556 #554]: #541
#540 := [th-lemma arith farkas 3 -1 1 1 #557 #552 #577 #576]: false
#528 := [lemma #540]: #558
#533 := [unit-resolution #528 #531 #577 #570]: #710
#708 := (or #460 #749)
#709 := [def-axiom]: #708
#534 := [unit-resolution #709 #533]: #749
#703 := (or #460 #753)
#704 := [def-axiom]: #703
#535 := [unit-resolution #704 #533]: #753
#378 := (or #754 #381 #457)
#536 := [th-lemma arith triangle-eq]: #378
#532 := [unit-resolution #536 #535 #534 #566]: false
#516 := [lemma #532]: #537
#519 := [unit-resolution #516 #577]: #754
#523 := (or #694 #753)
#525 := [th-lemma arith triangle-eq]: #523
#526 := [unit-resolution #525 #519]: #753
#653 := (<= #16 0::Int)
#524 := (or #694 #674)
#627 := (or #626 #694 #674)
#628 := [def-axiom]: #627
#527 := [unit-resolution #628 #625]: #524
#515 := [unit-resolution #527 #519]: #674
#633 := (not #674)
#518 := (or #633 #653)
#520 := [th-lemma arith triangle-eq]: #518
#521 := [unit-resolution #520 #515]: #653
#706 := (<= #12 0::Int)
#517 := (or #694 #758)
#579 := (or #691 #694 #758)
#594 := [def-axiom]: #579
#522 := [unit-resolution #594 #567]: #517
#512 := [unit-resolution #522 #519]: #758
#590 := (not #758)
#502 := (or #590 #706)
#504 := [th-lemma arith triangle-eq]: #502
#505 := [unit-resolution #504 #512]: #706
#508 := [th-lemma arith farkas -3 -1 -1 1 #505 #521 #577 #526]: false
#509 := [lemma #508]: #432
#488 := (or #485 #561)
#90 := (= #89 0::Int)
#93 := (not #90)
#13 := (* #12 3::Int)
#17 := (+ #13 #16)
#18 := (= f3 #17)
#19 := (not #18)
#96 := (iff #19 #93)
#72 := (* 3::Int #12)
#75 := (+ #72 #16)
#78 := (= f3 #75)
#81 := (not #78)
#94 := (iff #81 #93)
#91 := (iff #78 #90)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#82 := (iff #19 #81)
#79 := (iff #18 #78)
#76 := (= #17 #75)
#73 := (= #13 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#80 := [monotonicity #77]: #79
#83 := [monotonicity #80]: #82
#97 := [trans #83 #95]: #96
#71 := [asserted]: #19
#98 := [mp #71 #97]: #93
#486 := (or #90 #485 #561)
#487 := [th-lemma arith triangle-eq]: #486
#489 := [unit-resolution #487 #98]: #488
#490 := [unit-resolution #489 #509]: #485
#513 := (<= #623 0::Int)
#491 := (or #548 #513)
#492 := [th-lemma arith triangle-eq]: #491
#493 := [unit-resolution #492 #546]: #513
#494 := [th-lemma arith farkas -1 1 3 1 #493 #490 #483 #500]: false
#484 := [lemma #494]: #495
#506 := [unit-resolution #484 #531 #570]: #710
#514 := [unit-resolution #709 #506]: #749
#507 := [unit-resolution #704 #506]: #753
#510 := [unit-resolution #536 #507 #514 #566]: false
#511 := [lemma #510]: #754
#496 := [unit-resolution #522 #511]: #758
#473 := (or #590 #707)
#475 := [th-lemma arith triangle-eq]: #473
#476 := [unit-resolution #475 #496]: #707
#654 := (>= #16 0::Int)
#477 := [unit-resolution #527 #511]: #674
#478 := (or #633 #654)
#479 := [th-lemma arith triangle-eq]: #478
#480 := [unit-resolution #479 #477]: #654
#481 := (or #694 #749)
#474 := [th-lemma arith triangle-eq]: #481
#482 := [unit-resolution #474 #511]: #749
[th-lemma arith farkas -1/3 1/3 1/3 1 #482 #480 #490 #476]: false
unsat
cacbb4776a876130daed2cf13657b41ab1c7df25 75 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#35 := -1::Int
#36 := (* -1::Int f3)
#48 := (>= f3 0::Int)
#55 := (ite #48 f3 #36)
#75 := (* -1::Int #55)
#84 := (+ #36 #75)
#93 := (<= #84 0::Int)
#80 := (= #36 #55)
#49 := (not #48)
#76 := (+ f3 #75)
#83 := (<= #76 0::Int)
#79 := (= f3 #55)
#85 := [hypothesis]: #48
#81 := (or #49 #79)
#82 := [def-axiom]: #81
#86 := [unit-resolution #82 #85]: #79
#87 := (not #79)
#88 := (or #87 #83)
#89 := [th-lemma arith triangle-eq]: #88
#90 := [unit-resolution #89 #86]: #83
#64 := (>= #55 0::Int)
#68 := (not #64)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (<= 0::Int #12)
#14 := (not #13)
#71 := (iff #14 #68)
#39 := (ite #10 #36 f3)
#42 := (<= 0::Int #39)
#45 := (not #42)
#69 := (iff #45 #68)
#66 := (iff #42 #64)
#60 := (<= 0::Int #55)
#63 := (iff #60 #64)
#65 := [rewrite]: #63
#61 := (iff #42 #60)
#58 := (= #39 #55)
#52 := (ite #49 #36 f3)
#56 := (= #52 #55)
#57 := [rewrite]: #56
#53 := (= #39 #52)
#50 := (iff #10 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#70 := [monotonicity #67]: #69
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#72 := [trans #47 #70]: #71
#34 := [asserted]: #14
#73 := [mp #34 #72]: #68
#91 := [th-lemma arith farkas -1 1 1 #85 #73 #90]: false
#92 := [lemma #91]: #49
#77 := (or #48 #80)
#78 := [def-axiom]: #77
#95 := [unit-resolution #78 #92]: #80
#96 := (not #80)
#97 := (or #96 #93)
#98 := [th-lemma arith triangle-eq]: #97
#99 := [unit-resolution #98 #95]: #93
[th-lemma arith farkas 1 1 1 #92 #73 #99]: false
unsat
72eab31a3a69b2d560f65ab53e94b5e0f28ca228 128 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#37 := -1::Int
#38 := (* -1::Int f3)
#137 := (<= #38 0::Int)
#136 := (= #38 0::Int)
#69 := (>= f3 0::Int)
#76 := (ite #69 f3 #38)
#85 := (= #76 0::Int)
#105 := (= f3 #76)
#127 := (not #105)
#101 := (not #85)
#128 := (iff #101 #127)
#125 := (iff #85 #105)
#123 := (iff #105 #85)
#81 := (= 0::Int #76)
#84 := (iff #81 #85)
#122 := [commutativity]: #84
#120 := (iff #105 #81)
#14 := (= f3 0::Int)
#118 := [hypothesis]: #101
#115 := (or #14 #85)
#63 := (not #14)
#92 := (iff #63 #85)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::Int)
#15 := (iff #13 #14)
#16 := (not #15)
#97 := (iff #16 #92)
#41 := (ite #10 #38 f3)
#47 := (= 0::Int #41)
#64 := (iff #47 #63)
#95 := (iff #64 #92)
#89 := (iff #85 #63)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #64 #89)
#87 := (iff #47 #85)
#86 := [rewrite]: #84
#82 := (iff #47 #81)
#79 := (= #41 #76)
#70 := (not #69)
#73 := (ite #70 #38 f3)
#77 := (= #73 #76)
#78 := [rewrite]: #77
#74 := (= #41 #73)
#71 := (iff #10 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#91 := [monotonicity #88]: #90
#96 := [trans #91 #94]: #95
#67 := (iff #16 #64)
#55 := (iff #14 #47)
#60 := (not #55)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (iff #47 #14)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #13 #47)
#44 := (= #41 0::Int)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #13 #44)
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#98 := [trans #68 #96]: #97
#36 := [asserted]: #16
#99 := [mp #36 #98]: #92
#102 := (not #92)
#113 := (or #14 #85 #102)
#114 := [def-axiom]: #113
#116 := [unit-resolution #114 #99]: #115
#119 := [unit-resolution #116 #118]: #14
#121 := [monotonicity #119]: #120
#124 := [trans #121 #122]: #123
#126 := [symm #124]: #125
#129 := [monotonicity #126]: #128
#130 := [mp #118 #129]: #127
#131 := (or #63 #69)
#132 := [th-lemma arith triangle-eq]: #131
#133 := [unit-resolution #132 #119]: #69
#107 := (or #70 #105)
#108 := [def-axiom]: #107
#134 := [unit-resolution #108 #133 #130]: false
#135 := [lemma #134]: #85
#106 := (= #38 #76)
#144 := (iff #63 #127)
#142 := (iff #14 #105)
#140 := (iff #105 #14)
#141 := [monotonicity #135]: #140
#143 := [symm #141]: #142
#145 := [monotonicity #143]: #144
#111 := (or #63 #101)
#109 := (or #63 #101 #102)
#110 := [def-axiom]: #109
#112 := [unit-resolution #110 #99]: #111
#139 := [unit-resolution #112 #135]: #63
#146 := [mp #139 #145]: #127
#147 := [unit-resolution #108 #146]: #70
#103 := (or #69 #106)
#104 := [def-axiom]: #103
#148 := [unit-resolution #104 #147]: #106
#149 := [trans #148 #135]: #136
#150 := (not #136)
#151 := (or #150 #137)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #149]: #137
[th-lemma arith farkas 1 1 #147 #153]: false
unsat
65683f244c3b3437d2ff4b46228877d5d6db1b1c 103 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#64 := (>= f3 0::Int)
#37 := -1::Int
#38 := (* -1::Int f3)
#111 := (* -1::Int #38)
#112 := (+ f3 #111)
#114 := (>= #112 0::Int)
#110 := (= f3 #38)
#71 := (ite #64 f3 #38)
#118 := (= #71 #38)
#99 := (= #38 #71)
#65 := (not #64)
#115 := [hypothesis]: #65
#102 := (or #64 #99)
#97 := [def-axiom]: #102
#116 := [unit-resolution #97 #115]: #99
#119 := [symm #116]: #118
#76 := (= f3 #71)
#108 := (or #64 #76)
#86 := (iff #65 #76)
#12 := (- f3)
#11 := (< f3 0::Int)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::Int f3)
#15 := (iff #10 #14)
#16 := (not #15)
#91 := (iff #16 #86)
#58 := (not #10)
#41 := (ite #11 #38 f3)
#47 := (= f3 #41)
#59 := (iff #47 #58)
#89 := (iff #59 #86)
#83 := (iff #76 #65)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #59 #83)
#81 := (iff #58 #65)
#79 := (iff #10 #64)
#80 := [rewrite]: #79
#82 := [monotonicity #80]: #81
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#85 := [monotonicity #78 #82]: #84
#90 := [trans #85 #88]: #89
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 f3)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#42 := (= #13 #41)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#92 := [trans #63 #90]: #91
#36 := [asserted]: #16
#93 := [mp #36 #92]: #86
#95 := (not #86)
#106 := (or #64 #76 #95)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #93]: #108
#117 := [unit-resolution #109 #115]: #76
#120 := [trans #117 #119]: #110
#121 := (not #110)
#122 := (or #121 #114)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #114
#125 := [th-lemma arith farkas 2 1 #115 #124]: false
#126 := [lemma #125]: #64
#100 := (or #65 #76)
#101 := [def-axiom]: #100
#113 := [unit-resolution #101 #126]: #76
#98 := (not #76)
#104 := (or #65 #98)
#96 := (or #65 #98 #95)
#103 := [def-axiom]: #96
#105 := [unit-resolution #103 #93]: #104
[unit-resolution #105 #113 #126]: false
unsat
6706cda989499422594f4bdacb2cec77f1d7ef2e 152 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#37 := -1::Int
#38 := (* -1::Int f3)
#64 := (>= f3 0::Int)
#71 := (ite #64 f3 #38)
#114 := (* -1::Int #71)
#164 := (+ f3 #114)
#165 := (<= #164 0::Int)
#101 := (= f3 #71)
#115 := (+ #38 #114)
#117 := (>= #115 0::Int)
#76 := (= #38 #71)
#65 := (not #64)
#149 := [hypothesis]: #65
#104 := (or #64 #76)
#99 := [def-axiom]: #104
#150 := [unit-resolution #99 #149]: #76
#143 := (not #76)
#151 := (or #143 #117)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #150]: #117
#81 := (+ f3 #71)
#100 := (<= #81 0::Int)
#158 := (not #100)
#97 := (>= #81 0::Int)
#116 := (<= #115 0::Int)
#80 := (= #81 0::Int)
#98 := (not #80)
#136 := (not #97)
#137 := [hypothesis]: #136
#138 := (or #98 #97)
#139 := [th-lemma arith triangle-eq]: #138
#140 := [unit-resolution #139 #137]: #98
#134 := (or #65 #80)
#121 := (= f3 0::Int)
#10 := (<= f3 0::Int)
#118 := [hypothesis]: #98
#112 := (or #10 #80)
#58 := (not #10)
#88 := (iff #58 #80)
#12 := (- f3)
#11 := (< f3 0::Int)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#93 := (iff #16 #88)
#41 := (ite #11 #38 f3)
#47 := (= #38 #41)
#59 := (iff #47 #58)
#91 := (iff #59 #88)
#85 := (iff #80 #58)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #59 #85)
#83 := (iff #47 #80)
#79 := (iff #76 #80)
#82 := [rewrite]: #79
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 #38)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#42 := (= #13 #41)
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43 #40]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#94 := [trans #63 #92]: #93
#36 := [asserted]: #16
#95 := [mp #36 #94]: #88
#105 := (not #88)
#110 := (or #10 #80 #105)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #95]: #112
#119 := [unit-resolution #113 #118]: #10
#120 := [hypothesis]: #64
#122 := [th-lemma arith eq-propagate 0 0 #120 #119]: #121
#130 := (= #81 f3)
#128 := (= #71 f3)
#102 := (or #65 #101)
#103 := [def-axiom]: #102
#123 := [unit-resolution #103 #120]: #101
#129 := [symm #123]: #128
#126 := (= #81 #71)
#124 := (= #71 #81)
#125 := [th-lemma arith eq-propagate 1 1 #120 #119]: #124
#127 := [symm #125]: #126
#131 := [trans #127 #129]: #130
#132 := [trans #131 #122]: #80
#133 := [unit-resolution #118 #132]: false
#135 := [lemma #133]: #134
#141 := [unit-resolution #135 #140]: #65
#142 := [unit-resolution #99 #141]: #76
#144 := (or #143 #116)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #116
#147 := [th-lemma arith farkas 1 1 #137 #146]: false
#148 := [lemma #147]: #97
#154 := (or #64 #10)
#155 := [th-lemma arith farkas 1 1]: #154
#156 := [unit-resolution #155 #149]: #10
#108 := (or #58 #98)
#106 := (or #58 #98 #105)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #95]: #108
#157 := [unit-resolution #109 #156]: #98
#159 := (or #80 #158 #136)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157 #148]: #158
#162 := [th-lemma arith farkas 1 1 #161 #153]: false
#163 := [lemma #162]: #64
#167 := [unit-resolution #103 #163]: #101
#168 := (not #101)
#169 := (or #168 #165)
#170 := [th-lemma arith triangle-eq]: #169
#171 := [unit-resolution #170 #167]: #165
#172 := [unit-resolution #135 #163]: #80
#173 := (or #98 #100)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #172]: #100
#176 := [unit-resolution #109 #172]: #58
[th-lemma arith farkas 2 1 1 #176 #175 #171]: false
unsat
7937f47574f63ba7fda8d181035eac5a04f1804b 114 0
#2 := false
#9 := 0::Int
decl f3 :: Int
#8 := f3
#38 := -1::Int
#39 := (* -1::Int f3)
#70 := (>= f3 0::Int)
#77 := (ite #70 f3 #39)
#91 := (* -1::Int #77)
#130 := (+ #39 #91)
#140 := (<= #130 0::Int)
#117 := (= #39 #77)
#71 := (not #70)
#128 := (+ f3 #91)
#129 := (<= #128 0::Int)
#116 := (= f3 #77)
#131 := [hypothesis]: #70
#118 := (or #71 #116)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131]: #116
#133 := (not #116)
#134 := (or #133 #129)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #129
#86 := (>= #77 0::Int)
#85 := (not #86)
#97 := (ite #86 #77 #91)
#102 := (= #77 #97)
#105 := (not #102)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::Int)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#108 := (iff #17 #105)
#42 := (ite #10 #39 f3)
#51 := (* -1::Int #42)
#45 := (< #42 0::Int)
#56 := (ite #45 #51 #42)
#62 := (= #42 #56)
#67 := (not #62)
#106 := (iff #67 #105)
#103 := (iff #62 #102)
#100 := (= #56 #97)
#94 := (ite #85 #91 #77)
#98 := (= #94 #97)
#99 := [rewrite]: #98
#95 := (= #56 #94)
#80 := (= #42 #77)
#74 := (ite #71 #39 f3)
#78 := (= #74 #77)
#79 := [rewrite]: #78
#75 := (= #42 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#92 := (= #51 #91)
#93 := [monotonicity #81]: #92
#89 := (iff #45 #85)
#82 := (< #77 0::Int)
#87 := (iff #82 #85)
#88 := [rewrite]: #87
#83 := (iff #45 #82)
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#96 := [monotonicity #90 #93 #81]: #95
#101 := [trans #96 #99]: #100
#104 := [monotonicity #81 #101]: #103
#107 := [monotonicity #104]: #106
#68 := (iff #17 #67)
#65 := (iff #16 #62)
#59 := (= #56 #42)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#43 := (= #12 #42)
#40 := (= #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#57 := (= #15 #56)
#54 := (= #14 #51)
#48 := (- #42)
#52 := (= #48 #51)
#53 := [rewrite]: #52
#49 := (= #14 #48)
#50 := [monotonicity #44]: #49
#55 := [trans #50 #53]: #54
#46 := (iff #13 #45)
#47 := [monotonicity #44]: #46
#58 := [monotonicity #47 #55 #44]: #57
#61 := [monotonicity #58 #44]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#109 := [trans #69 #107]: #108
#37 := [asserted]: #17
#110 := [mp #37 #109]: #105
#113 := (or #85 #102)
#120 := [def-axiom]: #113
#137 := [unit-resolution #120 #110]: #85
#138 := [th-lemma arith farkas -1 1 1 #131 #137 #136]: false
#139 := [lemma #138]: #71
#114 := (or #70 #117)
#115 := [def-axiom]: #114
#142 := [unit-resolution #115 #139]: #117
#143 := (not #117)
#144 := (or #143 #140)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #140
[th-lemma arith farkas 1 1 1 #139 #137 #146]: false
unsat
a868efa9f7901f51a029173b2123a5ae296196e1 57 0
#2 := false
#39 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f3 f4)
#51 := (* -1::Int #43)
#60 := (+ f4 #51)
#74 := (>= #60 0::Int)
#64 := (= f4 #43)
#65 := (not #40)
#63 := (= f3 #43)
#68 := (not #63)
#52 := (+ f3 #51)
#50 := (>= #52 0::Int)
#56 := (not #50)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #50)
#46 := (<= #43 f3)
#49 := (iff #46 #50)
#53 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #50)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #74)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #74
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
82b647da9fab0aa64c094a4662b5883d9bc7b999 57 0
#2 := false
#39 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f3 f4)
#50 := (* -1::Int #43)
#51 := (+ f4 #50)
#49 := (>= #51 0::Int)
#56 := (not #49)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #49)
#46 := (<= #43 f4)
#52 := (iff #46 #49)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f4 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f3 #50)
#68 := (>= #60 0::Int)
#63 := (= f3 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #68)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #68
#75 := [th-lemma arith farkas -1 1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #49)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
9b46d108c41d783ae69f553dfb50c9b551e3e4dc 103 0
#2 := false
#48 := 0::Int
decl f5 :: Int
#11 := f5
decl f4 :: Int
#9 := f4
#46 := -1::Int
#56 := (* -1::Int f5)
#66 := (+ f4 #56)
#67 := (<= #66 0::Int)
#70 := (ite #67 f4 f5)
#78 := (* -1::Int #70)
decl f3 :: Int
#8 := f3
#79 := (+ f3 #78)
#77 := (>= #79 0::Int)
#76 := (not #77)
#57 := (+ f3 #56)
#55 := (>= #57 0::Int)
#54 := (not #55)
#50 := (* -1::Int f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Int)
#47 := (not #49)
#60 := (and #47 #54)
#63 := (not #60)
#84 := (or #63 #76)
#87 := (not #84)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #76)
#73 := (< f3 #70)
#80 := (iff #73 #76)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #54)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #77
#93 := [not-or-elim #92]: #60
#95 := [and-elim #93]: #54
#101 := (+ f5 #78)
#118 := (<= #101 0::Int)
#107 := (= f5 #70)
#108 := (not #67)
#106 := (= f4 #70)
#113 := (not #106)
#103 := (+ f4 #78)
#100 := (<= #103 0::Int)
#110 := (not #100)
#94 := [and-elim #93]: #47
#98 := [hypothesis]: #100
#99 := [th-lemma arith farkas -1 -1 1 #98 #94 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #100)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #118)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #118
[th-lemma arith farkas -1 -1 1 #125 #95 #96]: false
unsat
384d72c036cb4a504daa40b92a17937fc9e8eeef 94 0
#2 := false
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#41 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Int)
#51 := (ite #49 f4 f3)
#42 := (<= #40 0::Int)
#45 := (ite #42 f3 f4)
#54 := (= #45 #51)
#61 := (= f4 #51)
#66 := (not #42)
#64 := (= f3 #45)
#106 := (not #64)
#68 := (= f3 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#74 := (= f3 f4)
#65 := (= f4 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#98 := [trans #97 #78]: #68
#99 := [unit-resolution #76 #98]: false
#100 := [lemma #99]: #68
#102 := (= #45 f3)
#101 := [hypothesis]: #64
#103 := [symm #101]: #102
#104 := [trans #103 #100]: #54
#105 := [unit-resolution #60 #104]: false
#107 := [lemma #105]: #106
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#108 := [unit-resolution #62 #107]: #66
#110 := (or #49 #42)
#111 := [th-lemma arith farkas 1 1]: #110
#112 := [unit-resolution #111 #108]: #49
#113 := [unit-resolution #71 #112]: #61
#116 := (= #45 f4)
#109 := [unit-resolution #37 #108]: #65
#117 := [symm #109]: #116
#118 := [trans #117 #113]: #54
[unit-resolution #60 #118]: false
unsat
5df6354637212a118c8e9d3b4d92806fed1f414a 68 0
#2 := false
#8 := 0::Int
decl f3 :: Int
#9 := f3
#11 := (<= f3 0::Int)
#12 := (ite #11 f3 0::Int)
#13 := (= #12 0::Int)
#79 := (= f3 0::Int)
#53 := (>= f3 0::Int)
#54 := (not #53)
#62 := (or #13 #54)
#67 := (not #62)
#10 := (<= 0::Int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#70 := (iff #15 #67)
#36 := (= 0::Int #12)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#68 := (iff #48 #67)
#65 := (iff #43 #62)
#59 := (or #54 #13)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #43 #59)
#57 := (iff #36 #13)
#58 := [rewrite]: #57
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#61 := [monotonicity #56 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#71 := [trans #50 #69]: #70
#35 := [asserted]: #15
#72 := [mp #35 #71]: #67
#75 := [not-or-elim #72]: #53
#73 := (not #13)
#74 := [not-or-elim #72]: #73
#81 := (or #11 #13)
#82 := [def-axiom]: #81
#80 := [unit-resolution #82 #74]: #11
#84 := (not #11)
#77 := (or #79 #84 #54)
#78 := [th-lemma arith triangle-eq]: #77
#87 := [unit-resolution #78 #80 #75]: #79
#89 := (= #12 f3)
#83 := (= f3 #12)
#85 := (or #84 #83)
#86 := [def-axiom]: #85
#88 := [unit-resolution #86 #80]: #83
#90 := [symm #88]: #89
#91 := [trans #90 #87]: #13
[unit-resolution #74 #91]: false
unsat
830a0546cfefe0a710f523435755e68520136af4 124 0
#2 := false
#13 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#39 := -1::Int
#41 := (* -1::Int f4)
#54 := (+ f3 #41)
#55 := (<= #54 0::Int)
#58 := (ite #55 f3 f4)
#106 := (* -1::Int #58)
#107 := (+ f3 #106)
#109 := (>= #107 0::Int)
#94 := (= f3 #58)
#108 := (+ f4 #106)
#126 := (>= #108 0::Int)
#95 := (= f4 #58)
#96 := (not #55)
#137 := [hypothesis]: #96
#93 := (or #55 #95)
#90 := [def-axiom]: #93
#138 := [unit-resolution #90 #137]: #95
#129 := (not #95)
#130 := (or #129 #126)
#131 := [th-lemma arith triangle-eq]: #130
#139 := [unit-resolution #131 #138]: #126
#40 := (* -1::Int f3)
#42 := (+ #40 #41)
#12 := (+ f3 f4)
#61 := (>= #12 0::Int)
#68 := (ite #61 #12 #42)
#76 := (* -1::Int #68)
#105 := (+ #42 #76)
#125 := (<= #105 0::Int)
#98 := (= #42 #68)
#62 := (not #61)
#110 := [hypothesis]: #61
#77 := (+ #58 #76)
#78 := (<= #77 0::Int)
#83 := (not #78)
#15 := (- #12)
#14 := (< #12 0::Int)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#86 := (iff #18 #83)
#45 := (ite #14 #42 #12)
#48 := (<= #11 #45)
#51 := (not #48)
#84 := (iff #51 #83)
#81 := (iff #48 #78)
#73 := (<= #58 #68)
#79 := (iff #73 #78)
#80 := [rewrite]: #79
#74 := (iff #48 #73)
#71 := (= #45 #68)
#65 := (ite #62 #42 #12)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #45 #65)
#63 := (iff #14 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#59 := (= #11 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#75 := [monotonicity #60 #72]: #74
#82 := [trans #75 #80]: #81
#85 := [monotonicity #82]: #84
#52 := (iff #18 #51)
#49 := (iff #17 #48)
#46 := (= #16 #45)
#43 := (= #15 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#87 := [trans #53 #85]: #86
#38 := [asserted]: #18
#88 := [mp #38 #87]: #83
#123 := (or #96 #62)
#111 := [hypothesis]: #55
#97 := (or #96 #94)
#92 := [def-axiom]: #97
#112 := [unit-resolution #92 #111]: #94
#113 := (not #94)
#114 := (or #113 #109)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112]: #109
#103 := (+ #12 #76)
#104 := (<= #103 0::Int)
#91 := (= #12 #68)
#99 := (or #62 #91)
#100 := [def-axiom]: #99
#117 := [unit-resolution #100 #110]: #91
#118 := (not #91)
#119 := (or #118 #104)
#120 := [th-lemma arith triangle-eq]: #119
#121 := [unit-resolution #120 #117]: #104
#122 := [th-lemma arith farkas 2 2 2 1 1 #121 #116 #88 #111 #110]: false
#124 := [lemma #122]: #123
#127 := [unit-resolution #124 #110]: #96
#128 := [unit-resolution #90 #127]: #95
#132 := [unit-resolution #131 #128]: #126
#133 := [th-lemma arith farkas 2 2 1 2 1 #121 #132 #127 #88 #110]: false
#134 := [lemma #133]: #62
#101 := (or #61 #98)
#102 := [def-axiom]: #101
#140 := [unit-resolution #102 #134]: #98
#141 := (not #98)
#142 := (or #141 #125)
#143 := [th-lemma arith triangle-eq]: #142
#144 := [unit-resolution #143 #140]: #125
#145 := [th-lemma arith farkas 3/2 1/2 1 1 1 #134 #137 #88 #144 #139]: false
#146 := [lemma #145]: #55
#147 := [unit-resolution #92 #146]: #94
#148 := [unit-resolution #115 #147]: #109
[th-lemma arith farkas 1/2 3/2 1 1 1 #146 #134 #88 #144 #148]: false
unsat
52f99700756069f984cbcf7e031ad81024526b39 57 0
#2 := false
#39 := 0::Int
decl f3 :: Int
#8 := f3
decl f4 :: Int
#9 := f4
#36 := -1::Int
#37 := (* -1::Int f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Int)
#43 := (ite #40 f4 f3)
#49 := (* -1::Int #43)
#50 := (+ f3 #49)
#51 := (<= #50 0::Int)
#56 := (not #51)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f3 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f4 #49)
#67 := (<= #60 0::Int)
#63 := (= f4 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #67)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #67
#75 := [th-lemma arith farkas 1 -1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #51)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
f0391470173f42c2f425051fb44610cd0d3f11da 57 0
#2 := false
#38 := 0::Int
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#36 := -1::Int
#40 := (* -1::Int f4)
#41 := (+ f3 #40)
#39 := (>= #41 0::Int)
#43 := (ite #39 f3 f4)
#49 := (* -1::Int #43)
#60 := (+ f4 #49)
#73 := (<= #60 0::Int)
#64 := (= f4 #43)
#65 := (not #39)
#63 := (= f3 #43)
#68 := (not #63)
#50 := (+ f3 #49)
#51 := (<= #50 0::Int)
#56 := (not #51)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#37 := (iff #10 #39)
#42 := [rewrite]: #37
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #51)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #39 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #73)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #73
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
3fca82fbf91597dcaf0c89ff56d31758ef9aa446 103 0
#2 := false
#48 := 0::Int
decl f3 :: Int
#8 := f3
decl f5 :: Int
#11 := f5
#46 := -1::Int
#54 := (* -1::Int f5)
#66 := (+ f3 #54)
#67 := (<= #66 0::Int)
#70 := (ite #67 f5 f3)
#76 := (* -1::Int #70)
decl f4 :: Int
#9 := f4
#77 := (+ f4 #76)
#78 := (<= #77 0::Int)
#79 := (not #78)
#55 := (+ f4 #54)
#56 := (<= #55 0::Int)
#57 := (not #56)
#50 := (* -1::Int f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Int)
#47 := (not #49)
#60 := (and #47 #57)
#63 := (not #60)
#84 := (or #63 #79)
#87 := (not #84)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #79)
#73 := (< #70 f4)
#80 := (iff #73 #79)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #78
#93 := [not-or-elim #92]: #60
#94 := [and-elim #93]: #47
#100 := (+ f3 #76)
#119 := (>= #100 0::Int)
#107 := (= f3 #70)
#108 := (not #67)
#106 := (= f5 #70)
#113 := (not #106)
#103 := (+ f5 #76)
#101 := (>= #103 0::Int)
#110 := (not #101)
#95 := [and-elim #93]: #57
#98 := [hypothesis]: #101
#99 := [th-lemma arith farkas -1 -1 1 #98 #95 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #101)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #119)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #119
[th-lemma arith farkas -1 1 1 #125 #94 #96]: false
unsat
4cc8abc1cb14abf886035d59247a2facd4c8905d 96 0
#2 := false
decl f4 :: Int
#9 := f4
decl f3 :: Int
#8 := f3
#41 := 0::Int
#38 := -1::Int
#39 := (* -1::Int f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Int)
#51 := (ite #49 f3 f4)
#42 := (<= #40 0::Int)
#45 := (ite #42 f4 f3)
#54 := (= #45 #51)
#61 := (= f3 #51)
#66 := (not #42)
#64 := (= f4 #45)
#108 := (not #64)
#68 := (= f4 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#98 := (= f4 f3)
#74 := (= f3 f4)
#65 := (= f3 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#99 := [symm #97]: #98
#100 := [trans #99 #78]: #68
#101 := [unit-resolution #76 #100]: false
#102 := [lemma #101]: #68
#104 := (= #45 f4)
#103 := [hypothesis]: #64
#105 := [symm #103]: #104
#106 := [trans #105 #102]: #54
#107 := [unit-resolution #60 #106]: false
#109 := [lemma #107]: #108
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#110 := [unit-resolution #62 #109]: #66
#112 := (or #49 #42)
#113 := [th-lemma arith farkas 1 1]: #112
#114 := [unit-resolution #113 #110]: #49
#115 := [unit-resolution #71 #114]: #61
#118 := (= #45 f3)
#111 := [unit-resolution #37 #110]: #65
#119 := [symm #111]: #118
#120 := [trans #119 #115]: #54
[unit-resolution #60 #120]: false
unsat
0dd105910a740ba84e327a554c15807cfbb51e90 66 0
#2 := false
decl f3 :: Int
#9 := f3
#8 := 0::Int
#11 := (<= f3 0::Int)
#12 := (ite #11 0::Int f3)
#36 := (= f3 #12)
#87 := (= 0::Int #12)
#81 := (= #12 0::Int)
#71 := (not #36)
#53 := (>= f3 0::Int)
#54 := (not #53)
#60 := (or #36 #54)
#65 := (not #60)
#13 := (= #12 f3)
#10 := (<= 0::Int f3)
#14 := (implies #10 #13)
#15 := (not #14)
#68 := (iff #15 #65)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#66 := (iff #48 #65)
#63 := (iff #43 #60)
#57 := (or #54 #36)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #43 #57)
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#69 := [trans #50 #67]: #68
#35 := [asserted]: #15
#70 := [mp #35 #69]: #65
#72 := [not-or-elim #70]: #71
#79 := (or #11 #36)
#80 := [def-axiom]: #79
#78 := [unit-resolution #80 #72]: #11
#82 := (not #11)
#83 := (or #82 #81)
#84 := [def-axiom]: #83
#75 := [unit-resolution #84 #78]: #81
#88 := [symm #75]: #87
#77 := (= f3 0::Int)
#73 := [not-or-elim #70]: #53
#76 := (or #77 #82 #54)
#85 := [th-lemma arith triangle-eq]: #76
#86 := [unit-resolution #85 #78 #73]: #77
#89 := [trans #86 #88]: #36
[unit-resolution #72 #89]: false
unsat
6d096cc8e5aead61fa59d3a9e14375705bde559e 214 0
#2 := false
#9 := 0::Int
decl f4 :: Int
#14 := f4
#43 := -1::Int
#58 := (* -1::Int f4)
#94 := (>= f4 0::Int)
#101 := (ite #94 f4 #58)
#106 := (* -1::Int #101)
#161 := (+ #58 #106)
#183 := (<= #161 0::Int)
#137 := (= #58 #101)
#95 := (not #94)
decl f3 :: Int
#8 := f3
#112 := (+ f3 #58)
#113 := (<= #112 0::Int)
#116 := (ite #113 f4 f3)
#155 := (* -1::Int #116)
#156 := (+ f4 #155)
#157 := (<= #156 0::Int)
#158 := (+ f3 #155)
#193 := (<= #158 0::Int)
#149 := (= f3 #116)
#150 := (not #113)
#148 := (= f4 #116)
#195 := [hypothesis]: #113
#151 := (or #150 #148)
#152 := [def-axiom]: #151
#196 := [unit-resolution #152 #195]: #148
#197 := (not #148)
#198 := (or #197 #157)
#199 := [th-lemma arith triangle-eq]: #198
#200 := [unit-resolution #199 #196]: #157
#179 := (not #157)
#191 := (or #95 #179)
#159 := (+ f4 #106)
#160 := (<= #159 0::Int)
#136 := (= f4 #101)
#165 := [hypothesis]: #94
#144 := (or #95 #136)
#145 := [def-axiom]: #144
#166 := [unit-resolution #145 #165]: #136
#167 := (not #136)
#168 := (or #167 #160)
#169 := [th-lemma arith triangle-eq]: #168
#170 := [unit-resolution #169 #166]: #160
#44 := (* -1::Int f3)
#79 := (>= f3 0::Int)
#86 := (ite #79 f3 #44)
#91 := (* -1::Int #86)
#164 := (+ #44 #91)
#182 := (<= #164 0::Int)
#141 := (= #44 #86)
#80 := (not #79)
#177 := [hypothesis]: #157
#180 := (or #80 #95 #179)
#125 := (+ #101 #116)
#126 := (+ #86 #125)
#123 := (>= #126 0::Int)
#129 := (not #123)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::Int)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::Int)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#132 := (iff #22 #129)
#61 := (ite #15 #58 f4)
#67 := (* -1::Int #61)
#47 := (ite #10 #44 f3)
#53 := (* -1::Int #47)
#68 := (+ #53 #67)
#73 := (<= #68 #20)
#76 := (not #73)
#130 := (iff #76 #129)
#127 := (iff #73 #123)
#109 := (+ #91 #106)
#119 := (<= #109 #116)
#122 := (iff #119 #123)
#124 := [rewrite]: #122
#120 := (iff #73 #119)
#117 := (= #20 #116)
#114 := (iff #19 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#110 := (= #68 #109)
#107 := (= #67 #106)
#104 := (= #61 #101)
#98 := (ite #95 #58 f4)
#102 := (= #98 #101)
#103 := [rewrite]: #102
#99 := (= #61 #98)
#96 := (iff #15 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#108 := [monotonicity #105]: #107
#92 := (= #53 #91)
#89 := (= #47 #86)
#83 := (ite #80 #44 f3)
#87 := (= #83 #86)
#88 := [rewrite]: #87
#84 := (= #47 #83)
#81 := (iff #10 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#111 := [monotonicity #93 #108]: #110
#121 := [monotonicity #111 #118]: #120
#128 := [trans #121 #124]: #127
#131 := [monotonicity #128]: #130
#77 := (iff #22 #76)
#74 := (iff #21 #73)
#71 := (= #18 #68)
#64 := (- #53 #61)
#69 := (= #64 #68)
#70 := [rewrite]: #69
#65 := (= #18 #64)
#62 := (= #17 #61)
#59 := (= #16 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#56 := (= #13 #53)
#50 := (- #47)
#54 := (= #50 #53)
#55 := [rewrite]: #54
#51 := (= #13 #50)
#48 := (= #12 #47)
#45 := (= #11 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#66 := [monotonicity #57 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#133 := [trans #78 #131]: #132
#42 := [asserted]: #22
#134 := [mp #42 #133]: #129
#162 := (+ f3 #91)
#163 := (<= #162 0::Int)
#140 := (= f3 #86)
#171 := [hypothesis]: #79
#142 := (or #80 #140)
#143 := [def-axiom]: #142
#172 := [unit-resolution #143 #171]: #140
#173 := (not #140)
#174 := (or #173 #163)
#175 := [th-lemma arith triangle-eq]: #174
#176 := [unit-resolution #175 #172]: #163
#178 := [th-lemma arith farkas -2 1 -1 1 1 1 #165 #177 #171 #176 #134 #170]: false
#181 := [lemma #178]: #180
#184 := [unit-resolution #181 #165 #177]: #80
#138 := (or #79 #141)
#139 := [def-axiom]: #138
#185 := [unit-resolution #139 #184]: #141
#186 := (not #141)
#187 := (or #186 #182)
#188 := [th-lemma arith triangle-eq]: #187
#189 := [unit-resolution #188 #185]: #182
#190 := [th-lemma arith farkas 2 1 1 1 1 1 #165 #177 #134 #184 #189 #170]: false
#192 := [lemma #190]: #191
#201 := [unit-resolution #192 #200]: #95
#146 := (or #94 #137)
#147 := [def-axiom]: #146
#202 := [unit-resolution #147 #201]: #137
#203 := (not #137)
#204 := (or #203 #183)
#205 := [th-lemma arith triangle-eq]: #204
#206 := [unit-resolution #205 #202]: #183
#207 := (or #80 #94 #150)
#208 := [th-lemma arith assign-bounds 1 1]: #207
#209 := [unit-resolution #208 #201 #195]: #80
#210 := [unit-resolution #139 #209]: #141
#211 := [unit-resolution #188 #210]: #182
#212 := [th-lemma arith farkas 1 1 1 1 1 #200 #134 #209 #211 #206]: false
#213 := [lemma #212]: #150
#153 := (or #113 #149)
#154 := [def-axiom]: #153
#224 := [unit-resolution #154 #213]: #149
#225 := (not #149)
#226 := (or #225 #193)
#227 := [th-lemma arith triangle-eq]: #226
#228 := [unit-resolution #227 #224]: #193
#231 := (not #193)
#232 := (or #157 #113 #231)
#233 := [th-lemma arith assign-bounds 1 1]: #232
#234 := [unit-resolution #233 #213 #228]: #157
#235 := [unit-resolution #192 #234]: #95
#236 := [unit-resolution #147 #235]: #137
#237 := [unit-resolution #205 #236]: #183
#216 := [hypothesis]: #80
#217 := (or #95 #79 #113)
#218 := [th-lemma arith assign-bounds 1 1]: #217
#219 := [unit-resolution #218 #216 #213]: #95
#220 := [unit-resolution #147 #219]: #137
#221 := [unit-resolution #205 #220]: #183
#222 := [unit-resolution #139 #216]: #141
#223 := [unit-resolution #188 #222]: #182
#229 := [th-lemma arith farkas 1 1 1 1 1 1 #216 #213 #228 #134 #223 #221]: false
#230 := [lemma #229]: #79
#238 := [unit-resolution #143 #230]: #140
#239 := [unit-resolution #175 #238]: #163
[th-lemma arith farkas 1 1 1 1 1 1 #213 #228 #134 #230 #239 #237]: false
unsat
670f014c1852b6081232410eed442ca5e4374561 56 0
#2 := false
#11 := 1::Int
decl f3 :: Int
#9 := f3
#14 := (= f3 1::Int)
#12 := (<= f3 1::Int)
#8 := 0::Int
#44 := (<= f3 0::Int)
#45 := (not #44)
#51 := (and #12 #45)
#56 := (not #51)
#62 := (or #14 #56)
#67 := (not #62)
#10 := (< 0::Int f3)
#13 := (and #10 #12)
#15 := (implies #13 #14)
#16 := (not #15)
#70 := (iff #16 #67)
#37 := (not #13)
#38 := (or #37 #14)
#41 := (not #38)
#68 := (iff #41 #67)
#65 := (iff #38 #62)
#59 := (or #56 #14)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #38 #59)
#57 := (iff #37 #56)
#54 := (iff #13 #51)
#48 := (and #45 #12)
#52 := (iff #48 #51)
#53 := [rewrite]: #52
#49 := (iff #13 #48)
#46 := (iff #10 #45)
#47 := [rewrite]: #46
#50 := [monotonicity #47]: #49
#55 := [trans #50 #53]: #54
#58 := [monotonicity #55]: #57
#61 := [monotonicity #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#71 := [trans #43 #69]: #70
#36 := [asserted]: #16
#72 := [mp #36 #71]: #67
#75 := [not-or-elim #72]: #51
#76 := [and-elim #75]: #12
#77 := [and-elim #75]: #45
#88 := [th-lemma arith eq-propagate 0 0 #77 #76]: #14
#73 := (not #14)
#74 := [not-or-elim #72]: #73
[unit-resolution #74 #88]: false
unsat
2c89038e9e5248b9d7775a1c2cccda0081ae4afd 18 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
ce89535ab1564731d3a25470ddb514abb6a5df0e 51 0
#2 := false
decl f4 :: Int
#9 := f4
#11 := 3::Int
#13 := (* 3::Int f4)
decl f3 :: Int
#8 := f3
#12 := (* 3::Int f3)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#70 := (iff #16 false)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#68 := (iff #41 false)
#1 := true
#63 := (not true)
#66 := (iff #63 false)
#67 := [rewrite]: #66
#64 := (iff #41 #63)
#61 := (iff #38 true)
#47 := 0::Int
#44 := -1::Int
#45 := (* -1::Int f4)
#46 := (+ f3 #45)
#48 := (<= #46 0::Int)
#51 := (not #48)
#56 := (or #51 #48)
#59 := (iff #56 true)
#60 := [rewrite]: #59
#57 := (iff #38 #56)
#54 := (iff #14 #48)
#55 := [rewrite]: #54
#52 := (iff #37 #51)
#49 := (iff #10 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#58 := [monotonicity #53 #55]: #57
#62 := [trans #58 #60]: #61
#65 := [monotonicity #62]: #64
#69 := [trans #65 #67]: #68
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#71 := [trans #43 #69]: #70
#36 := [asserted]: #16
[mp #36 #71]: false
unsat
6ee55a0087180d6d5b23379fd148c763bbe9469a 56 0
#2 := false
decl f4 :: Int
#9 := f4
#11 := 3::Int
#13 := (* 3::Int f4)
decl f3 :: Int
#8 := f3
#12 := (* 3::Int f3)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#75 := (iff #16 false)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#73 := (iff #41 false)
#1 := true
#68 := (not true)
#71 := (iff #68 false)
#72 := [rewrite]: #71
#69 := (iff #41 #68)
#66 := (iff #38 true)
#46 := 0::Int
#44 := -1::Int
#48 := (* -1::Int f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Int)
#45 := (not #47)
#60 := (or #47 #45)
#64 := (iff #60 true)
#65 := [rewrite]: #64
#62 := (iff #38 #60)
#61 := (iff #14 #45)
#59 := [rewrite]: #61
#57 := (iff #37 #47)
#52 := (not #45)
#55 := (iff #52 #47)
#56 := [rewrite]: #55
#53 := (iff #37 #52)
#50 := (iff #10 #45)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#63 := [monotonicity #58 #59]: #62
#67 := [trans #63 #65]: #66
#70 := [monotonicity #67]: #69
#74 := [trans #70 #72]: #73
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#76 := [trans #43 #74]: #75
#36 := [asserted]: #16
[mp #36 #76]: false
unsat
8db8a95cca6e7fe17cb2a4cd6041ce96b6b7f6c4 52 0
#2 := false
#43 := 0::Int
decl f4 :: Int
#9 := f4
#41 := -1::Int
#45 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#46 := (+ f3 #45)
#56 := (<= #46 0::Int)
#69 := (not #56)
#44 := (>= #46 0::Int)
#59 := (or #44 #56)
#62 := (not #59)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#65 := (iff #13 #62)
#34 := (not #10)
#35 := (or #34 #11)
#38 := (not #35)
#63 := (iff #38 #62)
#60 := (iff #35 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#54 := (iff #34 #44)
#42 := (not #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#61 := [monotonicity #55 #58]: #60
#64 := [monotonicity #61]: #63
#39 := (iff #13 #38)
#36 := (iff #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#66 := [trans #40 #64]: #65
#33 := [asserted]: #13
#67 := [mp #33 #66]: #62
#70 := [not-or-elim #67]: #69
#68 := [not-or-elim #67]: #42
#78 := (or #56 #44)
#79 := [th-lemma arith farkas 1 1]: #78
#80 := [unit-resolution #79 #68]: #56
[unit-resolution #80 #70]: false
unsat
520cf64d6077f711a93c13c6d282b3380025b7de 73 0
#2 := false
#61 := 0::Int
decl f4 :: Int
#9 := f4
#54 := -1::Int
#55 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#56 := (+ f3 #55)
#62 := (>= #56 0::Int)
#57 := (<= #56 -1::Int)
#82 := (not #57)
#60 := (not #62)
#89 := [hypothesis]: #60
#87 := (or #82 #62)
#72 := (iff #57 #62)
#11 := 1::Int
#12 := (+ f3 1::Int)
#13 := (<= #12 f4)
#10 := (< f3 f4)
#14 := (iff #10 #13)
#15 := (not #14)
#75 := (iff #15 #72)
#48 := (not #10)
#36 := (+ 1::Int f3)
#39 := (<= #36 f4)
#49 := (iff #39 #48)
#73 := (iff #49 #72)
#70 := (iff #48 #62)
#65 := (not #60)
#68 := (iff #65 #62)
#69 := [rewrite]: #68
#66 := (iff #48 #65)
#63 := (iff #10 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#58 := (iff #39 #57)
#59 := [rewrite]: #58
#74 := [monotonicity #59 #71]: #73
#52 := (iff #15 #49)
#42 := (iff #10 #39)
#45 := (not #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #15 #45)
#43 := (iff #14 #42)
#40 := (iff #13 #39)
#37 := (= #12 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#76 := [trans #53 #74]: #75
#35 := [asserted]: #15
#77 := [mp #35 #76]: #72
#83 := (not #72)
#79 := (or #82 #62 #83)
#80 := [def-axiom]: #79
#88 := [unit-resolution #80 #77]: #87
#90 := [unit-resolution #88 #89]: #82
#91 := [th-lemma arith farkas 1 1 #89 #90]: false
#92 := [lemma #91]: #62
#93 := (or #60 #82)
#94 := [th-lemma arith farkas 1 1]: #93
#95 := [unit-resolution #94 #92]: #82
#86 := (or #57 #60)
#84 := (or #57 #60 #83)
#85 := [def-axiom]: #84
#81 := [unit-resolution #85 #77]: #86
[unit-resolution #81 #95 #92]: false
unsat
6728a1b6710185d5f5ea081e6ce67e8aed169134 15 0
#2 := false
decl f3 :: Int
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#36 := (iff #11 false)
#34 := (iff #9 false)
#35 := [rewrite]: #34
#32 := (iff #11 #9)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #11
[mp #31 #37]: false
unsat
520ba5bbc17bf10c5d1972b6fdcb0044f080e0c0 75 0
#2 := false
#56 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Int)
#67 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#68 := (+ f3 #67)
#69 := (<= #68 0::Int)
#72 := (not #69)
#63 := (+ f3 #54)
#64 := (<= #63 0::Int)
#60 := (not #57)
#81 := (or #60 #64 #72)
#86 := (not #81)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#89 := (iff #16 #86)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#87 := (iff #50 #86)
#84 := (iff #45 #81)
#75 := (or #60 #64)
#78 := (or #72 #75)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #45 #78)
#76 := (iff #38 #75)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#77 := [monotonicity #62 #66]: #76
#73 := (iff #44 #72)
#70 := (iff #10 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#90 := [trans #52 #88]: #89
#36 := [asserted]: #16
#91 := [mp #36 #90]: #86
#92 := [not-or-elim #91]: #57
#93 := (not #64)
#94 := [not-or-elim #91]: #93
#95 := [not-or-elim #91]: #69
[th-lemma arith farkas 1 -1 1 #95 #94 #92]: false
unsat
dcf1c788b6911dd9d0d36f4c26d7c585e6116ff5 80 0
#2 := false
#56 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#54 := (* -1::Int f5)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Int)
#69 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#70 := (+ f3 #69)
#68 := (>= #70 0::Int)
#63 := (+ f3 #54)
#64 := (<= #63 0::Int)
#60 := (not #57)
#86 := (or #60 #64 #68)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #60 #64)
#83 := (or #68 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#82 := [monotonicity #62 #66]: #81
#78 := (iff #44 #68)
#67 := (not #68)
#73 := (not #67)
#76 := (iff #73 #68)
#77 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (iff #10 #67)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#97 := [not-or-elim #96]: #57
#98 := (not #64)
#99 := [not-or-elim #96]: #98
#100 := [not-or-elim #96]: #67
[th-lemma arith farkas 1 1 1 #100 #99 #97]: false
unsat
c158570854bd04b541514c1e42ef7c6a80910ace 80 0
#2 := false
#55 := 0::Int
decl f4 :: Int
#9 := f4
#53 := -1::Int
#72 := (* -1::Int f4)
decl f3 :: Int
#8 := f3
#73 := (+ f3 #72)
#74 := (<= #73 0::Int)
#77 := (not #74)
decl f5 :: Int
#11 := f5
#57 := (* -1::Int f5)
#68 := (+ f3 #57)
#69 := (<= #68 0::Int)
#58 := (+ f4 #57)
#56 := (>= #58 0::Int)
#86 := (or #56 #69 #77)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #56 #69)
#83 := (or #77 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#70 := (iff #13 #69)
#71 := [rewrite]: #70
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#82 := [monotonicity #67 #71]: #81
#78 := (iff #44 #77)
#75 := (iff #10 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#100 := [not-or-elim #96]: #74
#98 := (not #69)
#99 := [not-or-elim #96]: #98
#97 := [not-or-elim #96]: #54
[th-lemma arith farkas 1 1 1 #97 #99 #100]: false
unsat
e80ef8fa1f5f7f731207887aafb3d73399a22a53 85 0
#2 := false
#55 := 0::Int
decl f5 :: Int
#11 := f5
#53 := -1::Int
#57 := (* -1::Int f5)
decl f3 :: Int
#8 := f3
#70 := (+ f3 #57)
#69 := (>= #70 0::Int)
decl f4 :: Int
#9 := f4
#75 := (* -1::Int f4)
#76 := (+ f3 #75)
#74 := (>= #76 0::Int)
#68 := (not #69)
#58 := (+ f4 #57)
#56 := (>= #58 0::Int)
#92 := (or #56 #68 #74)
#97 := (not #92)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#100 := (iff #16 #97)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#98 := (iff #50 #97)
#95 := (iff #45 #92)
#86 := (or #56 #68)
#89 := (or #74 #86)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #45 #89)
#87 := (iff #38 #86)
#71 := (iff #13 #68)
#72 := [rewrite]: #71
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#88 := [monotonicity #67 #72]: #87
#84 := (iff #44 #74)
#73 := (not #74)
#79 := (not #73)
#82 := (iff #79 #74)
#83 := [rewrite]: #82
#80 := (iff #44 #79)
#77 := (iff #10 #73)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#91 := [monotonicity #85 #88]: #90
#96 := [trans #91 #94]: #95
#99 := [monotonicity #96]: #98
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#101 := [trans #52 #99]: #100
#36 := [asserted]: #16
#102 := [mp #36 #101]: #97
#104 := [not-or-elim #102]: #69
#103 := [not-or-elim #102]: #54
#105 := [not-or-elim #102]: #73
[th-lemma arith farkas 1 1 1 #105 #103 #104]: false
unsat
dc84c7d91507b2575d96fd3dc930644975196557 69 0
#2 := false
#47 := 0::Int
decl f5 :: Int
#11 := f5
#45 := -1::Int
#54 := (* -1::Int f5)
decl f3 :: Int
#8 := f3
#65 := (+ f3 #54)
#66 := (<= #65 0::Int)
#67 := (not #66)
decl f4 :: Int
#9 := f4
#55 := (+ f4 #54)
#53 := (>= #55 0::Int)
#56 := (not #53)
#49 := (* -1::Int f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Int)
#46 := (not #48)
#59 := (and #46 #56)
#62 := (not #59)
#77 := (or #62 #66)
#80 := (not #77)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#83 := (iff #17 #80)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#81 := (iff #42 #80)
#78 := (iff #39 #77)
#75 := (iff #15 #66)
#70 := (not #67)
#73 := (iff #70 #66)
#74 := [rewrite]: #73
#71 := (iff #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#63 := (iff #38 #62)
#60 := (iff #13 #59)
#57 := (iff #12 #56)
#58 := [rewrite]: #57
#51 := (iff #10 #46)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#79 := [monotonicity #64 #76]: #78
#82 := [monotonicity #79]: #81
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#84 := [trans #44 #82]: #83
#37 := [asserted]: #17
#85 := [mp #37 #84]: #80
#89 := [not-or-elim #85]: #67
#86 := [not-or-elim #85]: #59
#88 := [and-elim #86]: #56
#87 := [and-elim #86]: #46
[th-lemma arith farkas 1 1 1 #87 #88 #89]: false
unsat
f773d363f37e932f4532a69daff94825fd8ced7d 17 0
#2 := false
#8 := 0::Real
#9 := (= 0::Real 0::Real)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
22555a704748c0627782ea8aab11b16b25bd4dbb 25 0
#2 := false
#8 := 0::Real
#9 := (- 0::Real)
#10 := (= 0::Real #9)
#11 := (not #10)
#46 := (iff #11 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #11 #41)
#39 := (iff #10 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #10 #34)
#32 := (= #9 0::Real)
#33 := [rewrite]: #32
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#31 := [asserted]: #11
[mp #31 #47]: false
unsat
0f47740e84f3a80bb9157630977b548c62848ac2 17 0
#2 := false
#8 := 1::Real
#9 := (= 1::Real 1::Real)
#10 := (not #9)
#38 := (iff #10 false)
#1 := true
#33 := (not true)
#36 := (iff #33 false)
#37 := [rewrite]: #36
#34 := (iff #10 #33)
#31 := (iff #9 true)
#32 := [rewrite]: #31
#35 := [monotonicity #32]: #34
#39 := [trans #35 #37]: #38
#30 := [asserted]: #10
[mp #30 #39]: false
unsat
267141fda78839fe6990cc2abf9a17976b208b6d 34 0
#2 := false
#8 := 1::Real
#9 := (- 1::Real)
#10 := (= #9 1::Real)
#11 := (not #10)
#12 := (not #11)
#55 := (iff #12 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #12 #50)
#48 := (iff #11 true)
#43 := (not false)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #11 #43)
#41 := (iff #10 false)
#33 := -1::Real
#36 := (= -1::Real 1::Real)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #10 #36)
#34 := (= #9 -1::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#32 := [asserted]: #12
[mp #32 #56]: false
unsat
1cceccf830fba7a0f6a7b417cdb35acf58e3b386 18 0
#2 := false
#9 := 1::Real
#8 := 0::Real
#10 := (< 0::Real 1::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
cd5f0992fc4c2527863e91d7965d5cd43f959c45 18 0
#2 := false
#9 := 1::Real
#8 := 0::Real
#10 := (<= 0::Real 1::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
d3dc3081a8407dc4d182c64981740ecde7c13dde 40 0
#2 := false
#12 := 567::Real
#10 := 345::Real
#8 := 123::Real
#9 := (- 123::Real)
#11 := (+ #9 345::Real)
#13 := (< #11 567::Real)
#14 := (not #13)
#61 := (iff #14 false)
#41 := 222::Real
#46 := (< 222::Real 567::Real)
#49 := (not #46)
#59 := (iff #49 false)
#1 := true
#54 := (not true)
#57 := (iff #54 false)
#58 := [rewrite]: #57
#55 := (iff #49 #54)
#52 := (iff #46 true)
#53 := [rewrite]: #52
#56 := [monotonicity #53]: #55
#60 := [trans #56 #58]: #59
#50 := (iff #14 #49)
#47 := (iff #13 #46)
#44 := (= #11 222::Real)
#35 := -123::Real
#38 := (+ -123::Real 345::Real)
#42 := (= #38 222::Real)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #9 -123::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#48 := [monotonicity #45]: #47
#51 := [monotonicity #48]: #50
#62 := [trans #51 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
a9f49d44404eb27b3a936d2ae021bcf936255755 18 0
#2 := false
#9 := 2345678901::Real
#8 := 123456789::Real
#10 := (< 123456789::Real 2345678901::Real)
#11 := (not #10)
#41 := (iff #11 false)
#1 := true
#36 := (not true)
#39 := (iff #36 false)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (iff #10 true)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#31 := [asserted]: #11
[mp #31 #42]: false
unsat
a5a30c12b002b073c6704cbd0e9c0bff0c2be9ce 30 0
#2 := false
#10 := 2345678901::Real
#8 := 123456789::Real
#9 := (- 123456789::Real)
#11 := (< #9 2345678901::Real)
#12 := (not #11)
#51 := (iff #12 false)
#33 := -123456789::Real
#36 := (< -123456789::Real 2345678901::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #9 -123456789::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
503a960ec2242e052830c7ef31b928dcfd2a74cf 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 0::Real
#10 := (+ f3 0::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
770f240de3310b0d6a8016479beff839eb224176 26 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 0::Real
#10 := (+ 0::Real f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
5d138ec76d5878a62b190baf9223adf9c458ea69 29 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (+ f4 f3)
#10 := (+ f3 f4)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
9e4deb91672100910bd4e78f0dd93df4413e0265 33 0
#2 := false
decl f5 :: Real
#10 := f5
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#13 := (+ f3 f4)
#14 := (+ #13 f5)
#11 := (+ f4 f5)
#12 := (+ f3 #11)
#15 := (= #12 #14)
#16 := (not #15)
#51 := (iff #16 false)
#1 := true
#46 := (not true)
#49 := (iff #46 false)
#50 := [rewrite]: #49
#47 := (iff #16 #46)
#44 := (iff #15 true)
#39 := (= #12 #12)
#42 := (iff #39 true)
#43 := [rewrite]: #42
#40 := (iff #15 #39)
#37 := (= #14 #12)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#45 := [trans #41 #43]: #44
#48 := [monotonicity #45]: #47
#52 := [trans #48 #50]: #51
#36 := [asserted]: #16
[mp #36 #52]: false
unsat
fa5df4da5927766ac24749e94b2f4590c5f1f525 45 0
#2 := false
decl f4 :: Real
#9 := f4
#13 := (- f4)
decl f3 :: Real
#8 := f3
#14 := (= f3 #13)
#11 := 0::Real
#10 := (+ f3 f4)
#12 := (= #10 0::Real)
#15 := (iff #12 #14)
#16 := (not #15)
#65 := (iff #16 false)
#50 := (not #12)
#37 := -1::Real
#38 := (* -1::Real f4)
#41 := (= f3 #38)
#51 := (iff #41 #50)
#63 := (iff #51 false)
#58 := (iff #12 #50)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #51 #58)
#56 := (iff #41 #12)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#54 := (iff #16 #51)
#44 := (iff #12 #41)
#47 := (not #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #16 #47)
#45 := (iff #15 #44)
#42 := (iff #14 #41)
#39 := (= #13 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#49 := [monotonicity #46]: #48
#55 := [trans #49 #53]: #54
#66 := [trans #55 #64]: #65
#36 := [asserted]: #16
[mp #36 #66]: false
unsat
780bbf25f5cec016b113005169e826e8a8b1ab35 26 0
#2 := false
#8 := 1::Real
#9 := (- 1::Real)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -1::Real
#35 := (= -1::Real -1::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -1::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
605574d3c38169fc6d9055703879e99ec228f28e 26 0
#2 := false
#8 := 3::Real
#9 := (- 3::Real)
#10 := (= #9 #9)
#11 := (not #10)
#47 := (iff #11 false)
#1 := true
#42 := (not true)
#45 := (iff #42 false)
#46 := [rewrite]: #45
#43 := (iff #11 #42)
#40 := (iff #10 true)
#32 := -3::Real
#35 := (= -3::Real -3::Real)
#38 := (iff #35 true)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (= #9 -3::Real)
#34 := [rewrite]: #33
#37 := [monotonicity #34 #34]: #36
#41 := [trans #37 #39]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#31 := [asserted]: #11
[mp #31 #48]: false
unsat
3decedf8f758750dd070188834780bf7cdda6699 58 0
#2 := false
decl f3 :: Real
#8 := f3
#10 := 0::Real
#12 := (< 0::Real f3)
#9 := (- f3)
#11 := (< #9 0::Real)
#13 := (iff #11 #12)
#14 := (not #13)
#79 := (iff #14 false)
#53 := (not #12)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< #36 0::Real)
#54 := (iff #39 #53)
#77 := (iff #54 false)
#59 := (<= f3 0::Real)
#60 := (not #59)
#72 := (iff #60 #59)
#75 := (iff #72 false)
#76 := [rewrite]: #75
#73 := (iff #54 #72)
#70 := (iff #53 #59)
#65 := (not #60)
#68 := (iff #65 #59)
#69 := [rewrite]: #68
#66 := (iff #53 #65)
#63 := (iff #12 #60)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#71 := [trans #67 #69]: #70
#61 := (iff #39 #60)
#62 := [rewrite]: #61
#74 := [monotonicity #62 #71]: #73
#78 := [trans #74 #76]: #77
#57 := (iff #14 #54)
#45 := (iff #12 #39)
#50 := (not #45)
#55 := (iff #50 #54)
#56 := [rewrite]: #55
#51 := (iff #14 #50)
#48 := (iff #13 #45)
#42 := (iff #39 #12)
#46 := (iff #42 #45)
#47 := [rewrite]: #46
#43 := (iff #13 #42)
#40 := (iff #11 #39)
#37 := (= #9 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#49 := [trans #44 #47]: #48
#52 := [monotonicity #49]: #51
#58 := [trans #52 #56]: #57
#80 := [trans #58 #78]: #79
#34 := [asserted]: #14
[mp #34 #80]: false
unsat
48e8235cc2ab6c0c7ee0a64720a7854069344306 61 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#11 := (- f3)
#12 := (< #11 0::Real)
#10 := (< 0::Real f3)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< #36 0::Real)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (<= f3 0::Real)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
101fc723faf759de5c8555614c6008d7a3b2f51c 61 0
#2 := false
decl f3 :: Real
#8 := f3
#11 := (- f3)
#9 := 0::Real
#12 := (< 0::Real #11)
#10 := (< f3 0::Real)
#13 := (implies #10 #12)
#14 := (not #13)
#81 := (iff #14 false)
#35 := -1::Real
#36 := (* -1::Real f3)
#39 := (< 0::Real #36)
#45 := (not #10)
#46 := (or #45 #39)
#51 := (not #46)
#79 := (iff #51 false)
#1 := true
#74 := (not true)
#77 := (iff #74 false)
#78 := [rewrite]: #77
#75 := (iff #51 #74)
#72 := (iff #46 true)
#54 := (>= f3 0::Real)
#55 := (not #54)
#67 := (or #54 #55)
#70 := (iff #67 true)
#71 := [rewrite]: #70
#68 := (iff #46 #67)
#65 := (iff #39 #55)
#66 := [rewrite]: #65
#63 := (iff #45 #54)
#58 := (not #55)
#61 := (iff #58 #54)
#62 := [rewrite]: #61
#59 := (iff #45 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#69 := [monotonicity #64 #66]: #68
#73 := [trans #69 #71]: #72
#76 := [monotonicity #73]: #75
#80 := [trans #76 #78]: #79
#52 := (iff #14 #51)
#49 := (iff #13 #46)
#42 := (implies #10 #39)
#47 := (iff #42 #46)
#48 := [rewrite]: #47
#43 := (iff #13 #42)
#40 := (iff #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#50 := [trans #44 #48]: #49
#53 := [monotonicity #50]: #52
#82 := [trans #53 #80]: #81
#34 := [asserted]: #14
[mp #34 #82]: false
unsat
283d9e9fd5ac4371653f698859bf2cc218d93907 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 0::Real
#10 := (- f3 0::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
377a985423ac0b4a4878b6539f76e0f6387ebc74 32 0
#2 := false
decl f3 :: Real
#9 := f3
#11 := (- f3)
#8 := 0::Real
#10 := (- 0::Real f3)
#12 := (= #10 #11)
#13 := (not #12)
#52 := (iff #13 false)
#1 := true
#47 := (not true)
#50 := (iff #47 false)
#51 := [rewrite]: #50
#48 := (iff #13 #47)
#45 := (iff #12 true)
#34 := -1::Real
#35 := (* -1::Real f3)
#40 := (= #35 #35)
#43 := (iff #40 true)
#44 := [rewrite]: #43
#41 := (iff #12 #40)
#38 := (= #11 #35)
#39 := [rewrite]: #38
#36 := (= #10 #35)
#37 := [rewrite]: #36
#42 := [monotonicity #37 #39]: #41
#46 := [trans #42 #44]: #45
#49 := [monotonicity #46]: #48
#53 := [trans #49 #51]: #52
#33 := [asserted]: #13
[mp #33 #53]: false
unsat
17b8ad92fed9af085980d2ab3e2bbe7070317afb 64 0
#2 := false
#12 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#11 := (- f3 f4)
#13 := (< #11 0::Real)
#10 := (< f3 f4)
#14 := (implies #10 #13)
#15 := (not #14)
#83 := (iff #15 false)
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#41 := (< #38 0::Real)
#47 := (not #10)
#48 := (or #47 #41)
#53 := (not #48)
#81 := (iff #53 false)
#1 := true
#76 := (not true)
#79 := (iff #76 false)
#80 := [rewrite]: #79
#77 := (iff #53 #76)
#74 := (iff #48 true)
#57 := (>= #38 0::Real)
#56 := (not #57)
#69 := (or #57 #56)
#72 := (iff #69 true)
#73 := [rewrite]: #72
#70 := (iff #48 #69)
#67 := (iff #41 #56)
#68 := [rewrite]: #67
#65 := (iff #47 #57)
#60 := (not #56)
#63 := (iff #60 #57)
#64 := [rewrite]: #63
#61 := (iff #47 #60)
#58 := (iff #10 #56)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#66 := [trans #62 #64]: #65
#71 := [monotonicity #66 #68]: #70
#75 := [trans #71 #73]: #74
#78 := [monotonicity #75]: #77
#82 := [trans #78 #80]: #81
#54 := (iff #15 #53)
#51 := (iff #14 #48)
#44 := (implies #10 #41)
#49 := (iff #44 #48)
#50 := [rewrite]: #49
#45 := (iff #14 #44)
#42 := (iff #13 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#52 := [trans #46 #50]: #51
#55 := [monotonicity #52]: #54
#84 := [trans #55 #82]: #83
#35 := [asserted]: #15
[mp #35 #84]: false
unsat
f9d032808f895312ecd1abf7bac4681d8af02f4c 44 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (- f4 f3)
#12 := (- #11)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#63 := (iff #14 false)
#1 := true
#58 := (not true)
#61 := (iff #58 false)
#62 := [rewrite]: #61
#59 := (iff #14 #58)
#56 := (iff #13 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#51 := (= #37 #37)
#54 := (iff #51 true)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (= #12 #37)
#40 := (* -1::Real f3)
#41 := (+ #40 f4)
#44 := (- #41)
#47 := (= #44 #37)
#48 := [rewrite]: #47
#45 := (= #12 #44)
#42 := (= #11 #41)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#38 := (= #10 #37)
#39 := [rewrite]: #38
#53 := [monotonicity #39 #50]: #52
#57 := [trans #53 #55]: #56
#60 := [monotonicity #57]: #59
#64 := [trans #60 #62]: #63
#34 := [asserted]: #14
[mp #34 #64]: false
unsat
f5fd5763c194a7060b7d3c31354e945c4bbe4814 42 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#11 := (- f4)
#12 := (+ #11 f3)
#10 := (- f3 f4)
#13 := (= #10 #12)
#14 := (not #13)
#61 := (iff #14 false)
#1 := true
#56 := (not true)
#59 := (iff #56 false)
#60 := [rewrite]: #59
#57 := (iff #14 #56)
#54 := (iff #13 true)
#35 := -1::Real
#36 := (* -1::Real f4)
#37 := (+ f3 #36)
#49 := (= #37 #37)
#52 := (iff #49 true)
#53 := [rewrite]: #52
#50 := (iff #13 #49)
#47 := (= #12 #37)
#42 := (+ #36 f3)
#45 := (= #42 #37)
#46 := [rewrite]: #45
#43 := (= #12 #42)
#40 := (= #11 #36)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#48 := [trans #44 #46]: #47
#38 := (= #10 #37)
#39 := [rewrite]: #38
#51 := [monotonicity #39 #48]: #50
#55 := [trans #51 #53]: #54
#58 := [monotonicity #55]: #57
#62 := [trans #58 #60]: #61
#34 := [asserted]: #14
[mp #34 #62]: false
unsat
95caa8e9312490ba9ace8256d848ea1af589c930 48 0
#2 := false
decl f5 :: Real
#11 := f5
decl f4 :: Real
#9 := f4
#13 := (+ f4 f5)
decl f3 :: Real
#8 := f3
#14 := (- f3 #13)
#10 := (- f3 f4)
#12 := (- #10 f5)
#15 := (= #12 #14)
#16 := (not #15)
#66 := (iff #16 false)
#1 := true
#61 := (not true)
#64 := (iff #61 false)
#65 := [rewrite]: #64
#62 := (iff #16 #61)
#59 := (iff #15 true)
#37 := -1::Real
#45 := (* -1::Real f5)
#38 := (* -1::Real f4)
#46 := (+ #38 #45)
#47 := (+ f3 #46)
#54 := (= #47 #47)
#57 := (iff #54 true)
#58 := [rewrite]: #57
#55 := (iff #15 #54)
#52 := (= #14 #47)
#53 := [rewrite]: #52
#50 := (= #12 #47)
#39 := (+ f3 #38)
#42 := (- #39 f5)
#48 := (= #42 #47)
#49 := [rewrite]: #48
#43 := (= #12 #42)
#40 := (= #10 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#51 := [trans #44 #49]: #50
#56 := [monotonicity #51 #53]: #55
#60 := [trans #56 #58]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#36 := [asserted]: #16
[mp #36 #67]: false
unsat
9268db787809f0a583b8abe2865d617f6de5f8b3 26 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#10 := (* f3 0::Real)
#11 := (= #10 0::Real)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
cfd2d609b4c2acdff8e2c92b7abeb35796f42074 26 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#10 := (* 0::Real f3)
#11 := (= #10 0::Real)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= 0::Real 0::Real)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
47353b900bc68ce2e886059dcd04ac50fb7094fa 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 1::Real
#10 := (* f3 1::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
8040bc6506c5d4dcc023aa72dae05d2d6e32e35f 26 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 1::Real
#10 := (* 1::Real f3)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
4677e87ab7e0b998d5363f7ebb364e3f3c6ab1e8 40 0
#2 := false
decl f3 :: Real
#8 := f3
#12 := (- f3)
#9 := 1::Real
#10 := (- 1::Real)
#11 := (* f3 #10)
#13 := (= #11 #12)
#14 := (not #13)
#60 := (iff #14 false)
#1 := true
#55 := (not true)
#58 := (iff #55 false)
#59 := [rewrite]: #58
#56 := (iff #14 #55)
#53 := (iff #13 true)
#35 := -1::Real
#41 := (* -1::Real f3)
#48 := (= #41 #41)
#51 := (iff #48 true)
#52 := [rewrite]: #51
#49 := (iff #13 #48)
#46 := (= #12 #41)
#47 := [rewrite]: #46
#44 := (= #11 #41)
#38 := (* f3 -1::Real)
#42 := (= #38 #41)
#43 := [rewrite]: #42
#39 := (= #11 #38)
#36 := (= #10 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [trans #40 #43]: #44
#50 := [monotonicity #45 #47]: #49
#54 := [trans #50 #52]: #53
#57 := [monotonicity #54]: #56
#61 := [trans #57 #59]: #60
#34 := [asserted]: #14
[mp #34 #61]: false
unsat
492e40909f53004b845757b180e8cdede75e5952 35 0
#2 := false
decl f3 :: Real
#10 := f3
#12 := (- f3)
#8 := 1::Real
#9 := (- 1::Real)
#11 := (* #9 f3)
#13 := (= #11 #12)
#14 := (not #13)
#55 := (iff #14 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #14 #50)
#48 := (iff #13 true)
#35 := -1::Real
#38 := (* -1::Real f3)
#43 := (= #38 #38)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (= #12 #38)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #9 -1::Real)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#45 := [monotonicity #40 #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#34 := [asserted]: #14
[mp #34 #56]: false
unsat
b2af4404d7b254702c70ed75613252bd5ca4ca66 28 0
#2 := false
#8 := 3::Real
decl f3 :: Real
#9 := f3
#11 := (* f3 3::Real)
#10 := (* 3::Real f3)
#12 := (= #10 #11)
#13 := (not #12)
#48 := (iff #13 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #13 #43)
#41 := (iff #12 true)
#36 := (= #10 #10)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #12 #36)
#34 := (= #11 #10)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#33 := [asserted]: #13
[mp #33 #49]: false
unsat
7f36309c810a189f03d30657a767073413e0a633 30 0
#2 := false
#8 := 1::Real
#9 := 2::Real
#10 := (/ 1::Real 2::Real)
#11 := (< #10 1::Real)
#12 := (not #11)
#51 := (iff #12 false)
#33 := 1/2::Real
#36 := (< 1/2::Real 1::Real)
#39 := (not #36)
#49 := (iff #39 false)
#1 := true
#44 := (not true)
#47 := (iff #44 false)
#48 := [rewrite]: #47
#45 := (iff #39 #44)
#42 := (iff #36 true)
#43 := [rewrite]: #42
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#40 := (iff #12 #39)
#37 := (iff #11 #36)
#34 := (= #10 1/2::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35]: #37
#41 := [monotonicity #38]: #40
#52 := [trans #41 #50]: #51
#32 := [asserted]: #12
[mp #32 #52]: false
unsat
ccf056a1d000a2f5db9acd154a1e12ae03fe47c3 27 0
#2 := false
#9 := 3::Real
#8 := 1::Real
#10 := (/ 1::Real 3::Real)
#11 := (= #10 #10)
#12 := (not #11)
#48 := (iff #12 false)
#1 := true
#43 := (not true)
#46 := (iff #43 false)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#41 := (iff #11 true)
#33 := 1/3::Real
#36 := (= 1/3::Real 1/3::Real)
#39 := (iff #36 true)
#40 := [rewrite]: #39
#37 := (iff #11 #36)
#34 := (= #10 1/3::Real)
#35 := [rewrite]: #34
#38 := [monotonicity #35 #35]: #37
#42 := [trans #38 #40]: #41
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#32 := [asserted]: #12
[mp #32 #49]: false
unsat
0561d9f0efd34ebe23cfd267e2f9c9ab1b730a91 48 0
#2 := false
#9 := 3::Real
#8 := 1::Real
#12 := (- 1::Real)
#13 := (/ #12 3::Real)
#10 := (- 3::Real)
#11 := (/ 1::Real #10)
#14 := (= #11 #13)
#15 := (not #14)
#69 := (iff #15 false)
#1 := true
#64 := (not true)
#67 := (iff #64 false)
#68 := [rewrite]: #67
#65 := (iff #15 #64)
#62 := (iff #14 true)
#42 := -1/3::Real
#57 := (= -1/3::Real -1/3::Real)
#60 := (iff #57 true)
#61 := [rewrite]: #60
#58 := (iff #14 #57)
#55 := (= #13 -1/3::Real)
#47 := -1::Real
#50 := (/ -1::Real 3::Real)
#53 := (= #50 -1/3::Real)
#54 := [rewrite]: #53
#51 := (= #13 #50)
#48 := (= #12 -1::Real)
#49 := [rewrite]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#45 := (= #11 -1/3::Real)
#36 := -3::Real
#39 := (/ 1::Real -3::Real)
#43 := (= #39 -1/3::Real)
#44 := [rewrite]: #43
#40 := (= #11 #39)
#37 := (= #10 -3::Real)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#46 := [trans #41 #44]: #45
#59 := [monotonicity #46 #56]: #58
#63 := [trans #59 #61]: #62
#66 := [monotonicity #63]: #65
#70 := [trans #66 #68]: #69
#35 := [asserted]: #15
[mp #35 #70]: false
unsat
36baa91bad72cdcdeb69c09cae275d7dd51d0ec0 36 0
#2 := false
#10 := 3::Real
#8 := 1::Real
#9 := (- 1::Real)
#11 := (/ #9 3::Real)
#12 := (= #11 #11)
#13 := (not #12)
#57 := (iff #13 false)
#1 := true
#52 := (not true)
#55 := (iff #52 false)
#56 := [rewrite]: #55
#53 := (iff #13 #52)
#50 := (iff #12 true)
#40 := -1/3::Real
#45 := (= -1/3::Real -1/3::Real)
#48 := (iff #45 true)
#49 := [rewrite]: #48
#46 := (iff #12 #45)
#43 := (= #11 -1/3::Real)
#34 := -1::Real
#37 := (/ -1::Real 3::Real)
#41 := (= #37 -1/3::Real)
#42 := [rewrite]: #41
#38 := (= #11 #37)
#35 := (= #9 -1::Real)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#44 := [trans #39 #42]: #43
#47 := [monotonicity #44 #44]: #46
#51 := [trans #47 #49]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#33 := [asserted]: #13
[mp #33 #58]: false
unsat
27179242be2af6441aee8a632ff4f9f46f4559e7 43 0
#2 := false
#10 := 3::Real
#8 := 1::Real
#13 := (/ 1::Real 3::Real)
#11 := (- 3::Real)
#9 := (- 1::Real)
#12 := (/ #9 #11)
#14 := (= #12 #13)
#15 := (not #14)
#64 := (iff #15 false)
#1 := true
#59 := (not true)
#62 := (iff #59 false)
#63 := [rewrite]: #62
#60 := (iff #15 #59)
#57 := (iff #14 true)
#45 := 1/3::Real
#52 := (= 1/3::Real 1/3::Real)
#55 := (iff #52 true)
#56 := [rewrite]: #55
#53 := (iff #14 #52)
#50 := (= #13 1/3::Real)
#51 := [rewrite]: #50
#48 := (= #12 1/3::Real)
#39 := -3::Real
#36 := -1::Real
#42 := (/ -1::Real -3::Real)
#46 := (= #42 1/3::Real)
#47 := [rewrite]: #46
#43 := (= #12 #42)
#40 := (= #11 -3::Real)
#41 := [rewrite]: #40
#37 := (= #9 -1::Real)
#38 := [rewrite]: #37
#44 := [monotonicity #38 #41]: #43
#49 := [trans #44 #47]: #48
#54 := [monotonicity #49 #51]: #53
#58 := [trans #54 #56]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#35 := [asserted]: #15
[mp #35 #65]: false
unsat
f8feec24442a22841814d6bc2bb6f89a1a5ccdca 26 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 1::Real
#10 := (/ f3 1::Real)
#11 := (= #10 f3)
#12 := (not #11)
#46 := (iff #12 false)
#1 := true
#41 := (not true)
#44 := (iff #41 false)
#45 := [rewrite]: #44
#42 := (iff #12 #41)
#39 := (iff #11 true)
#34 := (= f3 f3)
#37 := (iff #34 true)
#38 := [rewrite]: #37
#35 := (iff #11 #34)
#33 := [rewrite]: #11
#36 := [monotonicity #33]: #35
#40 := [trans #36 #38]: #39
#43 := [monotonicity #40]: #42
#47 := [trans #43 #45]: #46
#32 := [asserted]: #12
[mp #32 #47]: false
unsat
c05f02963ca1f0c7b2cf36a8d547885cab5aa79a 60 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#68 := 2/3::Real
#69 := (* 2/3::Real f3)
#70 := (<= #69 0::Real)
#66 := (not #70)
#55 := (<= f3 0::Real)
#72 := (or #55 #66)
#75 := (not #72)
#11 := 3::Real
#12 := (/ f3 3::Real)
#13 := (< #12 f3)
#10 := (< 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#78 := (iff #15 #75)
#36 := 1/3::Real
#37 := (* 1/3::Real f3)
#40 := (< #37 f3)
#46 := (not #10)
#47 := (or #46 #40)
#52 := (not #47)
#76 := (iff #52 #75)
#73 := (iff #47 #72)
#67 := (iff #40 #66)
#71 := [rewrite]: #67
#64 := (iff #46 #55)
#56 := (not #55)
#59 := (not #56)
#62 := (iff #59 #55)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#57 := (iff #10 #56)
#58 := [rewrite]: #57
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#74 := [monotonicity #65 #71]: #73
#77 := [monotonicity #74]: #76
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#43 := (implies #10 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#79 := [trans #54 #77]: #78
#35 := [asserted]: #15
#80 := [mp #35 #79]: #75
#82 := [not-or-elim #80]: #70
#81 := [not-or-elim #80]: #56
[th-lemma arith farkas -2/3 1 #81 #82]: false
unsat
9b3f58b1809134cb88eb2695df7f6a346a6afe80 60 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#70 := 2/3::Real
#71 := (* 2/3::Real f3)
#68 := (>= #71 0::Real)
#66 := (not #68)
#57 := (>= f3 0::Real)
#72 := (or #57 #66)
#75 := (not #72)
#11 := 3::Real
#12 := (/ f3 3::Real)
#13 := (< f3 #12)
#10 := (< f3 0::Real)
#14 := (implies #10 #13)
#15 := (not #14)
#78 := (iff #15 #75)
#36 := 1/3::Real
#37 := (* 1/3::Real f3)
#40 := (< f3 #37)
#46 := (not #10)
#47 := (or #46 #40)
#52 := (not #47)
#76 := (iff #52 #75)
#73 := (iff #47 #72)
#67 := (iff #40 #66)
#69 := [rewrite]: #67
#64 := (iff #46 #57)
#55 := (not #57)
#59 := (not #55)
#62 := (iff #59 #57)
#63 := [rewrite]: #62
#60 := (iff #46 #59)
#56 := (iff #10 #55)
#58 := [rewrite]: #56
#61 := [monotonicity #58]: #60
#65 := [trans #61 #63]: #64
#74 := [monotonicity #65 #69]: #73
#77 := [monotonicity #74]: #76
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#43 := (implies #10 #40)
#48 := (iff #43 #47)
#49 := [rewrite]: #48
#44 := (iff #14 #43)
#41 := (iff #13 #40)
#38 := (= #12 #37)
#39 := [rewrite]: #38
#42 := [monotonicity #39]: #41
#45 := [monotonicity #42]: #44
#51 := [trans #45 #49]: #50
#54 := [monotonicity #51]: #53
#79 := [trans #54 #77]: #78
#35 := [asserted]: #15
#80 := [mp #35 #79]: #75
#82 := [not-or-elim #80]: #68
#81 := [not-or-elim #80]: #55
[th-lemma arith farkas -2/3 1 #81 #82]: false
unsat
445e35b9311219b2f5634562f77afc853349ceea 36 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 3::Real
#10 := (/ f3 3::Real)
#11 := (* 3::Real #10)
#12 := (= #11 f3)
#13 := (not #12)
#56 := (iff #13 false)
#1 := true
#51 := (not true)
#54 := (iff #51 false)
#55 := [rewrite]: #54
#52 := (iff #13 #51)
#49 := (iff #12 true)
#44 := (= f3 f3)
#47 := (iff #44 true)
#48 := [rewrite]: #47
#45 := (iff #12 #44)
#34 := 1/3::Real
#35 := (* 1/3::Real f3)
#38 := (* 3::Real #35)
#41 := (= #38 f3)
#42 := [rewrite]: #41
#39 := (= #11 #38)
#36 := (= #10 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#43 := [trans #40 #42]: #12
#46 := [monotonicity #43]: #45
#50 := [trans #46 #48]: #49
#53 := [monotonicity #50]: #52
#57 := [trans #53 #55]: #56
#33 := [asserted]: #13
[mp #33 #57]: false
unsat
c9d4409876d543b534cb12358001a3188eb10d21 35 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := 3::Real
#10 := (* f3 3::Real)
#11 := (/ #10 3::Real)
#12 := (= #11 f3)
#13 := (not #12)
#55 := (iff #13 false)
#1 := true
#50 := (not true)
#53 := (iff #50 false)
#54 := [rewrite]: #53
#51 := (iff #13 #50)
#48 := (iff #12 true)
#43 := (= f3 f3)
#46 := (iff #43 true)
#47 := [rewrite]: #46
#44 := (iff #12 #43)
#34 := (* 3::Real f3)
#37 := (/ #34 3::Real)
#40 := (= #37 f3)
#41 := [rewrite]: #40
#38 := (= #11 #37)
#35 := (= #10 #34)
#36 := [rewrite]: #35
#39 := [monotonicity #36]: #38
#42 := [trans #39 #41]: #12
#45 := [monotonicity #42]: #44
#49 := [trans #45 #47]: #48
#52 := [monotonicity #49]: #51
#56 := [trans #52 #54]: #55
#33 := [asserted]: #13
[mp #33 #56]: false
unsat
b7467d5d6041c1b17f2b5e32374743df439ee2c2 62 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#70 := 1/3::Real
#71 := (* 1/3::Real f3)
#72 := (<= #71 0::Real)
#68 := (not #72)
#57 := (<= f3 0::Real)
#74 := (or #57 #68)
#77 := (not #74)
#13 := 3::Real
#11 := 2::Real
#12 := (* 2::Real f3)
#14 := (/ #12 3::Real)
#15 := (< #14 f3)
#10 := (< 0::Real f3)
#16 := (implies #10 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#39 := 2/3::Real
#40 := (* 2/3::Real f3)
#42 := (< #40 f3)
#48 := (not #10)
#49 := (or #48 #42)
#54 := (not #49)
#78 := (iff #54 #77)
#75 := (iff #49 #74)
#69 := (iff #42 #68)
#73 := [rewrite]: #69
#66 := (iff #48 #57)
#58 := (not #57)
#61 := (not #58)
#64 := (iff #61 #57)
#65 := [rewrite]: #64
#62 := (iff #48 #61)
#59 := (iff #10 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#76 := [monotonicity #67 #73]: #75
#79 := [monotonicity #76]: #78
#55 := (iff #17 #54)
#52 := (iff #16 #49)
#45 := (implies #10 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #16 #45)
#43 := (iff #15 #42)
#38 := (= #14 #40)
#41 := [rewrite]: #38
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [monotonicity #53]: #55
#81 := [trans #56 #79]: #80
#37 := [asserted]: #17
#82 := [mp #37 #81]: #77
#84 := [not-or-elim #82]: #72
#83 := [not-or-elim #82]: #58
[th-lemma arith farkas -1/3 1 #83 #84]: false
unsat
3b59732be5ac2fe610c9e2843a63e7a1830b9838 62 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#72 := 1/3::Real
#73 := (* 1/3::Real f3)
#70 := (>= #73 0::Real)
#68 := (not #70)
#59 := (>= f3 0::Real)
#74 := (or #59 #68)
#77 := (not #74)
#13 := 3::Real
#11 := 2::Real
#12 := (* 2::Real f3)
#14 := (/ #12 3::Real)
#15 := (< f3 #14)
#10 := (< f3 0::Real)
#16 := (implies #10 #15)
#17 := (not #16)
#80 := (iff #17 #77)
#39 := 2/3::Real
#40 := (* 2/3::Real f3)
#42 := (< f3 #40)
#48 := (not #10)
#49 := (or #48 #42)
#54 := (not #49)
#78 := (iff #54 #77)
#75 := (iff #49 #74)
#69 := (iff #42 #68)
#71 := [rewrite]: #69
#66 := (iff #48 #59)
#57 := (not #59)
#61 := (not #57)
#64 := (iff #61 #59)
#65 := [rewrite]: #64
#62 := (iff #48 #61)
#58 := (iff #10 #57)
#60 := [rewrite]: #58
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#76 := [monotonicity #67 #71]: #75
#79 := [monotonicity #76]: #78
#55 := (iff #17 #54)
#52 := (iff #16 #49)
#45 := (implies #10 #42)
#50 := (iff #45 #49)
#51 := [rewrite]: #50
#46 := (iff #16 #45)
#43 := (iff #15 #42)
#38 := (= #14 #40)
#41 := [rewrite]: #38
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#53 := [trans #47 #51]: #52
#56 := [monotonicity #53]: #55
#81 := [trans #56 #79]: #80
#37 := [asserted]: #17
#82 := [mp #37 #81]: #77
#84 := [not-or-elim #82]: #70
#83 := [not-or-elim #82]: #57
[th-lemma arith farkas -1/3 1 #83 #84]: false
unsat
78ae7121e195bacc5f4b6db83b123df8490f9dac 75 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#35 := -1::Real
#36 := (* -1::Real f3)
#48 := (>= f3 0::Real)
#55 := (ite #48 f3 #36)
#75 := (* -1::Real #55)
#84 := (+ #36 #75)
#93 := (<= #84 0::Real)
#80 := (= #36 #55)
#49 := (not #48)
#76 := (+ f3 #75)
#83 := (<= #76 0::Real)
#79 := (= f3 #55)
#85 := [hypothesis]: #48
#81 := (or #49 #79)
#82 := [def-axiom]: #81
#86 := [unit-resolution #82 #85]: #79
#87 := (not #79)
#88 := (or #87 #83)
#89 := [th-lemma arith triangle-eq]: #88
#90 := [unit-resolution #89 #86]: #83
#64 := (>= #55 0::Real)
#68 := (not #64)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (<= 0::Real #12)
#14 := (not #13)
#71 := (iff #14 #68)
#39 := (ite #10 #36 f3)
#42 := (<= 0::Real #39)
#45 := (not #42)
#69 := (iff #45 #68)
#66 := (iff #42 #64)
#60 := (<= 0::Real #55)
#63 := (iff #60 #64)
#65 := [rewrite]: #63
#61 := (iff #42 #60)
#58 := (= #39 #55)
#52 := (ite #49 #36 f3)
#56 := (= #52 #55)
#57 := [rewrite]: #56
#53 := (= #39 #52)
#50 := (iff #10 #49)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#67 := [trans #62 #65]: #66
#70 := [monotonicity #67]: #69
#46 := (iff #14 #45)
#43 := (iff #13 #42)
#40 := (= #12 #39)
#37 := (= #11 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#44 := [monotonicity #41]: #43
#47 := [monotonicity #44]: #46
#72 := [trans #47 #70]: #71
#34 := [asserted]: #14
#73 := [mp #34 #72]: #68
#91 := [th-lemma arith farkas -1 1 1 #85 #73 #90]: false
#92 := [lemma #91]: #49
#77 := (or #48 #80)
#78 := [def-axiom]: #77
#95 := [unit-resolution #78 #92]: #80
#96 := (not #80)
#97 := (or #96 #93)
#98 := [th-lemma arith triangle-eq]: #97
#99 := [unit-resolution #98 #95]: #93
[th-lemma arith farkas 1 1 1 #92 #73 #99]: false
unsat
ff789d0b06f4e86f73b38d800d6fea471c529be0 128 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#37 := -1::Real
#38 := (* -1::Real f3)
#137 := (<= #38 0::Real)
#136 := (= #38 0::Real)
#69 := (>= f3 0::Real)
#76 := (ite #69 f3 #38)
#85 := (= #76 0::Real)
#105 := (= f3 #76)
#127 := (not #105)
#101 := (not #85)
#128 := (iff #101 #127)
#125 := (iff #85 #105)
#123 := (iff #105 #85)
#81 := (= 0::Real #76)
#84 := (iff #81 #85)
#122 := [commutativity]: #84
#120 := (iff #105 #81)
#14 := (= f3 0::Real)
#118 := [hypothesis]: #101
#115 := (or #14 #85)
#63 := (not #14)
#92 := (iff #63 #85)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (= #12 0::Real)
#15 := (iff #13 #14)
#16 := (not #15)
#97 := (iff #16 #92)
#41 := (ite #10 #38 f3)
#47 := (= 0::Real #41)
#64 := (iff #47 #63)
#95 := (iff #64 #92)
#89 := (iff #85 #63)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #64 #89)
#87 := (iff #47 #85)
#86 := [rewrite]: #84
#82 := (iff #47 #81)
#79 := (= #41 #76)
#70 := (not #69)
#73 := (ite #70 #38 f3)
#77 := (= #73 #76)
#78 := [rewrite]: #77
#74 := (= #41 #73)
#71 := (iff #10 #70)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#80 := [trans #75 #78]: #79
#83 := [monotonicity #80]: #82
#88 := [trans #83 #86]: #87
#91 := [monotonicity #88]: #90
#96 := [trans #91 #94]: #95
#67 := (iff #16 #64)
#55 := (iff #14 #47)
#60 := (not #55)
#65 := (iff #60 #64)
#66 := [rewrite]: #65
#61 := (iff #16 #60)
#58 := (iff #15 #55)
#52 := (iff #47 #14)
#56 := (iff #52 #55)
#57 := [rewrite]: #56
#53 := (iff #15 #52)
#50 := (iff #13 #47)
#44 := (= #41 0::Real)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #13 #44)
#42 := (= #12 #41)
#39 := (= #11 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#59 := [trans #54 #57]: #58
#62 := [monotonicity #59]: #61
#68 := [trans #62 #66]: #67
#98 := [trans #68 #96]: #97
#36 := [asserted]: #16
#99 := [mp #36 #98]: #92
#102 := (not #92)
#113 := (or #14 #85 #102)
#114 := [def-axiom]: #113
#116 := [unit-resolution #114 #99]: #115
#119 := [unit-resolution #116 #118]: #14
#121 := [monotonicity #119]: #120
#124 := [trans #121 #122]: #123
#126 := [symm #124]: #125
#129 := [monotonicity #126]: #128
#130 := [mp #118 #129]: #127
#131 := (or #63 #69)
#132 := [th-lemma arith triangle-eq]: #131
#133 := [unit-resolution #132 #119]: #69
#107 := (or #70 #105)
#108 := [def-axiom]: #107
#134 := [unit-resolution #108 #133 #130]: false
#135 := [lemma #134]: #85
#106 := (= #38 #76)
#144 := (iff #63 #127)
#142 := (iff #14 #105)
#140 := (iff #105 #14)
#141 := [monotonicity #135]: #140
#143 := [symm #141]: #142
#145 := [monotonicity #143]: #144
#111 := (or #63 #101)
#109 := (or #63 #101 #102)
#110 := [def-axiom]: #109
#112 := [unit-resolution #110 #99]: #111
#139 := [unit-resolution #112 #135]: #63
#146 := [mp #139 #145]: #127
#147 := [unit-resolution #108 #146]: #70
#103 := (or #69 #106)
#104 := [def-axiom]: #103
#148 := [unit-resolution #104 #147]: #106
#149 := [trans #148 #135]: #136
#150 := (not #136)
#151 := (or #150 #137)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #149]: #137
[th-lemma arith farkas 1 1 #147 #153]: false
unsat
a4051d759a69912da335fbbe489e426099dc4c5c 103 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#64 := (>= f3 0::Real)
#37 := -1::Real
#38 := (* -1::Real f3)
#111 := (* -1::Real #38)
#112 := (+ f3 #111)
#114 := (>= #112 0::Real)
#110 := (= f3 #38)
#71 := (ite #64 f3 #38)
#118 := (= #71 #38)
#99 := (= #38 #71)
#65 := (not #64)
#115 := [hypothesis]: #65
#102 := (or #64 #99)
#97 := [def-axiom]: #102
#116 := [unit-resolution #97 #115]: #99
#119 := [symm #116]: #118
#76 := (= f3 #71)
#108 := (or #64 #76)
#86 := (iff #65 #76)
#12 := (- f3)
#11 := (< f3 0::Real)
#13 := (ite #11 #12 f3)
#14 := (= #13 f3)
#10 := (<= 0::Real f3)
#15 := (iff #10 #14)
#16 := (not #15)
#91 := (iff #16 #86)
#58 := (not #10)
#41 := (ite #11 #38 f3)
#47 := (= f3 #41)
#59 := (iff #47 #58)
#89 := (iff #59 #86)
#83 := (iff #76 #65)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #59 #83)
#81 := (iff #58 #65)
#79 := (iff #10 #64)
#80 := [rewrite]: #79
#82 := [monotonicity #80]: #81
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#85 := [monotonicity #78 #82]: #84
#90 := [trans #85 #88]: #89
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 f3)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#42 := (= #13 #41)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#92 := [trans #63 #90]: #91
#36 := [asserted]: #16
#93 := [mp #36 #92]: #86
#95 := (not #86)
#106 := (or #64 #76 #95)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #93]: #108
#117 := [unit-resolution #109 #115]: #76
#120 := [trans #117 #119]: #110
#121 := (not #110)
#122 := (or #121 #114)
#123 := [th-lemma arith triangle-eq]: #122
#124 := [unit-resolution #123 #120]: #114
#125 := [th-lemma arith farkas 2 1 #115 #124]: false
#126 := [lemma #125]: #64
#100 := (or #65 #76)
#101 := [def-axiom]: #100
#113 := [unit-resolution #101 #126]: #76
#98 := (not #76)
#104 := (or #65 #98)
#96 := (or #65 #98 #95)
#103 := [def-axiom]: #96
#105 := [unit-resolution #103 #93]: #104
[unit-resolution #105 #113 #126]: false
unsat
571ce5e288c8e7c603db7dc5836a06cad2fe7128 152 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#37 := -1::Real
#38 := (* -1::Real f3)
#64 := (>= f3 0::Real)
#71 := (ite #64 f3 #38)
#114 := (* -1::Real #71)
#164 := (+ f3 #114)
#165 := (<= #164 0::Real)
#101 := (= f3 #71)
#115 := (+ #38 #114)
#117 := (>= #115 0::Real)
#76 := (= #38 #71)
#65 := (not #64)
#149 := [hypothesis]: #65
#104 := (or #64 #76)
#99 := [def-axiom]: #104
#150 := [unit-resolution #99 #149]: #76
#143 := (not #76)
#151 := (or #143 #117)
#152 := [th-lemma arith triangle-eq]: #151
#153 := [unit-resolution #152 #150]: #117
#81 := (+ f3 #71)
#100 := (<= #81 0::Real)
#158 := (not #100)
#97 := (>= #81 0::Real)
#116 := (<= #115 0::Real)
#80 := (= #81 0::Real)
#98 := (not #80)
#136 := (not #97)
#137 := [hypothesis]: #136
#138 := (or #98 #97)
#139 := [th-lemma arith triangle-eq]: #138
#140 := [unit-resolution #139 #137]: #98
#134 := (or #65 #80)
#121 := (= f3 0::Real)
#10 := (<= f3 0::Real)
#118 := [hypothesis]: #98
#112 := (or #10 #80)
#58 := (not #10)
#88 := (iff #58 #80)
#12 := (- f3)
#11 := (< f3 0::Real)
#13 := (ite #11 #12 f3)
#14 := (= #13 #12)
#15 := (iff #10 #14)
#16 := (not #15)
#93 := (iff #16 #88)
#41 := (ite #11 #38 f3)
#47 := (= #38 #41)
#59 := (iff #47 #58)
#91 := (iff #59 #88)
#85 := (iff #80 #58)
#89 := (iff #85 #88)
#90 := [rewrite]: #89
#86 := (iff #59 #85)
#83 := (iff #47 #80)
#79 := (iff #76 #80)
#82 := [rewrite]: #79
#77 := (iff #47 #76)
#74 := (= #41 #71)
#68 := (ite #65 #38 f3)
#72 := (= #68 #71)
#73 := [rewrite]: #72
#69 := (= #41 #68)
#66 := (iff #11 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67]: #69
#75 := [trans #70 #73]: #74
#78 := [monotonicity #75]: #77
#84 := [trans #78 #82]: #83
#87 := [monotonicity #84]: #86
#92 := [trans #87 #90]: #91
#62 := (iff #16 #59)
#52 := (iff #10 #47)
#55 := (not #52)
#60 := (iff #55 #59)
#61 := [rewrite]: #60
#56 := (iff #16 #55)
#53 := (iff #15 #52)
#50 := (iff #14 #47)
#44 := (= #41 #38)
#48 := (iff #44 #47)
#49 := [rewrite]: #48
#45 := (iff #14 #44)
#39 := (= #12 #38)
#40 := [rewrite]: #39
#42 := (= #13 #41)
#43 := [monotonicity #40]: #42
#46 := [monotonicity #43 #40]: #45
#51 := [trans #46 #49]: #50
#54 := [monotonicity #51]: #53
#57 := [monotonicity #54]: #56
#63 := [trans #57 #61]: #62
#94 := [trans #63 #92]: #93
#36 := [asserted]: #16
#95 := [mp #36 #94]: #88
#105 := (not #88)
#110 := (or #10 #80 #105)
#111 := [def-axiom]: #110
#113 := [unit-resolution #111 #95]: #112
#119 := [unit-resolution #113 #118]: #10
#120 := [hypothesis]: #64
#122 := [th-lemma arith eq-propagate 0 0 #120 #119]: #121
#130 := (= #81 f3)
#128 := (= #71 f3)
#102 := (or #65 #101)
#103 := [def-axiom]: #102
#123 := [unit-resolution #103 #120]: #101
#129 := [symm #123]: #128
#126 := (= #81 #71)
#124 := (= #71 #81)
#125 := [th-lemma arith eq-propagate 1 1 #120 #119]: #124
#127 := [symm #125]: #126
#131 := [trans #127 #129]: #130
#132 := [trans #131 #122]: #80
#133 := [unit-resolution #118 #132]: false
#135 := [lemma #133]: #134
#141 := [unit-resolution #135 #140]: #65
#142 := [unit-resolution #99 #141]: #76
#144 := (or #143 #116)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #116
#147 := [th-lemma arith farkas 1 1 #137 #146]: false
#148 := [lemma #147]: #97
#154 := (or #64 #10)
#155 := [th-lemma arith farkas 1 1]: #154
#156 := [unit-resolution #155 #149]: #10
#108 := (or #58 #98)
#106 := (or #58 #98 #105)
#107 := [def-axiom]: #106
#109 := [unit-resolution #107 #95]: #108
#157 := [unit-resolution #109 #156]: #98
#159 := (or #80 #158 #136)
#160 := [th-lemma arith triangle-eq]: #159
#161 := [unit-resolution #160 #157 #148]: #158
#162 := [th-lemma arith farkas 1 1 #161 #153]: false
#163 := [lemma #162]: #64
#167 := [unit-resolution #103 #163]: #101
#168 := (not #101)
#169 := (or #168 #165)
#170 := [th-lemma arith triangle-eq]: #169
#171 := [unit-resolution #170 #167]: #165
#172 := [unit-resolution #135 #163]: #80
#173 := (or #98 #100)
#174 := [th-lemma arith triangle-eq]: #173
#175 := [unit-resolution #174 #172]: #100
#176 := [unit-resolution #109 #172]: #58
[th-lemma arith farkas 2 1 1 #176 #175 #171]: false
unsat
f4a9c9097a96542eacf222bbd562a802c9ede1c1 114 0
#2 := false
#9 := 0::Real
decl f3 :: Real
#8 := f3
#38 := -1::Real
#39 := (* -1::Real f3)
#70 := (>= f3 0::Real)
#77 := (ite #70 f3 #39)
#91 := (* -1::Real #77)
#130 := (+ #39 #91)
#140 := (<= #130 0::Real)
#117 := (= #39 #77)
#71 := (not #70)
#128 := (+ f3 #91)
#129 := (<= #128 0::Real)
#116 := (= f3 #77)
#131 := [hypothesis]: #70
#118 := (or #71 #116)
#119 := [def-axiom]: #118
#132 := [unit-resolution #119 #131]: #116
#133 := (not #116)
#134 := (or #133 #129)
#135 := [th-lemma arith triangle-eq]: #134
#136 := [unit-resolution #135 #132]: #129
#86 := (>= #77 0::Real)
#85 := (not #86)
#97 := (ite #86 #77 #91)
#102 := (= #77 #97)
#105 := (not #102)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#14 := (- #12)
#13 := (< #12 0::Real)
#15 := (ite #13 #14 #12)
#16 := (= #15 #12)
#17 := (not #16)
#108 := (iff #17 #105)
#42 := (ite #10 #39 f3)
#51 := (* -1::Real #42)
#45 := (< #42 0::Real)
#56 := (ite #45 #51 #42)
#62 := (= #42 #56)
#67 := (not #62)
#106 := (iff #67 #105)
#103 := (iff #62 #102)
#100 := (= #56 #97)
#94 := (ite #85 #91 #77)
#98 := (= #94 #97)
#99 := [rewrite]: #98
#95 := (= #56 #94)
#80 := (= #42 #77)
#74 := (ite #71 #39 f3)
#78 := (= #74 #77)
#79 := [rewrite]: #78
#75 := (= #42 #74)
#72 := (iff #10 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#81 := [trans #76 #79]: #80
#92 := (= #51 #91)
#93 := [monotonicity #81]: #92
#89 := (iff #45 #85)
#82 := (< #77 0::Real)
#87 := (iff #82 #85)
#88 := [rewrite]: #87
#83 := (iff #45 #82)
#84 := [monotonicity #81]: #83
#90 := [trans #84 #88]: #89
#96 := [monotonicity #90 #93 #81]: #95
#101 := [trans #96 #99]: #100
#104 := [monotonicity #81 #101]: #103
#107 := [monotonicity #104]: #106
#68 := (iff #17 #67)
#65 := (iff #16 #62)
#59 := (= #56 #42)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #16 #59)
#43 := (= #12 #42)
#40 := (= #11 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#57 := (= #15 #56)
#54 := (= #14 #51)
#48 := (- #42)
#52 := (= #48 #51)
#53 := [rewrite]: #52
#49 := (= #14 #48)
#50 := [monotonicity #44]: #49
#55 := [trans #50 #53]: #54
#46 := (iff #13 #45)
#47 := [monotonicity #44]: #46
#58 := [monotonicity #47 #55 #44]: #57
#61 := [monotonicity #58 #44]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#109 := [trans #69 #107]: #108
#37 := [asserted]: #17
#110 := [mp #37 #109]: #105
#113 := (or #85 #102)
#120 := [def-axiom]: #113
#137 := [unit-resolution #120 #110]: #85
#138 := [th-lemma arith farkas -1 1 1 #131 #137 #136]: false
#139 := [lemma #138]: #71
#114 := (or #70 #117)
#115 := [def-axiom]: #114
#142 := [unit-resolution #115 #139]: #117
#143 := (not #117)
#144 := (or #143 #140)
#145 := [th-lemma arith triangle-eq]: #144
#146 := [unit-resolution #145 #142]: #140
[th-lemma arith farkas 1 1 1 #139 #137 #146]: false
unsat
d767bb2fd46823ea99ed2a2f48afd14fa043b714 57 0
#2 := false
#39 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f3 f4)
#51 := (* -1::Real #43)
#60 := (+ f4 #51)
#74 := (>= #60 0::Real)
#64 := (= f4 #43)
#65 := (not #40)
#63 := (= f3 #43)
#68 := (not #63)
#52 := (+ f3 #51)
#50 := (>= #52 0::Real)
#56 := (not #50)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f3)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #50)
#46 := (<= #43 f3)
#49 := (iff #46 #50)
#53 := [rewrite]: #49
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #50)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #74)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #74
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
a0d049d55a4b6d63a7a4486a6dd0f26ecaa6ada7 57 0
#2 := false
#39 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f3 f4)
#50 := (* -1::Real #43)
#51 := (+ f4 #50)
#49 := (>= #51 0::Real)
#56 := (not #49)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#12 := (<= #11 f4)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #49)
#46 := (<= #43 f4)
#52 := (iff #46 #49)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f4 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f3 #50)
#68 := (>= #60 0::Real)
#63 := (= f3 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #68)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #68
#75 := [th-lemma arith farkas -1 1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #49)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
9c0695856bacfb99d21d573df84afab5e5b181f4 103 0
#2 := false
#48 := 0::Real
decl f5 :: Real
#11 := f5
decl f4 :: Real
#9 := f4
#46 := -1::Real
#56 := (* -1::Real f5)
#66 := (+ f4 #56)
#67 := (<= #66 0::Real)
#70 := (ite #67 f4 f5)
#78 := (* -1::Real #70)
decl f3 :: Real
#8 := f3
#79 := (+ f3 #78)
#77 := (>= #79 0::Real)
#76 := (not #77)
#57 := (+ f3 #56)
#55 := (>= #57 0::Real)
#54 := (not #55)
#50 := (* -1::Real f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Real)
#47 := (not #49)
#60 := (and #47 #54)
#63 := (not #60)
#84 := (or #63 #76)
#87 := (not #84)
#14 := (<= f4 f5)
#15 := (ite #14 f4 f5)
#16 := (< f3 #15)
#12 := (< f3 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #76)
#73 := (< f3 #70)
#80 := (iff #73 #76)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #54)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #77
#93 := [not-or-elim #92]: #60
#95 := [and-elim #93]: #54
#101 := (+ f5 #78)
#118 := (<= #101 0::Real)
#107 := (= f5 #70)
#108 := (not #67)
#106 := (= f4 #70)
#113 := (not #106)
#103 := (+ f4 #78)
#100 := (<= #103 0::Real)
#110 := (not #100)
#94 := [and-elim #93]: #47
#98 := [hypothesis]: #100
#99 := [th-lemma arith farkas -1 -1 1 #98 #94 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #100)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #118)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #118
[th-lemma arith farkas -1 -1 1 #125 #95 #96]: false
unsat
b696c36b14d9aa5d8537f0123bf4636c0a97e771 94 0
#2 := false
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#41 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Real)
#51 := (ite #49 f4 f3)
#42 := (<= #40 0::Real)
#45 := (ite #42 f3 f4)
#54 := (= #45 #51)
#61 := (= f4 #51)
#66 := (not #42)
#64 := (= f3 #45)
#106 := (not #64)
#68 := (= f3 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#74 := (= f3 f4)
#65 := (= f4 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f4 f3)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#98 := [trans #97 #78]: #68
#99 := [unit-resolution #76 #98]: false
#100 := [lemma #99]: #68
#102 := (= #45 f3)
#101 := [hypothesis]: #64
#103 := [symm #101]: #102
#104 := [trans #103 #100]: #54
#105 := [unit-resolution #60 #104]: false
#107 := [lemma #105]: #106
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#108 := [unit-resolution #62 #107]: #66
#110 := (or #49 #42)
#111 := [th-lemma arith farkas 1 1]: #110
#112 := [unit-resolution #111 #108]: #49
#113 := [unit-resolution #71 #112]: #61
#116 := (= #45 f4)
#109 := [unit-resolution #37 #108]: #65
#117 := [symm #109]: #116
#118 := [trans #117 #113]: #54
[unit-resolution #60 #118]: false
unsat
71758f92000b4f0bd1ce8b23e790788bff528cd0 68 0
#2 := false
#8 := 0::Real
decl f3 :: Real
#9 := f3
#11 := (<= f3 0::Real)
#12 := (ite #11 f3 0::Real)
#13 := (= #12 0::Real)
#79 := (= f3 0::Real)
#53 := (>= f3 0::Real)
#54 := (not #53)
#62 := (or #13 #54)
#67 := (not #62)
#10 := (<= 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#70 := (iff #15 #67)
#36 := (= 0::Real #12)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#68 := (iff #48 #67)
#65 := (iff #43 #62)
#59 := (or #54 #13)
#63 := (iff #59 #62)
#64 := [rewrite]: #63
#60 := (iff #43 #59)
#57 := (iff #36 #13)
#58 := [rewrite]: #57
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#61 := [monotonicity #56 #58]: #60
#66 := [trans #61 #64]: #65
#69 := [monotonicity #66]: #68
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#71 := [trans #50 #69]: #70
#35 := [asserted]: #15
#72 := [mp #35 #71]: #67
#75 := [not-or-elim #72]: #53
#73 := (not #13)
#74 := [not-or-elim #72]: #73
#81 := (or #11 #13)
#82 := [def-axiom]: #81
#80 := [unit-resolution #82 #74]: #11
#84 := (not #11)
#77 := (or #79 #84 #54)
#78 := [th-lemma arith triangle-eq]: #77
#87 := [unit-resolution #78 #80 #75]: #79
#89 := (= #12 f3)
#83 := (= f3 #12)
#85 := (or #84 #83)
#86 := [def-axiom]: #85
#88 := [unit-resolution #86 #80]: #83
#90 := [symm #88]: #89
#91 := [trans #90 #87]: #13
[unit-resolution #74 #91]: false
unsat
944eddc125ab4f02dc35653f414c25fd1dfc289a 124 0
#2 := false
#13 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#39 := -1::Real
#41 := (* -1::Real f4)
#54 := (+ f3 #41)
#55 := (<= #54 0::Real)
#58 := (ite #55 f3 f4)
#106 := (* -1::Real #58)
#107 := (+ f3 #106)
#109 := (>= #107 0::Real)
#94 := (= f3 #58)
#108 := (+ f4 #106)
#126 := (>= #108 0::Real)
#95 := (= f4 #58)
#96 := (not #55)
#137 := [hypothesis]: #96
#93 := (or #55 #95)
#90 := [def-axiom]: #93
#138 := [unit-resolution #90 #137]: #95
#129 := (not #95)
#130 := (or #129 #126)
#131 := [th-lemma arith triangle-eq]: #130
#139 := [unit-resolution #131 #138]: #126
#40 := (* -1::Real f3)
#42 := (+ #40 #41)
#12 := (+ f3 f4)
#61 := (>= #12 0::Real)
#68 := (ite #61 #12 #42)
#76 := (* -1::Real #68)
#105 := (+ #42 #76)
#125 := (<= #105 0::Real)
#98 := (= #42 #68)
#62 := (not #61)
#110 := [hypothesis]: #61
#77 := (+ #58 #76)
#78 := (<= #77 0::Real)
#83 := (not #78)
#15 := (- #12)
#14 := (< #12 0::Real)
#16 := (ite #14 #15 #12)
#10 := (<= f3 f4)
#11 := (ite #10 f3 f4)
#17 := (<= #11 #16)
#18 := (not #17)
#86 := (iff #18 #83)
#45 := (ite #14 #42 #12)
#48 := (<= #11 #45)
#51 := (not #48)
#84 := (iff #51 #83)
#81 := (iff #48 #78)
#73 := (<= #58 #68)
#79 := (iff #73 #78)
#80 := [rewrite]: #79
#74 := (iff #48 #73)
#71 := (= #45 #68)
#65 := (ite #62 #42 #12)
#69 := (= #65 #68)
#70 := [rewrite]: #69
#66 := (= #45 #65)
#63 := (iff #14 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#72 := [trans #67 #70]: #71
#59 := (= #11 #58)
#56 := (iff #10 #55)
#57 := [rewrite]: #56
#60 := [monotonicity #57]: #59
#75 := [monotonicity #60 #72]: #74
#82 := [trans #75 #80]: #81
#85 := [monotonicity #82]: #84
#52 := (iff #18 #51)
#49 := (iff #17 #48)
#46 := (= #16 #45)
#43 := (= #15 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#50 := [monotonicity #47]: #49
#53 := [monotonicity #50]: #52
#87 := [trans #53 #85]: #86
#38 := [asserted]: #18
#88 := [mp #38 #87]: #83
#123 := (or #96 #62)
#111 := [hypothesis]: #55
#97 := (or #96 #94)
#92 := [def-axiom]: #97
#112 := [unit-resolution #92 #111]: #94
#113 := (not #94)
#114 := (or #113 #109)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112]: #109
#103 := (+ #12 #76)
#104 := (<= #103 0::Real)
#91 := (= #12 #68)
#99 := (or #62 #91)
#100 := [def-axiom]: #99
#117 := [unit-resolution #100 #110]: #91
#118 := (not #91)
#119 := (or #118 #104)
#120 := [th-lemma arith triangle-eq]: #119
#121 := [unit-resolution #120 #117]: #104
#122 := [th-lemma arith farkas 2 2 2 1 1 #121 #116 #88 #111 #110]: false
#124 := [lemma #122]: #123
#127 := [unit-resolution #124 #110]: #96
#128 := [unit-resolution #90 #127]: #95
#132 := [unit-resolution #131 #128]: #126
#133 := [th-lemma arith farkas 2 2 1 2 1 #121 #132 #127 #88 #110]: false
#134 := [lemma #133]: #62
#101 := (or #61 #98)
#102 := [def-axiom]: #101
#140 := [unit-resolution #102 #134]: #98
#141 := (not #98)
#142 := (or #141 #125)
#143 := [th-lemma arith triangle-eq]: #142
#144 := [unit-resolution #143 #140]: #125
#145 := [th-lemma arith farkas 3/2 1/2 1 1 1 #134 #137 #88 #144 #139]: false
#146 := [lemma #145]: #55
#147 := [unit-resolution #92 #146]: #94
#148 := [unit-resolution #115 #147]: #109
[th-lemma arith farkas 1/2 3/2 1 1 1 #146 #134 #88 #144 #148]: false
unsat
c6a40e55705377f4a18787e86ca1381bc32f9048 57 0
#2 := false
#39 := 0::Real
decl f3 :: Real
#8 := f3
decl f4 :: Real
#9 := f4
#36 := -1::Real
#37 := (* -1::Real f4)
#38 := (+ f3 #37)
#40 := (<= #38 0::Real)
#43 := (ite #40 f4 f3)
#49 := (* -1::Real #43)
#50 := (+ f3 #49)
#51 := (<= #50 0::Real)
#56 := (not #51)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#41 := (iff #10 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#64 := (= f3 #43)
#65 := (not #40)
#69 := [hypothesis]: #40
#60 := (+ f4 #49)
#67 := (<= #60 0::Real)
#63 := (= f4 #43)
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#70 := [unit-resolution #61 #69]: #63
#71 := (not #63)
#72 := (or #71 #67)
#73 := [th-lemma arith triangle-eq]: #72
#74 := [unit-resolution #73 #70]: #67
#75 := [th-lemma arith farkas 1 -1 1 #74 #59 #69]: false
#76 := [lemma #75]: #65
#62 := (or #40 #64)
#35 := [def-axiom]: #62
#77 := [unit-resolution #35 #76]: #64
#78 := (not #64)
#79 := (or #78 #51)
#80 := [th-lemma arith triangle-eq]: #79
[unit-resolution #80 #77 #59]: false
unsat
08f86b81fe9ac7c3b38ce6a48d6dd15649d787f7 57 0
#2 := false
#38 := 0::Real
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#36 := -1::Real
#40 := (* -1::Real f4)
#41 := (+ f3 #40)
#39 := (>= #41 0::Real)
#43 := (ite #39 f3 f4)
#49 := (* -1::Real #43)
#60 := (+ f4 #49)
#73 := (<= #60 0::Real)
#64 := (= f4 #43)
#65 := (not #39)
#63 := (= f3 #43)
#68 := (not #63)
#50 := (+ f3 #49)
#51 := (<= #50 0::Real)
#56 := (not #51)
#10 := (<= f4 f3)
#11 := (ite #10 f3 f4)
#12 := (<= f3 #11)
#13 := (not #12)
#57 := (iff #13 #56)
#54 := (iff #12 #51)
#46 := (<= f3 #43)
#52 := (iff #46 #51)
#53 := [rewrite]: #52
#47 := (iff #12 #46)
#44 := (= #11 #43)
#37 := (iff #10 #39)
#42 := [rewrite]: #37
#45 := [monotonicity #42]: #44
#48 := [monotonicity #45]: #47
#55 := [trans #48 #53]: #54
#58 := [monotonicity #55]: #57
#33 := [asserted]: #13
#59 := [mp #33 #58]: #56
#67 := [hypothesis]: #63
#69 := (or #68 #51)
#70 := [th-lemma arith triangle-eq]: #69
#71 := [unit-resolution #70 #67 #59]: false
#72 := [lemma #71]: #68
#66 := (or #65 #63)
#61 := [def-axiom]: #66
#75 := [unit-resolution #61 #72]: #65
#62 := (or #39 #64)
#35 := [def-axiom]: #62
#76 := [unit-resolution #35 #75]: #64
#77 := (not #64)
#78 := (or #77 #73)
#79 := [th-lemma arith triangle-eq]: #78
#80 := [unit-resolution #79 #76]: #73
[th-lemma arith farkas 1 1 1 #59 #75 #80]: false
unsat
a8742c9687e5f318c69c4d286746cf373c1fed40 103 0
#2 := false
#48 := 0::Real
decl f3 :: Real
#8 := f3
decl f5 :: Real
#11 := f5
#46 := -1::Real
#54 := (* -1::Real f5)
#66 := (+ f3 #54)
#67 := (<= #66 0::Real)
#70 := (ite #67 f5 f3)
#76 := (* -1::Real #70)
decl f4 :: Real
#9 := f4
#77 := (+ f4 #76)
#78 := (<= #77 0::Real)
#79 := (not #78)
#55 := (+ f4 #54)
#56 := (<= #55 0::Real)
#57 := (not #56)
#50 := (* -1::Real f4)
#51 := (+ f3 #50)
#49 := (>= #51 0::Real)
#47 := (not #49)
#60 := (and #47 #57)
#63 := (not #60)
#84 := (or #63 #79)
#87 := (not #84)
#14 := (<= f3 f5)
#15 := (ite #14 f5 f3)
#16 := (< #15 f4)
#12 := (< f5 f4)
#10 := (< f3 f4)
#13 := (and #10 #12)
#17 := (implies #13 #16)
#18 := (not #17)
#90 := (iff #18 #87)
#39 := (not #13)
#40 := (or #39 #16)
#43 := (not #40)
#88 := (iff #43 #87)
#85 := (iff #40 #84)
#82 := (iff #16 #79)
#73 := (< #70 f4)
#80 := (iff #73 #79)
#81 := [rewrite]: #80
#74 := (iff #16 #73)
#71 := (= #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [monotonicity #72]: #74
#83 := [trans #75 #81]: #82
#64 := (iff #39 #63)
#61 := (iff #13 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#52 := (iff #10 #47)
#53 := [rewrite]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#86 := [monotonicity #65 #83]: #85
#89 := [monotonicity #86]: #88
#44 := (iff #18 #43)
#41 := (iff #17 #40)
#42 := [rewrite]: #41
#45 := [monotonicity #42]: #44
#91 := [trans #45 #89]: #90
#38 := [asserted]: #18
#92 := [mp #38 #91]: #87
#96 := [not-or-elim #92]: #78
#93 := [not-or-elim #92]: #60
#94 := [and-elim #93]: #47
#100 := (+ f3 #76)
#119 := (>= #100 0::Real)
#107 := (= f3 #70)
#108 := (not #67)
#106 := (= f5 #70)
#113 := (not #106)
#103 := (+ f5 #76)
#101 := (>= #103 0::Real)
#110 := (not #101)
#95 := [and-elim #93]: #57
#98 := [hypothesis]: #101
#99 := [th-lemma arith farkas -1 -1 1 #98 #95 #96]: false
#111 := [lemma #99]: #110
#112 := [hypothesis]: #106
#114 := (or #113 #101)
#115 := [th-lemma arith triangle-eq]: #114
#116 := [unit-resolution #115 #112 #111]: false
#117 := [lemma #116]: #113
#109 := (or #108 #106)
#104 := [def-axiom]: #109
#120 := [unit-resolution #104 #117]: #108
#105 := (or #67 #107)
#102 := [def-axiom]: #105
#121 := [unit-resolution #102 #120]: #107
#122 := (not #107)
#123 := (or #122 #119)
#124 := [th-lemma arith triangle-eq]: #123
#125 := [unit-resolution #124 #121]: #119
[th-lemma arith farkas -1 1 1 #125 #94 #96]: false
unsat
cf9d7301e2783e3a9529677f7376e191e2553752 96 0
#2 := false
decl f4 :: Real
#9 := f4
decl f3 :: Real
#8 := f3
#41 := 0::Real
#38 := -1::Real
#39 := (* -1::Real f4)
#40 := (+ f3 #39)
#49 := (>= #40 0::Real)
#51 := (ite #49 f3 f4)
#42 := (<= #40 0::Real)
#45 := (ite #42 f4 f3)
#54 := (= #45 #51)
#61 := (= f3 #51)
#66 := (not #42)
#64 := (= f4 #45)
#108 := (not #64)
#68 := (= f4 #51)
#75 := (not #68)
#76 := [hypothesis]: #75
#72 := (or #49 #68)
#73 := [def-axiom]: #72
#77 := [unit-resolution #73 #76]: #49
#69 := (not #49)
#70 := (or #69 #61)
#71 := [def-axiom]: #70
#78 := [unit-resolution #71 #77]: #61
#98 := (= f4 f3)
#74 := (= f3 f4)
#65 := (= f3 #45)
#88 := (not #65)
#57 := (not #54)
#89 := (iff #57 #88)
#86 := (iff #54 #65)
#84 := (iff #65 #54)
#79 := (= #51 #45)
#82 := (iff #79 #54)
#83 := [commutativity]: #82
#80 := (iff #65 #79)
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#87 := [symm #85]: #86
#90 := [monotonicity #87]: #89
#12 := (<= f4 f3)
#13 := (ite #12 f3 f4)
#10 := (<= f3 f4)
#11 := (ite #10 f4 f3)
#14 := (= #11 #13)
#15 := (not #14)
#58 := (iff #15 #57)
#55 := (iff #14 #54)
#52 := (= #13 #51)
#48 := (iff #12 #49)
#50 := [rewrite]: #48
#53 := [monotonicity #50]: #52
#46 := (= #11 #45)
#43 := (iff #10 #42)
#44 := [rewrite]: #43
#47 := [monotonicity #44]: #46
#56 := [monotonicity #47 #53]: #55
#59 := [monotonicity #56]: #58
#35 := [asserted]: #15
#60 := [mp #35 #59]: #57
#91 := [mp #60 #90]: #88
#63 := (or #42 #65)
#37 := [def-axiom]: #63
#92 := [unit-resolution #37 #91]: #42
#95 := (or #74 #66)
#93 := (or #74 #66 #69)
#94 := [th-lemma arith triangle-eq]: #93
#96 := [unit-resolution #94 #77]: #95
#97 := [unit-resolution #96 #92]: #74
#99 := [symm #97]: #98
#100 := [trans #99 #78]: #68
#101 := [unit-resolution #76 #100]: false
#102 := [lemma #101]: #68
#104 := (= #45 f4)
#103 := [hypothesis]: #64
#105 := [symm #103]: #104
#106 := [trans #105 #102]: #54
#107 := [unit-resolution #60 #106]: false
#109 := [lemma #107]: #108
#67 := (or #66 #64)
#62 := [def-axiom]: #67
#110 := [unit-resolution #62 #109]: #66
#112 := (or #49 #42)
#113 := [th-lemma arith farkas 1 1]: #112
#114 := [unit-resolution #113 #110]: #49
#115 := [unit-resolution #71 #114]: #61
#118 := (= #45 f3)
#111 := [unit-resolution #37 #110]: #65
#119 := [symm #111]: #118
#120 := [trans #119 #115]: #54
[unit-resolution #60 #120]: false
unsat
d5aa9479bc1880b81fc3a8f2f0ffecc7788dfa18 66 0
#2 := false
decl f3 :: Real
#9 := f3
#8 := 0::Real
#11 := (<= f3 0::Real)
#12 := (ite #11 0::Real f3)
#36 := (= f3 #12)
#87 := (= 0::Real #12)
#81 := (= #12 0::Real)
#71 := (not #36)
#53 := (>= f3 0::Real)
#54 := (not #53)
#60 := (or #36 #54)
#65 := (not #60)
#13 := (= #12 f3)
#10 := (<= 0::Real f3)
#14 := (implies #10 #13)
#15 := (not #14)
#68 := (iff #15 #65)
#42 := (not #10)
#43 := (or #42 #36)
#48 := (not #43)
#66 := (iff #48 #65)
#63 := (iff #43 #60)
#57 := (or #54 #36)
#61 := (iff #57 #60)
#62 := [rewrite]: #61
#58 := (iff #43 #57)
#55 := (iff #42 #54)
#51 := (iff #10 #53)
#52 := [rewrite]: #51
#56 := [monotonicity #52]: #55
#59 := [monotonicity #56]: #58
#64 := [trans #59 #62]: #63
#67 := [monotonicity #64]: #66
#49 := (iff #15 #48)
#46 := (iff #14 #43)
#39 := (implies #10 #36)
#44 := (iff #39 #43)
#45 := [rewrite]: #44
#40 := (iff #14 #39)
#37 := (iff #13 #36)
#38 := [rewrite]: #37
#41 := [monotonicity #38]: #40
#47 := [trans #41 #45]: #46
#50 := [monotonicity #47]: #49
#69 := [trans #50 #67]: #68
#35 := [asserted]: #15
#70 := [mp #35 #69]: #65
#72 := [not-or-elim #70]: #71
#79 := (or #11 #36)
#80 := [def-axiom]: #79
#78 := [unit-resolution #80 #72]: #11
#82 := (not #11)
#83 := (or #82 #81)
#84 := [def-axiom]: #83
#75 := [unit-resolution #84 #78]: #81
#88 := [symm #75]: #87
#77 := (= f3 0::Real)
#73 := [not-or-elim #70]: #53
#76 := (or #77 #82 #54)
#85 := [th-lemma arith triangle-eq]: #76
#86 := [unit-resolution #85 #78 #73]: #77
#89 := [trans #86 #88]: #36
[unit-resolution #72 #89]: false
unsat
7f8cef3bf22a3ab0ad21a7a5668eaf6fccce9da2 214 0
#2 := false
#9 := 0::Real
decl f4 :: Real
#14 := f4
#43 := -1::Real
#58 := (* -1::Real f4)
#94 := (>= f4 0::Real)
#101 := (ite #94 f4 #58)
#106 := (* -1::Real #101)
#161 := (+ #58 #106)
#183 := (<= #161 0::Real)
#137 := (= #58 #101)
#95 := (not #94)
decl f3 :: Real
#8 := f3
#112 := (+ f3 #58)
#113 := (<= #112 0::Real)
#116 := (ite #113 f4 f3)
#155 := (* -1::Real #116)
#156 := (+ f4 #155)
#157 := (<= #156 0::Real)
#158 := (+ f3 #155)
#193 := (<= #158 0::Real)
#149 := (= f3 #116)
#150 := (not #113)
#148 := (= f4 #116)
#195 := [hypothesis]: #113
#151 := (or #150 #148)
#152 := [def-axiom]: #151
#196 := [unit-resolution #152 #195]: #148
#197 := (not #148)
#198 := (or #197 #157)
#199 := [th-lemma arith triangle-eq]: #198
#200 := [unit-resolution #199 #196]: #157
#179 := (not #157)
#191 := (or #95 #179)
#159 := (+ f4 #106)
#160 := (<= #159 0::Real)
#136 := (= f4 #101)
#165 := [hypothesis]: #94
#144 := (or #95 #136)
#145 := [def-axiom]: #144
#166 := [unit-resolution #145 #165]: #136
#167 := (not #136)
#168 := (or #167 #160)
#169 := [th-lemma arith triangle-eq]: #168
#170 := [unit-resolution #169 #166]: #160
#44 := (* -1::Real f3)
#79 := (>= f3 0::Real)
#86 := (ite #79 f3 #44)
#91 := (* -1::Real #86)
#164 := (+ #44 #91)
#182 := (<= #164 0::Real)
#141 := (= #44 #86)
#80 := (not #79)
#177 := [hypothesis]: #157
#180 := (or #80 #95 #179)
#125 := (+ #101 #116)
#126 := (+ #86 #125)
#123 := (>= #126 0::Real)
#129 := (not #123)
#19 := (<= f3 f4)
#20 := (ite #19 f4 f3)
#16 := (- f4)
#15 := (< f4 0::Real)
#17 := (ite #15 #16 f4)
#11 := (- f3)
#10 := (< f3 0::Real)
#12 := (ite #10 #11 f3)
#13 := (- #12)
#18 := (- #13 #17)
#21 := (<= #18 #20)
#22 := (not #21)
#132 := (iff #22 #129)
#61 := (ite #15 #58 f4)
#67 := (* -1::Real #61)
#47 := (ite #10 #44 f3)
#53 := (* -1::Real #47)
#68 := (+ #53 #67)
#73 := (<= #68 #20)
#76 := (not #73)
#130 := (iff #76 #129)
#127 := (iff #73 #123)
#109 := (+ #91 #106)
#119 := (<= #109 #116)
#122 := (iff #119 #123)
#124 := [rewrite]: #122
#120 := (iff #73 #119)
#117 := (= #20 #116)
#114 := (iff #19 #113)
#115 := [rewrite]: #114
#118 := [monotonicity #115]: #117
#110 := (= #68 #109)
#107 := (= #67 #106)
#104 := (= #61 #101)
#98 := (ite #95 #58 f4)
#102 := (= #98 #101)
#103 := [rewrite]: #102
#99 := (= #61 #98)
#96 := (iff #15 #95)
#97 := [rewrite]: #96
#100 := [monotonicity #97]: #99
#105 := [trans #100 #103]: #104
#108 := [monotonicity #105]: #107
#92 := (= #53 #91)
#89 := (= #47 #86)
#83 := (ite #80 #44 f3)
#87 := (= #83 #86)
#88 := [rewrite]: #87
#84 := (= #47 #83)
#81 := (iff #10 #80)
#82 := [rewrite]: #81
#85 := [monotonicity #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#111 := [monotonicity #93 #108]: #110
#121 := [monotonicity #111 #118]: #120
#128 := [trans #121 #124]: #127
#131 := [monotonicity #128]: #130
#77 := (iff #22 #76)
#74 := (iff #21 #73)
#71 := (= #18 #68)
#64 := (- #53 #61)
#69 := (= #64 #68)
#70 := [rewrite]: #69
#65 := (= #18 #64)
#62 := (= #17 #61)
#59 := (= #16 #58)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#56 := (= #13 #53)
#50 := (- #47)
#54 := (= #50 #53)
#55 := [rewrite]: #54
#51 := (= #13 #50)
#48 := (= #12 #47)
#45 := (= #11 #44)
#46 := [rewrite]: #45
#49 := [monotonicity #46]: #48
#52 := [monotonicity #49]: #51
#57 := [trans #52 #55]: #56
#66 := [monotonicity #57 #63]: #65
#72 := [trans #66 #70]: #71
#75 := [monotonicity #72]: #74
#78 := [monotonicity #75]: #77
#133 := [trans #78 #131]: #132
#42 := [asserted]: #22
#134 := [mp #42 #133]: #129
#162 := (+ f3 #91)
#163 := (<= #162 0::Real)
#140 := (= f3 #86)
#171 := [hypothesis]: #79
#142 := (or #80 #140)
#143 := [def-axiom]: #142
#172 := [unit-resolution #143 #171]: #140
#173 := (not #140)
#174 := (or #173 #163)
#175 := [th-lemma arith triangle-eq]: #174
#176 := [unit-resolution #175 #172]: #163
#178 := [th-lemma arith farkas -2 1 -1 1 1 1 #165 #177 #171 #176 #134 #170]: false
#181 := [lemma #178]: #180
#184 := [unit-resolution #181 #165 #177]: #80
#138 := (or #79 #141)
#139 := [def-axiom]: #138
#185 := [unit-resolution #139 #184]: #141
#186 := (not #141)
#187 := (or #186 #182)
#188 := [th-lemma arith triangle-eq]: #187
#189 := [unit-resolution #188 #185]: #182
#190 := [th-lemma arith farkas 2 1 1 1 1 1 #165 #177 #134 #184 #189 #170]: false
#192 := [lemma #190]: #191
#201 := [unit-resolution #192 #200]: #95
#146 := (or #94 #137)
#147 := [def-axiom]: #146
#202 := [unit-resolution #147 #201]: #137
#203 := (not #137)
#204 := (or #203 #183)
#205 := [th-lemma arith triangle-eq]: #204
#206 := [unit-resolution #205 #202]: #183
#207 := (or #80 #94 #150)
#208 := [th-lemma arith assign-bounds 1 1]: #207
#209 := [unit-resolution #208 #201 #195]: #80
#210 := [unit-resolution #139 #209]: #141
#211 := [unit-resolution #188 #210]: #182
#212 := [th-lemma arith farkas 1 1 1 1 1 #200 #134 #209 #211 #206]: false
#213 := [lemma #212]: #150
#153 := (or #113 #149)
#154 := [def-axiom]: #153
#224 := [unit-resolution #154 #213]: #149
#225 := (not #149)
#226 := (or #225 #193)
#227 := [th-lemma arith triangle-eq]: #226
#228 := [unit-resolution #227 #224]: #193
#231 := (not #193)
#232 := (or #157 #113 #231)
#233 := [th-lemma arith assign-bounds 1 1]: #232
#234 := [unit-resolution #233 #213 #228]: #157
#235 := [unit-resolution #192 #234]: #95
#236 := [unit-resolution #147 #235]: #137
#237 := [unit-resolution #205 #236]: #183
#216 := [hypothesis]: #80
#217 := (or #95 #79 #113)
#218 := [th-lemma arith assign-bounds 1 1]: #217
#219 := [unit-resolution #218 #216 #213]: #95
#220 := [unit-resolution #147 #219]: #137
#221 := [unit-resolution #205 #220]: #183
#222 := [unit-resolution #139 #216]: #141
#223 := [unit-resolution #188 #222]: #182
#229 := [th-lemma arith farkas 1 1 1 1 1 1 #216 #213 #228 #134 #223 #221]: false
#230 := [lemma #229]: #79
#238 := [unit-resolution #143 #230]: #140
#239 := [unit-resolution #175 #238]: #163
[th-lemma arith farkas 1 1 1 1 1 1 #213 #228 #134 #230 #239 #237]: false
unsat
aa55c98f65865ce1fb459036f5d6d595375e9913 18 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := (<= f3 f3)
#10 := (not #9)
#40 := (iff #10 false)
#1 := true
#35 := (not true)
#38 := (iff #35 false)
#39 := [rewrite]: #38
#36 := (iff #10 #35)
#33 := (iff #9 true)
#34 := [rewrite]: #33
#37 := [monotonicity #34]: #36
#41 := [trans #37 #39]: #40
#30 := [asserted]: #10
[mp #30 #41]: false
unsat
881af9588484ddb06449bbce47773b99bf77b5e8 50 0
#2 := false
#47 := 0::Real
decl f4 :: Real
#9 := f4
#44 := -1::Real
#45 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#46 := (+ f3 #45)
#48 := (<= #46 0::Real)
#54 := -3::Real
#55 := (* -3::Real f4)
#11 := 3::Real
#12 := (* 3::Real f3)
#56 := (+ #12 #55)
#57 := (<= #56 0::Real)
#51 := (not #48)
#60 := (or #51 #57)
#63 := (not #60)
#13 := (* 3::Real f4)
#14 := (<= #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#66 := (iff #16 #63)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#64 := (iff #41 #63)
#61 := (iff #38 #60)
#58 := (iff #14 #57)
#59 := [rewrite]: #58
#52 := (iff #37 #51)
#49 := (iff #10 #48)
#50 := [rewrite]: #49
#53 := [monotonicity #50]: #52
#62 := [monotonicity #53 #59]: #61
#65 := [monotonicity #62]: #64
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#67 := [trans #43 #65]: #66
#36 := [asserted]: #16
#68 := [mp #36 #67]: #63
#69 := [not-or-elim #68]: #48
#70 := (not #57)
#71 := [not-or-elim #68]: #70
[th-lemma arith farkas -1/3 1 #71 #69]: false
unsat
afc3a7275e2a12cddf1eb01b0e78b5320cfe3bbf 55 0
#2 := false
#46 := 0::Real
decl f4 :: Real
#9 := f4
#59 := -3::Real
#62 := (* -3::Real f4)
decl f3 :: Real
#8 := f3
#11 := 3::Real
#12 := (* 3::Real f3)
#63 := (+ #12 #62)
#61 := (>= #63 0::Real)
#60 := (not #61)
#44 := -1::Real
#48 := (* -1::Real f4)
#49 := (+ f3 #48)
#47 := (>= #49 0::Real)
#66 := (or #47 #60)
#69 := (not #66)
#13 := (* 3::Real f4)
#14 := (< #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#72 := (iff #16 #69)
#37 := (not #10)
#38 := (or #37 #14)
#41 := (not #38)
#70 := (iff #41 #69)
#67 := (iff #38 #66)
#64 := (iff #14 #60)
#65 := [rewrite]: #64
#57 := (iff #37 #47)
#45 := (not #47)
#52 := (not #45)
#55 := (iff #52 #47)
#56 := [rewrite]: #55
#53 := (iff #37 #52)
#50 := (iff #10 #45)
#51 := [rewrite]: #50
#54 := [monotonicity #51]: #53
#58 := [trans #54 #56]: #57
#68 := [monotonicity #58 #65]: #67
#71 := [monotonicity #68]: #70
#42 := (iff #16 #41)
#39 := (iff #15 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#73 := [trans #43 #71]: #72
#36 := [asserted]: #16
#74 := [mp #36 #73]: #69
#76 := [not-or-elim #74]: #61
#75 := [not-or-elim #74]: #45
[th-lemma arith farkas 3 1 #75 #76]: false
unsat
a47b8f528836ea6757883cbcf031d400004e56c0 52 0
#2 := false
#43 := 0::Real
decl f4 :: Real
#9 := f4
#41 := -1::Real
#45 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#46 := (+ f3 #45)
#56 := (<= #46 0::Real)
#69 := (not #56)
#44 := (>= #46 0::Real)
#59 := (or #44 #56)
#62 := (not #59)
#11 := (<= f3 f4)
#10 := (< f3 f4)
#12 := (implies #10 #11)
#13 := (not #12)
#65 := (iff #13 #62)
#34 := (not #10)
#35 := (or #34 #11)
#38 := (not #35)
#63 := (iff #38 #62)
#60 := (iff #35 #59)
#57 := (iff #11 #56)
#58 := [rewrite]: #57
#54 := (iff #34 #44)
#42 := (not #44)
#49 := (not #42)
#52 := (iff #49 #44)
#53 := [rewrite]: #52
#50 := (iff #34 #49)
#47 := (iff #10 #42)
#48 := [rewrite]: #47
#51 := [monotonicity #48]: #50
#55 := [trans #51 #53]: #54
#61 := [monotonicity #55 #58]: #60
#64 := [monotonicity #61]: #63
#39 := (iff #13 #38)
#36 := (iff #12 #35)
#37 := [rewrite]: #36
#40 := [monotonicity #37]: #39
#66 := [trans #40 #64]: #65
#33 := [asserted]: #13
#67 := [mp #33 #66]: #62
#70 := [not-or-elim #67]: #69
#68 := [not-or-elim #67]: #42
#78 := (or #56 #44)
#79 := [th-lemma arith farkas 1 1]: #78
#80 := [unit-resolution #79 #68]: #56
[unit-resolution #80 #70]: false
unsat
1c7cd0067170dad35b430a2211d9d52ff14ffc78 15 0
#2 := false
decl f3 :: Real
#8 := f3
#9 := (< f3 f3)
#10 := (not #9)
#11 := (not #10)
#36 := (iff #11 false)
#34 := (iff #9 false)
#35 := [rewrite]: #34
#32 := (iff #11 #9)
#33 := [rewrite]: #32
#37 := [trans #33 #35]: #36
#31 := [asserted]: #11
[mp #31 #37]: false
unsat
ae8743955951475c05ecf14ad6f216d2f85844fd 75 0
#2 := false
#56 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Real)
#67 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#68 := (+ f3 #67)
#69 := (<= #68 0::Real)
#72 := (not #69)
#63 := (+ f3 #54)
#64 := (<= #63 0::Real)
#60 := (not #57)
#81 := (or #60 #64 #72)
#86 := (not #81)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#89 := (iff #16 #86)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#87 := (iff #50 #86)
#84 := (iff #45 #81)
#75 := (or #60 #64)
#78 := (or #72 #75)
#82 := (iff #78 #81)
#83 := [rewrite]: #82
#79 := (iff #45 #78)
#76 := (iff #38 #75)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#77 := [monotonicity #62 #66]: #76
#73 := (iff #44 #72)
#70 := (iff #10 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#80 := [monotonicity #74 #77]: #79
#85 := [trans #80 #83]: #84
#88 := [monotonicity #85]: #87
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#90 := [trans #52 #88]: #89
#36 := [asserted]: #16
#91 := [mp #36 #90]: #86
#92 := [not-or-elim #91]: #57
#93 := (not #64)
#94 := [not-or-elim #91]: #93
#95 := [not-or-elim #91]: #69
[th-lemma arith farkas 1 -1 1 #95 #94 #92]: false
unsat
787bdcef7a733082f1b18886b52fc521c0ed8560 80 0
#2 := false
#56 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#54 := (* -1::Real f5)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#57 := (<= #55 0::Real)
#69 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#70 := (+ f3 #69)
#68 := (>= #70 0::Real)
#63 := (+ f3 #54)
#64 := (<= #63 0::Real)
#60 := (not #57)
#86 := (or #60 #64 #68)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (<= f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #60 #64)
#83 := (or #68 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#65 := (iff #13 #64)
#66 := [rewrite]: #65
#61 := (iff #37 #60)
#58 := (iff #12 #57)
#59 := [rewrite]: #58
#62 := [monotonicity #59]: #61
#82 := [monotonicity #62 #66]: #81
#78 := (iff #44 #68)
#67 := (not #68)
#73 := (not #67)
#76 := (iff #73 #68)
#77 := [rewrite]: #76
#74 := (iff #44 #73)
#71 := (iff #10 #67)
#72 := [rewrite]: #71
#75 := [monotonicity #72]: #74
#79 := [trans #75 #77]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#97 := [not-or-elim #96]: #57
#98 := (not #64)
#99 := [not-or-elim #96]: #98
#100 := [not-or-elim #96]: #67
[th-lemma arith farkas 1 1 1 #100 #99 #97]: false
unsat
b3f48d3d4ae5df26c230c46ec0af407248139694 80 0
#2 := false
#55 := 0::Real
decl f4 :: Real
#9 := f4
#53 := -1::Real
#72 := (* -1::Real f4)
decl f3 :: Real
#8 := f3
#73 := (+ f3 #72)
#74 := (<= #73 0::Real)
#77 := (not #74)
decl f5 :: Real
#11 := f5
#57 := (* -1::Real f5)
#68 := (+ f3 #57)
#69 := (<= #68 0::Real)
#58 := (+ f4 #57)
#56 := (>= #58 0::Real)
#86 := (or #56 #69 #77)
#91 := (not #86)
#13 := (<= f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (<= f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#94 := (iff #16 #91)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#92 := (iff #50 #91)
#89 := (iff #45 #86)
#80 := (or #56 #69)
#83 := (or #77 #80)
#87 := (iff #83 #86)
#88 := [rewrite]: #87
#84 := (iff #45 #83)
#81 := (iff #38 #80)
#70 := (iff #13 #69)
#71 := [rewrite]: #70
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#82 := [monotonicity #67 #71]: #81
#78 := (iff #44 #77)
#75 := (iff #10 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#85 := [monotonicity #79 #82]: #84
#90 := [trans #85 #88]: #89
#93 := [monotonicity #90]: #92
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#95 := [trans #52 #93]: #94
#36 := [asserted]: #16
#96 := [mp #36 #95]: #91
#100 := [not-or-elim #96]: #74
#98 := (not #69)
#99 := [not-or-elim #96]: #98
#97 := [not-or-elim #96]: #54
[th-lemma arith farkas 1 1 1 #97 #99 #100]: false
unsat
ca2cf358a9693d3f8c3ab7c0c2862ca77ccd856e 85 0
#2 := false
#55 := 0::Real
decl f5 :: Real
#11 := f5
#53 := -1::Real
#57 := (* -1::Real f5)
decl f3 :: Real
#8 := f3
#70 := (+ f3 #57)
#69 := (>= #70 0::Real)
decl f4 :: Real
#9 := f4
#75 := (* -1::Real f4)
#76 := (+ f3 #75)
#74 := (>= #76 0::Real)
#68 := (not #69)
#58 := (+ f4 #57)
#56 := (>= #58 0::Real)
#92 := (or #56 #68 #74)
#97 := (not #92)
#13 := (< f3 f5)
#12 := (< f4 f5)
#14 := (implies #12 #13)
#10 := (< f3 f4)
#15 := (implies #10 #14)
#16 := (not #15)
#100 := (iff #16 #97)
#37 := (not #12)
#38 := (or #37 #13)
#44 := (not #10)
#45 := (or #44 #38)
#50 := (not #45)
#98 := (iff #50 #97)
#95 := (iff #45 #92)
#86 := (or #56 #68)
#89 := (or #74 #86)
#93 := (iff #89 #92)
#94 := [rewrite]: #93
#90 := (iff #45 #89)
#87 := (iff #38 #86)
#71 := (iff #13 #68)
#72 := [rewrite]: #71
#66 := (iff #37 #56)
#54 := (not #56)
#61 := (not #54)
#64 := (iff #61 #56)
#65 := [rewrite]: #64
#62 := (iff #37 #61)
#59 := (iff #12 #54)
#60 := [rewrite]: #59
#63 := [monotonicity #60]: #62
#67 := [trans #63 #65]: #66
#88 := [monotonicity #67 #72]: #87
#84 := (iff #44 #74)
#73 := (not #74)
#79 := (not #73)
#82 := (iff #79 #74)
#83 := [rewrite]: #82
#80 := (iff #44 #79)
#77 := (iff #10 #73)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#85 := [trans #81 #83]: #84
#91 := [monotonicity #85 #88]: #90
#96 := [trans #91 #94]: #95
#99 := [monotonicity #96]: #98
#51 := (iff #16 #50)
#48 := (iff #15 #45)
#41 := (implies #10 #38)
#46 := (iff #41 #45)
#47 := [rewrite]: #46
#42 := (iff #15 #41)
#39 := (iff #14 #38)
#40 := [rewrite]: #39
#43 := [monotonicity #40]: #42
#49 := [trans #43 #47]: #48
#52 := [monotonicity #49]: #51
#101 := [trans #52 #99]: #100
#36 := [asserted]: #16
#102 := [mp #36 #101]: #97
#104 := [not-or-elim #102]: #69
#103 := [not-or-elim #102]: #54
#105 := [not-or-elim #102]: #73
[th-lemma arith farkas 1 1 1 #105 #103 #104]: false
unsat
f171037adc5d16b4f868a5116f823085196df83e 69 0
#2 := false
#47 := 0::Real
decl f5 :: Real
#11 := f5
#45 := -1::Real
#54 := (* -1::Real f5)
decl f3 :: Real
#8 := f3
#65 := (+ f3 #54)
#66 := (<= #65 0::Real)
#67 := (not #66)
decl f4 :: Real
#9 := f4
#55 := (+ f4 #54)
#53 := (>= #55 0::Real)
#56 := (not #53)
#49 := (* -1::Real f4)
#50 := (+ f3 #49)
#48 := (>= #50 0::Real)
#46 := (not #48)
#59 := (and #46 #56)
#62 := (not #59)
#77 := (or #62 #66)
#80 := (not #77)
#14 := (< f5 f3)
#15 := (not #14)
#12 := (< f4 f5)
#10 := (< f3 f4)
#13 := (and #10 #12)
#16 := (implies #13 #15)
#17 := (not #16)
#83 := (iff #17 #80)
#38 := (not #13)
#39 := (or #38 #15)
#42 := (not #39)
#81 := (iff #42 #80)
#78 := (iff #39 #77)
#75 := (iff #15 #66)
#70 := (not #67)
#73 := (iff #70 #66)
#74 := [rewrite]: #73
#71 := (iff #15 #70)
#68 := (iff #14 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#76 := [trans #72 #74]: #75
#63 := (iff #38 #62)
#60 := (iff #13 #59)
#57 := (iff #12 #56)
#58 := [rewrite]: #57
#51 := (iff #10 #46)
#52 := [rewrite]: #51
#61 := [monotonicity #52 #58]: #60
#64 := [monotonicity #61]: #63
#79 := [monotonicity #64 #76]: #78
#82 := [monotonicity #79]: #81
#43 := (iff #17 #42)
#40 := (iff #16 #39)
#41 := [rewrite]: #40
#44 := [monotonicity #41]: #43
#84 := [trans #44 #82]: #83
#37 := [asserted]: #17
#85 := [mp #37 #84]: #80
#89 := [not-or-elim #85]: #67
#86 := [not-or-elim #85]: #59
#88 := [and-elim #86]: #56
#87 := [and-elim #86]: #46
[th-lemma arith farkas 1 1 1 #87 #88 #89]: false
unsat
78fe7fd2fee546c83d198c598a1a57a1faebea4e 50 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f10 :: S2
#30 := f10
decl f6 :: (-> S6 S2 S5)
decl f9 :: S2
#28 := f9
decl f7 :: S6
#9 := f7
#29 := (f6 f7 f9)
#31 := (f5 #29 f10)
decl f4 :: S3
#8 := f4
#32 := (f3 f4 #31)
#33 := (= f9 #32)
#34 := (not #33)
#77 := [asserted]: #34
#12 := (:var 0 S2)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#570 := (pattern #13)
#14 := (f3 f4 #13)
#55 := (= #10 #14)
#571 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #570) #55)
#58 := (forall (vars (?v0 S2) (?v1 S2)) #55)
#574 := (iff #58 #571)
#572 := (iff #55 #55)
#573 := [refl]: #572
#575 := [quant-intro #573]: #574
#92 := (~ #58 #58)
#90 := (~ #55 #55)
#91 := [refl]: #90
#93 := [nnf-pos #91]: #92
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#59 := (iff #16 #58)
#56 := (iff #15 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#54 := [asserted]: #16
#63 := [mp #54 #60]: #58
#80 := [mp~ #63 #93]: #58
#576 := [mp #80 #575]: #571
#153 := (not #571)
#240 := (or #153 #33)
#154 := [quant-inst #28 #30]: #240
[unit-resolution #154 #576 #77]: false
unsat
571b672b8bd2cf605e4360f1b7c3d8abab0072cd 50 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f9 :: S2
#28 := f9
decl f6 :: (-> S6 S2 S5)
decl f10 :: S2
#29 := f10
decl f7 :: S6
#9 := f7
#30 := (f6 f7 f10)
#31 := (f5 #30 f9)
decl f8 :: S3
#17 := f8
#32 := (f3 f8 #31)
#33 := (= f9 #32)
#34 := (not #33)
#77 := [asserted]: #34
#12 := (:var 0 S2)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#570 := (pattern #13)
#18 := (f3 f8 #13)
#62 := (= #12 #18)
#577 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #570) #62)
#66 := (forall (vars (?v0 S2) (?v1 S2)) #62)
#580 := (iff #66 #577)
#578 := (iff #62 #62)
#579 := [refl]: #578
#581 := [quant-intro #579]: #580
#82 := (~ #66 #66)
#81 := (~ #62 #62)
#94 := [refl]: #81
#83 := [nnf-pos #94]: #82
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S2)) #19)
#67 := (iff #20 #66)
#64 := (iff #19 #62)
#65 := [rewrite]: #64
#68 := [quant-intro #65]: #67
#61 := [asserted]: #20
#71 := [mp #61 #68]: #66
#95 := [mp~ #71 #83]: #66
#582 := [mp #95 #581]: #577
#243 := (not #577)
#244 := (or #243 #33)
#172 := [quant-inst #29 #28]: #244
[unit-resolution #172 #582 #77]: false
unsat
4fa63c3a3a92ef48f08b4203601002014284fd9e 93 0
#2 := false
decl f10 :: S2
#30 := f10
decl f9 :: S2
#28 := f9
#35 := (= f9 f10)
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#9 := f7
#32 := (f6 f7 f10)
#33 := (f5 #32 f9)
decl f4 :: S3
#8 := f4
#359 := (f3 f4 #33)
#558 := (= #359 f10)
#566 := (= f10 #359)
#12 := (:var 0 S2)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#578 := (pattern #13)
#14 := (f3 f4 #13)
#58 := (= #10 #14)
#579 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #578) #58)
#61 := (forall (vars (?v0 S2) (?v1 S2)) #58)
#582 := (iff #61 #579)
#580 := (iff #58 #58)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#100 := (~ #61 #61)
#98 := (~ #58 #58)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#57 := [asserted]: #16
#66 := [mp #57 #63]: #61
#87 := [mp~ #66 #101]: #61
#584 := [mp #87 #583]: #579
#570 := (not #579)
#576 := (or #570 #566)
#571 := [quant-inst #30 #28]: #576
#217 := [unit-resolution #571 #584]: #566
#559 := [symm #217]: #558
#554 := (= f9 #359)
#29 := (f6 f7 f9)
#31 := (f5 #29 f10)
#253 := (f3 f4 #31)
#556 := (= #253 #359)
#34 := (= #31 #33)
#568 := (= f10 f9)
#81 := (not #34)
#577 := [hypothesis]: #81
#248 := (or #35 #34)
#83 := (iff #35 #81)
#36 := (iff #34 #35)
#37 := (not #36)
#84 := (iff #37 #83)
#85 := [rewrite]: #84
#80 := [asserted]: #37
#88 := [mp #80 #85]: #83
#160 := (not #83)
#247 := (or #35 #34 #160)
#161 := [def-axiom]: #247
#162 := [unit-resolution #161 #88]: #248
#567 := [unit-resolution #162 #577]: #35
#226 := [symm #567]: #568
#569 := (= #29 #32)
#210 := [monotonicity #567]: #569
#553 := [monotonicity #210 #226]: #34
#214 := [unit-resolution #577 #553]: false
#215 := [lemma #214]: #34
#557 := [monotonicity #215]: #556
#250 := (= f9 #253)
#572 := (or #570 #250)
#227 := [quant-inst #28 #30]: #572
#555 := [unit-resolution #227 #584]: #250
#560 := [trans #555 #557]: #554
#196 := [trans #560 #559]: #35
#249 := (not #35)
#252 := (or #249 #81)
#240 := (or #249 #81 #160)
#251 := [def-axiom]: #240
#180 := [unit-resolution #251 #88]: #252
#216 := [unit-resolution #180 #215]: #249
[unit-resolution #216 #196]: false
unsat
79f78e71a587ae1c5f4af108f19f9ffab740b9f4 166 0
#2 := false
decl f12 :: S2
#34 := f12
decl f10 :: S2
#30 := f10
#38 := (= f10 f12)
#112 := (not #38)
decl f11 :: S2
#32 := f11
decl f9 :: S2
#28 := f9
#37 := (= f9 f11)
#111 := (not #37)
#98 := (or #111 #112)
decl f5 :: (-> S5 S2 S4)
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#9 := f7
#33 := (f6 f7 f11)
#35 := (f5 #33 f12)
#29 := (f6 f7 f9)
#31 := (f5 #29 f10)
#36 := (= #31 #35)
#99 := (not #98)
#250 := [hypothesis]: #99
#185 := (or #98 #38)
#272 := [def-axiom]: #185
#238 := [unit-resolution #272 #250]: #38
#240 := (= #29 #33)
#184 := (or #98 #37)
#271 := [def-axiom]: #184
#239 := [unit-resolution #271 #250]: #37
#241 := [monotonicity #239]: #240
#579 := [monotonicity #241 #238]: #36
#85 := (not #36)
#257 := (or #85 #98)
#121 := (iff #36 #98)
#39 := (and #37 #38)
#87 := (iff #39 #85)
#124 := (iff #87 #121)
#116 := (iff #98 #36)
#122 := (iff #116 #121)
#123 := [rewrite]: #122
#119 := (iff #87 #116)
#113 := (iff #99 #85)
#117 := (iff #113 #116)
#118 := [rewrite]: #117
#114 := (iff #87 #113)
#100 := (iff #39 #99)
#101 := [rewrite]: #100
#115 := [monotonicity #101]: #114
#120 := [trans #115 #118]: #119
#125 := [trans #120 #123]: #124
#40 := (iff #36 #39)
#41 := (not #40)
#88 := (iff #41 #87)
#89 := [rewrite]: #88
#84 := [asserted]: #41
#92 := [mp #84 #89]: #87
#126 := [mp #92 #125]: #121
#264 := (not #121)
#274 := (or #85 #98 #264)
#278 := [def-axiom]: #274
#594 := [unit-resolution #278 #126]: #257
#593 := [unit-resolution #594 #250]: #85
#580 := [unit-resolution #593 #579]: false
#581 := [lemma #580]: #98
decl f3 :: (-> S3 S4 S2)
decl f4 :: S3
#8 := f4
#598 := (f3 f4 #35)
#585 := (= #598 f11)
#599 := (= f11 #598)
#12 := (:var 0 S2)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#602 := (pattern #13)
#14 := (f3 f4 #13)
#62 := (= #10 #14)
#603 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #602) #62)
#65 := (forall (vars (?v0 S2) (?v1 S2)) #62)
#606 := (iff #65 #603)
#604 := (iff #62 #62)
#605 := [refl]: #604
#607 := [quant-intro #605]: #606
#104 := (~ #65 #65)
#102 := (~ #62 #62)
#103 := [refl]: #102
#105 := [nnf-pos #103]: #104
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#66 := (iff #16 #65)
#63 := (iff #15 #62)
#64 := [rewrite]: #63
#67 := [quant-intro #64]: #66
#61 := [asserted]: #16
#70 := [mp #61 #67]: #65
#91 := [mp~ #70 #105]: #65
#608 := [mp #91 #607]: #603
#262 := (not #603)
#254 := (or #262 #599)
#592 := [quant-inst #32 #34]: #254
#582 := [unit-resolution #592 #608]: #599
#587 := [symm #582]: #585
#225 := (= f9 #598)
#596 := (f3 f4 #31)
#584 := (= #596 #598)
#204 := (or #36 #99)
#275 := (or #36 #99 #264)
#276 := [def-axiom]: #275
#277 := [unit-resolution #276 #126]: #204
#583 := [unit-resolution #277 #581]: #36
#220 := [monotonicity #583]: #584
#251 := (= f9 #596)
#263 := (or #262 #251)
#597 := [quant-inst #28 #30]: #263
#578 := [unit-resolution #597 #608]: #251
#226 := [trans #578 #220]: #225
#588 := [trans #226 #587]: #37
decl f8 :: S3
#17 := f8
#591 := (f3 f8 #35)
#282 := (= #591 f12)
#249 := (= f12 #591)
#18 := (f3 f8 #13)
#69 := (= #12 #18)
#609 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #602) #69)
#73 := (forall (vars (?v0 S2) (?v1 S2)) #69)
#612 := (iff #73 #609)
#610 := (iff #69 #69)
#611 := [refl]: #610
#613 := [quant-intro #611]: #612
#94 := (~ #73 #73)
#93 := (~ #69 #69)
#106 := [refl]: #93
#95 := [nnf-pos #106]: #94
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S2)) #19)
#74 := (iff #20 #73)
#71 := (iff #19 #69)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#68 := [asserted]: #20
#78 := [mp #68 #75]: #73
#107 := [mp~ #78 #95]: #73
#614 := [mp #107 #613]: #609
#600 := (not #609)
#234 := (or #600 #249)
#577 := [quant-inst #32 #34]: #234
#586 := [unit-resolution #577 #614]: #249
#298 := [symm #586]: #282
#299 := (= f10 #591)
#383 := (f3 f8 #31)
#575 := (= #383 #591)
#576 := [monotonicity #583]: #575
#590 := (= f10 #383)
#595 := (or #600 #590)
#601 := [quant-inst #28 #30]: #595
#589 := [unit-resolution #601 #614]: #590
#300 := [trans #589 #576]: #299
#286 := [trans #300 #298]: #38
#186 := (or #99 #111 #112)
#273 := [def-axiom]: #186
[unit-resolution #273 #286 #588 #581]: false
unsat
baaa782cc86dd181f5b22942ed5c1e9b1d9ea37c 104 0
#2 := false
decl f20 :: S2
#54 := f20
decl f17 :: S2
#46 := f17
#63 := (= f17 f20)
decl f8 :: (-> S8 S9 S2)
decl f10 :: (-> S10 S5 S9)
decl f5 :: (-> S6 S3 S5)
decl f22 :: S3
#58 := f22
decl f6 :: (-> S7 S2 S6)
decl f21 :: S2
#56 := f21
decl f7 :: S7
#9 := f7
#57 := (f6 f7 f21)
#59 := (f5 #57 f22)
decl f11 :: (-> S11 S2 S10)
decl f12 :: S11
#18 := f12
#55 := (f11 f12 f20)
#60 := (f10 #55 #59)
decl f9 :: S8
#17 := f9
#61 := (f8 f9 #60)
decl f19 :: S3
#50 := f19
decl f18 :: S2
#48 := f18
#49 := (f6 f7 f18)
#51 := (f5 #49 f19)
#47 := (f11 f12 f17)
#52 := (f10 #47 #51)
#53 := (f8 f9 #52)
#62 := (= #53 #61)
#64 := (iff #62 #63)
#343 := (iff #63 #62)
#620 := (= f20 #61)
#20 := (:var 0 S5)
#10 := (:var 1 S2)
#19 := (f11 f12 #10)
#21 := (f10 #19 #20)
#652 := (pattern #21)
#22 := (f8 f9 #21)
#93 := (= #10 #22)
#653 := (forall (vars (?v0 S2) (?v1 S5)) (:pat #652) #93)
#97 := (forall (vars (?v0 S2) (?v1 S5)) #93)
#656 := (iff #97 #653)
#654 := (iff #93 #93)
#655 := [refl]: #654
#657 := [quant-intro #655]: #656
#142 := (~ #97 #97)
#141 := (~ #93 #93)
#160 := [refl]: #141
#143 := [nnf-pos #160]: #142
#23 := (= #22 #10)
#24 := (forall (vars (?v0 S2) (?v1 S5)) #23)
#98 := (iff #24 #97)
#95 := (iff #23 #93)
#96 := [rewrite]: #95
#99 := [quant-intro #96]: #98
#92 := [asserted]: #24
#102 := [mp #92 #99]: #97
#161 := [mp~ #102 #143]: #97
#658 := [mp #161 #657]: #653
#293 := (not #653)
#623 := (or #293 #620)
#624 := [quant-inst #54 #59]: #623
#341 := [unit-resolution #624 #658]: #620
#644 := (= f17 #53)
#636 := (or #293 #644)
#277 := [quant-inst #46 #51]: #636
#342 := [unit-resolution #277 #658]: #644
#329 := [monotonicity #342 #341]: #343
#344 := [symm #329]: #64
#316 := (not #63)
#133 := (not #62)
#235 := (iff #133 #316)
#614 := [monotonicity #344]: #235
#632 := [hypothesis]: #133
#615 := [mp #632 #614]: #316
#315 := (or #63 #62)
#135 := (iff #63 #133)
#65 := (not #64)
#136 := (iff #65 #135)
#137 := [rewrite]: #136
#132 := [asserted]: #65
#140 := [mp #132 #137]: #135
#227 := (not #135)
#314 := (or #63 #62 #227)
#228 := [def-axiom]: #314
#229 := [unit-resolution #228 #140]: #315
#618 := [unit-resolution #229 #632]: #63
#337 := [unit-resolution #618 #615]: false
#338 := [lemma #337]: #62
#616 := [mp #338 #344]: #63
#319 := (or #316 #133)
#307 := (or #316 #133 #227)
#318 := [def-axiom]: #307
#247 := [unit-resolution #318 #140]: #319
#612 := [unit-resolution #247 #338]: #316
[unit-resolution #612 #616]: false
unsat
de215825bb06594ceb5b3aa8ef2ee6d8c084788e 230 0
#2 := false
decl f22 :: S8
#58 := f22
decl f19 :: S8
#50 := f19
#64 := (= f19 f22)
#177 := (not #64)
decl f21 :: S2
#56 := f21
decl f18 :: S2
#48 := f18
#63 := (= f18 f21)
#176 := (not #63)
#154 := (or #176 #177)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f11 :: (-> S11 S2 S10)
decl f12 :: S11
#18 := f12
#57 := (f11 f12 f21)
#59 := (f10 #57 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#54 := f20
decl f7 :: S7
#9 := f7
#55 := (f6 f7 f20)
#60 := (f5 #55 #59)
decl f16 :: S13
#29 := f16
#61 := (f15 f16 #60)
#49 := (f11 f12 f18)
#51 := (f10 #49 f19)
decl f17 :: S2
#46 := f17
#47 := (f6 f7 f17)
#52 := (f5 #47 #51)
#53 := (f15 f16 #52)
#62 := (= #53 #61)
#666 := (= #59 #61)
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#667 := (pattern #13)
#30 := (f15 f16 #13)
#111 := (= #12 #30)
#687 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #667) #111)
#115 := (forall (vars (?v0 S2) (?v1 S3)) #111)
#690 := (iff #115 #687)
#688 := (iff #111 #111)
#689 := [refl]: #688
#691 := [quant-intro #689]: #690
#148 := (~ #115 #115)
#167 := (~ #111 #111)
#168 := [refl]: #167
#149 := [nnf-pos #168]: #148
#31 := (= #30 #12)
#32 := (forall (vars (?v0 S2) (?v1 S3)) #31)
#116 := (iff #32 #115)
#113 := (iff #31 #111)
#114 := [rewrite]: #113
#117 := [quant-intro #114]: #116
#110 := [asserted]: #32
#120 := [mp #110 #117]: #115
#169 := [mp~ #120 #149]: #115
#692 := [mp #169 #691]: #687
#664 := (not #687)
#315 := (or #664 #666)
#658 := [quant-inst #54 #59]: #315
#257 := [unit-resolution #658 #692]: #666
#349 := (= #53 #59)
#639 := (= #51 #59)
#155 := (not #154)
#364 := [hypothesis]: #155
#250 := (or #154 #64)
#337 := [def-axiom]: #250
#636 := [unit-resolution #337 #364]: #64
#359 := (= #49 #57)
#249 := (or #154 #63)
#336 := [def-axiom]: #249
#637 := [unit-resolution #336 #364]: #63
#360 := [monotonicity #637]: #359
#348 := [monotonicity #360 #636]: #639
#638 := (= #53 #51)
#448 := (= #51 #53)
#665 := (or #664 #448)
#660 := [quant-inst #46 #51]: #665
#634 := [unit-resolution #660 #692]: #448
#635 := [symm #634]: #638
#350 := [trans #635 #348]: #349
#352 := [trans #350 #257]: #62
#135 := (not #62)
#322 := (or #135 #154)
#186 := (iff #62 #154)
#65 := (and #63 #64)
#137 := (iff #65 #135)
#189 := (iff #137 #186)
#181 := (iff #154 #62)
#187 := (iff #181 #186)
#188 := [rewrite]: #187
#184 := (iff #137 #181)
#178 := (iff #155 #135)
#182 := (iff #178 #181)
#183 := [rewrite]: #182
#179 := (iff #137 #178)
#156 := (iff #65 #155)
#157 := [rewrite]: #156
#180 := [monotonicity #157]: #179
#185 := [trans #180 #183]: #184
#190 := [trans #185 #188]: #189
#66 := (iff #62 #65)
#67 := (not #66)
#138 := (iff #67 #137)
#139 := [rewrite]: #138
#134 := [asserted]: #67
#142 := [mp #134 #139]: #137
#191 := [mp #142 #190]: #186
#329 := (not #186)
#339 := (or #135 #154 #329)
#343 := [def-axiom]: #339
#659 := [unit-resolution #343 #191]: #322
#365 := [unit-resolution #659 #364]: #135
#630 := [unit-resolution #365 #352]: false
#631 := [lemma #630]: #154
decl f8 :: (-> S9 S3 S2)
decl f9 :: S9
#17 := f9
#306 := (f8 f9 #59)
#625 := (= #306 f21)
#644 := (= f21 #306)
#20 := (:var 0 S8)
#19 := (f11 f12 #10)
#21 := (f10 #19 #20)
#674 := (pattern #21)
#22 := (f8 f9 #21)
#95 := (= #10 #22)
#675 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #674) #95)
#99 := (forall (vars (?v0 S2) (?v1 S8)) #95)
#678 := (iff #99 #675)
#676 := (iff #95 #95)
#677 := [refl]: #676
#679 := [quant-intro #677]: #678
#144 := (~ #99 #99)
#143 := (~ #95 #95)
#162 := [refl]: #143
#145 := [nnf-pos #162]: #144
#23 := (= #22 #10)
#24 := (forall (vars (?v0 S2) (?v1 S8)) #23)
#100 := (iff #24 #99)
#97 := (iff #23 #95)
#98 := [rewrite]: #97
#101 := [quant-intro #98]: #100
#94 := [asserted]: #24
#104 := [mp #94 #101]: #99
#163 := [mp~ #104 #145]: #99
#680 := [mp #163 #679]: #675
#303 := (not #675)
#649 := (or #303 #644)
#285 := [quant-inst #56 #58]: #649
#344 := [unit-resolution #285 #680]: #644
#626 := [symm #344]: #625
#621 := (= f18 #306)
#656 := (f8 f9 #51)
#619 := (= #656 #306)
#632 := (= #61 #59)
#629 := [symm #257]: #632
#633 := (= #51 #61)
#269 := (or #62 #155)
#340 := (or #62 #155 #329)
#341 := [def-axiom]: #340
#342 := [unit-resolution #341 #191]: #269
#628 := [unit-resolution #342 #631]: #62
#622 := [trans #634 #628]: #633
#623 := [trans #622 #629]: #639
#620 := [monotonicity #623]: #619
#657 := (= f18 #656)
#304 := (or #303 #657)
#305 := [quant-inst #48 #50]: #304
#624 := [unit-resolution #305 #680]: #657
#627 := [trans #624 #620]: #621
#468 := [trans #627 #626]: #63
decl f13 :: (-> S12 S3 S8)
decl f14 :: S12
#25 := f14
#648 := (f13 f14 #59)
#614 := (= #648 f22)
#643 := (= f22 #648)
#26 := (f13 f14 #21)
#103 := (= #20 #26)
#681 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #674) #103)
#107 := (forall (vars (?v0 S2) (?v1 S8)) #103)
#684 := (iff #107 #681)
#682 := (iff #103 #103)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#146 := (~ #107 #107)
#164 := (~ #103 #103)
#165 := [refl]: #164
#147 := [nnf-pos #165]: #146
#27 := (= #26 #20)
#28 := (forall (vars (?v0 S2) (?v1 S8)) #27)
#108 := (iff #28 #107)
#105 := (iff #27 #103)
#106 := [rewrite]: #105
#109 := [quant-intro #106]: #108
#102 := [asserted]: #28
#112 := [mp #102 #109]: #107
#166 := [mp~ #112 #147]: #107
#686 := [mp #166 #685]: #681
#645 := (not #681)
#290 := (or #645 #643)
#291 := [quant-inst #56 #58]: #290
#469 := [unit-resolution #291 #686]: #643
#615 := [symm #469]: #614
#609 := (= f19 #648)
#299 := (f13 f14 #51)
#612 := (= #299 #648)
#613 := [monotonicity #623]: #612
#642 := (= f19 #299)
#646 := (or #645 #642)
#647 := [quant-inst #48 #50]: #646
#470 := [unit-resolution #647 #686]: #642
#610 := [trans #470 #613]: #609
#616 := [trans #610 #615]: #64
#251 := (or #155 #176 #177)
#338 := [def-axiom]: #251
[unit-resolution #338 #616 #468 #631]: false
unsat
c95153d6b8f8057a992abaf6c88b4938f23f1514 160 0
#2 := false
decl f21 :: S2
#57 := f21
decl f18 :: S2
#48 := f18
#65 := (= f18 f21)
decl f8 :: (-> S9 S3 S2)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f22 :: S8
#59 := f22
decl f11 :: (-> S11 S2 S10)
decl f12 :: S11
#18 := f12
#58 := (f11 f12 f21)
#60 := (f10 #58 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#55 := f20
decl f7 :: S7
#9 := f7
#56 := (f6 f7 f20)
#61 := (f5 #56 #60)
decl f16 :: S13
#29 := f16
#62 := (f15 f16 #61)
decl f9 :: S9
#17 := f9
#63 := (f8 f9 #62)
decl f19 :: S8
#50 := f19
#49 := (f11 f12 f18)
#51 := (f10 #49 f19)
decl f17 :: S2
#46 := f17
#47 := (f6 f7 f17)
#52 := (f5 #47 #51)
#53 := (f15 f16 #52)
#54 := (f8 f9 #53)
#64 := (= #54 #63)
#66 := (iff #64 #65)
#608 := (= #63 f21)
#279 := (f8 f9 #60)
#611 := (= #279 f21)
#622 := (= f21 #279)
#20 := (:var 0 S8)
#10 := (:var 1 S2)
#19 := (f11 f12 #10)
#21 := (f10 #19 #20)
#654 := (pattern #21)
#22 := (f8 f9 #21)
#95 := (= #10 #22)
#655 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #654) #95)
#99 := (forall (vars (?v0 S2) (?v1 S8)) #95)
#658 := (iff #99 #655)
#656 := (iff #95 #95)
#657 := [refl]: #656
#659 := [quant-intro #657]: #658
#144 := (~ #99 #99)
#143 := (~ #95 #95)
#162 := [refl]: #143
#145 := [nnf-pos #162]: #144
#23 := (= #22 #10)
#24 := (forall (vars (?v0 S2) (?v1 S8)) #23)
#100 := (iff #24 #99)
#97 := (iff #23 #95)
#98 := [rewrite]: #97
#101 := [quant-intro #98]: #100
#94 := [asserted]: #24
#104 := [mp #94 #101]: #99
#163 := [mp~ #104 #145]: #99
#660 := [mp #163 #659]: #655
#637 := (not #655)
#625 := (or #637 #622)
#626 := [quant-inst #57 #59]: #625
#619 := [unit-resolution #626 #660]: #622
#324 := [symm #619]: #611
#332 := (= #63 #279)
#329 := (= #62 #60)
#642 := (= #60 #62)
#12 := (:var 0 S3)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#647 := (pattern #13)
#30 := (f15 f16 #13)
#111 := (= #12 #30)
#667 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #647) #111)
#115 := (forall (vars (?v0 S2) (?v1 S3)) #111)
#670 := (iff #115 #667)
#668 := (iff #111 #111)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#148 := (~ #115 #115)
#167 := (~ #111 #111)
#168 := [refl]: #167
#149 := [nnf-pos #168]: #148
#31 := (= #30 #12)
#32 := (forall (vars (?v0 S2) (?v1 S3)) #31)
#116 := (iff #32 #115)
#113 := (iff #31 #111)
#114 := [rewrite]: #113
#117 := [quant-intro #114]: #116
#110 := [asserted]: #32
#120 := [mp #110 #117]: #115
#169 := [mp~ #120 #149]: #115
#672 := [mp #169 #671]: #667
#635 := (not #667)
#646 := (or #635 #642)
#636 := [quant-inst #55 #60]: #646
#328 := [unit-resolution #636 #672]: #642
#330 := [symm #328]: #329
#610 := [monotonicity #330]: #332
#612 := [trans #610 #324]: #608
#606 := (= #54 f18)
#643 := (f8 f9 #51)
#600 := (= #643 f18)
#640 := (= f18 #643)
#295 := (or #637 #640)
#638 := [quant-inst #48 #50]: #295
#609 := [unit-resolution #638 #660]: #640
#605 := [symm #609]: #600
#604 := (= #54 #643)
#602 := (= #53 #51)
#323 := (= #51 #53)
#307 := (or #635 #323)
#308 := [quant-inst #46 #51]: #307
#613 := [unit-resolution #308 #672]: #323
#603 := [symm #613]: #602
#599 := [monotonicity #603]: #604
#601 := [trans #599 #605]: #606
#607 := [monotonicity #601 #612]: #66
#318 := (not #65)
#135 := (not #64)
#448 := (iff #135 #318)
#449 := [monotonicity #607]: #448
#340 := [hypothesis]: #135
#450 := [mp #340 #449]: #318
#317 := (or #65 #64)
#137 := (iff #65 #135)
#67 := (not #66)
#138 := (iff #67 #137)
#139 := [rewrite]: #138
#134 := [asserted]: #67
#142 := [mp #134 #139]: #137
#229 := (not #137)
#316 := (or #65 #64 #229)
#230 := [def-axiom]: #316
#231 := [unit-resolution #230 #142]: #317
#614 := [unit-resolution #231 #340]: #65
#592 := [unit-resolution #614 #450]: false
#593 := [lemma #592]: #64
#595 := [mp #593 #607]: #65
#321 := (or #318 #135)
#309 := (or #318 #135 #229)
#320 := [def-axiom]: #309
#249 := [unit-resolution #320 #142]: #321
#594 := [unit-resolution #249 #593]: #318
[unit-resolution #594 #595]: false
unsat
5862efd1fb6eec78f1577addba461fdbf04f374f 160 0
#2 := false
decl f22 :: S8
#59 := f22
decl f19 :: S8
#50 := f19
#65 := (= f19 f22)
decl f13 :: (-> S12 S3 S8)
decl f15 :: (-> S13 S5 S3)
decl f5 :: (-> S6 S3 S5)
decl f10 :: (-> S10 S8 S3)
decl f11 :: (-> S11 S2 S10)
decl f21 :: S2
#57 := f21
decl f12 :: S11
#18 := f12
#58 := (f11 f12 f21)
#60 := (f10 #58 f22)
decl f6 :: (-> S7 S2 S6)
decl f20 :: S2
#55 := f20
decl f7 :: S7
#9 := f7
#56 := (f6 f7 f20)
#61 := (f5 #56 #60)
decl f16 :: S13
#29 := f16
#62 := (f15 f16 #61)
decl f14 :: S12
#25 := f14
#63 := (f13 f14 #62)
decl f18 :: S2
#48 := f18
#49 := (f11 f12 f18)
#51 := (f10 #49 f19)
decl f17 :: S2
#46 := f17
#47 := (f6 f7 f17)
#52 := (f5 #47 #51)
#53 := (f15 f16 #52)
#54 := (f13 f14 #53)
#64 := (= #54 #63)
#66 := (iff #64 #65)
#608 := (= #63 f22)
#286 := (f13 f14 #60)
#611 := (= #286 f22)
#624 := (= f22 #286)
#20 := (:var 0 S8)
#10 := (:var 1 S2)
#19 := (f11 f12 #10)
#21 := (f10 #19 #20)
#654 := (pattern #21)
#26 := (f13 f14 #21)
#103 := (= #20 #26)
#661 := (forall (vars (?v0 S2) (?v1 S8)) (:pat #654) #103)
#107 := (forall (vars (?v0 S2) (?v1 S8)) #103)
#664 := (iff #107 #661)
#662 := (iff #103 #103)
#663 := [refl]: #662
#665 := [quant-intro #663]: #664
#146 := (~ #107 #107)
#164 := (~ #103 #103)
#165 := [refl]: #164
#147 := [nnf-pos #165]: #146
#27 := (= #26 #20)
#28 := (forall (vars (?v0 S2) (?v1 S8)) #27)
#108 := (iff #28 #107)
#105 := (iff #27 #103)
#106 := [rewrite]: #105
#109 := [quant-intro #106]: #108
#102 := [asserted]: #28
#112 := [mp #102 #109]: #107
#166 := [mp~ #112 #147]: #107
#666 := [mp #166 #665]: #661
#283 := (not #661)
#623 := (or #283 #624)
#629 := [quant-inst #57 #59]: #623
#619 := [unit-resolution #629 #666]: #624
#324 := [symm #619]: #611
#332 := (= #63 #286)
#329 := (= #62 #60)
#642 := (= #60 #62)
#12 := (:var 0 S3)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#647 := (pattern #13)
#30 := (f15 f16 #13)
#111 := (= #12 #30)
#667 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #647) #111)
#115 := (forall (vars (?v0 S2) (?v1 S3)) #111)
#670 := (iff #115 #667)
#668 := (iff #111 #111)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#148 := (~ #115 #115)
#167 := (~ #111 #111)
#168 := [refl]: #167
#149 := [nnf-pos #168]: #148
#31 := (= #30 #12)
#32 := (forall (vars (?v0 S2) (?v1 S3)) #31)
#116 := (iff #32 #115)
#113 := (iff #31 #111)
#114 := [rewrite]: #113
#117 := [quant-intro #114]: #116
#110 := [asserted]: #32
#120 := [mp #110 #117]: #115
#169 := [mp~ #120 #149]: #115
#672 := [mp #169 #671]: #667
#635 := (not #667)
#646 := (or #635 #642)
#636 := [quant-inst #55 #60]: #646
#328 := [unit-resolution #636 #672]: #642
#330 := [symm #328]: #329
#610 := [monotonicity #330]: #332
#612 := [trans #610 #324]: #608
#606 := (= #54 f19)
#294 := (f13 f14 #51)
#600 := (= #294 f19)
#299 := (= f19 #294)
#284 := (or #283 #299)
#285 := [quant-inst #48 #50]: #284
#609 := [unit-resolution #285 #666]: #299
#605 := [symm #609]: #600
#604 := (= #54 #294)
#602 := (= #53 #51)
#323 := (= #51 #53)
#307 := (or #635 #323)
#308 := [quant-inst #46 #51]: #307
#613 := [unit-resolution #308 #672]: #323
#603 := [symm #613]: #602
#599 := [monotonicity #603]: #604
#601 := [trans #599 #605]: #606
#607 := [monotonicity #601 #612]: #66
#318 := (not #65)
#135 := (not #64)
#448 := (iff #135 #318)
#449 := [monotonicity #607]: #448
#340 := [hypothesis]: #135
#450 := [mp #340 #449]: #318
#317 := (or #65 #64)
#137 := (iff #65 #135)
#67 := (not #66)
#138 := (iff #67 #137)
#139 := [rewrite]: #138
#134 := [asserted]: #67
#142 := [mp #134 #139]: #137
#229 := (not #137)
#316 := (or #65 #64 #229)
#230 := [def-axiom]: #316
#231 := [unit-resolution #230 #142]: #317
#614 := [unit-resolution #231 #340]: #65
#592 := [unit-resolution #614 #450]: false
#593 := [lemma #592]: #64
#595 := [mp #593 #607]: #65
#321 := (or #318 #135)
#309 := (or #318 #135 #229)
#320 := [def-axiom]: #309
#249 := [unit-resolution #320 #142]: #321
#594 := [unit-resolution #249 #593]: #318
[unit-resolution #594 #595]: false
unsat
b12ef5502eccbe94c4fc7851ace776d6a343e5a2 111 0
#2 := false
decl f10 :: S2
#30 := f10
decl f9 :: S2
#28 := f9
#35 := (= f9 f10)
decl f3 :: (-> S3 S4 S2)
decl f5 :: (-> S5 S2 S4)
decl f6 :: (-> S6 S2 S5)
decl f7 :: S6
#9 := f7
#29 := (f6 f7 f9)
#31 := (f5 #29 f10)
decl f8 :: S3
#17 := f8
#33 := (f3 f8 #31)
decl f4 :: S3
#8 := f4
#32 := (f3 f4 #31)
#34 := (= #32 #33)
#36 := (iff #34 #35)
#225 := (iff #35 #34)
#250 := (= f10 #33)
#12 := (:var 0 S2)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#578 := (pattern #13)
#18 := (f3 f8 #13)
#65 := (= #12 #18)
#585 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #578) #65)
#69 := (forall (vars (?v0 S2) (?v1 S2)) #65)
#588 := (iff #69 #585)
#586 := (iff #65 #65)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#90 := (~ #69 #69)
#89 := (~ #65 #65)
#102 := [refl]: #89
#91 := [nnf-pos #102]: #90
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S2)) #19)
#70 := (iff #20 #69)
#67 := (iff #19 #65)
#68 := [rewrite]: #67
#71 := [quant-intro #68]: #70
#64 := [asserted]: #20
#74 := [mp #64 #71]: #69
#103 := [mp~ #74 #91]: #69
#590 := [mp #103 #589]: #585
#359 := (not #585)
#566 := (or #359 #250)
#238 := [quant-inst #28 #30]: #566
#577 := [unit-resolution #238 #590]: #250
#253 := (= f9 #32)
#14 := (f3 f4 #13)
#58 := (= #10 #14)
#579 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #578) #58)
#61 := (forall (vars (?v0 S2) (?v1 S2)) #58)
#582 := (iff #61 #579)
#580 := (iff #58 #58)
#581 := [refl]: #580
#583 := [quant-intro #581]: #582
#100 := (~ #61 #61)
#98 := (~ #58 #58)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#62 := (iff #16 #61)
#59 := (iff #15 #58)
#60 := [rewrite]: #59
#63 := [quant-intro #60]: #62
#57 := [asserted]: #16
#66 := [mp #57 #63]: #61
#87 := [mp~ #66 #101]: #61
#584 := [mp #87 #583]: #579
#233 := (not #579)
#570 := (or #233 #253)
#572 := [quant-inst #28 #30]: #570
#567 := [unit-resolution #572 #584]: #253
#230 := [monotonicity #567 #577]: #225
#568 := [symm #230]: #36
#249 := (not #35)
#81 := (not #34)
#226 := (iff #81 #249)
#569 := [monotonicity #568]: #226
#573 := [hypothesis]: #81
#210 := [mp #573 #569]: #249
#248 := (or #35 #34)
#83 := (iff #35 #81)
#37 := (not #36)
#84 := (iff #37 #83)
#85 := [rewrite]: #84
#80 := [asserted]: #37
#88 := [mp #80 #85]: #83
#160 := (not #83)
#247 := (or #35 #34 #160)
#161 := [def-axiom]: #247
#162 := [unit-resolution #161 #88]: #248
#574 := [unit-resolution #162 #573]: #35
#553 := [unit-resolution #574 #210]: false
#214 := [lemma #553]: #34
#216 := [mp #214 #568]: #35
#252 := (or #249 #81)
#240 := (or #249 #81 #160)
#251 := [def-axiom]: #240
#180 := [unit-resolution #251 #88]: #252
#215 := [unit-resolution #180 #214]: #249
[unit-resolution #215 #216]: false
unsat
9c1ac3bb26089e3bd3123b5d9934588d509a0ded 120 0
#2 := false
decl f3 :: (-> S3 S4 S2)
decl f12 :: S4
#34 := f12
decl f8 :: S3
#17 := f8
#40 := (f3 f8 f12)
decl f9 :: S4
#28 := f9
decl f4 :: S3
#8 := f4
#39 := (f3 f4 f9)
#41 := (= #39 #40)
decl f5 :: (-> S5 S2 S4)
decl f10 :: S2
#29 := f10
decl f6 :: (-> S6 S2 S5)
decl f11 :: S2
#31 := f11
decl f7 :: S6
#9 := f7
#35 := (f6 f7 f11)
#36 := (f5 #35 f10)
#268 := (f3 f8 #36)
#569 := (= #268 #40)
#224 := (= #40 #268)
#37 := (= f12 #36)
#30 := (f6 f7 f10)
#32 := (f5 #30 f11)
#33 := (= f9 #32)
#38 := (and #33 #37)
#87 := (not #38)
#89 := (or #87 #41)
#92 := (not #89)
#42 := (implies #38 #41)
#43 := (not #42)
#93 := (iff #43 #92)
#90 := (iff #42 #89)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#86 := [asserted]: #43
#97 := [mp #86 #94]: #92
#95 := [not-or-elim #97]: #38
#98 := [and-elim #95]: #37
#567 := [monotonicity #98]: #224
#570 := [symm #567]: #569
#573 := (= #39 #268)
#247 := (= f10 #268)
#12 := (:var 0 S2)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#592 := (pattern #13)
#18 := (f3 f8 #13)
#71 := (= #12 #18)
#599 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #592) #71)
#75 := (forall (vars (?v0 S2) (?v1 S2)) #71)
#602 := (iff #75 #599)
#600 := (iff #71 #71)
#601 := [refl]: #600
#603 := [quant-intro #601]: #602
#104 := (~ #75 #75)
#103 := (~ #71 #71)
#120 := [refl]: #103
#105 := [nnf-pos #120]: #104
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S2)) #19)
#76 := (iff #20 #75)
#73 := (iff #19 #71)
#74 := [rewrite]: #73
#77 := [quant-intro #74]: #76
#70 := [asserted]: #20
#80 := [mp #70 #77]: #75
#121 := [mp~ #80 #105]: #75
#604 := [mp #121 #603]: #599
#194 := (not #599)
#580 := (or #194 #247)
#252 := [quant-inst #31 #29]: #580
#239 := [unit-resolution #252 #604]: #247
#571 := (= #39 f10)
#174 := (f3 f4 #32)
#230 := (= #174 f10)
#261 := (= f10 #174)
#14 := (f3 f4 #13)
#64 := (= #10 #14)
#593 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #592) #64)
#67 := (forall (vars (?v0 S2) (?v1 S2)) #64)
#596 := (iff #67 #593)
#594 := (iff #64 #64)
#595 := [refl]: #594
#597 := [quant-intro #595]: #596
#118 := (~ #67 #67)
#116 := (~ #64 #64)
#117 := [refl]: #116
#119 := [nnf-pos #117]: #118
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#68 := (iff #16 #67)
#65 := (iff #15 #64)
#66 := [rewrite]: #65
#69 := [quant-intro #66]: #68
#63 := [asserted]: #16
#72 := [mp #63 #69]: #67
#102 := [mp~ #72 #119]: #67
#598 := [mp #102 #597]: #593
#176 := (not #593)
#263 := (or #176 #261)
#254 := [quant-inst #29 #31]: #263
#581 := [unit-resolution #254 #598]: #261
#231 := [symm #581]: #230
#240 := (= #39 #174)
#96 := [and-elim #95]: #33
#583 := [monotonicity #96]: #240
#572 := [trans #583 #231]: #571
#568 := [trans #572 #239]: #573
#574 := [trans #568 #570]: #41
#99 := (not #41)
#100 := [not-or-elim #97]: #99
[unit-resolution #100 #574]: false
unsat
d42e973f7064561465558d14fa97bf977736bb4c 129 0
#2 := false
decl f5 :: (-> S5 S2 S4)
decl f3 :: (-> S3 S4 S2)
decl f9 :: S4
#28 := f9
decl f4 :: S3
#8 := f4
#29 := (f3 f4 f9)
decl f6 :: (-> S6 S2 S5)
decl f8 :: S3
#17 := f8
#30 := (f3 f8 f9)
decl f7 :: S6
#9 := f7
#32 := (f6 f7 #30)
#33 := (f5 #32 #29)
#34 := (= f9 #33)
#358 := (f6 f7 #29)
#565 := (f5 #358 #30)
#562 := (= #565 #33)
#195 := (= #33 #565)
#31 := (= #29 #30)
#252 := (f3 f4 #33)
#213 := (= #252 #30)
#249 := (= #30 #252)
#12 := (:var 0 S2)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#577 := (pattern #13)
#14 := (f3 f4 #13)
#57 := (= #10 #14)
#578 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #577) #57)
#60 := (forall (vars (?v0 S2) (?v1 S2)) #57)
#581 := (iff #60 #578)
#579 := (iff #57 #57)
#580 := [refl]: #579
#582 := [quant-intro #580]: #581
#99 := (~ #60 #60)
#97 := (~ #57 #57)
#98 := [refl]: #97
#100 := [nnf-pos #98]: #99
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S2)) #15)
#61 := (iff #16 #60)
#58 := (iff #15 #57)
#59 := [rewrite]: #58
#62 := [quant-intro #59]: #61
#56 := [asserted]: #16
#65 := [mp #56 #62]: #60
#86 := [mp~ #65 #100]: #60
#583 := [mp #86 #582]: #578
#569 := (not #578)
#571 := (or #569 #249)
#226 := [quant-inst #30 #29]: #571
#567 := [unit-resolution #226 #583]: #249
#214 := [symm #567]: #213
#209 := (= #29 #252)
#225 := (= #252 #29)
#224 := (= #33 f9)
#80 := (not #31)
#574 := [hypothesis]: #80
#247 := (or #34 #31)
#82 := (iff #34 #80)
#35 := (iff #31 #34)
#36 := (not #35)
#83 := (iff #36 #82)
#84 := [rewrite]: #83
#79 := [asserted]: #36
#87 := [mp #79 #84]: #82
#159 := (not #82)
#246 := (or #34 #31 #159)
#160 := [def-axiom]: #246
#161 := [unit-resolution #160 #87]: #247
#575 := [unit-resolution #161 #574]: #34
#229 := [symm #575]: #224
#568 := [monotonicity #229]: #225
#552 := [symm #568]: #209
#215 := [trans #552 #214]: #31
#216 := [unit-resolution #574 #215]: false
#554 := [lemma #216]: #31
#558 := (= #32 #358)
#556 := (= #358 #32)
#557 := [monotonicity #554]: #556
#553 := [symm #557]: #558
#560 := [monotonicity #553 #554]: #195
#200 := [symm #560]: #562
#573 := (= f9 #565)
#21 := (:var 0 S4)
#24 := (f3 f8 #21)
#591 := (pattern #24)
#22 := (f3 f4 #21)
#590 := (pattern #22)
#23 := (f6 f7 #22)
#25 := (f5 #23 #24)
#72 := (= #21 #25)
#592 := (forall (vars (?v0 S4)) (:pat #590 #591) #72)
#76 := (forall (vars (?v0 S4)) #72)
#595 := (iff #76 #592)
#593 := (iff #72 #72)
#594 := [refl]: #593
#596 := [quant-intro #594]: #595
#91 := (~ #76 #76)
#103 := (~ #72 #72)
#104 := [refl]: #103
#92 := [nnf-pos #104]: #91
#26 := (= #25 #21)
#27 := (forall (vars (?v0 S4)) #26)
#77 := (iff #27 #76)
#74 := (iff #26 #72)
#75 := [rewrite]: #74
#78 := [quant-intro #75]: #77
#71 := [asserted]: #27
#81 := [mp #71 #78]: #76
#105 := [mp~ #81 #92]: #76
#597 := [mp #105 #596]: #592
#570 := (not #592)
#576 := (or #570 #573)
#566 := [quant-inst #28]: #576
#559 := [unit-resolution #566 #597]: #573
#201 := [trans #559 #200]: #34
#248 := (not #34)
#251 := (or #248 #80)
#239 := (or #248 #80 #159)
#250 := [def-axiom]: #239
#179 := [unit-resolution #250 #87]: #251
#555 := [unit-resolution #179 #554]: #248
[unit-resolution #555 #201]: false
unsat
81cd04913ffd0969a52f6b4cd2c3f918ffdcebfd 87 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S6 S2 S5)
decl f21 :: S2
#72 := f21
decl f7 :: S6
#9 := f7
#73 := (f6 f7 f21)
#74 := (f5 #73 f9)
#285 := (f5 #73 #74)
#373 := (= f9 #285)
#335 := (= #74 #285)
#351 := (= #285 #74)
#75 := (= #74 f9)
#161 := (= f9 #74)
#76 := (not #75)
#77 := (not #76)
#172 := (iff #77 #161)
#164 := (not #161)
#167 := (not #164)
#170 := (iff #167 #161)
#171 := [rewrite]: #170
#168 := (iff #77 #167)
#165 := (iff #76 #164)
#162 := (iff #75 #161)
#163 := [rewrite]: #162
#166 := [monotonicity #163]: #165
#169 := [monotonicity #166]: #168
#173 := [trans #169 #171]: #172
#159 := [asserted]: #77
#176 := [mp #159 #173]: #161
#692 := [symm #176]: #75
#694 := [monotonicity #692]: #351
#678 := [symm #694]: #335
#339 := [trans #176 #678]: #373
#365 := (not #373)
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#703 := (pattern #13)
#35 := (= #13 f9)
#36 := (not #35)
#723 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #703) #36)
#37 := (forall (vars (?v0 S2) (?v1 S3)) #36)
#726 := (iff #37 #723)
#724 := (iff #36 #36)
#725 := [refl]: #724
#727 := [quant-intro #725]: #726
#183 := (~ #37 #37)
#188 := (~ #36 #36)
#182 := [refl]: #188
#180 := [nnf-pos #182]: #183
#32 := (= f9 #13)
#33 := (not #32)
#34 := (forall (vars (?v0 S2) (?v1 S3)) #33)
#138 := (iff #34 #37)
#136 := (iff #33 #36)
#133 := (iff #32 #35)
#135 := [rewrite]: #133
#137 := [monotonicity #135]: #136
#139 := [quant-intro #137]: #138
#132 := [asserted]: #34
#142 := [mp #132 #139]: #37
#181 := [mp~ #142 #180]: #37
#728 := [mp #181 #727]: #723
#305 := (not #723)
#378 := (or #305 #365)
#372 := (= #285 f9)
#286 := (not #372)
#375 := (or #305 #286)
#358 := (iff #375 #378)
#697 := (iff #378 #378)
#352 := [rewrite]: #697
#376 := (iff #286 #365)
#287 := (iff #372 #373)
#374 := [rewrite]: #287
#377 := [monotonicity #374]: #376
#695 := [monotonicity #377]: #358
#484 := [trans #695 #352]: #358
#379 := [quant-inst #72 #74]: #375
#691 := [mp #379 #484]: #378
#702 := [unit-resolution #691 #728]: #365
[unit-resolution #702 #339]: false
unsat
8067e17c7713c93c8443525a9ed56157626a11b9 75 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S6 S2 S5)
decl f22 :: S2
#74 := f22
decl f7 :: S6
#9 := f7
#75 := (f6 f7 f22)
#76 := (f5 #75 f9)
decl f21 :: S2
#72 := f21
#73 := (f6 f7 f21)
#77 := (f5 #73 #76)
#164 := (= f9 #77)
#78 := (= #77 f9)
#79 := (not #78)
#80 := (not #79)
#175 := (iff #80 #164)
#167 := (not #164)
#170 := (not #167)
#173 := (iff #170 #164)
#174 := [rewrite]: #173
#171 := (iff #80 #170)
#168 := (iff #79 #167)
#165 := (iff #78 #164)
#166 := [rewrite]: #165
#169 := [monotonicity #166]: #168
#172 := [monotonicity #169]: #171
#176 := [trans #172 #174]: #175
#162 := [asserted]: #80
#179 := [mp #162 #176]: #164
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#706 := (pattern #13)
#35 := (= #13 f9)
#36 := (not #35)
#726 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #706) #36)
#37 := (forall (vars (?v0 S2) (?v1 S3)) #36)
#729 := (iff #37 #726)
#727 := (iff #36 #36)
#728 := [refl]: #727
#730 := [quant-intro #728]: #729
#186 := (~ #37 #37)
#191 := (~ #36 #36)
#185 := [refl]: #191
#183 := [nnf-pos #185]: #186
#32 := (= f9 #13)
#33 := (not #32)
#34 := (forall (vars (?v0 S2) (?v1 S3)) #33)
#141 := (iff #34 #37)
#139 := (iff #33 #36)
#136 := (iff #32 #35)
#138 := [rewrite]: #136
#140 := [monotonicity #138]: #139
#142 := [quant-intro #140]: #141
#135 := [asserted]: #34
#145 := [mp #135 #142]: #37
#184 := [mp~ #145 #183]: #37
#731 := [mp #184 #730]: #726
#381 := (not #726)
#666 := (or #381 #167)
#507 := (or #381 #79)
#653 := (iff #507 #666)
#648 := (iff #666 #666)
#649 := [rewrite]: #648
#654 := [monotonicity #169]: #653
#655 := [trans #654 #649]: #653
#652 := [quant-inst #72 #76]: #507
#656 := [mp #652 #655]: #666
[unit-resolution #656 #731 #179]: false
unsat
9adb0bde1688618887919e54f247a873d227a1e8 143 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S6 S2 S5)
decl f22 :: S2
#73 := f22
decl f7 :: S6
#9 := f7
#78 := (f6 f7 f22)
#79 := (f5 #78 f9)
decl f21 :: S2
#72 := f21
#76 := (f6 f7 f21)
#77 := (f5 #76 f9)
#80 := (= #77 #79)
#74 := (= f21 f22)
#327 := (iff #74 #80)
#674 := (not #327)
#81 := (not #80)
#167 := (or #74 #81)
#170 := (not #167)
#75 := (not #74)
#82 := (implies #75 #81)
#83 := (not #82)
#171 := (iff #83 #170)
#168 := (iff #82 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#165 := [asserted]: #83
#175 := [mp #165 #172]: #170
#174 := [not-or-elim #175]: #80
#173 := [not-or-elim #175]: #75
#396 := (or #674 #74 #81)
#397 := [def-axiom]: #396
#633 := [unit-resolution #397 #173 #174]: #674
#23 := (:var 2 S3)
#21 := (:var 3 S2)
#22 := (f6 f7 #21)
#24 := (f5 #22 #23)
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#717 := (pattern #13 #24)
#126 := (= #12 #23)
#217 := (not #126)
#123 := (= #10 #21)
#216 := (not #123)
#218 := (or #216 #217)
#219 := (not #218)
#119 := (= #13 #24)
#222 := (iff #119 #219)
#718 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) (:pat #717) #222)
#225 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) #222)
#721 := (iff #225 #718)
#719 := (iff #222 #222)
#720 := [refl]: #719
#722 := [quant-intro #720]: #721
#129 := (and #123 #126)
#132 := (iff #119 #129)
#135 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) #132)
#226 := (iff #135 #225)
#223 := (iff #132 #222)
#220 := (iff #129 #219)
#221 := [rewrite]: #220
#224 := [monotonicity #221]: #223
#227 := [quant-intro #224]: #226
#192 := (~ #135 #135)
#194 := (~ #132 #132)
#195 := [refl]: #194
#193 := [nnf-pos #195]: #192
#27 := (= #23 #12)
#26 := (= #21 #10)
#28 := (and #26 #27)
#25 := (= #24 #13)
#29 := (iff #25 #28)
#30 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S2) (?v3 S3)) #29)
#136 := (iff #30 #135)
#133 := (iff #29 #132)
#130 := (iff #28 #129)
#127 := (iff #27 #126)
#128 := [rewrite]: #127
#124 := (iff #26 #123)
#125 := [rewrite]: #124
#131 := [monotonicity #125 #128]: #130
#121 := (iff #25 #119)
#122 := [rewrite]: #121
#134 := [monotonicity #122 #131]: #133
#137 := [quant-intro #134]: #136
#118 := [asserted]: #30
#140 := [mp #118 #137]: #135
#190 := [mp~ #140 #193]: #135
#228 := [mp #190 #227]: #225
#723 := [mp #228 #722]: #718
#677 := (not #718)
#678 := (or #677 #327)
#692 := (= f9 f9)
#364 := (not #692)
#365 := (or #75 #364)
#699 := (not #365)
#700 := (iff #80 #699)
#384 := (or #677 #700)
#401 := (iff #384 #678)
#388 := (iff #678 #678)
#403 := [rewrite]: #388
#688 := (iff #700 #327)
#322 := (iff #80 #74)
#328 := (iff #322 #327)
#690 := [rewrite]: #328
#687 := (iff #700 #322)
#680 := (iff #699 #74)
#681 := (not #75)
#684 := (iff #681 #74)
#685 := [rewrite]: #684
#682 := (iff #699 #681)
#342 := (iff #365 #75)
#695 := (or #75 false)
#340 := (iff #695 #75)
#341 := [rewrite]: #340
#336 := (iff #365 #695)
#694 := (iff #364 false)
#1 := true
#697 := (not true)
#351 := (iff #697 false)
#356 := [rewrite]: #351
#703 := (iff #364 #697)
#701 := (iff #692 true)
#702 := [rewrite]: #701
#693 := [monotonicity #702]: #703
#352 := [trans #693 #356]: #694
#679 := [monotonicity #352]: #336
#343 := [trans #679 #341]: #342
#683 := [monotonicity #343]: #682
#686 := [trans #683 #685]: #680
#689 := [monotonicity #686]: #687
#691 := [trans #689 #690]: #688
#402 := [monotonicity #691]: #401
#294 := [trans #402 #403]: #401
#400 := [quant-inst #73 #31 #72 #31]: #384
#673 := [mp #400 #294]: #678
[unit-resolution #673 #723 #633]: false
unsat
5b137be8557b99b379f0a2d0b87dab1773ab0e37 57 0
#2 := false
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f22 :: S3
#74 := f22
decl f6 :: (-> S6 S2 S5)
decl f21 :: S2
#72 := f21
decl f7 :: S6
#9 := f7
#73 := (f6 f7 f21)
#75 := (f5 #73 f22)
decl f4 :: S4
#8 := f4
#76 := (f3 f4 #75)
#162 := (= f21 #76)
#165 := (not #162)
#77 := (= #76 f21)
#78 := (not #77)
#166 := (iff #78 #165)
#163 := (iff #77 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#160 := [asserted]: #78
#170 := [mp #160 #167]: #165
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#697 := (pattern #13)
#14 := (f3 f4 #13)
#99 := (= #10 #14)
#698 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #697) #99)
#102 := (forall (vars (?v0 S2) (?v1 S3)) #99)
#701 := (iff #102 #698)
#699 := (iff #99 #99)
#700 := [refl]: #699
#702 := [quant-intro #700]: #701
#179 := (~ #102 #102)
#141 := (~ #99 #99)
#178 := [refl]: #141
#180 := [nnf-pos #178]: #179
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S3)) #15)
#103 := (iff #16 #102)
#100 := (iff #15 #99)
#101 := [rewrite]: #100
#104 := [quant-intro #101]: #103
#98 := [asserted]: #16
#107 := [mp #98 #104]: #102
#191 := [mp~ #107 #180]: #102
#703 := [mp #191 #702]: #698
#358 := (not #698)
#692 := (or #358 #162)
#693 := [quant-inst #72 #74]: #692
[unit-resolution #693 #703 #170]: false
unsat
2cd08a95f4b0ad041d78f56e3299019533d2e5bc 56 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f22 :: S3
#74 := f22
decl f6 :: (-> S6 S2 S5)
decl f21 :: S2
#72 := f21
decl f7 :: S6
#9 := f7
#73 := (f6 f7 f21)
#75 := (f5 #73 f22)
decl f8 :: S5
#17 := f8
#76 := (f5 f8 #75)
#162 := (= f22 #76)
#165 := (not #162)
#77 := (= #76 f22)
#78 := (not #77)
#166 := (iff #78 #165)
#163 := (iff #77 #162)
#164 := [rewrite]: #163
#167 := [monotonicity #164]: #166
#160 := [asserted]: #78
#170 := [mp #160 #167]: #165
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#697 := (pattern #13)
#18 := (f5 f8 #13)
#106 := (= #12 #18)
#704 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #697) #106)
#110 := (forall (vars (?v0 S2) (?v1 S3)) #106)
#707 := (iff #110 #704)
#705 := (iff #106 #106)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#190 := (~ #110 #110)
#192 := (~ #106 #106)
#189 := [refl]: #192
#187 := [nnf-pos #189]: #190
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S3)) #19)
#111 := (iff #20 #110)
#108 := (iff #19 #106)
#109 := [rewrite]: #108
#112 := [quant-intro #109]: #111
#105 := [asserted]: #20
#115 := [mp #105 #112]: #110
#188 := [mp~ #115 #187]: #110
#709 := [mp #188 #708]: #704
#690 := (not #704)
#696 := (or #690 #162)
#686 := [quant-inst #72 #74]: #696
[unit-resolution #686 #709 #170]: false
unsat
ed752090f6b3ab4e4bf6223daba34abf1b4191b6 65 0
#2 := false
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#76 := f23
decl f7 :: S6
#9 := f7
#77 := (f6 f7 f23)
#78 := (f5 #77 f9)
decl f22 :: S2
#74 := f22
#75 := (f6 f7 f22)
#79 := (f5 #75 #78)
decl f21 :: S2
#72 := f21
#73 := (f6 f7 f21)
#80 := (f5 #73 #79)
decl f4 :: S4
#8 := f4
#81 := (f3 f4 #80)
#167 := (= f21 #81)
#170 := (not #167)
#82 := (= #81 f21)
#83 := (not #82)
#171 := (iff #83 #170)
#168 := (iff #82 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#165 := [asserted]: #83
#175 := [mp #165 #172]: #170
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#702 := (pattern #13)
#14 := (f3 f4 #13)
#104 := (= #10 #14)
#703 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #702) #104)
#107 := (forall (vars (?v0 S2) (?v1 S3)) #104)
#706 := (iff #107 #703)
#704 := (iff #104 #104)
#705 := [refl]: #704
#707 := [quant-intro #705]: #706
#184 := (~ #107 #107)
#146 := (~ #104 #104)
#183 := [refl]: #146
#185 := [nnf-pos #183]: #184
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S3)) #15)
#108 := (iff #16 #107)
#105 := (iff #15 #104)
#106 := [rewrite]: #105
#109 := [quant-intro #106]: #108
#103 := [asserted]: #16
#112 := [mp #103 #109]: #107
#196 := [mp~ #112 #185]: #107
#708 := [mp #196 #707]: #703
#636 := (not #703)
#454 := (or #636 #167)
#447 := [quant-inst #72 #79]: #454
[unit-resolution #447 #708 #175]: false
unsat
a33518f8d625fd7259cb32bc04694351c289afa8 64 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#76 := f23
decl f7 :: S6
#9 := f7
#77 := (f6 f7 f23)
#78 := (f5 #77 f9)
decl f22 :: S2
#74 := f22
#75 := (f6 f7 f22)
#79 := (f5 #75 #78)
decl f21 :: S2
#72 := f21
#73 := (f6 f7 f21)
#80 := (f5 #73 #79)
decl f8 :: S5
#17 := f8
#81 := (f5 f8 #80)
#167 := (= #79 #81)
#170 := (not #167)
#82 := (= #81 #79)
#83 := (not #82)
#171 := (iff #83 #170)
#168 := (iff #82 #167)
#169 := [rewrite]: #168
#172 := [monotonicity #169]: #171
#165 := [asserted]: #83
#175 := [mp #165 #172]: #170
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#702 := (pattern #13)
#18 := (f5 f8 #13)
#111 := (= #12 #18)
#709 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #702) #111)
#115 := (forall (vars (?v0 S2) (?v1 S3)) #111)
#712 := (iff #115 #709)
#710 := (iff #111 #111)
#711 := [refl]: #710
#713 := [quant-intro #711]: #712
#195 := (~ #115 #115)
#197 := (~ #111 #111)
#194 := [refl]: #197
#192 := [nnf-pos #194]: #195
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S3)) #19)
#116 := (iff #20 #115)
#113 := (iff #19 #111)
#114 := [rewrite]: #113
#117 := [quant-intro #114]: #116
#110 := [asserted]: #20
#120 := [mp #110 #117]: #115
#193 := [mp~ #120 #192]: #115
#714 := [mp #193 #713]: #709
#618 := (not #709)
#451 := (or #618 #167)
#452 := [quant-inst #72 #79]: #451
[unit-resolution #452 #714 #175]: false
unsat
1f9a3665b01fd9498f7eee032bae22316a527489 105 0
#2 := false
decl f3 :: (-> S4 S3 S2)
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#76 := f23
decl f7 :: S6
#9 := f7
#77 := (f6 f7 f23)
#78 := (f5 #77 f9)
decl f22 :: S2
#74 := f22
#75 := (f6 f7 f22)
#79 := (f5 #75 #78)
decl f21 :: S2
#72 := f21
#73 := (f6 f7 f21)
#80 := (f5 #73 #79)
decl f8 :: S5
#17 := f8
#81 := (f5 f8 #80)
decl f4 :: S4
#8 := f4
#82 := (f3 f4 #81)
#168 := (= f22 #82)
#520 := (f3 f4 #79)
#425 := (= #520 #82)
#440 := (= #82 #520)
#452 := (= #81 #79)
#455 := (= #79 #81)
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#703 := (pattern #13)
#18 := (f5 f8 #13)
#112 := (= #12 #18)
#710 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #703) #112)
#116 := (forall (vars (?v0 S2) (?v1 S3)) #112)
#713 := (iff #116 #710)
#711 := (iff #112 #112)
#712 := [refl]: #711
#714 := [quant-intro #712]: #713
#196 := (~ #116 #116)
#198 := (~ #112 #112)
#195 := [refl]: #198
#193 := [nnf-pos #195]: #196
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S3)) #19)
#117 := (iff #20 #116)
#114 := (iff #19 #112)
#115 := [rewrite]: #114
#118 := [quant-intro #115]: #117
#111 := [asserted]: #20
#121 := [mp #111 #118]: #116
#194 := [mp~ #121 #193]: #116
#715 := [mp #194 #714]: #710
#619 := (not #710)
#453 := (or #619 #455)
#439 := [quant-inst #72 #79]: #453
#448 := [unit-resolution #439 #715]: #455
#441 := [symm #448]: #452
#443 := [monotonicity #441]: #440
#427 := [symm #443]: #425
#522 := (= f22 #520)
#14 := (f3 f4 #13)
#105 := (= #10 #14)
#704 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #703) #105)
#108 := (forall (vars (?v0 S2) (?v1 S3)) #105)
#707 := (iff #108 #704)
#705 := (iff #105 #105)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#185 := (~ #108 #108)
#147 := (~ #105 #105)
#184 := [refl]: #147
#186 := [nnf-pos #184]: #185
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S3)) #15)
#109 := (iff #16 #108)
#106 := (iff #15 #105)
#107 := [rewrite]: #106
#110 := [quant-intro #107]: #109
#104 := [asserted]: #16
#113 := [mp #104 #110]: #108
#197 := [mp~ #113 #186]: #108
#709 := [mp #197 #708]: #704
#637 := (not #704)
#533 := (or #637 #522)
#534 := [quant-inst #74 #78]: #533
#442 := [unit-resolution #534 #709]: #522
#428 := [trans #442 #427]: #168
#171 := (not #168)
#83 := (= #82 f22)
#84 := (not #83)
#172 := (iff #84 #171)
#169 := (iff #83 #168)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#166 := [asserted]: #84
#176 := [mp #166 #173]: #171
[unit-resolution #176 #428]: false
unsat
b298b421234bddee158e1132134ea7aa5bde443b 79 0
#2 := false
decl f5 :: (-> S5 S3 S3)
decl f9 :: S3
#31 := f9
decl f6 :: (-> S6 S2 S5)
decl f23 :: S2
#76 := f23
decl f7 :: S6
#9 := f7
#77 := (f6 f7 f23)
#78 := (f5 #77 f9)
decl f22 :: S2
#74 := f22
#75 := (f6 f7 f22)
#79 := (f5 #75 #78)
decl f21 :: S2
#72 := f21
#73 := (f6 f7 f21)
#80 := (f5 #73 #79)
decl f8 :: S5
#17 := f8
#81 := (f5 f8 #80)
#82 := (f5 f8 #81)
#168 := (= #78 #82)
#524 := (f5 f8 #79)
#425 := (= #524 #82)
#440 := (= #82 #524)
#452 := (= #81 #79)
#455 := (= #79 #81)
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#703 := (pattern #13)
#18 := (f5 f8 #13)
#112 := (= #12 #18)
#710 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #703) #112)
#116 := (forall (vars (?v0 S2) (?v1 S3)) #112)
#713 := (iff #116 #710)
#711 := (iff #112 #112)
#712 := [refl]: #711
#714 := [quant-intro #712]: #713
#196 := (~ #116 #116)
#198 := (~ #112 #112)
#195 := [refl]: #198
#193 := [nnf-pos #195]: #196
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S3)) #19)
#117 := (iff #20 #116)
#114 := (iff #19 #112)
#115 := [rewrite]: #114
#118 := [quant-intro #115]: #117
#111 := [asserted]: #20
#121 := [mp #111 #118]: #116
#194 := [mp~ #121 #193]: #116
#715 := [mp #194 #714]: #710
#619 := (not #710)
#453 := (or #619 #455)
#439 := [quant-inst #72 #79]: #453
#448 := [unit-resolution #439 #715]: #455
#441 := [symm #448]: #452
#443 := [monotonicity #441]: #440
#427 := [symm #443]: #425
#531 := (= #78 #524)
#525 := (or #619 #531)
#546 := [quant-inst #74 #78]: #525
#442 := [unit-resolution #546 #715]: #531
#428 := [trans #442 #427]: #168
#171 := (not #168)
#83 := (= #82 #78)
#84 := (not #83)
#172 := (iff #84 #171)
#169 := (iff #83 #168)
#170 := [rewrite]: #169
#173 := [monotonicity #170]: #172
#166 := [asserted]: #84
#176 := [mp #166 #173]: #171
[unit-resolution #176 #428]: false
unsat
dbbcd10dbc84c086674cc842f20de49305282406 111 0
#2 := false
decl f3 :: (-> S4 S5 S2)
decl f10 :: (-> S10 S9 S5)
decl f12 :: (-> S11 S9 S9)
decl f16 :: S9
#51 := f16
decl f13 :: (-> S12 S5 S11)
decl f5 :: (-> S6 S3 S5)
decl f29 :: S3
#94 := f29
decl f6 :: (-> S7 S2 S6)
decl f28 :: S2
#92 := f28
decl f7 :: S7
#9 := f7
#93 := (f6 f7 f28)
#95 := (f5 #93 f29)
decl f14 :: S12
#29 := f14
#96 := (f13 f14 #95)
#97 := (f12 #96 f16)
decl f11 :: S10
#28 := f11
#98 := (f10 f11 #97)
decl f4 :: S4
#8 := f4
#99 := (f3 f4 #98)
#209 := (= f28 #99)
#341 := (f3 f4 #95)
#383 := (= #341 #99)
#744 := (= #99 #341)
#739 := (= #98 #95)
#395 := (= #95 #98)
#32 := (:var 0 S9)
#30 := (:var 1 S5)
#31 := (f13 f14 #30)
#33 := (f12 #31 #32)
#780 := (pattern #33)
#34 := (f10 f11 #33)
#145 := (= #30 #34)
#781 := (forall (vars (?v0 S5) (?v1 S9)) (:pat #780) #145)
#149 := (forall (vars (?v0 S5) (?v1 S9)) #145)
#784 := (iff #149 #781)
#782 := (iff #145 #145)
#783 := [refl]: #782
#785 := [quant-intro #783]: #784
#230 := (~ #149 #149)
#235 := (~ #145 #145)
#229 := [refl]: #235
#227 := [nnf-pos #229]: #230
#35 := (= #34 #30)
#36 := (forall (vars (?v0 S5) (?v1 S9)) #35)
#150 := (iff #36 #149)
#147 := (iff #35 #145)
#148 := [rewrite]: #147
#151 := [quant-intro #148]: #150
#144 := [asserted]: #36
#154 := [mp #144 #151]: #149
#228 := [mp~ #154 #227]: #149
#786 := [mp #228 #785]: #781
#398 := (not #781)
#736 := (or #398 #395)
#737 := [quant-inst #95 #51]: #736
#738 := [unit-resolution #737 #786]: #395
#377 := [symm #738]: #739
#382 := [monotonicity #377]: #744
#745 := [symm #382]: #383
#428 := (= f28 #341)
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#759 := (pattern #13)
#14 := (f3 f4 #13)
#122 := (= #10 #14)
#760 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #759) #122)
#125 := (forall (vars (?v0 S2) (?v1 S3)) #122)
#763 := (iff #125 #760)
#761 := (iff #122 #122)
#762 := [refl]: #761
#764 := [quant-intro #762]: #763
#232 := (~ #125 #125)
#188 := (~ #122 #122)
#231 := [refl]: #188
#233 := [nnf-pos #231]: #232
#15 := (= #14 #10)
#16 := (forall (vars (?v0 S2) (?v1 S3)) #15)
#126 := (iff #16 #125)
#123 := (iff #15 #122)
#124 := [rewrite]: #123
#127 := [quant-intro #124]: #126
#121 := [asserted]: #16
#130 := [mp #121 #127]: #125
#244 := [mp~ #130 #233]: #125
#765 := [mp #244 #764]: #760
#343 := (not #760)
#430 := (or #343 #428)
#421 := [quant-inst #92 #94]: #430
#742 := [unit-resolution #421 #765]: #428
#743 := [trans #742 #745]: #209
#212 := (not #209)
#100 := (= #99 f28)
#101 := (not #100)
#213 := (iff #101 #212)
#210 := (iff #100 #209)
#211 := [rewrite]: #210
#214 := [monotonicity #211]: #213
#207 := [asserted]: #101
#217 := [mp #207 #214]: #212
[unit-resolution #217 #743]: false
unsat
2e9d2577f0ec2fea58a5da10f4c502e6348db013 111 0
#2 := false
decl f8 :: (-> S8 S5 S3)
decl f10 :: (-> S10 S9 S5)
decl f12 :: (-> S11 S9 S9)
decl f16 :: S9
#51 := f16
decl f13 :: (-> S12 S5 S11)
decl f5 :: (-> S6 S3 S5)
decl f29 :: S3
#94 := f29
decl f6 :: (-> S7 S2 S6)
decl f28 :: S2
#92 := f28
decl f7 :: S7
#9 := f7
#93 := (f6 f7 f28)
#95 := (f5 #93 f29)
decl f14 :: S12
#29 := f14
#96 := (f13 f14 #95)
#97 := (f12 #96 f16)
decl f11 :: S10
#28 := f11
#98 := (f10 f11 #97)
decl f9 :: S8
#17 := f9
#99 := (f8 f9 #98)
#209 := (= f29 #99)
#342 := (f8 f9 #95)
#383 := (= #342 #99)
#744 := (= #99 #342)
#739 := (= #98 #95)
#395 := (= #95 #98)
#32 := (:var 0 S9)
#30 := (:var 1 S5)
#31 := (f13 f14 #30)
#33 := (f12 #31 #32)
#780 := (pattern #33)
#34 := (f10 f11 #33)
#145 := (= #30 #34)
#781 := (forall (vars (?v0 S5) (?v1 S9)) (:pat #780) #145)
#149 := (forall (vars (?v0 S5) (?v1 S9)) #145)
#784 := (iff #149 #781)
#782 := (iff #145 #145)
#783 := [refl]: #782
#785 := [quant-intro #783]: #784
#230 := (~ #149 #149)
#235 := (~ #145 #145)
#229 := [refl]: #235
#227 := [nnf-pos #229]: #230
#35 := (= #34 #30)
#36 := (forall (vars (?v0 S5) (?v1 S9)) #35)
#150 := (iff #36 #149)
#147 := (iff #35 #145)
#148 := [rewrite]: #147
#151 := [quant-intro #148]: #150
#144 := [asserted]: #36
#154 := [mp #144 #151]: #149
#228 := [mp~ #154 #227]: #149
#786 := [mp #228 #785]: #781
#398 := (not #781)
#736 := (or #398 #395)
#737 := [quant-inst #95 #51]: #736
#738 := [unit-resolution #737 #786]: #395
#377 := [symm #738]: #739
#382 := [monotonicity #377]: #744
#745 := [symm #382]: #383
#429 := (= f29 #342)
#12 := (:var 0 S3)
#10 := (:var 1 S2)
#11 := (f6 f7 #10)
#13 := (f5 #11 #12)
#759 := (pattern #13)
#18 := (f8 f9 #13)
#129 := (= #12 #18)
#766 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #759) #129)
#133 := (forall (vars (?v0 S2) (?v1 S3)) #129)
#769 := (iff #133 #766)
#767 := (iff #129 #129)
#768 := [refl]: #767
#770 := [quant-intro #768]: #769
#243 := (~ #133 #133)
#245 := (~ #129 #129)
#242 := [refl]: #245
#240 := [nnf-pos #242]: #243
#19 := (= #18 #12)
#20 := (forall (vars (?v0 S2) (?v1 S3)) #19)
#134 := (iff #20 #133)
#131 := (iff #19 #129)
#132 := [rewrite]: #131
#135 := [quant-intro #132]: #134
#128 := [asserted]: #20
#138 := [mp #128 #135]: #133
#241 := [mp~ #138 #240]: #133
#771 := [mp #241 #770]: #766
#361 := (not #766)
#434 := (or #361 #429)
#431 := [quant-inst #92 #94]: #434
#742 := [unit-resolution #431 #771]: #429
#743 := [trans #742 #745]: #209
#212 := (not #209)
#100 := (= #99 f29)
#101 := (not #100)
#213 := (iff #101 #212)
#210 := (iff #100 #209)
#211 := [rewrite]: #210
#214 := [monotonicity #211]: #213
#207 := [asserted]: #101
#217 := [mp #207 #214]: #212
[unit-resolution #217 #743]: false
unsat
4896dc3d983fa1db6692f7158c809398573225ab 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#42 := f15
decl f4 :: S3
#8 := f4
#45 := (f3 f4 f15)
decl f14 :: S4
#41 := f14
#44 := (f3 f4 f14)
#46 := (= #44 #45)
#43 := (= f14 f15)
#96 := (not #43)
#97 := (or #96 #46)
#100 := (not #97)
#47 := (implies #43 #46)
#48 := (not #47)
#101 := (iff #48 #100)
#98 := (iff #47 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#95 := [asserted]: #48
#105 := [mp #95 #102]: #100
#103 := [not-or-elim #105]: #43
#280 := [monotonicity #103]: #46
#104 := (not #46)
#106 := [not-or-elim #105]: #104
[unit-resolution #106 #280]: false
unsat
1538231e595cc73ecc292a67c8bee9abfaf9197c 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#42 := f15
decl f6 :: S3
#16 := f6
#45 := (f3 f6 f15)
decl f14 :: S4
#41 := f14
#44 := (f3 f6 f14)
#46 := (= #44 #45)
#43 := (= f14 f15)
#96 := (not #43)
#97 := (or #96 #46)
#100 := (not #97)
#47 := (implies #43 #46)
#48 := (not #47)
#101 := (iff #48 #100)
#98 := (iff #47 #97)
#99 := [rewrite]: #98
#102 := [monotonicity #99]: #101
#95 := [asserted]: #48
#105 := [mp #95 #102]: #100
#103 := [not-or-elim #105]: #43
#280 := [monotonicity #103]: #46
#104 := (not #46)
#106 := [not-or-elim #105]: #104
[unit-resolution #106 #280]: false
unsat
392e090edba462e926403dbc1a566c88432801c7 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#43 := f15
decl f4 :: S3
#8 := f4
#44 := (f3 f4 f15)
decl f14 :: S4
#41 := f14
#42 := (f3 f4 f14)
#45 := (= #42 #44)
#47 := (= f14 f15)
#48 := (not #47)
#98 := (or #45 #48)
#101 := (not #98)
#46 := (not #45)
#49 := (implies #46 #48)
#50 := (not #49)
#102 := (iff #50 #101)
#99 := (iff #49 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#97 := [asserted]: #50
#106 := [mp #97 #103]: #101
#105 := [not-or-elim #106]: #47
#280 := [monotonicity #105]: #45
#104 := [not-or-elim #106]: #46
[unit-resolution #104 #280]: false
unsat
82669adb791d3b09fa07a30d5fe3017ae8c18dc0 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f15 :: S4
#43 := f15
decl f6 :: S3
#16 := f6
#44 := (f3 f6 f15)
decl f14 :: S4
#41 := f14
#42 := (f3 f6 f14)
#45 := (= #42 #44)
#47 := (= f14 f15)
#48 := (not #47)
#98 := (or #45 #48)
#101 := (not #98)
#46 := (not #45)
#49 := (implies #46 #48)
#50 := (not #49)
#102 := (iff #50 #101)
#99 := (iff #49 #98)
#100 := [rewrite]: #99
#103 := [monotonicity #100]: #102
#97 := [asserted]: #50
#106 := [mp #97 #103]: #101
#105 := [not-or-elim #106]: #47
#280 := [monotonicity #105]: #45
#104 := [not-or-elim #106]: #46
[unit-resolution #104 #280]: false
unsat
79da0fe967a112ed891c9268e71afaca102dd576 56 0
#2 := false
#41 := 3::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#43 := f14
#42 := 4::Int
#44 := (f5 3::Int 4::Int f14)
decl f4 :: S3
#8 := f4
#45 := (f3 f4 #44)
#46 := (= #45 3::Int)
#47 := (not #46)
#94 := [asserted]: #47
#11 := (:var 0 S2)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f5 #9 #10 #11)
#193 := (pattern #12)
#13 := (f3 f4 #12)
#68 := (= #9 #13)
#194 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #193) #68)
#71 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #68)
#197 := (iff #71 #194)
#195 := (iff #68 #68)
#196 := [refl]: #195
#198 := [quant-intro #196]: #197
#108 := (~ #71 #71)
#106 := (~ #68 #68)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#14 := (= #13 #9)
#15 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #14)
#72 := (iff #15 #71)
#69 := (iff #14 #68)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#67 := [asserted]: #15
#76 := [mp #67 #73]: #71
#110 := [mp~ #76 #109]: #71
#199 := [mp #110 #198]: #194
#238 := (not #194)
#239 := (or #238 #46)
#95 := (= 3::Int #45)
#243 := (or #238 #95)
#245 := (iff #243 #239)
#247 := (iff #239 #239)
#248 := [rewrite]: #247
#101 := (iff #95 #46)
#102 := [rewrite]: #101
#246 := [monotonicity #102]: #245
#249 := [trans #246 #248]: #245
#244 := [quant-inst #41 #42 #43]: #243
#250 := [mp #244 #249]: #239
[unit-resolution #250 #199 #94]: false
unsat
218a5265d7c54eacac218a21e52867527c94dd10 56 0
#2 := false
#42 := 4::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#43 := f14
#41 := 3::Int
#44 := (f5 3::Int 4::Int f14)
decl f6 :: S3
#16 := f6
#45 := (f3 f6 #44)
#46 := (= #45 4::Int)
#47 := (not #46)
#94 := [asserted]: #47
#11 := (:var 0 S2)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f5 #9 #10 #11)
#193 := (pattern #12)
#17 := (f3 f6 #12)
#75 := (= #10 #17)
#200 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #193) #75)
#79 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #75)
#203 := (iff #79 #200)
#201 := (iff #75 #75)
#202 := [refl]: #201
#204 := [quant-intro #202]: #203
#113 := (~ #79 #79)
#111 := (~ #75 #75)
#112 := [refl]: #111
#114 := [nnf-pos #112]: #113
#18 := (= #17 #10)
#19 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #18)
#80 := (iff #19 #79)
#77 := (iff #18 #75)
#78 := [rewrite]: #77
#81 := [quant-intro #78]: #80
#74 := [asserted]: #19
#84 := [mp #74 #81]: #79
#115 := [mp~ #84 #114]: #79
#205 := [mp #115 #204]: #200
#256 := (not #200)
#257 := (or #256 #46)
#95 := (= 4::Int #45)
#258 := (or #256 #95)
#260 := (iff #258 #257)
#262 := (iff #257 #257)
#263 := [rewrite]: #262
#101 := (iff #95 #46)
#102 := [rewrite]: #101
#261 := [monotonicity #102]: #260
#264 := [trans #261 #263]: #260
#259 := [quant-inst #41 #42 #43]: #258
#265 := [mp #259 #264]: #257
[unit-resolution #265 #205 #94]: false
unsat
e7133c0fe44808f56fc955cc97df0776a4963d3e 112 0
#2 := false
#42 := 4::Int
#41 := 3::Int
#272 := (= 3::Int 4::Int)
#274 := (iff #272 false)
#275 := [rewrite]: #274
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f14 :: S2
#43 := f14
#44 := (f5 3::Int 4::Int f14)
decl f6 :: S3
#16 := f6
#46 := (f3 f6 #44)
#253 := (= #46 4::Int)
#11 := (:var 0 S2)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f5 #9 #10 #11)
#188 := (pattern #12)
#17 := (f3 f6 #12)
#77 := (= #10 #17)
#195 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #188) #77)
#81 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #77)
#198 := (iff #81 #195)
#196 := (iff #77 #77)
#197 := [refl]: #196
#199 := [quant-intro #197]: #198
#108 := (~ #81 #81)
#106 := (~ #77 #77)
#107 := [refl]: #106
#109 := [nnf-pos #107]: #108
#18 := (= #17 #10)
#19 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #18)
#82 := (iff #19 #81)
#79 := (iff #18 #77)
#80 := [rewrite]: #79
#83 := [quant-intro #80]: #82
#76 := [asserted]: #19
#86 := [mp #76 #83]: #81
#110 := [mp~ #86 #109]: #81
#200 := [mp #110 #199]: #195
#254 := (not #195)
#255 := (or #254 #253)
#250 := (= 4::Int #46)
#256 := (or #254 #250)
#258 := (iff #256 #255)
#260 := (iff #255 #255)
#261 := [rewrite]: #260
#251 := (iff #250 #253)
#252 := [rewrite]: #251
#259 := [monotonicity #252]: #258
#262 := [trans #259 #261]: #258
#257 := [quant-inst #41 #42 #43]: #256
#263 := [mp #257 #262]: #255
#264 := [unit-resolution #263 #200]: #253
#270 := (= 3::Int #46)
#268 := (= #46 3::Int)
decl f4 :: S3
#8 := f4
#45 := (f3 f4 #44)
#239 := (= #45 3::Int)
#13 := (f3 f4 #12)
#70 := (= #9 #13)
#189 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #188) #70)
#73 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #70)
#192 := (iff #73 #189)
#190 := (iff #70 #70)
#191 := [refl]: #190
#193 := [quant-intro #191]: #192
#103 := (~ #73 #73)
#100 := (~ #70 #70)
#102 := [refl]: #100
#104 := [nnf-pos #102]: #103
#14 := (= #13 #9)
#15 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #14)
#74 := (iff #15 #73)
#71 := (iff #14 #70)
#72 := [rewrite]: #71
#75 := [quant-intro #72]: #74
#69 := [asserted]: #15
#78 := [mp #69 #75]: #73
#105 := [mp~ #78 #104]: #73
#194 := [mp #105 #193]: #189
#240 := (not #189)
#241 := (or #240 #239)
#233 := (= 3::Int #45)
#242 := (or #240 #233)
#244 := (iff #242 #241)
#246 := (iff #241 #241)
#247 := [rewrite]: #246
#234 := (iff #233 #239)
#238 := [rewrite]: #234
#245 := [monotonicity #238]: #244
#248 := [trans #245 #247]: #244
#243 := [quant-inst #41 #42 #43]: #242
#249 := [mp #243 #248]: #241
#265 := [unit-resolution #249 #194]: #239
#266 := (= #46 #45)
#47 := (= #45 #46)
#48 := (not #47)
#49 := (not #48)
#97 := (iff #49 #47)
#98 := [rewrite]: #97
#96 := [asserted]: #49
#101 := [mp #96 #98]: #47
#267 := [symm #101]: #266
#269 := [trans #267 #265]: #268
#271 := [symm #269]: #270
#273 := [trans #271 #264]: #272
[mp #273 #275]: false
unsat
15c9277532b8568c83e5c995d560820e0bd7af1d 73 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f15 :: S3
#50 := f15
#49 := 4::Int
#12 := 5::Int
#53 := (f7 5::Int 4::Int f15)
decl f11 :: (-> S2 S5 S5)
#48 := 3::Int
#51 := (f7 3::Int 4::Int f15)
decl f4 :: S2
#8 := f4
#52 := (f11 f4 #51)
#54 := (= #52 #53)
decl f3 :: (-> S2 Int Int)
#307 := (f3 f4 3::Int)
#308 := (f7 #307 4::Int f15)
#346 := (= #308 #53)
#344 := (= #53 #308)
#338 := (= 5::Int #307)
#336 := (= #307 5::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 5::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#107 := (~ #14 #14)
#105 := (~ #13 #13)
#106 := [refl]: #105
#108 := [nnf-pos #106]: #107
#75 := [asserted]: #14
#109 := [mp~ #75 #108]: #14
#339 := (not #14)
#340 := (or #339 #336)
#341 := [quant-inst #48]: #340
#337 := [unit-resolution #341 #109]: #336
#342 := [symm #337]: #338
#345 := [monotonicity #342]: #344
#347 := [symm #345]: #346
#309 := (= #52 #308)
#18 := (:var 0 S3)
#17 := (:var 1 Int)
#16 := (:var 2 Int)
#31 := (:var 3 S2)
#33 := (f3 #31 #16)
#34 := (f7 #33 #17 #18)
#217 := (pattern #34)
#19 := (f7 #16 #17 #18)
#32 := (f11 #31 #19)
#216 := (pattern #32)
#35 := (= #32 #34)
#218 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #216 #217) #35)
#36 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #35)
#221 := (iff #36 #218)
#219 := (iff #35 #35)
#220 := [refl]: #219
#222 := [quant-intro #220]: #221
#127 := (~ #36 #36)
#125 := (~ #35 #35)
#126 := [refl]: #125
#128 := [nnf-pos #126]: #127
#99 := [asserted]: #36
#129 := [mp~ #99 #128]: #36
#223 := [mp #129 #222]: #218
#312 := (not #218)
#313 := (or #312 #309)
#314 := [quant-inst #8 #48 #49 #50]: #313
#343 := [unit-resolution #314 #223]: #309
#348 := [trans #343 #347]: #54
#55 := (not #54)
#103 := [asserted]: #55
[unit-resolution #103 #348]: false
unsat
bb9eadf9d93fa155523290e9092e7b607f0bce77 73 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f15 :: S3
#50 := f15
#12 := 6::Int
#48 := 3::Int
#53 := (f7 3::Int 6::Int f15)
decl f12 :: (-> S2 S5 S5)
#49 := 4::Int
#51 := (f7 3::Int 4::Int f15)
decl f4 :: S2
#8 := f4
#52 := (f12 f4 #51)
#54 := (= #52 #53)
decl f3 :: (-> S2 Int Int)
#307 := (f3 f4 4::Int)
#308 := (f7 3::Int #307 f15)
#346 := (= #308 #53)
#344 := (= #53 #308)
#338 := (= 6::Int #307)
#334 := (= #307 6::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 6::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#107 := (~ #14 #14)
#105 := (~ #13 #13)
#106 := [refl]: #105
#108 := [nnf-pos #106]: #107
#75 := [asserted]: #14
#109 := [mp~ #75 #108]: #14
#339 := (not #14)
#340 := (or #339 #334)
#341 := [quant-inst #49]: #340
#335 := [unit-resolution #341 #109]: #334
#342 := [symm #335]: #338
#345 := [monotonicity #342]: #344
#347 := [symm #345]: #346
#309 := (= #52 #308)
#18 := (:var 0 S3)
#17 := (:var 1 Int)
#31 := (:var 3 S2)
#38 := (f3 #31 #17)
#16 := (:var 2 Int)
#39 := (f7 #16 #38 #18)
#225 := (pattern #39)
#19 := (f7 #16 #17 #18)
#37 := (f12 #31 #19)
#224 := (pattern #37)
#40 := (= #37 #39)
#226 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #224 #225) #40)
#41 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #40)
#229 := (iff #41 #226)
#227 := (iff #40 #40)
#228 := [refl]: #227
#230 := [quant-intro #228]: #229
#132 := (~ #41 #41)
#130 := (~ #40 #40)
#131 := [refl]: #130
#133 := [nnf-pos #131]: #132
#100 := [asserted]: #41
#134 := [mp~ #100 #133]: #41
#231 := [mp #134 #230]: #226
#312 := (not #226)
#313 := (or #312 #309)
#314 := [quant-inst #8 #48 #49 #50]: #313
#343 := [unit-resolution #314 #231]: #309
#348 := [trans #343 #347]: #54
#55 := (not #54)
#103 := [asserted]: #55
[unit-resolution #103 #348]: false
unsat
0e39c98938b4c0b9a0624f3b129bbe0a5c7f3e88 213 0
#2 := false
decl f13 :: (-> S2 S5 S5)
decl f12 :: (-> S2 S5 S5)
decl f16 :: S5
#54 := f16
decl f5 :: S2
#15 := f5
#58 := (f12 f5 f16)
decl f4 :: S2
#8 := f4
#59 := (f13 f4 #58)
#112 := (= f16 #59)
decl f8 :: (-> Int Int S3 S5)
decl f10 :: (-> S6 S5 S3)
decl f17 :: S3
#55 := f17
#12 := 4::Int
#18 := 3::Int
#56 := (f8 3::Int 4::Int f17)
decl f11 :: S6
#33 := f11
#289 := (f10 f11 #56)
decl f3 :: (-> S2 Int Int)
#272 := (f3 f5 3::Int)
#324 := (f8 #272 4::Int #289)
#353 := (f13 f4 #324)
#434 := (= #353 #59)
#427 := (= #59 #353)
#425 := (= #58 #324)
#273 := (f8 #272 4::Int f17)
#421 := (= #273 #324)
#418 := (= #324 #273)
#407 := (= #289 f17)
#290 := (= f17 #289)
#24 := (:var 0 S3)
#23 := (:var 1 Int)
#22 := (:var 2 Int)
#25 := (f8 #22 #23 #24)
#229 := (pattern #25)
#34 := (f10 f11 #25)
#100 := (= #24 #34)
#242 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) (:pat #229) #100)
#104 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #100)
#245 := (iff #104 #242)
#243 := (iff #100 #100)
#244 := [refl]: #243
#246 := [quant-intro #244]: #245
#154 := (~ #104 #104)
#152 := (~ #100 #100)
#153 := [refl]: #152
#155 := [nnf-pos #153]: #154
#35 := (= #34 #24)
#36 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #35)
#105 := (iff #36 #104)
#102 := (iff #35 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #36
#109 := [mp #99 #106]: #104
#156 := [mp~ #109 #155]: #104
#247 := [mp #156 #246]: #242
#293 := (not #242)
#294 := (or #293 #290)
#295 := [quant-inst #18 #12 #55]: #294
#404 := [unit-resolution #295 #247]: #290
#411 := [symm #404]: #407
#419 := [monotonicity #411]: #418
#422 := [symm #419]: #421
#423 := (= #58 #273)
#274 := (f12 f5 #56)
#275 := (= #274 #273)
#276 := (= #273 #274)
#37 := (:var 3 S2)
#39 := (f3 #37 #22)
#40 := (f8 #39 #23 #24)
#249 := (pattern #40)
#38 := (f12 #37 #25)
#248 := (pattern #38)
#41 := (= #38 #40)
#250 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #248 #249) #41)
#42 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #41)
#253 := (iff #42 #250)
#251 := (iff #41 #41)
#252 := [refl]: #251
#254 := [quant-intro #252]: #253
#159 := (~ #42 #42)
#157 := (~ #41 #41)
#158 := [refl]: #157
#160 := [nnf-pos #158]: #159
#107 := [asserted]: #42
#161 := [mp~ #107 #160]: #42
#255 := [mp #161 #254]: #250
#279 := (not #250)
#280 := (or #279 #276)
#281 := (or #279 #275)
#283 := (iff #281 #280)
#285 := (iff #280 #280)
#286 := [rewrite]: #285
#277 := (iff #275 #276)
#278 := [rewrite]: #277
#284 := [monotonicity #278]: #283
#287 := [trans #284 #286]: #283
#282 := [quant-inst #15 #18 #12 #55]: #281
#288 := [mp #282 #287]: #280
#415 := [unit-resolution #288 #255]: #276
#420 := [symm #415]: #275
#416 := (= #58 #274)
#57 := (= f16 #56)
#118 := (not #57)
#119 := (or #118 #112)
#124 := (not #119)
#60 := (= #59 f16)
#61 := (implies #57 #60)
#62 := (not #61)
#125 := (iff #62 #124)
#122 := (iff #61 #119)
#115 := (implies #57 #112)
#120 := (iff #115 #119)
#121 := [rewrite]: #120
#116 := (iff #61 #115)
#113 := (iff #60 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#123 := [trans #117 #121]: #122
#126 := [monotonicity #123]: #125
#111 := [asserted]: #62
#129 := [mp #111 #126]: #124
#127 := [not-or-elim #129]: #57
#417 := [monotonicity #127]: #416
#424 := [trans #417 #420]: #423
#426 := [trans #424 #422]: #425
#428 := [monotonicity #426]: #427
#435 := [symm #428]: #434
#438 := (= f16 #353)
#348 := (f3 f4 4::Int)
#349 := (f8 #272 #348 #289)
#355 := (= #349 #353)
#44 := (f3 #37 #23)
#45 := (f8 #22 #44 #24)
#257 := (pattern #45)
#43 := (f13 #37 #25)
#256 := (pattern #43)
#46 := (= #43 #45)
#258 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #256 #257) #46)
#47 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #46)
#261 := (iff #47 #258)
#259 := (iff #46 #46)
#260 := [refl]: #259
#262 := [quant-intro #260]: #261
#164 := (~ #47 #47)
#162 := (~ #46 #46)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#108 := [asserted]: #47
#166 := [mp~ #108 #165]: #47
#263 := [mp #166 #262]: #258
#358 := (not #258)
#359 := (or #358 #355)
#354 := (= #353 #349)
#360 := (or #358 #354)
#362 := (iff #360 #359)
#364 := (iff #359 #359)
#365 := [rewrite]: #364
#356 := (iff #354 #355)
#357 := [rewrite]: #356
#363 := [monotonicity #357]: #362
#366 := [trans #363 #365]: #362
#361 := [quant-inst #8 #272 #12 #289]: #360
#367 := [mp #361 #366]: #359
#414 := [unit-resolution #367 #263]: #355
#436 := (= f16 #349)
#432 := (= #56 #349)
#430 := (= #349 #56)
#403 := (= #348 4::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#134 := (~ #14 #14)
#132 := (~ #13 #13)
#133 := [refl]: #132
#135 := [nnf-pos #133]: #134
#82 := [asserted]: #14
#136 := [mp~ #82 #135]: #14
#408 := (not #14)
#409 := (or #408 #403)
#410 := [quant-inst #12]: #409
#412 := [unit-resolution #410 #136]: #403
#347 := (= #272 3::Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#139 := (~ #20 #20)
#137 := (~ #19 #19)
#138 := [refl]: #137
#140 := [nnf-pos #138]: #139
#83 := [asserted]: #20
#141 := [mp~ #83 #140]: #20
#350 := (not #20)
#351 := (or #350 #347)
#352 := [quant-inst #18]: #351
#413 := [unit-resolution #352 #141]: #347
#431 := [monotonicity #413 #412 #411]: #430
#433 := [symm #431]: #432
#437 := [trans #127 #433]: #436
#439 := [trans #437 #414]: #438
#440 := [trans #439 #435]: #112
#128 := (not #112)
#130 := [not-or-elim #129]: #128
[unit-resolution #130 #440]: false
unsat
17df18da62b62fdb663a9f6fa37f20487dad9832 213 0
#2 := false
decl f12 :: (-> S2 S5 S5)
decl f13 :: (-> S2 S5 S5)
decl f16 :: S5
#54 := f16
decl f4 :: S2
#8 := f4
#58 := (f13 f4 f16)
decl f5 :: S2
#15 := f5
#59 := (f12 f5 #58)
#112 := (= f16 #59)
decl f8 :: (-> Int Int S3 S5)
decl f10 :: (-> S6 S5 S3)
decl f17 :: S3
#55 := f17
#12 := 4::Int
#18 := 3::Int
#56 := (f8 3::Int 4::Int f17)
decl f11 :: S6
#33 := f11
#289 := (f10 f11 #56)
decl f3 :: (-> S2 Int Int)
#272 := (f3 f4 4::Int)
#324 := (f8 3::Int #272 #289)
#353 := (f12 f5 #324)
#434 := (= #353 #59)
#427 := (= #59 #353)
#425 := (= #58 #324)
#273 := (f8 3::Int #272 f17)
#421 := (= #273 #324)
#418 := (= #324 #273)
#407 := (= #289 f17)
#290 := (= f17 #289)
#24 := (:var 0 S3)
#23 := (:var 1 Int)
#22 := (:var 2 Int)
#25 := (f8 #22 #23 #24)
#229 := (pattern #25)
#34 := (f10 f11 #25)
#100 := (= #24 #34)
#242 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) (:pat #229) #100)
#104 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #100)
#245 := (iff #104 #242)
#243 := (iff #100 #100)
#244 := [refl]: #243
#246 := [quant-intro #244]: #245
#154 := (~ #104 #104)
#152 := (~ #100 #100)
#153 := [refl]: #152
#155 := [nnf-pos #153]: #154
#35 := (= #34 #24)
#36 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S3)) #35)
#105 := (iff #36 #104)
#102 := (iff #35 #100)
#103 := [rewrite]: #102
#106 := [quant-intro #103]: #105
#99 := [asserted]: #36
#109 := [mp #99 #106]: #104
#156 := [mp~ #109 #155]: #104
#247 := [mp #156 #246]: #242
#293 := (not #242)
#294 := (or #293 #290)
#295 := [quant-inst #18 #12 #55]: #294
#406 := [unit-resolution #295 #247]: #290
#411 := [symm #406]: #407
#419 := [monotonicity #411]: #418
#422 := [symm #419]: #421
#423 := (= #58 #273)
#274 := (f13 f4 #56)
#275 := (= #274 #273)
#276 := (= #273 #274)
#37 := (:var 3 S2)
#44 := (f3 #37 #23)
#45 := (f8 #22 #44 #24)
#257 := (pattern #45)
#43 := (f13 #37 #25)
#256 := (pattern #43)
#46 := (= #43 #45)
#258 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #256 #257) #46)
#47 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #46)
#261 := (iff #47 #258)
#259 := (iff #46 #46)
#260 := [refl]: #259
#262 := [quant-intro #260]: #261
#164 := (~ #47 #47)
#162 := (~ #46 #46)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#108 := [asserted]: #47
#166 := [mp~ #108 #165]: #47
#263 := [mp #166 #262]: #258
#279 := (not #258)
#280 := (or #279 #276)
#281 := (or #279 #275)
#283 := (iff #281 #280)
#285 := (iff #280 #280)
#286 := [rewrite]: #285
#277 := (iff #275 #276)
#278 := [rewrite]: #277
#284 := [monotonicity #278]: #283
#287 := [trans #284 #286]: #283
#282 := [quant-inst #8 #18 #12 #55]: #281
#288 := [mp #282 #287]: #280
#415 := [unit-resolution #288 #263]: #276
#420 := [symm #415]: #275
#416 := (= #58 #274)
#57 := (= f16 #56)
#118 := (not #57)
#119 := (or #118 #112)
#124 := (not #119)
#60 := (= #59 f16)
#61 := (implies #57 #60)
#62 := (not #61)
#125 := (iff #62 #124)
#122 := (iff #61 #119)
#115 := (implies #57 #112)
#120 := (iff #115 #119)
#121 := [rewrite]: #120
#116 := (iff #61 #115)
#113 := (iff #60 #112)
#114 := [rewrite]: #113
#117 := [monotonicity #114]: #116
#123 := [trans #117 #121]: #122
#126 := [monotonicity #123]: #125
#111 := [asserted]: #62
#129 := [mp #111 #126]: #124
#127 := [not-or-elim #129]: #57
#417 := [monotonicity #127]: #416
#424 := [trans #417 #420]: #423
#426 := [trans #424 #422]: #425
#428 := [monotonicity #426]: #427
#435 := [symm #428]: #434
#438 := (= f16 #353)
#346 := (f3 f5 3::Int)
#349 := (f8 #346 #272 #289)
#355 := (= #349 #353)
#39 := (f3 #37 #22)
#40 := (f8 #39 #23 #24)
#249 := (pattern #40)
#38 := (f12 #37 #25)
#248 := (pattern #38)
#41 := (= #38 #40)
#250 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #248 #249) #41)
#42 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #41)
#253 := (iff #42 #250)
#251 := (iff #41 #41)
#252 := [refl]: #251
#254 := [quant-intro #252]: #253
#159 := (~ #42 #42)
#157 := (~ #41 #41)
#158 := [refl]: #157
#160 := [nnf-pos #158]: #159
#107 := [asserted]: #42
#161 := [mp~ #107 #160]: #42
#255 := [mp #161 #254]: #250
#358 := (not #250)
#359 := (or #358 #355)
#354 := (= #353 #349)
#360 := (or #358 #354)
#362 := (iff #360 #359)
#364 := (iff #359 #359)
#365 := [rewrite]: #364
#356 := (iff #354 #355)
#357 := [rewrite]: #356
#363 := [monotonicity #357]: #362
#366 := [trans #363 #365]: #362
#361 := [quant-inst #15 #18 #272 #289]: #360
#367 := [mp #361 #366]: #359
#414 := [unit-resolution #367 #255]: #355
#436 := (= f16 #349)
#432 := (= #56 #349)
#430 := (= #349 #56)
#345 := (= #272 4::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#134 := (~ #14 #14)
#132 := (~ #13 #13)
#133 := [refl]: #132
#135 := [nnf-pos #133]: #134
#82 := [asserted]: #14
#136 := [mp~ #82 #135]: #14
#350 := (not #14)
#351 := (or #350 #345)
#352 := [quant-inst #12]: #351
#412 := [unit-resolution #352 #136]: #345
#405 := (= #346 3::Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#139 := (~ #20 #20)
#137 := (~ #19 #19)
#138 := [refl]: #137
#140 := [nnf-pos #138]: #139
#83 := [asserted]: #20
#141 := [mp~ #83 #140]: #20
#408 := (not #20)
#409 := (or #408 #405)
#410 := [quant-inst #18]: #409
#413 := [unit-resolution #410 #141]: #405
#431 := [monotonicity #413 #412 #411]: #430
#433 := [symm #431]: #432
#437 := [trans #127 #433]: #436
#439 := [trans #437 #414]: #438
#440 := [trans #439 #435]: #112
#128 := (not #112)
#130 := [not-or-elim #129]: #128
[unit-resolution #130 #440]: false
unsat
07757efd2a62a199d8cebcd5d86d76e6e1b9ee54 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#74 := f26
decl f4 :: S3
#8 := f4
#77 := (f3 f4 f26)
decl f25 :: S4
#73 := f25
#76 := (f3 f4 f25)
#78 := (= #76 #77)
#75 := (= f25 f26)
#152 := (not #75)
#153 := (or #152 #78)
#156 := (not #153)
#79 := (implies #75 #78)
#80 := (not #79)
#157 := (iff #80 #156)
#154 := (iff #79 #153)
#155 := [rewrite]: #154
#158 := [monotonicity #155]: #157
#151 := [asserted]: #80
#161 := [mp #151 #158]: #156
#159 := [not-or-elim #161]: #75
#355 := [monotonicity #159]: #78
#160 := (not #78)
#162 := [not-or-elim #161]: #160
[unit-resolution #162 #355]: false
unsat
bf2376479b77b7e06a1f1c39e37ebc8c5a4223d8 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#74 := f26
decl f6 :: S3
#16 := f6
#77 := (f3 f6 f26)
decl f25 :: S4
#73 := f25
#76 := (f3 f6 f25)
#78 := (= #76 #77)
#75 := (= f25 f26)
#152 := (not #75)
#153 := (or #152 #78)
#156 := (not #153)
#79 := (implies #75 #78)
#80 := (not #79)
#157 := (iff #80 #156)
#154 := (iff #79 #153)
#155 := [rewrite]: #154
#158 := [monotonicity #155]: #157
#151 := [asserted]: #80
#161 := [mp #151 #158]: #156
#159 := [not-or-elim #161]: #75
#355 := [monotonicity #159]: #78
#160 := (not #78)
#162 := [not-or-elim #161]: #160
[unit-resolution #162 #355]: false
unsat
a5a95b955c8bcf895cd52677159063c5777f5e11 73 0
#2 := false
decl f14 :: (-> S9 S4 S1)
decl f26 :: S4
#74 := f26
decl f15 :: S9
#41 := f15
#78 := (f14 f15 f26)
decl f1 :: S1
#4 := f1
#157 := (= f1 #78)
decl f25 :: S4
#73 := f25
#76 := (f14 f15 f25)
#154 := (= f1 #76)
#160 := (iff #154 #157)
#699 := (= #76 #78)
#75 := (= f25 f26)
#166 := (not #75)
#167 := (or #166 #160)
#172 := (not #167)
#79 := (= #78 f1)
#77 := (= #76 f1)
#80 := (iff #77 #79)
#81 := (implies #75 #80)
#82 := (not #81)
#173 := (iff #82 #172)
#170 := (iff #81 #167)
#163 := (implies #75 #160)
#168 := (iff #163 #167)
#169 := [rewrite]: #168
#164 := (iff #81 #163)
#161 := (iff #80 #160)
#158 := (iff #79 #157)
#159 := [rewrite]: #158
#155 := (iff #77 #154)
#156 := [rewrite]: #155
#162 := [monotonicity #156 #159]: #161
#165 := [monotonicity #162]: #164
#171 := [trans #165 #169]: #170
#174 := [monotonicity #171]: #173
#153 := [asserted]: #82
#177 := [mp #153 #174]: #172
#175 := [not-or-elim #177]: #75
#701 := [monotonicity #175]: #699
#356 := [monotonicity #701]: #160
#380 := (not #157)
#204 := (not #154)
#488 := (iff #204 #380)
#695 := [monotonicity #356]: #488
#383 := [hypothesis]: #204
#367 := [mp #383 #695]: #380
#378 := (or #157 #154)
#205 := (iff #157 #204)
#176 := (not #160)
#206 := (iff #176 #205)
#207 := [rewrite]: #206
#178 := [not-or-elim #177]: #176
#208 := [mp #178 #207]: #205
#376 := (not #205)
#377 := (or #157 #154 #376)
#292 := [def-axiom]: #377
#369 := [unit-resolution #292 #208]: #378
#362 := [unit-resolution #369 #383]: #157
#368 := [unit-resolution #362 #367]: false
#702 := [lemma #368]: #154
#704 := [mp #702 #356]: #157
#382 := (or #380 #204)
#381 := (or #380 #204 #376)
#309 := [def-axiom]: #381
#379 := [unit-resolution #309 #208]: #382
#703 := [unit-resolution #379 #702]: #380
[unit-resolution #703 #704]: false
unsat
58db43dcfcdbe4b1a883c7f66b902f003ab05dc4 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#75 := f26
decl f4 :: S3
#8 := f4
#76 := (f3 f4 f26)
decl f25 :: S4
#73 := f25
#74 := (f3 f4 f25)
#77 := (= #74 #76)
#79 := (= f25 f26)
#80 := (not #79)
#154 := (or #77 #80)
#157 := (not #154)
#78 := (not #77)
#81 := (implies #78 #80)
#82 := (not #81)
#158 := (iff #82 #157)
#155 := (iff #81 #154)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#153 := [asserted]: #82
#162 := [mp #153 #159]: #157
#161 := [not-or-elim #162]: #79
#355 := [monotonicity #161]: #77
#160 := [not-or-elim #162]: #78
[unit-resolution #160 #355]: false
unsat
18ead81bc971c49ec98603c790964ad3ab999231 29 0
#2 := false
decl f3 :: (-> S3 S4 Int)
decl f26 :: S4
#75 := f26
decl f6 :: S3
#16 := f6
#76 := (f3 f6 f26)
decl f25 :: S4
#73 := f25
#74 := (f3 f6 f25)
#77 := (= #74 #76)
#79 := (= f25 f26)
#80 := (not #79)
#154 := (or #77 #80)
#157 := (not #154)
#78 := (not #77)
#81 := (implies #78 #80)
#82 := (not #81)
#158 := (iff #82 #157)
#155 := (iff #81 #154)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#153 := [asserted]: #82
#162 := [mp #153 #159]: #157
#161 := [not-or-elim #162]: #79
#355 := [monotonicity #161]: #77
#160 := [not-or-elim #162]: #78
[unit-resolution #160 #355]: false
unsat
ef4902e702aa4daff26cd3cb227d2369cef2cb24 89 0
#2 := false
decl f14 :: (-> S9 S4 S1)
decl f26 :: S4
#76 := f26
decl f15 :: S9
#41 := f15
#77 := (f14 f15 f26)
decl f1 :: S1
#4 := f1
#159 := (= f1 #77)
decl f25 :: S4
#73 := f25
#74 := (f14 f15 f25)
#156 := (= f1 #74)
#162 := (iff #156 #159)
#715 := (= #74 #77)
#81 := (= f25 f26)
#82 := (not #81)
#188 := (or #82 #162)
#191 := (not #188)
#78 := (= #77 f1)
#75 := (= #74 f1)
#79 := (iff #75 #78)
#80 := (not #79)
#83 := (implies #80 #82)
#84 := (not #83)
#194 := (iff #84 #191)
#178 := (iff #159 #156)
#177 := (or #82 #178)
#183 := (not #177)
#192 := (iff #183 #191)
#189 := (iff #177 #188)
#186 := (iff #178 #162)
#187 := [rewrite]: #186
#190 := [monotonicity #187]: #189
#193 := [monotonicity #190]: #192
#184 := (iff #84 #183)
#181 := (iff #83 #177)
#168 := (not #156)
#169 := (iff #159 #168)
#174 := (implies #169 #82)
#179 := (iff #174 #177)
#180 := [rewrite]: #179
#175 := (iff #83 #174)
#172 := (iff #80 #169)
#165 := (not #162)
#170 := (iff #165 #169)
#171 := [rewrite]: #170
#166 := (iff #80 #165)
#163 := (iff #79 #162)
#160 := (iff #78 #159)
#161 := [rewrite]: #160
#157 := (iff #75 #156)
#158 := [rewrite]: #157
#164 := [monotonicity #158 #161]: #163
#167 := [monotonicity #164]: #166
#173 := [trans #167 #171]: #172
#176 := [monotonicity #173]: #175
#182 := [trans #176 #180]: #181
#185 := [monotonicity #182]: #184
#195 := [trans #185 #193]: #194
#155 := [asserted]: #84
#198 := [mp #155 #195]: #191
#196 := [not-or-elim #198]: #81
#717 := [monotonicity #196]: #715
#372 := [monotonicity #717]: #162
#396 := (not #159)
#504 := (iff #168 #396)
#711 := [monotonicity #372]: #504
#399 := [hypothesis]: #168
#383 := [mp #399 #711]: #396
#394 := (or #159 #156)
#197 := [not-or-elim #198]: #165
#224 := [mp #197 #171]: #169
#392 := (not #169)
#393 := (or #159 #156 #392)
#308 := [def-axiom]: #393
#385 := [unit-resolution #308 #224]: #394
#378 := [unit-resolution #385 #399]: #159
#384 := [unit-resolution #378 #383]: false
#718 := [lemma #384]: #156
#720 := [mp #718 #372]: #159
#398 := (or #396 #168)
#397 := (or #396 #168 #392)
#325 := [def-axiom]: #397
#395 := [unit-resolution #325 #224]: #398
#719 := [unit-resolution #395 #718]: #396
[unit-resolution #719 #720]: false
unsat
1c7893600df066a2c758f1fedb1170d99e7417c3 64 0
#2 := false
#73 := 3::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#77 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#75 := f25
decl f18 :: S11
#43 := f18
#76 := (f17 f18 f25)
#78 := (f16 #76 f26)
#74 := 4::Int
#79 := (f5 3::Int 4::Int #78)
decl f4 :: S3
#8 := f4
#80 := (f3 f4 #79)
#81 := (= #80 3::Int)
#82 := (not #81)
#153 := [asserted]: #82
#11 := (:var 0 S2)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f5 #9 #10 #11)
#272 := (pattern #12)
#13 := (f3 f4 #12)
#103 := (= #9 #13)
#273 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #272) #103)
#106 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #103)
#276 := (iff #106 #273)
#274 := (iff #103 #103)
#275 := [refl]: #274
#277 := [quant-intro #275]: #276
#167 := (~ #106 #106)
#165 := (~ #103 #103)
#166 := [refl]: #165
#168 := [nnf-pos #166]: #167
#14 := (= #13 #9)
#15 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #14)
#107 := (iff #15 #106)
#104 := (iff #14 #103)
#105 := [rewrite]: #104
#108 := [quant-intro #105]: #107
#102 := [asserted]: #15
#111 := [mp #102 #108]: #106
#169 := [mp~ #111 #168]: #106
#278 := [mp #169 #277]: #273
#379 := (not #273)
#380 := (or #379 #81)
#154 := (= 3::Int #80)
#384 := (or #379 #154)
#386 := (iff #384 #380)
#388 := (iff #380 #380)
#389 := [rewrite]: #388
#160 := (iff #154 #81)
#161 := [rewrite]: #160
#387 := [monotonicity #161]: #386
#390 := [trans #387 #389]: #386
#385 := [quant-inst #73 #74 #78]: #384
#391 := [mp #385 #390]: #380
[unit-resolution #391 #278 #153]: false
unsat
4378daf31705ba44a56bde40746d68e01ac8e158 64 0
#2 := false
#74 := 4::Int
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#77 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#75 := f25
decl f18 :: S11
#43 := f18
#76 := (f17 f18 f25)
#78 := (f16 #76 f26)
#73 := 3::Int
#79 := (f5 3::Int 4::Int #78)
decl f6 :: S3
#16 := f6
#80 := (f3 f6 #79)
#81 := (= #80 4::Int)
#82 := (not #81)
#153 := [asserted]: #82
#11 := (:var 0 S2)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f5 #9 #10 #11)
#272 := (pattern #12)
#17 := (f3 f6 #12)
#110 := (= #10 #17)
#279 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #272) #110)
#114 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #110)
#282 := (iff #114 #279)
#280 := (iff #110 #110)
#281 := [refl]: #280
#283 := [quant-intro #281]: #282
#172 := (~ #114 #114)
#170 := (~ #110 #110)
#171 := [refl]: #170
#173 := [nnf-pos #171]: #172
#18 := (= #17 #10)
#19 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #18)
#115 := (iff #19 #114)
#112 := (iff #18 #110)
#113 := [rewrite]: #112
#116 := [quant-intro #113]: #115
#109 := [asserted]: #19
#119 := [mp #109 #116]: #114
#174 := [mp~ #119 #173]: #114
#284 := [mp #174 #283]: #279
#397 := (not #279)
#398 := (or #397 #81)
#154 := (= 4::Int #80)
#399 := (or #397 #154)
#401 := (iff #399 #398)
#403 := (iff #398 #398)
#404 := [rewrite]: #403
#160 := (iff #154 #81)
#161 := [rewrite]: #160
#402 := [monotonicity #161]: #401
#405 := [trans #402 #404]: #401
#400 := [quant-inst #73 #74 #78]: #399
#406 := [mp #400 #405]: #398
[unit-resolution #406 #284 #153]: false
unsat
7d7da3e033e9f2b40929e39aea1e30d7a07abec9 112 0
#2 := false
decl f14 :: (-> S9 S4 S1)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#77 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#75 := f25
decl f18 :: S11
#43 := f18
#76 := (f17 f18 f25)
#78 := (f16 #76 f26)
#74 := 4::Int
#73 := 3::Int
#79 := (f5 3::Int 4::Int #78)
decl f15 :: S9
#41 := f15
#80 := (f14 f15 #79)
decl f1 :: S1
#4 := f1
#156 := (= f1 #80)
#168 := (not #156)
#416 := [hypothesis]: #168
#159 := (= f1 f25)
#358 := (or #159 #156)
#169 := (iff #159 #168)
#82 := (= f25 f1)
#81 := (= #80 f1)
#83 := (iff #81 #82)
#84 := (not #83)
#172 := (iff #84 #169)
#162 := (iff #156 #159)
#165 := (not #162)
#170 := (iff #165 #169)
#171 := [rewrite]: #170
#166 := (iff #84 #165)
#163 := (iff #83 #162)
#160 := (iff #82 #159)
#161 := [rewrite]: #160
#157 := (iff #81 #156)
#158 := [rewrite]: #157
#164 := [monotonicity #158 #161]: #163
#167 := [monotonicity #164]: #166
#173 := [trans #167 #171]: #172
#155 := [asserted]: #84
#176 := [mp #155 #173]: #169
#355 := (not #169)
#356 := (or #159 #156 #355)
#357 := [def-axiom]: #356
#359 := [unit-resolution #357 #176]: #358
#417 := [unit-resolution #359 #416]: #159
#360 := (not #159)
#419 := (or #156 #360)
#46 := (:var 0 S8)
#44 := (:var 1 S1)
#45 := (f17 f18 #44)
#47 := (f16 #45 #46)
#9 := (:var 2 Int)
#42 := (:var 3 Int)
#48 := (f5 #42 #9 #47)
#326 := (pattern #48)
#135 := (= f1 #44)
#49 := (f14 f15 #48)
#132 := (= f1 #49)
#138 := (iff #132 #135)
#327 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S8)) (:pat #326) #138)
#141 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S8)) #138)
#330 := (iff #141 #327)
#328 := (iff #138 #138)
#329 := [refl]: #328
#331 := [quant-intro #329]: #330
#208 := (~ #141 #141)
#206 := (~ #138 #138)
#207 := [refl]: #206
#209 := [nnf-pos #207]: #208
#51 := (= #44 f1)
#50 := (= #49 f1)
#52 := (iff #50 #51)
#53 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S8)) #52)
#142 := (iff #53 #141)
#139 := (iff #52 #138)
#136 := (iff #51 #135)
#137 := [rewrite]: #136
#133 := (iff #50 #132)
#134 := [rewrite]: #133
#140 := [monotonicity #134 #137]: #139
#143 := [quant-intro #140]: #142
#131 := [asserted]: #53
#146 := [mp #131 #143]: #141
#210 := [mp~ #146 #209]: #141
#332 := [mp #210 #331]: #327
#367 := (not #327)
#368 := (or #367 #162)
#369 := [quant-inst #73 #74 #75 #77]: #368
#418 := [unit-resolution #369 #332]: #162
#370 := (or #165 #156 #360)
#371 := [def-axiom]: #370
#420 := [unit-resolution #371 #418]: #419
#421 := [unit-resolution #420 #417 #416]: false
#422 := [lemma #421]: #156
#363 := (or #360 #168)
#361 := (or #360 #168 #355)
#362 := [def-axiom]: #361
#364 := [unit-resolution #362 #176]: #363
#423 := [unit-resolution #364 #422]: #360
#424 := (or #168 #159)
#372 := (or #165 #168 #159)
#373 := [def-axiom]: #372
#425 := [unit-resolution #373 #418]: #424
[unit-resolution #425 #423 #422]: false
unsat
51712135208fd24e3dca3c8d4c0d0b8eec378de9 120 0
#2 := false
#74 := 4::Int
#73 := 3::Int
#413 := (= 3::Int 4::Int)
#415 := (iff #413 false)
#416 := [rewrite]: #415
decl f3 :: (-> S3 S4 Int)
decl f5 :: (-> Int Int S2 S4)
decl f16 :: (-> S10 S8 S2)
decl f26 :: S8
#77 := f26
decl f17 :: (-> S11 S1 S10)
decl f25 :: S1
#75 := f25
decl f18 :: S11
#43 := f18
#76 := (f17 f18 f25)
#78 := (f16 #76 f26)
#79 := (f5 3::Int 4::Int #78)
decl f6 :: S3
#16 := f6
#81 := (f3 f6 #79)
#394 := (= #81 4::Int)
#11 := (:var 0 S2)
#10 := (:var 1 Int)
#9 := (:var 2 Int)
#12 := (f5 #9 #10 #11)
#267 := (pattern #12)
#17 := (f3 f6 #12)
#112 := (= #10 #17)
#274 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #267) #112)
#116 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #112)
#277 := (iff #116 #274)
#275 := (iff #112 #112)
#276 := [refl]: #275
#278 := [quant-intro #276]: #277
#167 := (~ #116 #116)
#165 := (~ #112 #112)
#166 := [refl]: #165
#168 := [nnf-pos #166]: #167
#18 := (= #17 #10)
#19 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #18)
#117 := (iff #19 #116)
#114 := (iff #18 #112)
#115 := [rewrite]: #114
#118 := [quant-intro #115]: #117
#111 := [asserted]: #19
#121 := [mp #111 #118]: #116
#169 := [mp~ #121 #168]: #116
#279 := [mp #169 #278]: #274
#395 := (not #274)
#396 := (or #395 #394)
#391 := (= 4::Int #81)
#397 := (or #395 #391)
#399 := (iff #397 #396)
#401 := (iff #396 #396)
#402 := [rewrite]: #401
#392 := (iff #391 #394)
#393 := [rewrite]: #392
#400 := [monotonicity #393]: #399
#403 := [trans #400 #402]: #399
#398 := [quant-inst #73 #74 #78]: #397
#404 := [mp #398 #403]: #396
#405 := [unit-resolution #404 #279]: #394
#411 := (= 3::Int #81)
#409 := (= #81 3::Int)
decl f4 :: S3
#8 := f4
#80 := (f3 f4 #79)
#380 := (= #80 3::Int)
#13 := (f3 f4 #12)
#105 := (= #9 #13)
#268 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) (:pat #267) #105)
#108 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #105)
#271 := (iff #108 #268)
#269 := (iff #105 #105)
#270 := [refl]: #269
#272 := [quant-intro #270]: #271
#162 := (~ #108 #108)
#159 := (~ #105 #105)
#161 := [refl]: #159
#163 := [nnf-pos #161]: #162
#14 := (= #13 #9)
#15 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S2)) #14)
#109 := (iff #15 #108)
#106 := (iff #14 #105)
#107 := [rewrite]: #106
#110 := [quant-intro #107]: #109
#104 := [asserted]: #15
#113 := [mp #104 #110]: #108
#164 := [mp~ #113 #163]: #108
#273 := [mp #164 #272]: #268
#381 := (not #268)
#382 := (or #381 #380)
#374 := (= 3::Int #80)
#383 := (or #381 #374)
#385 := (iff #383 #382)
#387 := (iff #382 #382)
#388 := [rewrite]: #387
#375 := (iff #374 #380)
#379 := [rewrite]: #375
#386 := [monotonicity #379]: #385
#389 := [trans #386 #388]: #385
#384 := [quant-inst #73 #74 #78]: #383
#390 := [mp #384 #389]: #382
#406 := [unit-resolution #390 #273]: #380
#407 := (= #81 #80)
#82 := (= #80 #81)
#83 := (not #82)
#84 := (not #83)
#156 := (iff #84 #82)
#157 := [rewrite]: #156
#155 := [asserted]: #84
#160 := [mp #155 #157]: #82
#408 := [symm #160]: #407
#410 := [trans #408 #406]: #409
#412 := [symm #410]: #411
#414 := [trans #412 #405]: #413
[mp #414 #416]: false
unsat
871d48a15480169e66589f44cdfbd1d2a08781b1 81 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f17 :: (-> S10 S8 S3)
decl f27 :: S8
#84 := f27
decl f18 :: (-> S11 S1 S10)
decl f26 :: S1
#82 := f26
decl f19 :: S11
#50 := f19
#83 := (f18 f19 f26)
#85 := (f17 #83 f27)
#81 := 4::Int
#12 := 5::Int
#88 := (f7 5::Int 4::Int #85)
decl f11 :: (-> S2 S5 S5)
#80 := 3::Int
#86 := (f7 3::Int 4::Int #85)
decl f4 :: S2
#8 := f4
#87 := (f11 f4 #86)
#89 := (= #87 #88)
decl f3 :: (-> S2 Int Int)
#477 := (f3 f4 3::Int)
#478 := (f7 #477 4::Int #85)
#547 := (= #478 #88)
#545 := (= #88 #478)
#539 := (= 5::Int #477)
#537 := (= #477 5::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 5::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#166 := (~ #14 #14)
#164 := (~ #13 #13)
#165 := [refl]: #164
#167 := [nnf-pos #165]: #166
#110 := [asserted]: #14
#168 := [mp~ #110 #167]: #14
#540 := (not #14)
#541 := (or #540 #537)
#542 := [quant-inst #80]: #541
#538 := [unit-resolution #542 #168]: #537
#543 := [symm #538]: #539
#546 := [monotonicity #543]: #545
#548 := [symm #546]: #547
#479 := (= #87 #478)
#18 := (:var 0 S3)
#17 := (:var 1 Int)
#16 := (:var 2 Int)
#31 := (:var 3 S2)
#33 := (f3 #31 #16)
#34 := (f7 #33 #17 #18)
#296 := (pattern #34)
#19 := (f7 #16 #17 #18)
#32 := (f11 #31 #19)
#295 := (pattern #32)
#35 := (= #32 #34)
#297 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #295 #296) #35)
#36 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #35)
#300 := (iff #36 #297)
#298 := (iff #35 #35)
#299 := [refl]: #298
#301 := [quant-intro #299]: #300
#186 := (~ #36 #36)
#184 := (~ #35 #35)
#185 := [refl]: #184
#187 := [nnf-pos #185]: #186
#134 := [asserted]: #36
#188 := [mp~ #134 #187]: #36
#302 := [mp #188 #301]: #297
#482 := (not #297)
#483 := (or #482 #479)
#484 := [quant-inst #8 #80 #81 #85]: #483
#544 := [unit-resolution #484 #302]: #479
#549 := [trans #544 #548]: #89
#90 := (not #89)
#162 := [asserted]: #90
[unit-resolution #162 #549]: false
unsat
2bf1b0efe9c627655a01fe096027d6ea1d8d0de9 81 0
#2 := false
decl f7 :: (-> Int Int S3 S5)
decl f17 :: (-> S10 S8 S3)
decl f27 :: S8
#84 := f27
decl f18 :: (-> S11 S1 S10)
decl f26 :: S1
#82 := f26
decl f19 :: S11
#50 := f19
#83 := (f18 f19 f26)
#85 := (f17 #83 f27)
#12 := 6::Int
#80 := 3::Int
#88 := (f7 3::Int 6::Int #85)
decl f12 :: (-> S2 S5 S5)
#81 := 4::Int
#86 := (f7 3::Int 4::Int #85)
decl f4 :: S2
#8 := f4
#87 := (f12 f4 #86)
#89 := (= #87 #88)
decl f3 :: (-> S2 Int Int)
#477 := (f3 f4 4::Int)
#478 := (f7 3::Int #477 #85)
#547 := (= #478 #88)
#545 := (= #88 #478)
#539 := (= 6::Int #477)
#535 := (= #477 6::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 6::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#166 := (~ #14 #14)
#164 := (~ #13 #13)
#165 := [refl]: #164
#167 := [nnf-pos #165]: #166
#110 := [asserted]: #14
#168 := [mp~ #110 #167]: #14
#540 := (not #14)
#541 := (or #540 #535)
#542 := [quant-inst #81]: #541
#536 := [unit-resolution #542 #168]: #535
#543 := [symm #536]: #539
#546 := [monotonicity #543]: #545
#548 := [symm #546]: #547
#479 := (= #87 #478)
#18 := (:var 0 S3)
#17 := (:var 1 Int)
#31 := (:var 3 S2)
#38 := (f3 #31 #17)
#16 := (:var 2 Int)
#39 := (f7 #16 #38 #18)
#304 := (pattern #39)
#19 := (f7 #16 #17 #18)
#37 := (f12 #31 #19)
#303 := (pattern #37)
#40 := (= #37 #39)
#305 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) (:pat #303 #304) #40)
#41 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S3)) #40)
#308 := (iff #41 #305)
#306 := (iff #40 #40)
#307 := [refl]: #306
#309 := [quant-intro #307]: #308
#191 := (~ #41 #41)
#189 := (~ #40 #40)
#190 := [refl]: #189
#192 := [nnf-pos #190]: #191
#135 := [asserted]: #41
#193 := [mp~ #135 #192]: #41
#310 := [mp #193 #309]: #305
#482 := (not #305)
#483 := (or #482 #479)
#484 := [quant-inst #8 #80 #81 #85]: #483
#544 := [unit-resolution #484 #310]: #479
#549 := [trans #544 #548]: #89
#90 := (not #89)
#162 := [asserted]: #90
[unit-resolution #162 #549]: false
unsat
f963522612a81bf3ec5143b6f63e213abb03c7fe 427 0
#2 := false
decl f25 :: (-> S3 S6 S6)
decl f15 :: (-> S2 S6 S6)
decl f14 :: (-> S2 S6 S6)
decl f28 :: S6
#93 := f28
decl f5 :: S2
#15 := f5
#99 := (f14 f5 f28)
decl f4 :: S2
#8 := f4
#100 := (f15 f4 #99)
decl f7 :: S3
#21 := f7
#101 := (f25 f7 #100)
#193 := (= f28 #101)
decl f10 :: (-> Int Int S4 S6)
decl f20 :: (-> S11 S9 S4)
decl f23 :: (-> S13 S6 S9)
decl f29 :: S9
#95 := f29
decl f21 :: (-> S12 S1 S11)
decl f1 :: S1
#4 := f1
decl f22 :: S12
#63 := f22
#94 := (f21 f22 f1)
#96 := (f20 #94 f29)
#12 := 4::Int
#18 := 3::Int
#97 := (f10 3::Int 4::Int #96)
decl f24 :: S13
#74 := f24
#447 := (f23 f24 #97)
decl f18 :: (-> S10 S6 S1)
decl f19 :: S10
#61 := f19
#425 := (f18 f19 #97)
#487 := (f21 f22 #425)
#488 := (f20 #487 #447)
decl f3 :: (-> S2 Int Int)
#544 := (f3 f4 4::Int)
#564 := (f10 3::Int #544 #488)
#639 := (f25 f7 #564)
#808 := (= #639 #101)
#801 := (= #101 #639)
#799 := (= #100 #564)
decl f12 :: (-> S7 S6 S4)
decl f13 :: S7
#40 := f13
#449 := (f12 f13 #97)
#407 := (f3 f5 3::Int)
#545 := (f10 #407 #544 #449)
#795 := (= #545 #564)
#793 := (= #564 #545)
#770 := (= #488 #449)
#450 := (= #96 #449)
#31 := (:var 0 S4)
#30 := (:var 1 Int)
#29 := (:var 2 Int)
#32 := (f10 #29 #30 #31)
#335 := (pattern #32)
#41 := (f12 f13 #32)
#157 := (= #31 #41)
#348 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) (:pat #335) #157)
#161 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) #157)
#351 := (iff #161 #348)
#349 := (iff #157 #157)
#350 := [refl]: #349
#352 := [quant-intro #350]: #351
#240 := (~ #161 #161)
#238 := (~ #157 #157)
#239 := [refl]: #238
#241 := [nnf-pos #239]: #240
#42 := (= #41 #31)
#43 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) #42)
#162 := (iff #43 #161)
#159 := (iff #42 #157)
#160 := [rewrite]: #159
#163 := [quant-intro #160]: #162
#156 := [asserted]: #43
#166 := [mp #156 #163]: #161
#242 := [mp~ #166 #241]: #161
#353 := [mp #242 #352]: #348
#456 := (not #348)
#457 := (or #456 #450)
#458 := [quant-inst #18 #12 #96]: #457
#762 := [unit-resolution #458 #353]: #450
#768 := (= #488 #96)
#748 := (= #447 f29)
#448 := (= f29 #447)
#66 := (:var 0 S9)
#64 := (:var 1 S1)
#65 := (f21 f22 #64)
#67 := (f20 #65 #66)
#62 := (:var 3 Int)
#68 := (f10 #62 #29 #67)
#378 := (pattern #68)
#75 := (f23 f24 #68)
#182 := (= #66 #75)
#385 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) (:pat #378) #182)
#186 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #182)
#388 := (iff #186 #385)
#386 := (iff #182 #182)
#387 := [refl]: #386
#389 := [quant-intro #387]: #388
#265 := (~ #186 #186)
#263 := (~ #182 #182)
#264 := [refl]: #263
#266 := [nnf-pos #264]: #265
#76 := (= #75 #66)
#77 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #76)
#187 := (iff #77 #186)
#184 := (iff #76 #182)
#185 := [rewrite]: #184
#188 := [quant-intro #185]: #187
#181 := [asserted]: #77
#191 := [mp #181 #188]: #186
#267 := [mp~ #191 #266]: #186
#390 := [mp #267 #389]: #385
#451 := (not #385)
#452 := (or #451 #448)
#453 := [quant-inst #18 #12 #4 #95]: #452
#747 := [unit-resolution #453 #390]: #448
#752 := [symm #747]: #748
#766 := (= #487 #94)
#764 := (= #425 f1)
#426 := (= f1 #425)
#172 := (= f1 #64)
#69 := (f18 f19 #68)
#169 := (= f1 #69)
#175 := (iff #169 #172)
#379 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) (:pat #378) #175)
#178 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #175)
#382 := (iff #178 #379)
#380 := (iff #175 #175)
#381 := [refl]: #380
#383 := [quant-intro #381]: #382
#260 := (~ #178 #178)
#258 := (~ #175 #175)
#259 := [refl]: #258
#261 := [nnf-pos #259]: #260
#71 := (= #64 f1)
#70 := (= #69 f1)
#72 := (iff #70 #71)
#73 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #72)
#179 := (iff #73 #178)
#176 := (iff #72 #175)
#173 := (iff #71 #172)
#174 := [rewrite]: #173
#170 := (iff #70 #169)
#171 := [rewrite]: #170
#177 := [monotonicity #171 #174]: #176
#180 := [quant-intro #177]: #179
#168 := [asserted]: #73
#183 := [mp #168 #180]: #178
#262 := [mp~ #183 #261]: #178
#384 := [mp #262 #383]: #379
#437 := (not #379)
#438 := (or #437 #426)
#424 := (= f1 f1)
#427 := (iff #426 #424)
#439 := (or #437 #427)
#441 := (iff #439 #438)
#443 := (iff #438 #438)
#444 := [rewrite]: #443
#435 := (iff #427 #426)
#1 := true
#430 := (iff #426 true)
#433 := (iff #430 #426)
#434 := [rewrite]: #433
#431 := (iff #427 #430)
#428 := (iff #424 true)
#429 := [rewrite]: #428
#432 := [monotonicity #429]: #431
#436 := [trans #432 #434]: #435
#442 := [monotonicity #436]: #441
#445 := [trans #442 #444]: #441
#440 := [quant-inst #18 #12 #4 #95]: #439
#446 := [mp #440 #445]: #438
#763 := [unit-resolution #446 #384]: #426
#765 := [symm #763]: #764
#767 := [monotonicity #765]: #766
#769 := [monotonicity #767 #752]: #768
#771 := [trans #769 #762]: #770
#773 := (= 3::Int #407)
#543 := (= #407 3::Int)
#9 := (:var 0 Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#220 := (~ #20 #20)
#218 := (~ #19 #19)
#219 := [refl]: #218
#221 := [nnf-pos #219]: #220
#125 := [asserted]: #20
#222 := [mp~ #125 #221]: #20
#546 := (not #20)
#547 := (or #546 #543)
#548 := [quant-inst #18]: #547
#772 := [unit-resolution #548 #222]: #543
#774 := [symm #772]: #773
#794 := [monotonicity #774 #771]: #793
#796 := [symm #794]: #795
#797 := (= #100 #545)
#518 := (f10 #407 4::Int #449)
#549 := (f15 f4 #518)
#550 := (= #549 #545)
#551 := (= #545 #549)
#44 := (:var 3 S2)
#51 := (f3 #44 #30)
#52 := (f10 #29 #51 #31)
#363 := (pattern #52)
#50 := (f15 #44 #32)
#362 := (pattern #50)
#53 := (= #50 #52)
#364 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #362 #363) #53)
#54 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #53)
#367 := (iff #54 #364)
#365 := (iff #53 #53)
#366 := [refl]: #365
#368 := [quant-intro #366]: #367
#250 := (~ #54 #54)
#248 := (~ #53 #53)
#249 := [refl]: #248
#251 := [nnf-pos #249]: #250
#165 := [asserted]: #54
#252 := [mp~ #165 #251]: #54
#369 := [mp #252 #368]: #364
#554 := (not #364)
#555 := (or #554 #551)
#556 := (or #554 #550)
#558 := (iff #556 #555)
#560 := (iff #555 #555)
#561 := [rewrite]: #560
#552 := (iff #550 #551)
#553 := [rewrite]: #552
#559 := [monotonicity #553]: #558
#562 := [trans #559 #561]: #558
#557 := [quant-inst #8 #407 #12 #449]: #556
#563 := [mp #557 #562]: #555
#775 := [unit-resolution #563 #369]: #551
#792 := [symm #775]: #550
#790 := (= #100 #549)
#788 := (= #99 #518)
#408 := (f10 #407 4::Int #96)
#784 := (= #408 #518)
#781 := (= #518 #408)
#777 := (= #449 #96)
#778 := [symm #762]: #777
#782 := [monotonicity #778]: #781
#785 := [symm #782]: #784
#786 := (= #99 #408)
#409 := (f14 f5 #97)
#410 := (= #409 #408)
#411 := (= #408 #409)
#46 := (f3 #44 #29)
#47 := (f10 #46 #30 #31)
#355 := (pattern #47)
#45 := (f14 #44 #32)
#354 := (pattern #45)
#48 := (= #45 #47)
#356 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #354 #355) #48)
#49 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #48)
#359 := (iff #49 #356)
#357 := (iff #48 #48)
#358 := [refl]: #357
#360 := [quant-intro #358]: #359
#245 := (~ #49 #49)
#243 := (~ #48 #48)
#244 := [refl]: #243
#246 := [nnf-pos #244]: #245
#164 := [asserted]: #49
#247 := [mp~ #164 #246]: #49
#361 := [mp #247 #360]: #356
#414 := (not #356)
#415 := (or #414 #411)
#416 := (or #414 #410)
#418 := (iff #416 #415)
#420 := (iff #415 #415)
#421 := [rewrite]: #420
#412 := (iff #410 #411)
#413 := [rewrite]: #412
#419 := [monotonicity #413]: #418
#422 := [trans #419 #421]: #418
#417 := [quant-inst #15 #18 #12 #96]: #416
#423 := [mp #417 #422]: #415
#776 := [unit-resolution #423 #361]: #411
#783 := [symm #776]: #410
#779 := (= #99 #409)
#98 := (= f28 #97)
#199 := (not #98)
#200 := (or #199 #193)
#205 := (not #200)
#102 := (= #101 f28)
#103 := (implies #98 #102)
#104 := (not #103)
#206 := (iff #104 #205)
#203 := (iff #103 #200)
#196 := (implies #98 #193)
#201 := (iff #196 #200)
#202 := [rewrite]: #201
#197 := (iff #103 #196)
#194 := (iff #102 #193)
#195 := [rewrite]: #194
#198 := [monotonicity #195]: #197
#204 := [trans #198 #202]: #203
#207 := [monotonicity #204]: #206
#192 := [asserted]: #104
#210 := [mp #192 #207]: #205
#208 := [not-or-elim #210]: #98
#780 := [monotonicity #208]: #779
#787 := [trans #780 #783]: #786
#789 := [trans #787 #785]: #788
#791 := [monotonicity #789]: #790
#798 := [trans #791 #792]: #797
#800 := [trans #798 #796]: #799
#802 := [monotonicity #800]: #801
#809 := [symm #802]: #808
#812 := (= f28 #639)
decl f6 :: (-> S3 S1 S1)
#630 := (f6 f7 #425)
#633 := (f21 f22 #630)
#637 := (f20 #633 #447)
#638 := (f10 3::Int #544 #637)
#641 := (= #638 #639)
#78 := (:var 4 S3)
#80 := (f6 #78 #64)
#81 := (f21 f22 #80)
#82 := (f20 #81 #66)
#83 := (f10 #62 #29 #82)
#392 := (pattern #83)
#79 := (f25 #78 #68)
#391 := (pattern #79)
#84 := (= #79 #83)
#393 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #391 #392) #84)
#85 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #84)
#396 := (iff #85 #393)
#394 := (iff #84 #84)
#395 := [refl]: #394
#397 := [quant-intro #395]: #396
#270 := (~ #85 #85)
#268 := (~ #84 #84)
#269 := [refl]: #268
#271 := [nnf-pos #269]: #270
#189 := [asserted]: #85
#272 := [mp~ #189 #271]: #85
#398 := [mp #272 #397]: #393
#644 := (not #393)
#645 := (or #644 #641)
#640 := (= #639 #638)
#646 := (or #644 #640)
#648 := (iff #646 #645)
#650 := (iff #645 #645)
#651 := [rewrite]: #650
#642 := (iff #640 #641)
#643 := [rewrite]: #642
#649 := [monotonicity #643]: #648
#652 := [trans #649 #651]: #648
#647 := [quant-inst #21 #18 #544 #425 #447]: #646
#653 := [mp #647 #652]: #645
#761 := [unit-resolution #653 #398]: #641
#810 := (= f28 #638)
#806 := (= #97 #638)
#804 := (= #638 #97)
#758 := (= #637 #96)
#756 := (= #633 #94)
#754 := (= #630 f1)
#654 := (= f1 #630)
#22 := (:var 0 S1)
#23 := (f6 f7 #22)
#24 := (pattern #23)
#127 := (= f1 #23)
#137 := (forall (vars (?v0 S1)) (:pat #24) #127)
#225 := (~ #137 #137)
#223 := (~ #127 #127)
#224 := [refl]: #223
#226 := [nnf-pos #224]: #225
#25 := (= #23 f1)
#26 := (iff #25 true)
#27 := (forall (vars (?v0 S1)) (:pat #24) #26)
#138 := (iff #27 #137)
#135 := (iff #26 #127)
#130 := (iff #127 true)
#133 := (iff #130 #127)
#134 := [rewrite]: #133
#131 := (iff #26 #130)
#128 := (iff #25 #127)
#129 := [rewrite]: #128
#132 := [monotonicity #129]: #131
#136 := [trans #132 #134]: #135
#139 := [quant-intro #136]: #138
#126 := [asserted]: #27
#142 := [mp #126 #139]: #137
#227 := [mp~ #142 #226]: #137
#749 := (not #137)
#750 := (or #749 #654)
#751 := [quant-inst #425]: #750
#753 := [unit-resolution #751 #227]: #654
#755 := [symm #753]: #754
#757 := [monotonicity #755]: #756
#759 := [monotonicity #757 #752]: #758
#629 := (= #544 4::Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#215 := (~ #14 #14)
#213 := (~ #13 #13)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#124 := [asserted]: #14
#217 := [mp~ #124 #216]: #14
#634 := (not #14)
#635 := (or #634 #629)
#636 := [quant-inst #12]: #635
#760 := [unit-resolution #636 #217]: #629
#805 := [monotonicity #760 #759]: #804
#807 := [symm #805]: #806
#811 := [trans #208 #807]: #810
#813 := [trans #811 #761]: #812
#814 := [trans #813 #809]: #193
#209 := (not #193)
#211 := [not-or-elim #210]: #209
[unit-resolution #211 #814]: false
unsat
1fb0b37ea5eb83d1ac7f04c0c34b20399e8cbb8e 397 0
#2 := false
decl f14 :: (-> S2 S6 S6)
decl f25 :: (-> S3 S6 S6)
decl f15 :: (-> S2 S6 S6)
decl f28 :: S6
#93 := f28
decl f4 :: S2
#8 := f4
#99 := (f15 f4 f28)
decl f7 :: S3
#21 := f7
#100 := (f25 f7 #99)
decl f5 :: S2
#15 := f5
#101 := (f14 f5 #100)
#193 := (= f28 #101)
decl f10 :: (-> Int Int S4 S6)
decl f20 :: (-> S11 S9 S4)
decl f23 :: (-> S13 S6 S9)
decl f29 :: S9
#95 := f29
decl f21 :: (-> S12 S1 S11)
decl f1 :: S1
#4 := f1
decl f22 :: S12
#63 := f22
#94 := (f21 f22 f1)
#96 := (f20 #94 f29)
#12 := 4::Int
#18 := 3::Int
#97 := (f10 3::Int 4::Int #96)
decl f24 :: S13
#74 := f24
#447 := (f23 f24 #97)
decl f6 :: (-> S3 S1 S1)
decl f18 :: (-> S10 S6 S1)
decl f19 :: S10
#61 := f19
#425 := (f18 f19 #97)
#542 := (f6 f7 #425)
#545 := (f21 f22 #542)
#549 := (f20 #545 #447)
#567 := (f10 3::Int 4::Int #549)
#649 := (f14 f5 #567)
#809 := (= #649 #101)
#802 := (= #101 #649)
#800 := (= #100 #567)
decl f3 :: (-> S2 Int Int)
#407 := (f3 f4 4::Int)
#550 := (f10 3::Int #407 #549)
#796 := (= #550 #567)
#794 := (= #567 #550)
#763 := (= 4::Int #407)
#541 := (= #407 4::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#215 := (~ #14 #14)
#213 := (~ #13 #13)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#124 := [asserted]: #14
#217 := [mp~ #124 #216]: #14
#546 := (not #14)
#547 := (or #546 #541)
#548 := [quant-inst #12]: #547
#762 := [unit-resolution #548 #217]: #541
#764 := [symm #762]: #763
#795 := [monotonicity #764]: #794
#797 := [symm #795]: #796
#798 := (= #100 #550)
#487 := (f21 f22 #425)
#488 := (f20 #487 #447)
#489 := (f10 3::Int #407 #488)
#551 := (f25 f7 #489)
#552 := (= #551 #550)
#553 := (= #550 #551)
#66 := (:var 0 S9)
#64 := (:var 1 S1)
#78 := (:var 4 S3)
#80 := (f6 #78 #64)
#81 := (f21 f22 #80)
#82 := (f20 #81 #66)
#29 := (:var 2 Int)
#62 := (:var 3 Int)
#83 := (f10 #62 #29 #82)
#392 := (pattern #83)
#65 := (f21 f22 #64)
#67 := (f20 #65 #66)
#68 := (f10 #62 #29 #67)
#79 := (f25 #78 #68)
#391 := (pattern #79)
#84 := (= #79 #83)
#393 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #391 #392) #84)
#85 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #84)
#396 := (iff #85 #393)
#394 := (iff #84 #84)
#395 := [refl]: #394
#397 := [quant-intro #395]: #396
#270 := (~ #85 #85)
#268 := (~ #84 #84)
#269 := [refl]: #268
#271 := [nnf-pos #269]: #270
#189 := [asserted]: #85
#272 := [mp~ #189 #271]: #85
#398 := [mp #272 #397]: #393
#556 := (not #393)
#557 := (or #556 #553)
#558 := (or #556 #552)
#560 := (iff #558 #557)
#562 := (iff #557 #557)
#563 := [rewrite]: #562
#554 := (iff #552 #553)
#555 := [rewrite]: #554
#561 := [monotonicity #555]: #560
#564 := [trans #561 #563]: #560
#559 := [quant-inst #21 #18 #407 #425 #447]: #558
#565 := [mp #559 #564]: #557
#765 := [unit-resolution #565 #398]: #553
#793 := [symm #765]: #552
#791 := (= #100 #551)
#789 := (= #99 #489)
#783 := (= #97 #489)
#776 := (= #489 #97)
#772 := (= #488 #96)
#748 := (= #447 f29)
#448 := (= f29 #447)
#378 := (pattern #68)
#75 := (f23 f24 #68)
#182 := (= #66 #75)
#385 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) (:pat #378) #182)
#186 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #182)
#388 := (iff #186 #385)
#386 := (iff #182 #182)
#387 := [refl]: #386
#389 := [quant-intro #387]: #388
#265 := (~ #186 #186)
#263 := (~ #182 #182)
#264 := [refl]: #263
#266 := [nnf-pos #264]: #265
#76 := (= #75 #66)
#77 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #76)
#187 := (iff #77 #186)
#184 := (iff #76 #182)
#185 := [rewrite]: #184
#188 := [quant-intro #185]: #187
#181 := [asserted]: #77
#191 := [mp #181 #188]: #186
#267 := [mp~ #191 #266]: #186
#390 := [mp #267 #389]: #385
#451 := (not #385)
#452 := (or #451 #448)
#453 := [quant-inst #18 #12 #4 #95]: #452
#747 := [unit-resolution #453 #390]: #448
#752 := [symm #747]: #748
#770 := (= #487 #94)
#768 := (= #425 f1)
#426 := (= f1 #425)
#172 := (= f1 #64)
#69 := (f18 f19 #68)
#169 := (= f1 #69)
#175 := (iff #169 #172)
#379 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) (:pat #378) #175)
#178 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #175)
#382 := (iff #178 #379)
#380 := (iff #175 #175)
#381 := [refl]: #380
#383 := [quant-intro #381]: #382
#260 := (~ #178 #178)
#258 := (~ #175 #175)
#259 := [refl]: #258
#261 := [nnf-pos #259]: #260
#71 := (= #64 f1)
#70 := (= #69 f1)
#72 := (iff #70 #71)
#73 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #72)
#179 := (iff #73 #178)
#176 := (iff #72 #175)
#173 := (iff #71 #172)
#174 := [rewrite]: #173
#170 := (iff #70 #169)
#171 := [rewrite]: #170
#177 := [monotonicity #171 #174]: #176
#180 := [quant-intro #177]: #179
#168 := [asserted]: #73
#183 := [mp #168 #180]: #178
#262 := [mp~ #183 #261]: #178
#384 := [mp #262 #383]: #379
#437 := (not #379)
#438 := (or #437 #426)
#424 := (= f1 f1)
#427 := (iff #426 #424)
#439 := (or #437 #427)
#441 := (iff #439 #438)
#443 := (iff #438 #438)
#444 := [rewrite]: #443
#435 := (iff #427 #426)
#1 := true
#430 := (iff #426 true)
#433 := (iff #430 #426)
#434 := [rewrite]: #433
#431 := (iff #427 #430)
#428 := (iff #424 true)
#429 := [rewrite]: #428
#432 := [monotonicity #429]: #431
#436 := [trans #432 #434]: #435
#442 := [monotonicity #436]: #441
#445 := [trans #442 #444]: #441
#440 := [quant-inst #18 #12 #4 #95]: #439
#446 := [mp #440 #445]: #438
#767 := [unit-resolution #446 #384]: #426
#769 := [symm #767]: #768
#771 := [monotonicity #769]: #770
#773 := [monotonicity #771 #752]: #772
#777 := [monotonicity #762 #773]: #776
#784 := [symm #777]: #783
#787 := (= #99 #97)
#408 := (f10 3::Int #407 #96)
#781 := (= #408 #97)
#778 := (= #97 #408)
#779 := [monotonicity #764]: #778
#782 := [symm #779]: #781
#785 := (= #99 #408)
#409 := (f15 f4 #97)
#410 := (= #409 #408)
#411 := (= #408 #409)
#31 := (:var 0 S4)
#30 := (:var 1 Int)
#44 := (:var 3 S2)
#51 := (f3 #44 #30)
#52 := (f10 #29 #51 #31)
#363 := (pattern #52)
#32 := (f10 #29 #30 #31)
#50 := (f15 #44 #32)
#362 := (pattern #50)
#53 := (= #50 #52)
#364 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #362 #363) #53)
#54 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #53)
#367 := (iff #54 #364)
#365 := (iff #53 #53)
#366 := [refl]: #365
#368 := [quant-intro #366]: #367
#250 := (~ #54 #54)
#248 := (~ #53 #53)
#249 := [refl]: #248
#251 := [nnf-pos #249]: #250
#165 := [asserted]: #54
#252 := [mp~ #165 #251]: #54
#369 := [mp #252 #368]: #364
#414 := (not #364)
#415 := (or #414 #411)
#416 := (or #414 #410)
#418 := (iff #416 #415)
#420 := (iff #415 #415)
#421 := [rewrite]: #420
#412 := (iff #410 #411)
#413 := [rewrite]: #412
#419 := [monotonicity #413]: #418
#422 := [trans #419 #421]: #418
#417 := [quant-inst #8 #18 #12 #96]: #416
#423 := [mp #417 #422]: #415
#766 := [unit-resolution #423 #369]: #411
#780 := [symm #766]: #410
#774 := (= #99 #409)
#98 := (= f28 #97)
#199 := (not #98)
#200 := (or #199 #193)
#205 := (not #200)
#102 := (= #101 f28)
#103 := (implies #98 #102)
#104 := (not #103)
#206 := (iff #104 #205)
#203 := (iff #103 #200)
#196 := (implies #98 #193)
#201 := (iff #196 #200)
#202 := [rewrite]: #201
#197 := (iff #103 #196)
#194 := (iff #102 #193)
#195 := [rewrite]: #194
#198 := [monotonicity #195]: #197
#204 := [trans #198 #202]: #203
#207 := [monotonicity #204]: #206
#192 := [asserted]: #104
#210 := [mp #192 #207]: #205
#208 := [not-or-elim #210]: #98
#775 := [monotonicity #208]: #774
#786 := [trans #775 #780]: #785
#788 := [trans #786 #782]: #787
#790 := [trans #788 #784]: #789
#792 := [monotonicity #790]: #791
#799 := [trans #792 #793]: #798
#801 := [trans #799 #797]: #800
#803 := [monotonicity #801]: #802
#810 := [symm #803]: #809
#813 := (= f28 #649)
#644 := (f3 f5 3::Int)
#645 := (f10 #644 4::Int #549)
#651 := (= #645 #649)
#46 := (f3 #44 #29)
#47 := (f10 #46 #30 #31)
#355 := (pattern #47)
#45 := (f14 #44 #32)
#354 := (pattern #45)
#48 := (= #45 #47)
#356 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #354 #355) #48)
#49 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #48)
#359 := (iff #49 #356)
#357 := (iff #48 #48)
#358 := [refl]: #357
#360 := [quant-intro #358]: #359
#245 := (~ #49 #49)
#243 := (~ #48 #48)
#244 := [refl]: #243
#246 := [nnf-pos #244]: #245
#164 := [asserted]: #49
#247 := [mp~ #164 #246]: #49
#361 := [mp #247 #360]: #356
#654 := (not #356)
#655 := (or #654 #651)
#650 := (= #649 #645)
#656 := (or #654 #650)
#658 := (iff #656 #655)
#660 := (iff #655 #655)
#661 := [rewrite]: #660
#652 := (iff #650 #651)
#653 := [rewrite]: #652
#659 := [monotonicity #653]: #658
#662 := [trans #659 #661]: #658
#657 := [quant-inst #15 #18 #12 #549]: #656
#663 := [mp #657 #662]: #655
#761 := [unit-resolution #663 #361]: #651
#811 := (= f28 #645)
#807 := (= #97 #645)
#805 := (= #645 #97)
#758 := (= #549 #96)
#756 := (= #545 #94)
#754 := (= #542 f1)
#566 := (= f1 #542)
#22 := (:var 0 S1)
#23 := (f6 f7 #22)
#24 := (pattern #23)
#127 := (= f1 #23)
#137 := (forall (vars (?v0 S1)) (:pat #24) #127)
#225 := (~ #137 #137)
#223 := (~ #127 #127)
#224 := [refl]: #223
#226 := [nnf-pos #224]: #225
#25 := (= #23 f1)
#26 := (iff #25 true)
#27 := (forall (vars (?v0 S1)) (:pat #24) #26)
#138 := (iff #27 #137)
#135 := (iff #26 #127)
#130 := (iff #127 true)
#133 := (iff #130 #127)
#134 := [rewrite]: #133
#131 := (iff #26 #130)
#128 := (iff #25 #127)
#129 := [rewrite]: #128
#132 := [monotonicity #129]: #131
#136 := [trans #132 #134]: #135
#139 := [quant-intro #136]: #138
#126 := [asserted]: #27
#142 := [mp #126 #139]: #137
#227 := [mp~ #142 #226]: #137
#646 := (not #137)
#647 := (or #646 #566)
#648 := [quant-inst #425]: #647
#753 := [unit-resolution #648 #227]: #566
#755 := [symm #753]: #754
#757 := [monotonicity #755]: #756
#759 := [monotonicity #757 #752]: #758
#746 := (= #644 3::Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#220 := (~ #20 #20)
#218 := (~ #19 #19)
#219 := [refl]: #218
#221 := [nnf-pos #219]: #220
#125 := [asserted]: #20
#222 := [mp~ #125 #221]: #20
#749 := (not #20)
#750 := (or #749 #746)
#751 := [quant-inst #18]: #750
#760 := [unit-resolution #751 #222]: #746
#806 := [monotonicity #760 #759]: #805
#808 := [symm #806]: #807
#812 := [trans #208 #808]: #811
#814 := [trans #812 #761]: #813
#815 := [trans #814 #810]: #193
#209 := (not #193)
#211 := [not-or-elim #210]: #209
[unit-resolution #211 #815]: false
unsat
b404f46cd1ab54bbfdd274ebb50cd52e1a7816c8 386 0
#2 := false
decl f15 :: (-> S2 S6 S6)
decl f14 :: (-> S2 S6 S6)
decl f25 :: (-> S3 S6 S6)
decl f28 :: S6
#93 := f28
decl f7 :: S3
#21 := f7
#99 := (f25 f7 f28)
decl f5 :: S2
#15 := f5
#100 := (f14 f5 #99)
decl f4 :: S2
#8 := f4
#101 := (f15 f4 #100)
#193 := (= f28 #101)
decl f10 :: (-> Int Int S4 S6)
decl f12 :: (-> S7 S6 S4)
decl f20 :: (-> S11 S9 S4)
decl f29 :: S9
#95 := f29
decl f21 :: (-> S12 S1 S11)
decl f6 :: (-> S3 S1 S1)
decl f1 :: S1
#4 := f1
#407 := (f6 f7 f1)
decl f22 :: S12
#63 := f22
#408 := (f21 f22 #407)
#409 := (f20 #408 f29)
#12 := 4::Int
#18 := 3::Int
#410 := (f10 3::Int 4::Int #409)
decl f13 :: S7
#40 := f13
#520 := (f12 f13 #410)
decl f3 :: (-> S2 Int Int)
#556 := (f3 f5 3::Int)
#624 := (f10 #556 4::Int #520)
#655 := (f15 f4 #624)
#803 := (= #655 #101)
#796 := (= #101 #655)
#778 := (= #100 #624)
#557 := (f10 #556 4::Int #409)
#774 := (= #557 #624)
#772 := (= #624 #557)
#754 := (= #520 #409)
#521 := (= #409 #520)
#31 := (:var 0 S4)
#30 := (:var 1 Int)
#29 := (:var 2 Int)
#32 := (f10 #29 #30 #31)
#335 := (pattern #32)
#41 := (f12 f13 #32)
#157 := (= #31 #41)
#348 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) (:pat #335) #157)
#161 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) #157)
#351 := (iff #161 #348)
#349 := (iff #157 #157)
#350 := [refl]: #349
#352 := [quant-intro #350]: #351
#240 := (~ #161 #161)
#238 := (~ #157 #157)
#239 := [refl]: #238
#241 := [nnf-pos #239]: #240
#42 := (= #41 #31)
#43 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S4)) #42)
#162 := (iff #43 #161)
#159 := (iff #42 #157)
#160 := [rewrite]: #159
#163 := [quant-intro #160]: #162
#156 := [asserted]: #43
#166 := [mp #156 #163]: #161
#242 := [mp~ #166 #241]: #161
#353 := [mp #242 #352]: #348
#458 := (not #348)
#526 := (or #458 #521)
#527 := [quant-inst #18 #12 #409]: #526
#751 := [unit-resolution #527 #353]: #521
#758 := [symm #751]: #754
#773 := [monotonicity #758]: #772
#775 := [symm #773]: #774
#776 := (= #100 #557)
#561 := (f14 f5 #410)
#562 := (= #561 #557)
#563 := (= #557 #561)
#44 := (:var 3 S2)
#46 := (f3 #44 #29)
#47 := (f10 #46 #30 #31)
#355 := (pattern #47)
#45 := (f14 #44 #32)
#354 := (pattern #45)
#48 := (= #45 #47)
#356 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #354 #355) #48)
#49 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #48)
#359 := (iff #49 #356)
#357 := (iff #48 #48)
#358 := [refl]: #357
#360 := [quant-intro #358]: #359
#245 := (~ #49 #49)
#243 := (~ #48 #48)
#244 := [refl]: #243
#246 := [nnf-pos #244]: #245
#164 := [asserted]: #49
#247 := [mp~ #164 #246]: #49
#361 := [mp #247 #360]: #356
#566 := (not #356)
#567 := (or #566 #563)
#568 := (or #566 #562)
#570 := (iff #568 #567)
#572 := (iff #567 #567)
#573 := [rewrite]: #572
#564 := (iff #562 #563)
#565 := [rewrite]: #564
#571 := [monotonicity #565]: #570
#574 := [trans #571 #573]: #570
#569 := [quant-inst #15 #18 #12 #409]: #568
#575 := [mp #569 #574]: #567
#762 := [unit-resolution #575 #361]: #563
#771 := [symm #762]: #562
#769 := (= #100 #561)
#767 := (= #99 #410)
#94 := (f21 f22 f1)
#96 := (f20 #94 f29)
#97 := (f10 3::Int 4::Int #96)
#411 := (f25 f7 #97)
#412 := (= #411 #410)
#413 := (= #410 #411)
#66 := (:var 0 S9)
#64 := (:var 1 S1)
#78 := (:var 4 S3)
#80 := (f6 #78 #64)
#81 := (f21 f22 #80)
#82 := (f20 #81 #66)
#62 := (:var 3 Int)
#83 := (f10 #62 #29 #82)
#392 := (pattern #83)
#65 := (f21 f22 #64)
#67 := (f20 #65 #66)
#68 := (f10 #62 #29 #67)
#79 := (f25 #78 #68)
#391 := (pattern #79)
#84 := (= #79 #83)
#393 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) (:pat #391 #392) #84)
#85 := (forall (vars (?v0 S3) (?v1 Int) (?v2 Int) (?v3 S1) (?v4 S9)) #84)
#396 := (iff #85 #393)
#394 := (iff #84 #84)
#395 := [refl]: #394
#397 := [quant-intro #395]: #396
#270 := (~ #85 #85)
#268 := (~ #84 #84)
#269 := [refl]: #268
#271 := [nnf-pos #269]: #270
#189 := [asserted]: #85
#272 := [mp~ #189 #271]: #85
#398 := [mp #272 #397]: #393
#416 := (not #393)
#417 := (or #416 #413)
#418 := (or #416 #412)
#420 := (iff #418 #417)
#422 := (iff #417 #417)
#423 := [rewrite]: #422
#414 := (iff #412 #413)
#415 := [rewrite]: #414
#421 := [monotonicity #415]: #420
#424 := [trans #421 #423]: #420
#419 := [quant-inst #21 #18 #12 #4 #95]: #418
#425 := [mp #419 #424]: #417
#763 := [unit-resolution #425 #398]: #413
#766 := [symm #763]: #412
#764 := (= #99 #411)
#98 := (= f28 #97)
#199 := (not #98)
#200 := (or #199 #193)
#205 := (not #200)
#102 := (= #101 f28)
#103 := (implies #98 #102)
#104 := (not #103)
#206 := (iff #104 #205)
#203 := (iff #103 #200)
#196 := (implies #98 #193)
#201 := (iff #196 #200)
#202 := [rewrite]: #201
#197 := (iff #103 #196)
#194 := (iff #102 #193)
#195 := [rewrite]: #194
#198 := [monotonicity #195]: #197
#204 := [trans #198 #202]: #203
#207 := [monotonicity #204]: #206
#192 := [asserted]: #104
#210 := [mp #192 #207]: #205
#208 := [not-or-elim #210]: #98
#765 := [monotonicity #208]: #764
#768 := [trans #765 #766]: #767
#770 := [monotonicity #768]: #769
#777 := [trans #770 #771]: #776
#779 := [trans #777 #775]: #778
#797 := [monotonicity #779]: #796
#804 := [symm #797]: #803
#809 := (= f28 #655)
#650 := (f3 f4 4::Int)
#651 := (f10 #556 #650 #520)
#657 := (= #651 #655)
#51 := (f3 #44 #30)
#52 := (f10 #29 #51 #31)
#363 := (pattern #52)
#50 := (f15 #44 #32)
#362 := (pattern #50)
#53 := (= #50 #52)
#364 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) (:pat #362 #363) #53)
#54 := (forall (vars (?v0 S2) (?v1 Int) (?v2 Int) (?v3 S4)) #53)
#367 := (iff #54 #364)
#365 := (iff #53 #53)
#366 := [refl]: #365
#368 := [quant-intro #366]: #367
#250 := (~ #54 #54)
#248 := (~ #53 #53)
#249 := [refl]: #248
#251 := [nnf-pos #249]: #250
#165 := [asserted]: #54
#252 := [mp~ #165 #251]: #54
#369 := [mp #252 #368]: #364
#660 := (not #364)
#661 := (or #660 #657)
#656 := (= #655 #651)
#662 := (or #660 #656)
#664 := (iff #662 #661)
#666 := (iff #661 #661)
#667 := [rewrite]: #666
#658 := (iff #656 #657)
#659 := [rewrite]: #658
#665 := [monotonicity #659]: #664
#668 := [trans #665 #667]: #664
#663 := [quant-inst #8 #556 #12 #520]: #662
#669 := [mp #663 #668]: #661
#761 := [unit-resolution #669 #369]: #657
#807 := (= f28 #651)
#801 := (= #410 #651)
#799 := (= #651 #410)
#750 := (= #650 4::Int)
#9 := (:var 0 Int)
#10 := (f3 f4 #9)
#11 := (pattern #10)
#13 := (= #10 4::Int)
#14 := (forall (vars (?v0 Int)) (:pat #11) #13)
#215 := (~ #14 #14)
#213 := (~ #13 #13)
#214 := [refl]: #213
#216 := [nnf-pos #214]: #215
#124 := [asserted]: #14
#217 := [mp~ #124 #216]: #14
#755 := (not #14)
#756 := (or #755 #750)
#757 := [quant-inst #12]: #756
#759 := [unit-resolution #757 #217]: #750
#649 := (= #556 3::Int)
#16 := (f3 f5 #9)
#17 := (pattern #16)
#19 := (= #16 3::Int)
#20 := (forall (vars (?v0 Int)) (:pat #17) #19)
#220 := (~ #20 #20)
#218 := (~ #19 #19)
#219 := [refl]: #218
#221 := [nnf-pos #219]: #220
#125 := [asserted]: #20
#222 := [mp~ #125 #221]: #20
#652 := (not #20)
#653 := (or #652 #649)
#654 := [quant-inst #18]: #653
#760 := [unit-resolution #654 #222]: #649
#800 := [monotonicity #760 #759 #758]: #799
#802 := [symm #800]: #801
#805 := (= f28 #410)
#794 := (= #97 #410)
#792 := (= #96 #409)
#790 := (= #94 #408)
#788 := (= #408 #94)
#786 := (= #407 f1)
decl f18 :: (-> S10 S6 S1)
decl f19 :: S10
#61 := f19
#427 := (f18 f19 #97)
#554 := (f6 f7 #427)
#784 := (= #554 f1)
#555 := (= f1 #554)
#22 := (:var 0 S1)
#23 := (f6 f7 #22)
#24 := (pattern #23)
#127 := (= f1 #23)
#137 := (forall (vars (?v0 S1)) (:pat #24) #127)
#225 := (~ #137 #137)
#223 := (~ #127 #127)
#224 := [refl]: #223
#226 := [nnf-pos #224]: #225
#1 := true
#25 := (= #23 f1)
#26 := (iff #25 true)
#27 := (forall (vars (?v0 S1)) (:pat #24) #26)
#138 := (iff #27 #137)
#135 := (iff #26 #127)
#130 := (iff #127 true)
#133 := (iff #130 #127)
#134 := [rewrite]: #133
#131 := (iff #26 #130)
#128 := (iff #25 #127)
#129 := [rewrite]: #128
#132 := [monotonicity #129]: #131
#136 := [trans #132 #134]: #135
#139 := [quant-intro #136]: #138
#126 := [asserted]: #27
#142 := [mp #126 #139]: #137
#227 := [mp~ #142 #226]: #137
#558 := (not #137)
#559 := (or #558 #555)
#560 := [quant-inst #427]: #559
#780 := [unit-resolution #560 #227]: #555
#785 := [symm #780]: #784
#782 := (= #407 #554)
#428 := (= f1 #427)
#378 := (pattern #68)
#172 := (= f1 #64)
#69 := (f18 f19 #68)
#169 := (= f1 #69)
#175 := (iff #169 #172)
#379 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) (:pat #378) #175)
#178 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #175)
#382 := (iff #178 #379)
#380 := (iff #175 #175)
#381 := [refl]: #380
#383 := [quant-intro #381]: #382
#260 := (~ #178 #178)
#258 := (~ #175 #175)
#259 := [refl]: #258
#261 := [nnf-pos #259]: #260
#71 := (= #64 f1)
#70 := (= #69 f1)
#72 := (iff #70 #71)
#73 := (forall (vars (?v0 Int) (?v1 Int) (?v2 S1) (?v3 S9)) #72)
#179 := (iff #73 #178)
#176 := (iff #72 #175)
#173 := (iff #71 #172)
#174 := [rewrite]: #173
#170 := (iff #70 #169)
#171 := [rewrite]: #170
#177 := [monotonicity #171 #174]: #176
#180 := [quant-intro #177]: #179
#168 := [asserted]: #73
#183 := [mp #168 #180]: #178
#262 := [mp~ #183 #261]: #178
#384 := [mp #262 #383]: #379
#439 := (not #379)
#440 := (or #439 #428)
#426 := (= f1 f1)
#429 := (iff #428 #426)
#441 := (or #439 #429)
#443 := (iff #441 #440)
#445 := (iff #440 #440)
#446 := [rewrite]: #445
#437 := (iff #429 #428)
#432 := (iff #428 true)
#435 := (iff #432 #428)
#436 := [rewrite]: #435
#433 := (iff #429 #432)
#430 := (iff #426 true)
#431 := [rewrite]: #430
#434 := [monotonicity #431]: #433
#438 := [trans #434 #436]: #437
#444 := [monotonicity #438]: #443
#447 := [trans #444 #446]: #443
#442 := [quant-inst #18 #12 #4 #95]: #441
#448 := [mp #442 #447]: #440
#781 := [unit-resolution #448 #384]: #428
#783 := [monotonicity #781]: #782
#787 := [trans #783 #785]: #786
#789 := [monotonicity #787]: #788
#791 := [symm #789]: #790
#793 := [monotonicity #791]: #792
#795 := [monotonicity #793]: #794
#806 := [trans #208 #795]: #805
#808 := [trans #806 #802]: #807
#810 := [trans #808 #761]: #809
#811 := [trans #810 #804]: #193
#209 := (not #193)
#211 := [not-or-elim #210]: #209
[unit-resolution #211 #811]: false
unsat
26495cecb76c01018d433fd25b109461db4ecbc6 18 0
#2 := false
decl f3 :: S2
#8 := f3
#52 := (= f3 f3)
#53 := (not #52)
#159 := (iff #53 false)
#1 := true
#154 := (not true)
#157 := (iff #154 false)
#158 := [rewrite]: #157
#155 := (iff #53 #154)
#151 := (iff #52 true)
#153 := [rewrite]: #151
#156 := [monotonicity #153]: #155
#160 := [trans #156 #158]: #159
#150 := [asserted]: #53
[mp #150 #160]: false
unsat
039d88747cc3aaca789d0d44ca21e3131ffed65c 18 0
#2 := false
decl f6 :: S2
#13 := f6
#52 := (= f6 f6)
#53 := (not #52)
#159 := (iff #53 false)
#1 := true
#154 := (not true)
#157 := (iff #154 false)
#158 := [rewrite]: #157
#155 := (iff #53 #154)
#151 := (iff #52 true)
#153 := [rewrite]: #151
#156 := [monotonicity #153]: #155
#160 := [trans #156 #158]: #159
#150 := [asserted]: #53
[mp #150 #160]: false
unsat
f7ce3d8d545e91c59d80b4beef160514c745ee03 281 0
#2 := false
#14 := 2::Int
#10 := 1::Int
#334 := (= 1::Int 2::Int)
#339 := (iff #334 false)
#340 := [rewrite]: #339
decl f11 :: (-> S6 S2 Int)
decl f4 :: (-> S3 Int S2)
decl f5 :: S3
#9 := f5
#15 := (f4 f5 2::Int)
decl f12 :: S6
#26 := f12
#286 := (f11 f12 #15)
#294 := (= #286 2::Int)
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#34 := f14
#288 := (f13 2::Int f14)
decl f1 :: S1
#4 := f1
#289 := (= f1 #288)
#290 := (not #289)
#450 := [hypothesis]: #290
#33 := (:var 0 Int)
#35 := (f13 #33 f14)
#241 := (pattern #35)
#18 := 3::Int
#39 := (= #33 3::Int)
#38 := (= #33 2::Int)
#37 := (= #33 1::Int)
#113 := (or #37 #38 #39)
#79 := (= f1 #35)
#118 := (iff #79 #113)
#242 := (forall (vars (?v0 Int)) (:pat #241) #118)
#121 := (forall (vars (?v0 Int)) #118)
#245 := (iff #121 #242)
#243 := (iff #118 #118)
#244 := [refl]: #243
#246 := [quant-intro #244]: #245
#164 := (~ #121 #121)
#162 := (~ #118 #118)
#163 := [refl]: #162
#165 := [nnf-pos #163]: #164
#40 := (or #38 #39)
#41 := (or #37 #40)
#36 := (= #35 f1)
#42 := (iff #36 #41)
#43 := (forall (vars (?v0 Int)) #42)
#124 := (iff #43 #121)
#88 := (= 3::Int #33)
#85 := (= 2::Int #33)
#91 := (or #85 #88)
#82 := (= 1::Int #33)
#94 := (or #82 #91)
#97 := (iff #79 #94)
#100 := (forall (vars (?v0 Int)) #97)
#122 := (iff #100 #121)
#119 := (iff #97 #118)
#116 := (iff #94 #113)
#114 := (iff #41 #113)
#115 := [rewrite]: #114
#111 := (iff #94 #41)
#109 := (iff #91 #40)
#105 := (iff #88 #39)
#106 := [rewrite]: #105
#103 := (iff #85 #38)
#104 := [rewrite]: #103
#110 := [monotonicity #104 #106]: #109
#107 := (iff #82 #37)
#108 := [rewrite]: #107
#112 := [monotonicity #108 #110]: #111
#117 := [trans #112 #115]: #116
#120 := [monotonicity #117]: #119
#123 := [quant-intro #120]: #122
#101 := (iff #43 #100)
#98 := (iff #42 #97)
#95 := (iff #41 #94)
#92 := (iff #40 #91)
#89 := (iff #39 #88)
#90 := [rewrite]: #89
#86 := (iff #38 #85)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#83 := (iff #37 #82)
#84 := [rewrite]: #83
#96 := [monotonicity #84 #93]: #95
#80 := (iff #36 #79)
#81 := [rewrite]: #80
#99 := [monotonicity #81 #96]: #98
#102 := [quant-intro #99]: #101
#125 := [trans #102 #123]: #124
#78 := [asserted]: #43
#126 := [mp #78 #125]: #121
#166 := [mp~ #126 #165]: #121
#247 := [mp #166 #246]: #242
#357 := (not #242)
#441 := (or #357 #289)
#415 := (= 2::Int 3::Int)
#418 := (= 2::Int 2::Int)
#414 := (= 2::Int 1::Int)
#419 := (or #414 #418 #415)
#420 := (iff #289 #419)
#442 := (or #357 #420)
#444 := (iff #442 #441)
#446 := (iff #441 #441)
#447 := [rewrite]: #446
#439 := (iff #420 #289)
#1 := true
#434 := (iff #289 true)
#437 := (iff #434 #289)
#438 := [rewrite]: #437
#435 := (iff #420 #434)
#432 := (iff #419 true)
#427 := (or false true false)
#430 := (iff #427 true)
#431 := [rewrite]: #430
#428 := (iff #419 #427)
#425 := (iff #415 false)
#426 := [rewrite]: #425
#423 := (iff #418 true)
#424 := [rewrite]: #423
#421 := (iff #414 false)
#422 := [rewrite]: #421
#429 := [monotonicity #422 #424 #426]: #428
#433 := [trans #429 #431]: #432
#436 := [monotonicity #433]: #435
#440 := [trans #436 #438]: #439
#445 := [monotonicity #440]: #444
#448 := [trans #445 #447]: #444
#443 := [quant-inst #14]: #442
#449 := [mp #443 #448]: #441
#451 := [unit-resolution #449 #247 #450]: false
#452 := [lemma #451]: #289
#295 := (or #290 #294)
#47 := (f4 f5 #33)
#255 := (pattern #47)
#48 := (f11 f12 #47)
#135 := (= #33 #48)
#142 := (not #79)
#143 := (or #142 #135)
#256 := (forall (vars (?v0 Int)) (:pat #241 #255) #143)
#148 := (forall (vars (?v0 Int)) #143)
#259 := (iff #148 #256)
#257 := (iff #143 #143)
#258 := [refl]: #257
#260 := [quant-intro #258]: #259
#174 := (~ #148 #148)
#172 := (~ #143 #143)
#173 := [refl]: #172
#175 := [nnf-pos #173]: #174
#49 := (= #48 #33)
#50 := (implies #36 #49)
#51 := (forall (vars (?v0 Int)) #50)
#149 := (iff #51 #148)
#146 := (iff #50 #143)
#139 := (implies #79 #135)
#144 := (iff #139 #143)
#145 := [rewrite]: #144
#140 := (iff #50 #139)
#137 := (iff #49 #135)
#138 := [rewrite]: #137
#141 := [monotonicity #81 #138]: #140
#147 := [trans #141 #145]: #146
#150 := [quant-intro #147]: #149
#134 := [asserted]: #51
#153 := [mp #134 #150]: #148
#176 := [mp~ #153 #175]: #148
#261 := [mp #176 #260]: #256
#274 := (not #256)
#298 := (or #274 #290 #294)
#287 := (= 2::Int #286)
#291 := (or #290 #287)
#299 := (or #274 #291)
#306 := (iff #299 #298)
#301 := (or #274 #295)
#304 := (iff #301 #298)
#305 := [rewrite]: #304
#302 := (iff #299 #301)
#296 := (iff #291 #295)
#292 := (iff #287 #294)
#293 := [rewrite]: #292
#297 := [monotonicity #293]: #296
#303 := [monotonicity #297]: #302
#307 := [trans #303 #305]: #306
#300 := [quant-inst #14]: #299
#308 := [mp #300 #307]: #298
#453 := [unit-resolution #308 #261]: #295
#454 := [unit-resolution #453 #452]: #294
#471 := (= 1::Int #286)
#469 := (= #286 1::Int)
#11 := (f4 f5 1::Int)
#262 := (f11 f12 #11)
#270 := (= #262 1::Int)
#264 := (f13 1::Int f14)
#265 := (= f1 #264)
#266 := (not #265)
#367 := [hypothesis]: #266
#358 := (or #357 #265)
#333 := (= 1::Int 3::Int)
#332 := (= 1::Int 1::Int)
#335 := (or #332 #334 #333)
#336 := (iff #265 #335)
#359 := (or #357 #336)
#361 := (iff #359 #358)
#363 := (iff #358 #358)
#364 := [rewrite]: #363
#355 := (iff #336 #265)
#350 := (iff #265 true)
#353 := (iff #350 #265)
#354 := [rewrite]: #353
#351 := (iff #336 #350)
#348 := (iff #335 true)
#343 := (or true false false)
#346 := (iff #343 true)
#347 := [rewrite]: #346
#344 := (iff #335 #343)
#341 := (iff #333 false)
#342 := [rewrite]: #341
#337 := (iff #332 true)
#338 := [rewrite]: #337
#345 := [monotonicity #338 #340 #342]: #344
#349 := [trans #345 #347]: #348
#352 := [monotonicity #349]: #351
#356 := [trans #352 #354]: #355
#362 := [monotonicity #356]: #361
#365 := [trans #362 #364]: #361
#360 := [quant-inst #10]: #359
#366 := [mp #360 #365]: #358
#368 := [unit-resolution #366 #247 #367]: false
#369 := [lemma #368]: #265
#271 := (or #266 #270)
#275 := (or #274 #266 #270)
#263 := (= 1::Int #262)
#267 := (or #266 #263)
#276 := (or #274 #267)
#283 := (iff #276 #275)
#278 := (or #274 #271)
#281 := (iff #278 #275)
#282 := [rewrite]: #281
#279 := (iff #276 #278)
#272 := (iff #267 #271)
#268 := (iff #263 #270)
#269 := [rewrite]: #268
#273 := [monotonicity #269]: #272
#280 := [monotonicity #273]: #279
#284 := [trans #280 #282]: #283
#277 := [quant-inst #10]: #276
#285 := [mp #277 #284]: #275
#455 := [unit-resolution #285 #261]: #271
#456 := [unit-resolution #455 #369]: #270
#467 := (= #286 #262)
#465 := (= #15 #11)
decl f3 :: S2
#8 := f3
#12 := (= f3 #11)
#74 := [asserted]: #12
#463 := (= #15 f3)
decl f6 :: S2
#13 := f6
#461 := (= f6 f3)
#52 := (= f3 f6)
#53 := (not #52)
#54 := (not #53)
#152 := (iff #54 #52)
#154 := [rewrite]: #152
#151 := [asserted]: #54
#157 := [mp #151 #154]: #52
#462 := [symm #157]: #461
#459 := (= #15 f6)
#16 := (= f6 #15)
#75 := [asserted]: #16
#460 := [symm #75]: #459
#464 := [trans #460 #462]: #463
#466 := [trans #464 #74]: #465
#468 := [monotonicity #466]: #467
#470 := [trans #468 #456]: #469
#472 := [symm #470]: #471
#473 := [trans #472 #454]: #334
[mp #473 #340]: false
unsat
0b2624e5de02979d781587640b732673b386817c 293 0
#2 := false
decl f8 :: (-> S4 S2 S2)
decl f3 :: S2
#8 := f3
decl f9 :: (-> S5 S2 S4)
decl f10 :: S5
#21 := f10
#52 := (f9 f10 f3)
#53 := (f8 #52 f3)
decl f6 :: S2
#13 := f6
#153 := (= f6 #53)
decl f4 :: (-> S3 Int S2)
#10 := 1::Int
decl f5 :: S3
#9 := f5
#11 := (f4 f5 1::Int)
#270 := (f9 f10 #11)
#271 := (f8 #270 #11)
#515 := (= #271 #53)
#511 := (= #53 #271)
#12 := (= f3 #11)
#75 := [asserted]: #12
#495 := (= #52 #270)
#493 := (= #270 #52)
#491 := (= #11 f3)
#492 := [symm #75]: #491
#494 := [monotonicity #492]: #493
#496 := [symm #494]: #495
#512 := [monotonicity #496 #75]: #511
#516 := [symm #512]: #515
#519 := (= f6 #271)
decl f11 :: (-> S6 S2 Int)
decl f12 :: S6
#26 := f12
#267 := (f11 f12 #11)
#14 := 2::Int
#273 := (* 2::Int #267)
#276 := (f4 f5 #273)
#513 := (= #276 #271)
#279 := (= #271 #276)
#24 := (:var 0 S2)
#22 := (:var 1 S2)
#23 := (f9 f10 #22)
#25 := (f8 #23 #24)
#239 := (pattern #25)
#28 := (f11 f12 #24)
#27 := (f11 f12 #22)
#29 := (+ #27 #28)
#30 := (f4 f5 #29)
#31 := (= #25 #30)
#240 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #239) #31)
#32 := (forall (vars (?v0 S2) (?v1 S2)) #31)
#243 := (iff #32 #240)
#241 := (iff #31 #31)
#242 := [refl]: #241
#244 := [quant-intro #242]: #243
#164 := (~ #32 #32)
#161 := (~ #31 #31)
#163 := [refl]: #161
#165 := [nnf-pos #163]: #164
#78 := [asserted]: #32
#166 := [mp~ #78 #165]: #32
#245 := [mp #166 #244]: #240
#282 := (not #240)
#283 := (or #282 #279)
#268 := (+ #267 #267)
#269 := (f4 f5 #268)
#272 := (= #271 #269)
#284 := (or #282 #272)
#286 := (iff #284 #283)
#288 := (iff #283 #283)
#289 := [rewrite]: #288
#280 := (iff #272 #279)
#277 := (= #269 #276)
#274 := (= #268 #273)
#275 := [rewrite]: #274
#278 := [monotonicity #275]: #277
#281 := [monotonicity #278]: #280
#287 := [monotonicity #281]: #286
#290 := [trans #287 #289]: #286
#285 := [quant-inst #11 #11]: #284
#291 := [mp #285 #290]: #283
#490 := [unit-resolution #291 #245]: #279
#514 := [symm #490]: #513
#517 := (= f6 #276)
#15 := (f4 f5 2::Int)
#509 := (= #15 #276)
#507 := (= 2::Int #273)
#505 := (= #273 2::Int)
#315 := (<= #267 1::Int)
#299 := (= #267 1::Int)
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#34 := f14
#293 := (f13 1::Int f14)
decl f1 :: S1
#4 := f1
#294 := (= f1 #293)
#295 := (not #294)
#487 := [hypothesis]: #295
#33 := (:var 0 Int)
#35 := (f13 #33 f14)
#246 := (pattern #35)
#18 := 3::Int
#39 := (= #33 3::Int)
#38 := (= #33 2::Int)
#37 := (= #33 1::Int)
#114 := (or #37 #38 #39)
#80 := (= f1 #35)
#119 := (iff #80 #114)
#247 := (forall (vars (?v0 Int)) (:pat #246) #119)
#122 := (forall (vars (?v0 Int)) #119)
#250 := (iff #122 #247)
#248 := (iff #119 #119)
#249 := [refl]: #248
#251 := [quant-intro #249]: #250
#169 := (~ #122 #122)
#167 := (~ #119 #119)
#168 := [refl]: #167
#170 := [nnf-pos #168]: #169
#40 := (or #38 #39)
#41 := (or #37 #40)
#36 := (= #35 f1)
#42 := (iff #36 #41)
#43 := (forall (vars (?v0 Int)) #42)
#125 := (iff #43 #122)
#89 := (= 3::Int #33)
#86 := (= 2::Int #33)
#92 := (or #86 #89)
#83 := (= 1::Int #33)
#95 := (or #83 #92)
#98 := (iff #80 #95)
#101 := (forall (vars (?v0 Int)) #98)
#123 := (iff #101 #122)
#120 := (iff #98 #119)
#117 := (iff #95 #114)
#115 := (iff #41 #114)
#116 := [rewrite]: #115
#112 := (iff #95 #41)
#110 := (iff #92 #40)
#106 := (iff #89 #39)
#107 := [rewrite]: #106
#104 := (iff #86 #38)
#105 := [rewrite]: #104
#111 := [monotonicity #105 #107]: #110
#108 := (iff #83 #37)
#109 := [rewrite]: #108
#113 := [monotonicity #109 #111]: #112
#118 := [trans #113 #116]: #117
#121 := [monotonicity #118]: #120
#124 := [quant-intro #121]: #123
#102 := (iff #43 #101)
#99 := (iff #42 #98)
#96 := (iff #41 #95)
#93 := (iff #40 #92)
#90 := (iff #39 #89)
#91 := [rewrite]: #90
#87 := (iff #38 #86)
#88 := [rewrite]: #87
#94 := [monotonicity #88 #91]: #93
#84 := (iff #37 #83)
#85 := [rewrite]: #84
#97 := [monotonicity #85 #94]: #96
#81 := (iff #36 #80)
#82 := [rewrite]: #81
#100 := [monotonicity #82 #97]: #99
#103 := [quant-intro #100]: #102
#126 := [trans #103 #124]: #125
#79 := [asserted]: #43
#127 := [mp #79 #126]: #122
#171 := [mp~ #127 #170]: #122
#252 := [mp #171 #251]: #247
#407 := (not #247)
#478 := (or #407 #294)
#448 := (= 1::Int 3::Int)
#455 := (= 1::Int 2::Int)
#447 := (= 1::Int 1::Int)
#456 := (or #447 #455 #448)
#457 := (iff #294 #456)
#479 := (or #407 #457)
#481 := (iff #479 #478)
#483 := (iff #478 #478)
#484 := [rewrite]: #483
#476 := (iff #457 #294)
#1 := true
#471 := (iff #294 true)
#474 := (iff #471 #294)
#475 := [rewrite]: #474
#472 := (iff #457 #471)
#469 := (iff #456 true)
#464 := (or true false false)
#467 := (iff #464 true)
#468 := [rewrite]: #467
#465 := (iff #456 #464)
#462 := (iff #448 false)
#463 := [rewrite]: #462
#460 := (iff #455 false)
#461 := [rewrite]: #460
#458 := (iff #447 true)
#459 := [rewrite]: #458
#466 := [monotonicity #459 #461 #463]: #465
#470 := [trans #466 #468]: #469
#473 := [monotonicity #470]: #472
#477 := [trans #473 #475]: #476
#482 := [monotonicity #477]: #481
#485 := [trans #482 #484]: #481
#480 := [quant-inst #10]: #479
#486 := [mp #480 #485]: #478
#488 := [unit-resolution #486 #252 #487]: false
#489 := [lemma #488]: #294
#300 := (or #295 #299)
#47 := (f4 f5 #33)
#260 := (pattern #47)
#48 := (f11 f12 #47)
#136 := (= #33 #48)
#143 := (not #80)
#144 := (or #143 #136)
#261 := (forall (vars (?v0 Int)) (:pat #246 #260) #144)
#149 := (forall (vars (?v0 Int)) #144)
#264 := (iff #149 #261)
#262 := (iff #144 #144)
#263 := [refl]: #262
#265 := [quant-intro #263]: #264
#179 := (~ #149 #149)
#177 := (~ #144 #144)
#178 := [refl]: #177
#180 := [nnf-pos #178]: #179
#49 := (= #48 #33)
#50 := (implies #36 #49)
#51 := (forall (vars (?v0 Int)) #50)
#150 := (iff #51 #149)
#147 := (iff #50 #144)
#140 := (implies #80 #136)
#145 := (iff #140 #144)
#146 := [rewrite]: #145
#141 := (iff #50 #140)
#138 := (iff #49 #136)
#139 := [rewrite]: #138
#142 := [monotonicity #82 #139]: #141
#148 := [trans #142 #146]: #147
#151 := [quant-intro #148]: #150
#135 := [asserted]: #51
#154 := [mp #135 #151]: #149
#181 := [mp~ #154 #180]: #149
#266 := [mp #181 #265]: #261
#303 := (not #261)
#304 := (or #303 #295 #299)
#292 := (= 1::Int #267)
#296 := (or #295 #292)
#305 := (or #303 #296)
#312 := (iff #305 #304)
#307 := (or #303 #300)
#310 := (iff #307 #304)
#311 := [rewrite]: #310
#308 := (iff #305 #307)
#301 := (iff #296 #300)
#297 := (iff #292 #299)
#298 := [rewrite]: #297
#302 := [monotonicity #298]: #301
#309 := [monotonicity #302]: #308
#313 := [trans #309 #311]: #312
#306 := [quant-inst #10]: #305
#314 := [mp #306 #313]: #304
#497 := [unit-resolution #314 #266]: #300
#498 := [unit-resolution #497 #489]: #299
#421 := (not #299)
#499 := (or #421 #315)
#500 := [th-lemma arith triangle-eq]: #499
#501 := [unit-resolution #500 #498]: #315
#316 := (>= #267 1::Int)
#502 := (or #421 #316)
#503 := [th-lemma arith triangle-eq]: #502
#504 := [unit-resolution #503 #498]: #316
#506 := [th-lemma arith eq-propagate -2 -2 #504 #501]: #505
#508 := [symm #506]: #507
#510 := [monotonicity #508]: #509
#16 := (= f6 #15)
#76 := [asserted]: #16
#518 := [trans #76 #510]: #517
#520 := [trans #518 #514]: #519
#521 := [trans #520 #516]: #153
#157 := (not #153)
#54 := (= #53 f6)
#55 := (not #54)
#158 := (iff #55 #157)
#155 := (iff #54 #153)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#152 := [asserted]: #55
#162 := [mp #152 #159]: #157
[unit-resolution #162 #521]: false
unsat
be9536e255cd44d6957fba82b89dd647b91d4120 451 0
#2 := false
decl f8 :: (-> S4 S2 S2)
decl f6 :: S2
#13 := f6
decl f9 :: (-> S5 S2 S4)
decl f3 :: S2
#8 := f3
decl f10 :: S5
#21 := f10
#52 := (f9 f10 f3)
#53 := (f8 #52 f6)
decl f7 :: S2
#17 := f7
#153 := (= f7 #53)
decl f4 :: (-> S3 Int S2)
#14 := 2::Int
decl f5 :: S3
#9 := f5
#15 := (f4 f5 2::Int)
#10 := 1::Int
#11 := (f4 f5 1::Int)
#271 := (f9 f10 #11)
#272 := (f8 #271 #15)
#598 := (= #272 #53)
#594 := (= #53 #272)
#16 := (= f6 #15)
#76 := [asserted]: #16
#610 := (= #52 #271)
#608 := (= #271 #52)
#606 := (= #11 f3)
#12 := (= f3 #11)
#75 := [asserted]: #12
#607 := [symm #75]: #606
#609 := [monotonicity #607]: #608
#611 := [symm #609]: #610
#595 := [monotonicity #611 #76]: #594
#663 := [symm #595]: #598
#666 := (= f7 #272)
decl f11 :: (-> S6 S2 Int)
decl f12 :: S6
#26 := f12
#268 := (f11 f12 #11)
#267 := (f11 f12 #15)
#274 := (+ #267 #268)
#277 := (f4 f5 #274)
#596 := (= #277 #272)
#280 := (= #272 #277)
#24 := (:var 0 S2)
#22 := (:var 1 S2)
#23 := (f9 f10 #22)
#25 := (f8 #23 #24)
#239 := (pattern #25)
#28 := (f11 f12 #24)
#27 := (f11 f12 #22)
#29 := (+ #27 #28)
#30 := (f4 f5 #29)
#31 := (= #25 #30)
#240 := (forall (vars (?v0 S2) (?v1 S2)) (:pat #239) #31)
#32 := (forall (vars (?v0 S2) (?v1 S2)) #31)
#243 := (iff #32 #240)
#241 := (iff #31 #31)
#242 := [refl]: #241
#244 := [quant-intro #242]: #243
#164 := (~ #32 #32)
#161 := (~ #31 #31)
#163 := [refl]: #161
#165 := [nnf-pos #163]: #164
#78 := [asserted]: #32
#166 := [mp~ #78 #165]: #32
#245 := [mp #166 #244]: #240
#283 := (not #240)
#284 := (or #283 #280)
#269 := (+ #268 #267)
#270 := (f4 f5 #269)
#273 := (= #272 #270)
#285 := (or #283 #273)
#287 := (iff #285 #284)
#289 := (iff #284 #284)
#290 := [rewrite]: #289
#281 := (iff #273 #280)
#278 := (= #270 #277)
#275 := (= #269 #274)
#276 := [rewrite]: #275
#279 := [monotonicity #276]: #278
#282 := [monotonicity #279]: #281
#288 := [monotonicity #282]: #287
#291 := [trans #288 #290]: #287
#286 := [quant-inst #11 #15]: #285
#292 := [mp #286 #291]: #284
#605 := [unit-resolution #292 #245]: #280
#597 := [symm #605]: #596
#664 := (= f7 #277)
#18 := 3::Int
#19 := (f4 f5 3::Int)
#590 := (= #19 #277)
#591 := (= 3::Int #274)
#510 := (= #274 3::Int)
#316 := (<= #268 1::Int)
#300 := (= #268 1::Int)
decl f13 :: (-> Int S7 S1)
decl f14 :: S7
#34 := f14
#294 := (f13 1::Int f14)
decl f1 :: S1
#4 := f1
#295 := (= f1 #294)
#296 := (not #295)
#539 := [hypothesis]: #296
#33 := (:var 0 Int)
#35 := (f13 #33 f14)
#246 := (pattern #35)
#39 := (= #33 3::Int)
#38 := (= #33 2::Int)
#37 := (= #33 1::Int)
#114 := (or #37 #38 #39)
#80 := (= f1 #35)
#119 := (iff #80 #114)
#247 := (forall (vars (?v0 Int)) (:pat #246) #119)
#122 := (forall (vars (?v0 Int)) #119)
#250 := (iff #122 #247)
#248 := (iff #119 #119)
#249 := [refl]: #248
#251 := [quant-intro #249]: #250
#169 := (~ #122 #122)
#167 := (~ #119 #119)
#168 := [refl]: #167
#170 := [nnf-pos #168]: #169
#40 := (or #38 #39)
#41 := (or #37 #40)
#36 := (= #35 f1)
#42 := (iff #36 #41)
#43 := (forall (vars (?v0 Int)) #42)
#125 := (iff #43 #122)
#89 := (= 3::Int #33)
#86 := (= 2::Int #33)
#92 := (or #86 #89)
#83 := (= 1::Int #33)
#95 := (or #83 #92)
#98 := (iff #80 #95)
#101 := (forall (vars (?v0 Int)) #98)
#123 := (iff #101 #122)
#120 := (iff #98 #119)
#117 := (iff #95 #114)
#115 := (iff #41 #114)
#116 := [rewrite]: #115
#112 := (iff #95 #41)
#110 := (iff #92 #40)
#106 := (iff #89 #39)
#107 := [rewrite]: #106
#104 := (iff #86 #38)
#105 := [rewrite]: #104
#111 := [monotonicity #105 #107]: #110
#108 := (iff #83 #37)
#109 := [rewrite]: #108
#113 := [monotonicity #109 #111]: #112
#118 := [trans #113 #116]: #117
#121 := [monotonicity #118]: #120
#124 := [quant-intro #121]: #123
#102 := (iff #43 #101)
#99 := (iff #42 #98)
#96 := (iff #41 #95)
#93 := (iff #40 #92)
#90 := (iff #39 #89)
#91 := [rewrite]: #90
#87 := (iff #38 #86)
#88 := [rewrite]: #87
#94 := [monotonicity #88 #91]: #93
#84 := (iff #37 #83)
#85 := [rewrite]: #84
#97 := [monotonicity #85 #94]: #96
#81 := (iff #36 #80)
#82 := [rewrite]: #81
#100 := [monotonicity #82 #97]: #99
#103 := [quant-intro #100]: #102
#126 := [trans #103 #124]: #125
#79 := [asserted]: #43
#127 := [mp #79 #126]: #122
#171 := [mp~ #127 #170]: #122
#252 := [mp #171 #251]: #247
#414 := (not #247)
#530 := (or #414 #295)
#542 := (= 1::Int 3::Int)
#543 := (= 1::Int 2::Int)
#541 := (= 1::Int 1::Int)
#544 := (or #541 #543 #542)
#545 := (iff #295 #544)
#531 := (or #414 #545)
#533 := (iff #531 #530)
#535 := (iff #530 #530)
#536 := [rewrite]: #535
#526 := (iff #545 #295)
#1 := true
#559 := (iff #295 true)
#527 := (iff #559 #295)
#528 := [rewrite]: #527
#560 := (iff #545 #559)
#557 := (iff #544 true)
#552 := (or true false false)
#555 := (iff #552 true)
#556 := [rewrite]: #555
#553 := (iff #544 #552)
#550 := (iff #542 false)
#551 := [rewrite]: #550
#548 := (iff #543 false)
#549 := [rewrite]: #548
#546 := (iff #541 true)
#547 := [rewrite]: #546
#554 := [monotonicity #547 #549 #551]: #553
#558 := [trans #554 #556]: #557
#561 := [monotonicity #558]: #560
#529 := [trans #561 #528]: #526
#534 := [monotonicity #529]: #533
#537 := [trans #534 #536]: #533
#532 := [quant-inst #10]: #531
#538 := [mp #532 #537]: #530
#540 := [unit-resolution #538 #252 #539]: false
#589 := [lemma #540]: #295
#301 := (or #296 #300)
#47 := (f4 f5 #33)
#260 := (pattern #47)
#48 := (f11 f12 #47)
#136 := (= #33 #48)
#143 := (not #80)
#144 := (or #143 #136)
#261 := (forall (vars (?v0 Int)) (:pat #246 #260) #144)
#149 := (forall (vars (?v0 Int)) #144)
#264 := (iff #149 #261)
#262 := (iff #144 #144)
#263 := [refl]: #262
#265 := [quant-intro #263]: #264
#179 := (~ #149 #149)
#177 := (~ #144 #144)
#178 := [refl]: #177
#180 := [nnf-pos #178]: #179
#49 := (= #48 #33)
#50 := (implies #36 #49)
#51 := (forall (vars (?v0 Int)) #50)
#150 := (iff #51 #149)
#147 := (iff #50 #144)
#140 := (implies #80 #136)
#145 := (iff #140 #144)
#146 := [rewrite]: #145
#141 := (iff #50 #140)
#138 := (iff #49 #136)
#139 := [rewrite]: #138
#142 := [monotonicity #82 #139]: #141
#148 := [trans #142 #146]: #147
#151 := [quant-intro #148]: #150
#135 := [asserted]: #51
#154 := [mp #135 #151]: #149
#181 := [mp~ #154 #180]: #149
#266 := [mp #181 #265]: #261
#304 := (not #261)
#305 := (or #304 #296 #300)
#293 := (= 1::Int #268)
#297 := (or #296 #293)
#306 := (or #304 #297)
#313 := (iff #306 #305)
#308 := (or #304 #301)
#311 := (iff #308 #305)
#312 := [rewrite]: #311
#309 := (iff #306 #308)
#302 := (iff #297 #301)
#298 := (iff #293 #300)
#299 := [rewrite]: #298
#303 := [monotonicity #299]: #302
#310 := [monotonicity #303]: #309
#314 := [trans #310 #312]: #313
#307 := [quant-inst #10]: #306
#315 := [mp #307 #314]: #305
#612 := [unit-resolution #315 #266]: #301
#613 := [unit-resolution #612 #589]: #300
#428 := (not #300)
#614 := (or #428 #316)
#615 := [th-lemma arith triangle-eq]: #614
#616 := [unit-resolution #615 #613]: #316
#317 := (>= #268 1::Int)
#562 := (not #317)
#563 := [hypothesis]: #562
#564 := (or #428 #317)
#565 := [th-lemma arith triangle-eq]: #564
#566 := [unit-resolution #565 #563]: #428
#402 := (= #268 3::Int)
#431 := (not #402)
#425 := (>= #268 3::Int)
#567 := (not #425)
#568 := (or #567 #317)
#569 := [th-lemma arith farkas 1 1]: #568
#570 := [unit-resolution #569 #563]: #567
#571 := (or #431 #425)
#572 := [th-lemma arith triangle-eq]: #571
#573 := [unit-resolution #572 #570]: #431
#403 := (= #268 2::Int)
#434 := (not #403)
#427 := (>= #268 2::Int)
#574 := (not #427)
#575 := (or #574 #317)
#576 := [th-lemma arith farkas 1 1]: #575
#577 := [unit-resolution #576 #563]: #574
#578 := (or #434 #427)
#579 := [th-lemma arith triangle-eq]: #578
#580 := [unit-resolution #579 #577]: #434
#408 := (or #300 #402 #403)
#395 := (f13 #268 f14)
#396 := (= f1 #395)
#411 := (iff #396 #408)
#415 := (or #414 #411)
#406 := (or #300 #403 #402)
#407 := (iff #396 #406)
#416 := (or #414 #407)
#418 := (iff #416 #415)
#420 := (iff #415 #415)
#421 := [rewrite]: #420
#412 := (iff #407 #411)
#409 := (iff #406 #408)
#410 := [rewrite]: #409
#413 := [monotonicity #410]: #412
#419 := [monotonicity #413]: #418
#422 := [trans #419 #421]: #418
#417 := [quant-inst #268]: #416
#423 := [mp #417 #422]: #415
#581 := [unit-resolution #423 #252]: #411
#440 := (not #411)
#583 := (or #440 #408)
#253 := (pattern #28)
#44 := (f13 #28 f14)
#129 := (= f1 #44)
#254 := (forall (vars (?v0 S2)) (:pat #253) #129)
#132 := (forall (vars (?v0 S2)) #129)
#257 := (iff #132 #254)
#255 := (iff #129 #129)
#256 := [refl]: #255
#258 := [quant-intro #256]: #257
#174 := (~ #132 #132)
#172 := (~ #129 #129)
#173 := [refl]: #172
#175 := [nnf-pos #173]: #174
#45 := (= #44 f1)
#46 := (forall (vars (?v0 S2)) #45)
#133 := (iff #46 #132)
#130 := (iff #45 #129)
#131 := [rewrite]: #130
#134 := [quant-intro #131]: #133
#128 := [asserted]: #46
#137 := [mp #128 #134]: #132
#176 := [mp~ #137 #175]: #132
#259 := [mp #176 #258]: #254
#399 := (not #254)
#400 := (or #399 #396)
#401 := [quant-inst #11]: #400
#582 := [unit-resolution #401 #259]: #396
#443 := (not #396)
#444 := (or #440 #443 #408)
#445 := [def-axiom]: #444
#584 := [unit-resolution #445 #582]: #583
#585 := [unit-resolution #584 #581]: #408
#437 := (not #408)
#438 := (or #437 #300 #402 #403)
#439 := [def-axiom]: #438
#586 := [unit-resolution #439 #585]: #408
#587 := [unit-resolution #586 #580 #573 #566]: false
#588 := [lemma #587]: #317
#340 := (<= #267 2::Int)
#325 := (= #267 2::Int)
#319 := (f13 2::Int f14)
#320 := (= f1 #319)
#321 := (not #320)
#660 := [hypothesis]: #321
#651 := (or #414 #320)
#627 := (= 2::Int 3::Int)
#628 := (= 2::Int 2::Int)
#626 := (= 2::Int 1::Int)
#629 := (or #626 #628 #627)
#630 := (iff #320 #629)
#652 := (or #414 #630)
#654 := (iff #652 #651)
#656 := (iff #651 #651)
#657 := [rewrite]: #656
#649 := (iff #630 #320)
#644 := (iff #320 true)
#647 := (iff #644 #320)
#648 := [rewrite]: #647
#645 := (iff #630 #644)
#642 := (iff #629 true)
#637 := (or false true false)
#640 := (iff #637 true)
#641 := [rewrite]: #640
#638 := (iff #629 #637)
#635 := (iff #627 false)
#636 := [rewrite]: #635
#633 := (iff #628 true)
#634 := [rewrite]: #633
#631 := (iff #626 false)
#632 := [rewrite]: #631
#639 := [monotonicity #632 #634 #636]: #638
#643 := [trans #639 #641]: #642
#646 := [monotonicity #643]: #645
#650 := [trans #646 #648]: #649
#655 := [monotonicity #650]: #654
#658 := [trans #655 #657]: #654
#653 := [quant-inst #14]: #652
#659 := [mp #653 #658]: #651
#661 := [unit-resolution #659 #252 #660]: false
#662 := [lemma #661]: #320
#326 := (or #321 #325)
#329 := (or #304 #321 #325)
#318 := (= 2::Int #267)
#322 := (or #321 #318)
#330 := (or #304 #322)
#337 := (iff #330 #329)
#332 := (or #304 #326)
#335 := (iff #332 #329)
#336 := [rewrite]: #335
#333 := (iff #330 #332)
#327 := (iff #322 #326)
#323 := (iff #318 #325)
#324 := [rewrite]: #323
#328 := [monotonicity #324]: #327
#334 := [monotonicity #328]: #333
#338 := [trans #334 #336]: #337
#331 := [quant-inst #14]: #330
#339 := [mp #331 #338]: #329
#617 := [unit-resolution #339 #266]: #326
#618 := [unit-resolution #617 #662]: #325
#483 := (not #325)
#619 := (or #483 #340)
#620 := [th-lemma arith triangle-eq]: #619
#621 := [unit-resolution #620 #618]: #340
#341 := (>= #267 2::Int)
#622 := (or #483 #341)
#623 := [th-lemma arith triangle-eq]: #622
#624 := [unit-resolution #623 #618]: #341
#625 := [th-lemma arith eq-propagate -1 -1 -1 -1 #624 #621 #588 #616]: #510
#592 := [symm #625]: #591
#593 := [monotonicity #592]: #590
#20 := (= f7 #19)
#77 := [asserted]: #20
#665 := [trans #77 #593]: #664
#667 := [trans #665 #597]: #666
#668 := [trans #667 #663]: #153
#157 := (not #153)
#54 := (= #53 f7)
#55 := (not #54)
#158 := (iff #55 #157)
#155 := (iff #54 #153)
#156 := [rewrite]: #155
#159 := [monotonicity #156]: #158
#152 := [asserted]: #55
#162 := [mp #152 #159]: #157
[unit-resolution #162 #668]: false
unsat
fec19a326f20bb7c46f8aaa57650582e09f85345 1 0
unsat
3985530df8b42c3cef066c8cd0d44440d8ea6843 1 0
unsat
b4de8a8d55c543048b440b0c84f0071b46100a45 1 0
unsat
94ef9302298c22689d91dfad87e5b1f5d143d5d6 1 0
unsat
84466cebf093560047a32670f44cbc877bb477c9 1 0
unsat
579199d37b2cb3378054f9db68fcb9989d990323 1 0
unsat
2872ce5ca3a7494f5ba4028b085484fd0433ed9b 1 0
unsat
d857d3364e9de34d43d117af226fd9c871330291 1 0
unsat
7b5fe4ae09f8bd6fdbd244103d5a0b40235f5a67 1 0
unsat
333b09d4a88312b735fa2c0986530dc12f9062b0 1 0
unsat
62bb93d4bfd163a4bd1ef9e32841389b2f0701ff 1 0
unsat
8a3a338f2631cd760047005189c26535fc42f33b 1 0
unsat
e65adab8d8118c2a62881422c4cfa39ea83588c6 1 0
unsat
1722e6f38c6c2d0aec0a2dcdf1e1e78adb2e31e3 1 0
unsat
fcc7f044a41e9e32b443e735a923af3bab731696 1 0
unsat
d283a7edf751ac599eb9ddd0eb05b8f0e5418081 1 0
unsat
9826b35d28195f567a43a9988d931aa560cc0e62 1 0
unsat
75ecdd955df71dc9013f7eaa0ab5e7c1a3efb520 1 0
unsat
731417bf1910ce702bf230518d2ad09e58894b57 1 0
unsat
fead099c17f1944309708edb03f92a2c5882b602 1 0
unsat
077dfea4c505e6a54f38d0e98e1a237b06f1a2b6 1 0
unsat
4968d9eb8b05e0c9bb6bec431e8a3db101fdd07d 1 0
unsat
37993c5ba42b0ad3840c52f6978182c665b6a51a 1 0
unsat
fc106b34b31aebbcd284a81b86ca12b66f28a082 1 0
unsat
50686101f51261c6e69c51c57e81f850810ca021 1 0
unsat
7c224e2bf446bb9e771ad899dbf71e71a3387da4 1 0
unsat
3c211c7e4bc32a231c616ba0ab783febeec764b9 1 0
unsat
3ee74ae7ffc2b7cd44664723e548e33953a1326d 1 0
unsat
3bee47654272d37062810bef6736a841e54b7e55 1 0
unsat
31692355cdcd02b4c6d5b8823c2c5faa69b5e7c6 1 0
unsat
68d8c15a9e52bdbb429d5415b2df29a5b506a165 1 0
unsat
4e3281973dda451a73a69c742c6e82a2624514c5 1 0
unsat
6da1c460b7745afe557552bcf129475de318b5a5 1 0
unsat
2087de823b8b6adb448d7b8612d73f1da92eb202 1 0
unsat
67b2b464b1c97af42282ab2b3611abc12748bebc 1 0
unsat
4f95bb0ed62abba4e30dd0f6a43e32be94b9504a 1 0
unsat
8355b72d160f61ed2bfa2347277cc51be5e403d9 1 0
unsat
87f0dff086bc3f2a8c8ae4368ef87fdd33753018 1 0
unsat
5d89866e008ca1008aa010cd8ac00375e1e49a76 1 0
unsat
f585a3090b2190a907cde398ffc80884fd113697 1 0
unsat
8b9c59708c54702afdb72e9234fbe61739dcdcac 1 0
unsat
1b8942a7812b6a3825133062469e81170c968122 1 0
unsat
7ce8e82cc1e04157aad53db91c119a393f0cc34c 1 0
unsat
a7fb4771d1deb25dcf66848f425d54aca604bb1b 1 0
unsat
e6b0a173f73465d0bda9435774a6a86f94eab9cd 1 0
unsat
1ddab5bc0ef3d61ccee542ac3a7c0d5333bca04e 1 0
unsat
e126416a9aaf9380c805079d9ea23f46180b1ead 1 0
unsat
a7fcb872e8568eaf8ce860d563685b1a0605dffe 1 0
unsat
c1df88859dce165ae1a0fe05398eaab699a73d1a 1 0
unsat
bd55640b57c04d5cdd17b87acb77828e12be95d3 1 0
unsat
b1a2c4806b409b2f63dd2441827e4310ccc7ce77 1 0
unsat
f106177fef6206c2a71499d1adef5ec2644bd1c8 1 0
unsat
ab425bfd72799c3278b174059545a5022fbf5950 1 0
unsat
61b369fcda1cf2779764b8823aacbec7784d925b 1 0
unsat
bbeefb7aa775f6cd1ba85d93b2f5a5511639f5c2 1 0
unsat
b09779548402501da93636b75ef7898959d6eb1e 1 0
unsat
24791d6e1671b2836e50b921f2d0ceb0f42151b1 1 0
unsat
e2a11ab87aeb3ed5913e9512aa10b9ca74213a4b 61 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f9 :: S3
#33 := f9
decl f4 :: (-> S5 S4 S2)
decl f10 :: S4
#35 := f10
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f8 :: S2
#31 := f8
decl f7 :: S7
#8 := f7
#32 := (f6 f7 f8)
#34 := (f5 #32 f9)
#36 := (f4 #34 f10)
#37 := (f3 #36 f9)
#81 := (= f10 #37)
#85 := (not #81)
#38 := (= #37 f10)
#39 := (not #38)
#86 := (iff #39 #85)
#83 := (iff #38 #81)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#80 := [asserted]: #39
#90 := [mp #80 #87]: #85
#13 := (:var 0 S4)
#11 := (:var 1 S3)
#9 := (:var 2 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#14 := (f4 #12 #13)
#584 := (pattern #14)
#15 := (f3 #14 #11)
#60 := (= #13 #15)
#585 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #584) #60)
#63 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #60)
#588 := (iff #63 #585)
#586 := (iff #60 #60)
#587 := [refl]: #586
#589 := [quant-intro #587]: #588
#100 := (~ #63 #63)
#98 := (~ #60 #60)
#99 := [refl]: #98
#101 := [nnf-pos #99]: #100
#16 := (= #15 #13)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #16)
#64 := (iff #17 #63)
#61 := (iff #16 #60)
#62 := [rewrite]: #61
#65 := [quant-intro #62]: #64
#59 := [asserted]: #17
#68 := [mp #59 #65]: #63
#89 := [mp~ #68 #101]: #63
#590 := [mp #89 #589]: #585
#167 := (not #585)
#254 := (or #167 #81)
#168 := [quant-inst #31 #33 #35]: #254
[unit-resolution #168 #590 #90]: false
unsat
573c26140e97f5551027a6ed7f91a8a26996149c 95 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f9 :: S3
#32 := f9
decl f10 :: S2
#35 := f10
#41 := (f3 f10 f9)
decl f4 :: (-> S5 S4 S2)
decl f11 :: S4
#38 := f11
decl f5 :: (-> S6 S3 S5)
decl f8 :: S3
#31 := f8
decl f6 :: (-> S7 S2 S6)
decl f7 :: S7
#8 := f7
#36 := (f6 f7 f10)
#37 := (f5 #36 f8)
#39 := (f4 #37 f11)
#40 := (f3 #39 f9)
#42 := (= #40 #41)
#175 := (= f11 #40)
#33 := (= f8 f9)
#262 := (ite #33 #175 #42)
#268 := (not #262)
#94 := (not #42)
#86 := (or #33 #42)
#90 := (not #86)
#34 := (not #33)
#43 := (implies #34 #42)
#44 := (not #43)
#91 := (iff #44 #90)
#88 := (iff #43 #86)
#89 := [rewrite]: #88
#92 := [monotonicity #89]: #91
#85 := [asserted]: #44
#95 := [mp #85 #92]: #90
#96 := [not-or-elim #95]: #94
#93 := [not-or-elim #95]: #34
#586 := (or #268 #33 #42)
#241 := [def-axiom]: #586
#265 := [unit-resolution #241 #93 #96]: #268
#24 := (:var 0 S3)
#22 := (:var 1 S4)
#20 := (:var 2 S3)
#18 := (:var 3 S2)
#19 := (f6 f7 #18)
#21 := (f5 #19 #20)
#23 := (f4 #21 #22)
#25 := (f3 #23 #24)
#599 := (pattern #25)
#27 := (f3 #18 #24)
#115 := (= #25 #27)
#114 := (= #22 #25)
#72 := (= #20 #24)
#102 := (ite #72 #114 #115)
#600 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #599) #102)
#107 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #102)
#603 := (iff #107 #600)
#601 := (iff #102 #102)
#602 := [refl]: #601
#604 := [quant-intro #602]: #603
#76 := (ite #72 #22 #27)
#79 := (= #25 #76)
#82 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #79)
#104 := (iff #82 #107)
#103 := (iff #79 #102)
#106 := [rewrite]: #103
#105 := [quant-intro #106]: #104
#100 := (~ #82 #82)
#99 := (~ #79 #79)
#112 := [refl]: #99
#101 := [nnf-pos #112]: #100
#26 := (= #24 #20)
#28 := (ite #26 #22 #27)
#29 := (= #25 #28)
#30 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #29)
#83 := (iff #30 #82)
#80 := (iff #29 #79)
#77 := (= #28 #76)
#74 := (iff #26 #72)
#75 := [rewrite]: #74
#78 := [monotonicity #75]: #77
#81 := [monotonicity #78]: #80
#84 := [quant-intro #81]: #83
#71 := [asserted]: #30
#87 := [mp #71 #84]: #82
#113 := [mp~ #87 #101]: #82
#116 := [mp #113 #105]: #107
#605 := [mp #116 #604]: #600
#194 := (not #600)
#267 := (or #194 #262)
#264 := [quant-inst #35 #31 #38 #32]: #267
[unit-resolution #264 #605 #265]: false
unsat
d35743b8d8e626bc0fb89e7618256a033a85cc45 169 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f8 :: S3
#31 := f8
decl f4 :: (-> S5 S4 S2)
decl f12 :: S4
#42 := f12
decl f5 :: (-> S6 S3 S5)
decl f9 :: S3
#32 := f9
decl f6 :: (-> S7 S2 S6)
decl f11 :: S4
#38 := f11
decl f10 :: S2
#35 := f10
decl f7 :: S7
#8 := f7
#36 := (f6 f7 f10)
#37 := (f5 #36 f8)
#39 := (f4 #37 f11)
#40 := (f6 f7 #39)
#41 := (f5 #40 f9)
#43 := (f4 #41 f12)
#44 := (f3 #43 f8)
#89 := (= f11 #44)
#185 := (f3 #39 f8)
#276 := (= #44 #185)
#589 := (iff #276 #89)
#226 := (iff #89 #276)
#579 := (= #185 #44)
#586 := (iff #579 #276)
#588 := [commutativity]: #586
#585 := (iff #89 #579)
#272 := (= f11 #185)
#13 := (:var 0 S4)
#11 := (:var 1 S3)
#9 := (:var 2 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#14 := (f4 #12 #13)
#603 := (pattern #14)
#15 := (f3 #14 #11)
#68 := (= #13 #15)
#604 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #603) #68)
#71 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #68)
#607 := (iff #71 #604)
#605 := (iff #68 #68)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#121 := (~ #71 #71)
#119 := (~ #68 #68)
#120 := [refl]: #119
#122 := [nnf-pos #120]: #121
#16 := (= #15 #13)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #16)
#72 := (iff #17 #71)
#69 := (iff #16 #68)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#67 := [asserted]: #17
#76 := [mp #67 #73]: #71
#109 := [mp~ #76 #122]: #71
#609 := [mp #109 #608]: #604
#187 := (not #604)
#274 := (or #187 #272)
#265 := [quant-inst #35 #31 #38]: #274
#584 := [unit-resolution #265 #609]: #272
#221 := [monotonicity #584]: #585
#227 := [trans #221 #588]: #226
#587 := [symm #227]: #589
#277 := (= f12 #44)
#33 := (= f8 f9)
#597 := (ite #33 #277 #276)
#24 := (:var 0 S3)
#22 := (:var 1 S4)
#20 := (:var 2 S3)
#18 := (:var 3 S2)
#19 := (f6 f7 #18)
#21 := (f5 #19 #20)
#23 := (f4 #21 #22)
#25 := (f3 #23 #24)
#610 := (pattern #25)
#27 := (f3 #18 #24)
#126 := (= #25 #27)
#125 := (= #22 #25)
#75 := (= #20 #24)
#113 := (ite #75 #125 #126)
#611 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #610) #113)
#118 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #113)
#614 := (iff #118 #611)
#612 := (iff #113 #113)
#613 := [refl]: #612
#615 := [quant-intro #613]: #614
#79 := (ite #75 #22 #27)
#82 := (= #25 #79)
#85 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #82)
#115 := (iff #85 #118)
#114 := (iff #82 #113)
#117 := [rewrite]: #114
#116 := [quant-intro #117]: #115
#111 := (~ #85 #85)
#110 := (~ #82 #82)
#123 := [refl]: #110
#112 := [nnf-pos #123]: #111
#26 := (= #24 #20)
#28 := (ite #26 #22 #27)
#29 := (= #25 #28)
#30 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #29)
#86 := (iff #30 #85)
#83 := (iff #29 #82)
#80 := (= #28 #79)
#77 := (iff #26 #75)
#78 := [rewrite]: #77
#81 := [monotonicity #78]: #80
#84 := [monotonicity #81]: #83
#87 := [quant-intro #84]: #86
#74 := [asserted]: #30
#90 := [mp #74 #87]: #85
#124 := [mp~ #90 #112]: #85
#127 := [mp #124 #116]: #118
#616 := [mp #127 #615]: #611
#591 := (not #611)
#263 := (or #591 #597)
#275 := (= f9 f8)
#279 := (ite #275 #277 #276)
#264 := (or #591 #279)
#599 := (iff #264 #263)
#601 := (iff #263 #263)
#596 := [rewrite]: #601
#252 := (iff #279 #597)
#258 := (iff #275 #33)
#595 := [rewrite]: #258
#384 := [monotonicity #595]: #252
#600 := [monotonicity #384]: #599
#602 := [trans #600 #596]: #599
#598 := [quant-inst #39 #32 #42 #31]: #264
#592 := [mp #598 #602]: #263
#580 := [unit-resolution #592 #616]: #597
#250 := (not #597)
#581 := (or #250 #276)
#34 := (not #33)
#96 := (or #33 #89)
#101 := (not #96)
#45 := (= #44 f11)
#46 := (implies #34 #45)
#47 := (not #46)
#102 := (iff #47 #101)
#99 := (iff #46 #96)
#93 := (implies #34 #89)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #46 #93)
#91 := (iff #45 #89)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [monotonicity #100]: #102
#88 := [asserted]: #47
#106 := [mp #88 #103]: #101
#104 := [not-or-elim #106]: #34
#251 := (or #250 #33 #276)
#594 := [def-axiom]: #251
#582 := [unit-resolution #594 #104]: #581
#583 := [unit-resolution #582 #580]: #276
#590 := [mp #583 #587]: #89
#105 := (not #89)
#107 := [not-or-elim #106]: #105
[unit-resolution #107 #590]: false
unsat
71e81e17dffc11bde3007b51f81e62a30ca54d00 81 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f9 :: S3
#32 := f9
decl f4 :: (-> S5 S4 S2)
decl f12 :: S4
#42 := f12
decl f5 :: (-> S6 S3 S5)
decl f6 :: (-> S7 S2 S6)
decl f11 :: S4
#38 := f11
decl f8 :: S3
#31 := f8
decl f10 :: S2
#35 := f10
decl f7 :: S7
#8 := f7
#36 := (f6 f7 f10)
#37 := (f5 #36 f8)
#39 := (f4 #37 f11)
#40 := (f6 f7 #39)
#41 := (f5 #40 f9)
#43 := (f4 #41 f12)
#44 := (f3 #43 f9)
#89 := (= f12 #44)
#105 := (not #89)
#33 := (= f8 f9)
#96 := (or #33 #89)
#101 := (not #96)
#45 := (= #44 f12)
#34 := (not #33)
#46 := (implies #34 #45)
#47 := (not #46)
#102 := (iff #47 #101)
#99 := (iff #46 #96)
#93 := (implies #34 #89)
#97 := (iff #93 #96)
#98 := [rewrite]: #97
#94 := (iff #46 #93)
#91 := (iff #45 #89)
#92 := [rewrite]: #91
#95 := [monotonicity #92]: #94
#100 := [trans #95 #98]: #99
#103 := [monotonicity #100]: #102
#88 := [asserted]: #47
#106 := [mp #88 #103]: #101
#107 := [not-or-elim #106]: #105
#13 := (:var 0 S4)
#11 := (:var 1 S3)
#9 := (:var 2 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#14 := (f4 #12 #13)
#603 := (pattern #14)
#15 := (f3 #14 #11)
#68 := (= #13 #15)
#604 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #603) #68)
#71 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #68)
#607 := (iff #71 #604)
#605 := (iff #68 #68)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#121 := (~ #71 #71)
#119 := (~ #68 #68)
#120 := [refl]: #119
#122 := [nnf-pos #120]: #121
#16 := (= #15 #13)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #16)
#72 := (iff #17 #71)
#69 := (iff #16 #68)
#70 := [rewrite]: #69
#73 := [quant-intro #70]: #72
#67 := [asserted]: #17
#76 := [mp #67 #73]: #71
#109 := [mp~ #76 #122]: #71
#609 := [mp #109 #608]: #604
#187 := (not #604)
#276 := (or #187 #89)
#277 := [quant-inst #39 #32 #42]: #276
[unit-resolution #277 #609 #107]: false
unsat
9663363ef61bef2d7fe1deebc3df1c1645a5ab56 90 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f8 :: S3
#31 := f8
decl f4 :: (-> S5 S4 S2)
decl f12 :: S4
#41 := f12
decl f5 :: (-> S6 S3 S5)
decl f9 :: S3
#32 := f9
decl f6 :: (-> S7 S2 S6)
decl f11 :: S4
#37 := f11
decl f10 :: S2
#34 := f10
decl f7 :: S7
#8 := f7
#35 := (f6 f7 f10)
#36 := (f5 #35 f8)
#38 := (f4 #36 f11)
#39 := (f6 f7 #38)
#40 := (f5 #39 f9)
#42 := (f4 #40 f12)
#43 := (f3 #42 f8)
#88 := (= f12 #43)
#187 := (f3 #42 f9)
#241 := (= #187 #43)
#239 := (= #43 #187)
#33 := (= f8 f9)
#95 := (not #33)
#96 := (or #95 #88)
#101 := (not #96)
#44 := (= #43 f12)
#45 := (implies #33 #44)
#46 := (not #45)
#102 := (iff #46 #101)
#99 := (iff #45 #96)
#92 := (implies #33 #88)
#97 := (iff #92 #96)
#98 := [rewrite]: #97
#93 := (iff #45 #92)
#90 := (iff #44 #88)
#91 := [rewrite]: #90
#94 := [monotonicity #91]: #93
#100 := [trans #94 #98]: #99
#103 := [monotonicity #100]: #102
#87 := [asserted]: #46
#106 := [mp #87 #103]: #101
#104 := [not-or-elim #106]: #33
#240 := [monotonicity #104]: #239
#242 := [symm #240]: #241
#274 := (= f12 #187)
#13 := (:var 0 S4)
#11 := (:var 1 S3)
#9 := (:var 2 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#14 := (f4 #12 #13)
#603 := (pattern #14)
#15 := (f3 #14 #11)
#67 := (= #13 #15)
#604 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #603) #67)
#70 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #67)
#607 := (iff #70 #604)
#605 := (iff #67 #67)
#606 := [refl]: #605
#608 := [quant-intro #606]: #607
#121 := (~ #70 #70)
#119 := (~ #67 #67)
#120 := [refl]: #119
#122 := [nnf-pos #120]: #121
#16 := (= #15 #13)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #16)
#71 := (iff #17 #70)
#68 := (iff #16 #67)
#69 := [rewrite]: #68
#72 := [quant-intro #69]: #71
#66 := [asserted]: #17
#75 := [mp #66 #72]: #70
#109 := [mp~ #75 #122]: #70
#609 := [mp #109 #608]: #604
#265 := (not #604)
#275 := (or #265 #274)
#279 := [quant-inst #38 #32 #41]: #275
#578 := [unit-resolution #279 #609]: #274
#580 := [trans #578 #242]: #88
#105 := (not #88)
#107 := [not-or-elim #106]: #105
[unit-resolution #107 #580]: false
unsat
fb3d1591ff5af89c5578c6ff5cca5ed3529f7307 198 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f10 :: S3
#33 := f10
decl f11 :: S2
#35 := f11
#45 := (f3 f11 f10)
decl f4 :: (-> S5 S4 S2)
decl f13 :: S4
#42 := f13
decl f5 :: (-> S6 S3 S5)
decl f9 :: S3
#32 := f9
decl f6 :: (-> S7 S2 S6)
decl f12 :: S4
#38 := f12
decl f8 :: S3
#31 := f8
decl f7 :: S7
#8 := f7
#36 := (f6 f7 f11)
#37 := (f5 #36 f8)
#39 := (f4 #37 f12)
#40 := (f6 f7 #39)
#41 := (f5 #40 f9)
#43 := (f4 #41 f13)
#44 := (f3 #43 f10)
#46 := (= #44 #45)
#258 := (f3 #39 f8)
#572 := (f4 #37 #258)
#548 := (f3 #572 f10)
#377 := (= #548 #45)
#533 := (= #45 #548)
#379 := (= #258 #548)
#180 := (= f8 f10)
#537 := (ite #180 #379 #533)
#24 := (:var 0 S3)
#22 := (:var 1 S4)
#20 := (:var 2 S3)
#18 := (:var 3 S2)
#19 := (f6 f7 #18)
#21 := (f5 #19 #20)
#23 := (f4 #21 #22)
#25 := (f3 #23 #24)
#604 := (pattern #25)
#27 := (f3 #18 #24)
#120 := (= #25 #27)
#119 := (= #22 #25)
#76 := (= #20 #24)
#107 := (ite #76 #119 #120)
#605 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #604) #107)
#112 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #107)
#608 := (iff #112 #605)
#606 := (iff #107 #107)
#607 := [refl]: #606
#609 := [quant-intro #607]: #608
#80 := (ite #76 #22 #27)
#83 := (= #25 #80)
#86 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #83)
#109 := (iff #86 #112)
#108 := (iff #83 #107)
#111 := [rewrite]: #108
#110 := [quant-intro #111]: #109
#105 := (~ #86 #86)
#104 := (~ #83 #83)
#117 := [refl]: #104
#106 := [nnf-pos #117]: #105
#26 := (= #24 #20)
#28 := (ite #26 #22 #27)
#29 := (= #25 #28)
#30 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #29)
#87 := (iff #30 #86)
#84 := (iff #29 #83)
#81 := (= #28 #80)
#78 := (iff #26 #76)
#79 := [rewrite]: #78
#82 := [monotonicity #79]: #81
#85 := [monotonicity #82]: #84
#88 := [quant-intro #85]: #87
#75 := [asserted]: #30
#91 := [mp #75 #88]: #86
#118 := [mp~ #91 #106]: #86
#121 := [mp #118 #110]: #112
#610 := [mp #121 #609]: #605
#233 := (not #605)
#420 := (or #233 #537)
#380 := (ite #180 #379 #377)
#421 := (or #233 #380)
#381 := (iff #421 #420)
#431 := (iff #420 #420)
#526 := [rewrite]: #431
#535 := (iff #380 #537)
#534 := (iff #377 #533)
#536 := [rewrite]: #534
#538 := [monotonicity #536]: #535
#529 := [monotonicity #538]: #381
#527 := [trans #529 #526]: #381
#422 := [quant-inst #35 #31 #258 #33]: #421
#530 := [mp #422 #527]: #420
#510 := [unit-resolution #530 #610]: #537
#415 := (not #537)
#523 := (or #415 #533)
#267 := (not #180)
#181 := (= f9 f10)
#268 := (not #181)
#179 := (= f8 f9)
#266 := (not #179)
#259 := (and #266 #267 #268)
#34 := (distinct f8 f9 f10)
#90 := (not #34)
#92 := (or #90 #46)
#95 := (not #92)
#47 := (implies #34 #46)
#48 := (not #47)
#96 := (iff #48 #95)
#93 := (iff #47 #92)
#94 := [rewrite]: #93
#97 := [monotonicity #94]: #96
#89 := [asserted]: #48
#100 := [mp #89 #97]: #95
#98 := [not-or-elim #100]: #34
#246 := (or #90 #259)
#378 := [def-axiom]: #246
#512 := [unit-resolution #378 #98]: #259
#270 := (not #259)
#272 := (or #270 #267)
#269 := [def-axiom]: #272
#522 := [unit-resolution #269 #512]: #267
#433 := (or #415 #180 #533)
#426 := [def-axiom]: #433
#524 := [unit-resolution #426 #522]: #523
#520 := [unit-resolution #524 #510]: #533
#505 := [symm #520]: #377
#506 := (= #44 #548)
#586 := (f3 #39 f10)
#502 := (= #586 #548)
#511 := (= #548 #586)
#521 := (= #572 #39)
#532 := (= #258 f12)
#592 := (= f12 #258)
#13 := (:var 0 S4)
#11 := (:var 1 S3)
#9 := (:var 2 S2)
#10 := (f6 f7 #9)
#12 := (f5 #10 #11)
#14 := (f4 #12 #13)
#597 := (pattern #14)
#15 := (f3 #14 #11)
#69 := (= #13 #15)
#598 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) (:pat #597) #69)
#72 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #69)
#601 := (iff #72 #598)
#599 := (iff #69 #69)
#600 := [refl]: #599
#602 := [quant-intro #600]: #601
#115 := (~ #72 #72)
#113 := (~ #69 #69)
#114 := [refl]: #113
#116 := [nnf-pos #114]: #115
#16 := (= #15 #13)
#17 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4)) #16)
#73 := (iff #17 #72)
#70 := (iff #16 #69)
#71 := [rewrite]: #70
#74 := [quant-intro #71]: #73
#68 := [asserted]: #17
#77 := [mp #68 #74]: #72
#103 := [mp~ #77 #116]: #72
#603 := [mp #103 #602]: #598
#595 := (not #598)
#590 := (or #595 #592)
#596 := [quant-inst #35 #31 #38]: #590
#528 := [unit-resolution #596 #603]: #592
#519 := [symm #528]: #532
#513 := [monotonicity #519]: #521
#518 := [monotonicity #513]: #511
#503 := [symm #518]: #502
#244 := (= #44 #586)
#245 := (= f13 #44)
#588 := (ite #181 #245 #244)
#234 := (or #233 #588)
#235 := [quant-inst #39 #32 #42 #33]: #234
#525 := [unit-resolution #235 #610]: #588
#236 := (not #588)
#515 := (or #236 #244)
#273 := (or #270 #268)
#252 := [def-axiom]: #273
#514 := [unit-resolution #252 #512]: #268
#576 := (or #236 #181 #244)
#577 := [def-axiom]: #576
#516 := [unit-resolution #577 #514]: #515
#517 := [unit-resolution #516 #525]: #244
#507 := [trans #517 #503]: #506
#508 := [trans #507 #505]: #46
#99 := (not #46)
#101 := [not-or-elim #100]: #99
[unit-resolution #101 #508]: false
unsat
04f776d0bcdad9344e012498233d6d29f32415f7 31 0
#2 := false
decl f1 :: S1
#4 := f1
decl f9 :: (-> S5 S1)
decl f10 :: S5
#36 := f10
#37 := (f9 f10)
#38 := (= #37 f1)
#39 := (iff #38 #38)
#40 := (not #39)
#129 := (iff #40 false)
#1 := true
#124 := (not true)
#127 := (iff #124 false)
#128 := [rewrite]: #127
#125 := (iff #40 #124)
#122 := (iff #39 true)
#113 := (= f1 #37)
#117 := (iff #113 #113)
#120 := (iff #117 true)
#121 := [rewrite]: #120
#118 := (iff #39 #117)
#115 := (iff #38 #113)
#116 := [rewrite]: #115
#119 := [monotonicity #116 #116]: #118
#123 := [trans #119 #121]: #122
#126 := [monotonicity #123]: #125
#130 := [trans #126 #128]: #129
#112 := [asserted]: #40
[mp #112 #130]: false
unsat
618857fa3166a2d5419a42f28019f480aa778950 58 0
#2 := false
decl f3 :: (-> S2 S1)
decl f9 :: S2
#37 := f9
#38 := (f3 f9)
decl f1 :: S1
#4 := f1
#114 := (= f1 #38)
#39 := (= #38 f1)
#40 := (not #39)
#41 := (not #40)
#126 := (iff #41 #114)
#118 := (not #114)
#121 := (not #118)
#124 := (iff #121 #114)
#125 := [rewrite]: #124
#122 := (iff #41 #121)
#119 := (iff #40 #118)
#116 := (iff #39 #114)
#117 := [rewrite]: #116
#120 := [monotonicity #117]: #119
#123 := [monotonicity #120]: #122
#127 := [trans #123 #125]: #126
#113 := [asserted]: #41
#130 := [mp #113 #127]: #114
#8 := (:var 0 S2)
#9 := (f3 #8)
#638 := (pattern #9)
#62 := (= f1 #9)
#65 := (not #62)
#639 := (forall (vars (?v0 S2)) (:pat #638) #65)
#68 := (forall (vars (?v0 S2)) #65)
#642 := (iff #68 #639)
#640 := (iff #65 #65)
#641 := [refl]: #640
#643 := [quant-intro #641]: #642
#144 := (~ #68 #68)
#142 := (~ #65 #65)
#143 := [refl]: #142
#145 := [nnf-pos #143]: #144
#10 := (= #9 f1)
#11 := (not #10)
#12 := (forall (vars (?v0 S2)) #11)
#69 := (iff #12 #68)
#66 := (iff #11 #65)
#63 := (iff #10 #62)
#64 := [rewrite]: #63
#67 := [monotonicity #64]: #66
#70 := [quant-intro #67]: #69
#61 := [asserted]: #12
#73 := [mp #61 #70]: #68
#129 := [mp~ #73 #145]: #68
#644 := [mp #129 #643]: #639
#221 := (not #639)
#308 := (or #221 #118)
#222 := [quant-inst #37]: #308
[unit-resolution #222 #644 #130]: false
unsat
421fc4c47d5088f4fa169777ed876d4b4bc85b8f 46 0
#2 := false
decl f4 :: (-> S3 S1)
decl f9 :: S3
#37 := f9
#38 := (f4 f9)
decl f1 :: S1
#4 := f1
#113 := (= f1 #38)
#117 := (not #113)
#39 := (= #38 f1)
#40 := (not #39)
#118 := (iff #40 #117)
#115 := (iff #39 #113)
#116 := [rewrite]: #115
#119 := [monotonicity #116]: #118
#112 := [asserted]: #40
#122 := [mp #112 #119]: #117
#13 := (:var 0 S3)
#14 := (f4 #13)
#637 := (pattern #14)
#71 := (= f1 #14)
#638 := (forall (vars (?v0 S3)) (:pat #637) #71)
#75 := (forall (vars (?v0 S3)) #71)
#641 := (iff #75 #638)
#639 := (iff #71 #71)
#640 := [refl]: #639
#642 := [quant-intro #640]: #641
#124 := (~ #75 #75)
#123 := (~ #71 #71)
#138 := [refl]: #123
#125 := [nnf-pos #138]: #124
#15 := (= #14 f1)
#16 := (forall (vars (?v0 S3)) #15)
#76 := (iff #16 #75)
#73 := (iff #15 #71)
#74 := [rewrite]: #73
#77 := [quant-intro #74]: #76
#70 := [asserted]: #16
#80 := [mp #70 #77]: #75
#139 := [mp~ #80 #125]: #75
#643 := [mp #139 #642]: #638
#213 := (not #638)
#300 := (or #213 #113)
#214 := [quant-inst #37]: #300
[unit-resolution #214 #643 #122]: false
unsat
9e3a7aa4371f1826345d223063f64e874bc52086 124 0
#2 := false
decl f5 :: (-> S3 S4 S1)
decl f13 :: S4
#47 := f13
decl f6 :: (-> S5 S3 S3)
decl f12 :: S3
#45 := f12
decl f7 :: (-> S3 S5)
decl f11 :: S3
#43 := f11
#44 := (f7 f11)
#46 := (f6 #44 f12)
#48 := (f5 #46 f13)
decl f1 :: S1
#4 := f1
#135 := (= f1 #48)
#154 := (not #135)
#658 := [hypothesis]: #154
#52 := (f5 f12 f13)
#142 := (= f1 #52)
#50 := (f5 f11 f13)
#139 := (= f1 #50)
#145 := (or #139 #142)
#346 := (or #145 #135)
#155 := (iff #145 #154)
#53 := (= #52 f1)
#51 := (= #50 f1)
#54 := (or #51 #53)
#49 := (= #48 f1)
#55 := (iff #49 #54)
#56 := (not #55)
#158 := (iff #56 #155)
#148 := (iff #135 #145)
#151 := (not #148)
#156 := (iff #151 #155)
#157 := [rewrite]: #156
#152 := (iff #56 #151)
#149 := (iff #55 #148)
#146 := (iff #54 #145)
#143 := (iff #53 #142)
#144 := [rewrite]: #143
#140 := (iff #51 #139)
#141 := [rewrite]: #140
#147 := [monotonicity #141 #144]: #146
#137 := (iff #49 #135)
#138 := [rewrite]: #137
#150 := [monotonicity #138 #147]: #149
#153 := [monotonicity #150]: #152
#159 := [trans #153 #157]: #158
#134 := [asserted]: #56
#162 := [mp #134 #159]: #155
#272 := (not #155)
#345 := (or #145 #135 #272)
#342 := [def-axiom]: #345
#325 := [unit-resolution #342 #162]: #346
#330 := [unit-resolution #325 #658]: #145
#332 := (not #145)
#661 := (or #135 #332)
#20 := (:var 0 S4)
#18 := (:var 1 S3)
#16 := (:var 2 S3)
#17 := (f7 #16)
#19 := (f6 #17 #18)
#21 := (f5 #19 #20)
#684 := (pattern #21)
#25 := (f5 #18 #20)
#102 := (= f1 #25)
#23 := (f5 #16 #20)
#99 := (= f1 #23)
#105 := (or #99 #102)
#95 := (= f1 #21)
#108 := (iff #95 #105)
#685 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) (:pat #684) #108)
#111 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) #108)
#688 := (iff #111 #685)
#686 := (iff #108 #108)
#687 := [refl]: #686
#689 := [quant-intro #687]: #688
#166 := (~ #111 #111)
#180 := (~ #108 #108)
#181 := [refl]: #180
#167 := [nnf-pos #181]: #166
#26 := (= #25 f1)
#24 := (= #23 f1)
#27 := (or #24 #26)
#22 := (= #21 f1)
#28 := (iff #22 #27)
#29 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) #28)
#112 := (iff #29 #111)
#109 := (iff #28 #108)
#106 := (iff #27 #105)
#103 := (iff #26 #102)
#104 := [rewrite]: #103
#100 := (iff #24 #99)
#101 := [rewrite]: #100
#107 := [monotonicity #101 #104]: #106
#97 := (iff #22 #95)
#98 := [rewrite]: #97
#110 := [monotonicity #98 #107]: #109
#113 := [quant-intro #110]: #112
#94 := [asserted]: #29
#116 := [mp #94 #113]: #111
#182 := [mp~ #116 #167]: #111
#690 := [mp #182 #689]: #685
#331 := (not #685)
#665 := (or #331 #148)
#666 := [quant-inst #43 #45 #47]: #665
#318 := [unit-resolution #666 #690]: #148
#667 := (or #151 #135 #332)
#668 := [def-axiom]: #667
#302 := [unit-resolution #668 #318]: #661
#645 := [unit-resolution #302 #330 #658]: false
#306 := [lemma #645]: #135
#319 := (or #332 #154)
#662 := (or #332 #154 #272)
#664 := [def-axiom]: #662
#451 := [unit-resolution #664 #162]: #319
#307 := [unit-resolution #451 #306]: #332
#308 := (or #154 #145)
#663 := (or #151 #154 #145)
#669 := [def-axiom]: #663
#309 := [unit-resolution #669 #318]: #308
[unit-resolution #309 #307 #306]: false
unsat
f06e509678a15cfe1fb09ac8d8cd1679c65b806e 159 0
#2 := false
decl f3 :: (-> S3 S2 S1)
decl f12 :: S2
#47 := f12
decl f4 :: S3
#8 := f4
#336 := (f3 f4 f12)
decl f1 :: S1
#4 := f1
#333 := (= f1 #336)
decl f11 :: S3
#44 := f11
#50 := (f3 f11 f12)
#136 := (= f1 #50)
#337 := (or #136 #333)
decl f6 :: (-> S5 S3 S3)
decl f7 :: (-> S3 S5)
#45 := (f7 f11)
#46 := (f6 #45 f4)
#48 := (f3 #46 f12)
#132 := (= f1 #48)
#145 := (not #132)
#653 := [hypothesis]: #145
#331 := (or #136 #132)
#146 := (iff #136 #145)
#51 := (= #50 f1)
#49 := (= #48 f1)
#52 := (iff #49 #51)
#53 := (not #52)
#149 := (iff #53 #146)
#139 := (iff #132 #136)
#142 := (not #139)
#147 := (iff #142 #146)
#148 := [rewrite]: #147
#143 := (iff #53 #142)
#140 := (iff #52 #139)
#137 := (iff #51 #136)
#138 := [rewrite]: #137
#134 := (iff #49 #132)
#135 := [rewrite]: #134
#141 := [monotonicity #135 #138]: #140
#144 := [monotonicity #141]: #143
#150 := [trans #144 #148]: #149
#131 := [asserted]: #53
#153 := [mp #131 #150]: #146
#243 := (not #146)
#330 := (or #136 #132 #243)
#244 := [def-axiom]: #330
#245 := [unit-resolution #244 #153]: #331
#655 := [unit-resolution #245 #653]: #136
#659 := (not #337)
#299 := (or #132 #659)
#316 := (iff #132 #337)
#9 := (:var 0 S2)
#20 := (:var 1 S3)
#18 := (:var 2 S3)
#19 := (f7 #18)
#21 := (f6 #19 #20)
#22 := (f3 #21 #9)
#675 := (pattern #22)
#26 := (f3 #20 #9)
#99 := (= f1 #26)
#24 := (f3 #18 #9)
#96 := (= f1 #24)
#102 := (or #96 #99)
#92 := (= f1 #22)
#105 := (iff #92 #102)
#676 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S2)) (:pat #675) #105)
#108 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S2)) #105)
#679 := (iff #108 #676)
#677 := (iff #105 #105)
#678 := [refl]: #677
#680 := [quant-intro #678]: #679
#157 := (~ #108 #108)
#171 := (~ #105 #105)
#172 := [refl]: #171
#158 := [nnf-pos #172]: #157
#27 := (= #26 f1)
#25 := (= #24 f1)
#28 := (or #25 #27)
#23 := (= #22 f1)
#29 := (iff #23 #28)
#30 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S2)) #29)
#109 := (iff #30 #108)
#106 := (iff #29 #105)
#103 := (iff #28 #102)
#100 := (iff #27 #99)
#101 := [rewrite]: #100
#97 := (iff #25 #96)
#98 := [rewrite]: #97
#104 := [monotonicity #98 #101]: #103
#94 := (iff #23 #92)
#95 := [rewrite]: #94
#107 := [monotonicity #95 #104]: #106
#110 := [quant-intro #107]: #109
#91 := [asserted]: #30
#113 := [mp #91 #110]: #108
#173 := [mp~ #113 #158]: #108
#681 := [mp #173 #680]: #676
#310 := (not #676)
#442 := (or #310 #316)
#649 := [quant-inst #44 #8 #47]: #442
#298 := [unit-resolution #649 #681]: #316
#650 := (not #316)
#308 := (or #650 #132 #659)
#313 := [def-axiom]: #308
#300 := [unit-resolution #313 #298]: #299
#638 := [unit-resolution #300 #653]: #659
#332 := (not #136)
#321 := (or #337 #332)
#322 := [def-axiom]: #321
#639 := [unit-resolution #322 #638 #655]: false
#640 := [lemma #639]: #132
#641 := (or #145 #337)
#651 := (or #650 #145 #337)
#309 := [def-axiom]: #651
#642 := [unit-resolution #309 #298]: #641
#644 := [unit-resolution #642 #640]: #337
#335 := (or #332 #145)
#323 := (or #332 #145 #243)
#334 := [def-axiom]: #323
#263 := [unit-resolution #334 #153]: #335
#646 := [unit-resolution #263 #640]: #332
#654 := (or #659 #136 #333)
#660 := [def-axiom]: #654
#284 := [unit-resolution #660 #646 #644]: #333
#10 := (f3 f4 #9)
#661 := (pattern #10)
#74 := (= f1 #10)
#77 := (not #74)
#662 := (forall (vars (?v0 S2)) (:pat #661) #77)
#80 := (forall (vars (?v0 S2)) #77)
#665 := (iff #80 #662)
#663 := (iff #77 #77)
#664 := [refl]: #663
#666 := [quant-intro #664]: #665
#167 := (~ #80 #80)
#165 := (~ #77 #77)
#166 := [refl]: #165
#168 := [nnf-pos #166]: #167
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#81 := (iff #13 #80)
#78 := (iff #12 #77)
#75 := (iff #11 #74)
#76 := [rewrite]: #75
#79 := [monotonicity #76]: #78
#82 := [quant-intro #79]: #81
#73 := [asserted]: #13
#85 := [mp #73 #82]: #80
#152 := [mp~ #85 #168]: #80
#667 := [mp #152 #666]: #662
#656 := (not #333)
#637 := (not #662)
#643 := (or #637 #656)
#279 := [quant-inst #47]: #643
[unit-resolution #279 #667 #284]: false
unsat
14cd77cb80a411e3c351de92a11790bff950543a 133 0
#2 := false
decl f4 :: (-> S4 S3 S1)
decl f12 :: S3
#47 := f12
decl f5 :: S4
#13 := f5
#228 := (f4 f5 f12)
decl f1 :: S1
#4 := f1
#315 := (= f1 #228)
#642 := (not #315)
decl f11 :: S4
#44 := f11
#229 := (f4 f11 f12)
#316 := (= f1 #229)
#308 := (or #315 #316)
#293 := (not #308)
decl f6 :: (-> S5 S4 S4)
decl f7 :: (-> S4 S5)
#45 := (f7 f11)
#46 := (f6 #45 f5)
#48 := (f4 #46 f12)
#129 := (= f1 #48)
#248 := (iff #129 #308)
#14 := (:var 0 S3)
#20 := (:var 1 S4)
#18 := (:var 2 S4)
#19 := (f7 #18)
#21 := (f6 #19 #20)
#22 := (f4 #21 #14)
#660 := (pattern #22)
#26 := (f4 #20 #14)
#96 := (= f1 #26)
#24 := (f4 #18 #14)
#93 := (= f1 #24)
#99 := (or #93 #96)
#89 := (= f1 #22)
#102 := (iff #89 #99)
#661 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S3)) (:pat #660) #102)
#105 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S3)) #102)
#664 := (iff #105 #661)
#662 := (iff #102 #102)
#663 := [refl]: #662
#665 := [quant-intro #663]: #664
#142 := (~ #105 #105)
#156 := (~ #102 #102)
#157 := [refl]: #156
#143 := [nnf-pos #157]: #142
#27 := (= #26 f1)
#25 := (= #24 f1)
#28 := (or #25 #27)
#23 := (= #22 f1)
#29 := (iff #23 #28)
#30 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S3)) #29)
#106 := (iff #30 #105)
#103 := (iff #29 #102)
#100 := (iff #28 #99)
#97 := (iff #27 #96)
#98 := [rewrite]: #97
#94 := (iff #25 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #23 #89)
#92 := [rewrite]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [quant-intro #104]: #106
#88 := [asserted]: #30
#110 := [mp #88 #107]: #105
#158 := [mp~ #110 #143]: #105
#666 := [mp #158 #665]: #661
#322 := (not #661)
#301 := (or #322 #248)
#230 := (or #316 #315)
#317 := (iff #129 #230)
#638 := (or #322 #317)
#295 := (iff #638 #301)
#634 := (iff #301 #301)
#306 := [rewrite]: #634
#321 := (iff #317 #248)
#319 := (iff #230 #308)
#320 := [rewrite]: #319
#318 := [monotonicity #320]: #321
#427 := [monotonicity #318]: #295
#307 := [trans #427 #306]: #295
#640 := [quant-inst #44 #13 #47]: #638
#641 := [mp #640 #307]: #301
#624 := [unit-resolution #641 #666]: #248
#294 := (not #248)
#625 := (or #294 #293)
#133 := (not #129)
#49 := (= #48 f1)
#50 := (not #49)
#134 := (iff #50 #133)
#131 := (iff #49 #129)
#132 := [rewrite]: #131
#135 := [monotonicity #132]: #134
#128 := [asserted]: #50
#138 := [mp #128 #135]: #133
#637 := (or #294 #129 #293)
#278 := [def-axiom]: #637
#628 := [unit-resolution #278 #138]: #625
#264 := [unit-resolution #628 #624]: #293
#643 := (or #308 #642)
#644 := [def-axiom]: #643
#629 := [unit-resolution #644 #264]: #642
#15 := (f4 f5 #14)
#653 := (pattern #15)
#81 := (= f1 #15)
#654 := (forall (vars (?v0 S3)) (:pat #653) #81)
#85 := (forall (vars (?v0 S3)) #81)
#657 := (iff #85 #654)
#655 := (iff #81 #81)
#656 := [refl]: #655
#658 := [quant-intro #656]: #657
#140 := (~ #85 #85)
#139 := (~ #81 #81)
#154 := [refl]: #139
#141 := [nnf-pos #154]: #140
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S3)) #16)
#86 := (iff #17 #85)
#83 := (iff #16 #81)
#84 := [rewrite]: #83
#87 := [quant-intro #84]: #86
#80 := [asserted]: #17
#90 := [mp #80 #87]: #85
#155 := [mp~ #90 #141]: #85
#659 := [mp #155 #658]: #654
#626 := (not #654)
#627 := (or #626 #315)
#622 := [quant-inst #47]: #627
[unit-resolution #622 #659 #629]: false
unsat
79e2168b4b0ff2f5af8111880c8b7e92b3513c4b 153 0
#2 := false
decl f5 :: (-> S3 S4 S1)
decl f13 :: S4
#47 := f13
decl f6 :: (-> S5 S3 S3)
decl f11 :: S3
#43 := f11
decl f7 :: (-> S3 S5)
decl f12 :: S3
#45 := f12
#50 := (f7 f12)
#51 := (f6 #50 f11)
#52 := (f5 #51 f13)
decl f1 :: S1
#4 := f1
#138 := (= f1 #52)
#334 := (not #138)
#44 := (f7 f11)
#46 := (f6 #44 f12)
#48 := (f5 #46 f13)
#134 := (= f1 #48)
#147 := (not #134)
#253 := [hypothesis]: #147
#333 := (or #138 #134)
#148 := (iff #138 #147)
#53 := (= #52 f1)
#49 := (= #48 f1)
#54 := (iff #49 #53)
#55 := (not #54)
#151 := (iff #55 #148)
#141 := (iff #134 #138)
#144 := (not #141)
#149 := (iff #144 #148)
#150 := [rewrite]: #149
#145 := (iff #55 #144)
#142 := (iff #54 #141)
#139 := (iff #53 #138)
#140 := [rewrite]: #139
#136 := (iff #49 #134)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#146 := [monotonicity #143]: #145
#152 := [trans #146 #150]: #151
#133 := [asserted]: #55
#155 := [mp #133 #152]: #148
#245 := (not #148)
#332 := (or #138 #134 #245)
#246 := [def-axiom]: #332
#247 := [unit-resolution #246 #155]: #333
#632 := [unit-resolution #247 #253]: #138
#338 := (f5 f11 f13)
#335 := (= f1 #338)
#339 := (f5 f12 f13)
#318 := (= f1 #339)
#655 := (or #318 #335)
#652 := (not #655)
#355 := (or #134 #652)
#642 := (iff #134 #655)
#20 := (:var 0 S4)
#18 := (:var 1 S3)
#16 := (:var 2 S3)
#17 := (f7 #16)
#19 := (f6 #17 #18)
#21 := (f5 #19 #20)
#677 := (pattern #21)
#25 := (f5 #18 #20)
#101 := (= f1 #25)
#23 := (f5 #16 #20)
#98 := (= f1 #23)
#104 := (or #98 #101)
#94 := (= f1 #21)
#107 := (iff #94 #104)
#678 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) (:pat #677) #107)
#110 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) #107)
#681 := (iff #110 #678)
#679 := (iff #107 #107)
#680 := [refl]: #679
#682 := [quant-intro #680]: #681
#159 := (~ #110 #110)
#173 := (~ #107 #107)
#174 := [refl]: #173
#160 := [nnf-pos #174]: #159
#26 := (= #25 f1)
#24 := (= #23 f1)
#27 := (or #24 #26)
#22 := (= #21 f1)
#28 := (iff #22 #27)
#29 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) #28)
#111 := (iff #29 #110)
#108 := (iff #28 #107)
#105 := (iff #27 #104)
#102 := (iff #26 #101)
#103 := [rewrite]: #102
#99 := (iff #24 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#96 := (iff #22 #94)
#97 := [rewrite]: #96
#109 := [monotonicity #97 #106]: #108
#112 := [quant-intro #109]: #111
#93 := [asserted]: #29
#115 := [mp #93 #112]: #110
#175 := [mp~ #115 #160]: #110
#683 := [mp #175 #682]: #678
#651 := (not #678)
#639 := (or #651 #642)
#312 := (or #335 #318)
#444 := (iff #134 #312)
#645 := (or #651 #444)
#646 := (iff #645 #639)
#286 := (iff #639 #639)
#287 := [rewrite]: #286
#643 := (iff #444 #642)
#640 := (iff #312 #655)
#641 := [rewrite]: #640
#644 := [monotonicity #641]: #643
#648 := [monotonicity #644]: #646
#649 := [trans #648 #287]: #646
#281 := [quant-inst #43 #45 #47]: #645
#647 := [mp #281 #649]: #639
#633 := [unit-resolution #647 #683]: #642
#650 := (not #642)
#636 := (or #650 #134 #652)
#637 := [def-axiom]: #636
#356 := [unit-resolution #637 #633]: #355
#630 := [unit-resolution #356 #253]: #652
#631 := (or #334 #655)
#657 := (iff #138 #655)
#323 := (or #651 #657)
#324 := [quant-inst #45 #43 #47]: #323
#634 := [unit-resolution #324 #683]: #657
#653 := (not #657)
#295 := (or #653 #334 #655)
#638 := [def-axiom]: #295
#635 := [unit-resolution #638 #634]: #631
#344 := [unit-resolution #635 #630 #632]: false
#345 := [lemma #344]: #134
#337 := (or #334 #147)
#325 := (or #334 #147 #245)
#336 := [def-axiom]: #325
#265 := [unit-resolution #336 #155]: #337
#346 := [unit-resolution #265 #345]: #334
#348 := (or #147 #655)
#343 := (or #650 #147 #655)
#359 := [def-axiom]: #343
#626 := [unit-resolution #359 #633]: #348
#627 := [unit-resolution #626 #345]: #655
#340 := (or #138 #652)
#311 := (or #653 #138 #652)
#654 := [def-axiom]: #311
#624 := [unit-resolution #654 #634]: #340
[unit-resolution #624 #627 #346]: false
unsat
00b5c7702f2f9d2a9e2bcf2d2e1bc9e9ddd72c8d 126 0
#2 := false
decl f5 :: (-> S3 S4 S1)
decl f12 :: S4
#46 := f12
decl f6 :: (-> S5 S3 S3)
decl f11 :: S3
#43 := f11
decl f7 :: (-> S3 S5)
#44 := (f7 f11)
#45 := (f6 #44 f11)
#47 := (f5 #45 f12)
decl f1 :: S1
#4 := f1
#131 := (= f1 #47)
#144 := (not #131)
#635 := [hypothesis]: #144
#49 := (f5 f11 f12)
#135 := (= f1 #49)
#330 := (or #135 #131)
#145 := (iff #135 #144)
#50 := (= #49 f1)
#48 := (= #47 f1)
#51 := (iff #48 #50)
#52 := (not #51)
#148 := (iff #52 #145)
#138 := (iff #131 #135)
#141 := (not #138)
#146 := (iff #141 #145)
#147 := [rewrite]: #146
#142 := (iff #52 #141)
#139 := (iff #51 #138)
#136 := (iff #50 #135)
#137 := [rewrite]: #136
#133 := (iff #48 #131)
#134 := [rewrite]: #133
#140 := [monotonicity #134 #137]: #139
#143 := [monotonicity #140]: #142
#149 := [trans #143 #147]: #148
#130 := [asserted]: #52
#152 := [mp #130 #149]: #145
#242 := (not #145)
#329 := (or #135 #131 #242)
#243 := [def-axiom]: #329
#244 := [unit-resolution #243 #152]: #330
#296 := [unit-resolution #244 #635]: #135
#331 := (not #135)
#298 := (or #131 #331)
#20 := (:var 0 S4)
#18 := (:var 1 S3)
#16 := (:var 2 S3)
#17 := (f7 #16)
#19 := (f6 #17 #18)
#21 := (f5 #19 #20)
#674 := (pattern #21)
#25 := (f5 #18 #20)
#98 := (= f1 #25)
#23 := (f5 #16 #20)
#95 := (= f1 #23)
#101 := (or #95 #98)
#91 := (= f1 #21)
#104 := (iff #91 #101)
#675 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) (:pat #674) #104)
#107 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) #104)
#678 := (iff #107 #675)
#676 := (iff #104 #104)
#677 := [refl]: #676
#679 := [quant-intro #677]: #678
#156 := (~ #107 #107)
#170 := (~ #104 #104)
#171 := [refl]: #170
#157 := [nnf-pos #171]: #156
#26 := (= #25 f1)
#24 := (= #23 f1)
#27 := (or #24 #26)
#22 := (= #21 f1)
#28 := (iff #22 #27)
#29 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) #28)
#108 := (iff #29 #107)
#105 := (iff #28 #104)
#102 := (iff #27 #101)
#99 := (iff #26 #98)
#100 := [rewrite]: #99
#96 := (iff #24 #95)
#97 := [rewrite]: #96
#103 := [monotonicity #97 #100]: #102
#93 := (iff #22 #91)
#94 := [rewrite]: #93
#106 := [monotonicity #94 #103]: #105
#109 := [quant-intro #106]: #108
#90 := [asserted]: #29
#112 := [mp #90 #109]: #107
#172 := [mp~ #112 #157]: #107
#680 := [mp #172 #679]: #675
#309 := (not #675)
#441 := (or #309 #138)
#335 := (or #135 #135)
#332 := (iff #131 #335)
#648 := (or #309 #332)
#321 := (iff #648 #441)
#656 := (iff #441 #441)
#657 := [rewrite]: #656
#652 := (iff #332 #138)
#336 := (iff #335 #135)
#315 := [rewrite]: #336
#654 := [monotonicity #315]: #652
#655 := [monotonicity #654]: #321
#658 := [trans #655 #657]: #321
#320 := [quant-inst #43 #43 #46]: #648
#653 := [mp #320 #658]: #441
#297 := [unit-resolution #653 #680]: #138
#659 := (or #141 #131 #331)
#649 := [def-axiom]: #659
#299 := [unit-resolution #649 #297]: #298
#637 := [unit-resolution #299 #296 #635]: false
#638 := [lemma #637]: #131
#334 := (or #331 #144)
#322 := (or #331 #144 #242)
#333 := [def-axiom]: #322
#262 := [unit-resolution #333 #152]: #334
#639 := [unit-resolution #262 #638]: #331
#640 := (or #144 #135)
#307 := (or #141 #144 #135)
#312 := [def-axiom]: #307
#641 := [unit-resolution #312 #297]: #640
[unit-resolution #641 #639 #638]: false
unsat
36be54782f18afe7f767077c9cb63504fffdbec4 264 0
#2 := false
decl f5 :: (-> S3 S4 S1)
decl f14 :: S4
#50 := f14
decl f12 :: S3
#45 := f12
#631 := (f5 f12 f14)
decl f1 :: S1
#4 := f1
#344 := (= f1 #631)
decl f13 :: S3
#47 := f13
#342 := (f5 f13 f14)
#339 := (= f1 #342)
#629 := (or #339 #344)
decl f6 :: (-> S5 S3 S3)
decl f7 :: (-> S3 S5)
#46 := (f7 f12)
#48 := (f6 #46 f13)
#316 := (f5 #48 f14)
#448 := (= f1 #316)
#623 := (iff #448 #629)
#589 := (not #623)
#601 := (not #629)
#613 := (not #344)
decl f11 :: S3
#43 := f11
#644 := (f5 f11 f14)
#645 := (= f1 #644)
#491 := (or #344 #645)
#616 := (not #491)
#44 := (f7 f11)
#53 := (f6 #44 f12)
#343 := (f5 #53 f14)
#322 := (= f1 #343)
#599 := (iff #322 #491)
#591 := (not #599)
#584 := [hypothesis]: #591
#20 := (:var 0 S4)
#18 := (:var 1 S3)
#16 := (:var 2 S3)
#17 := (f7 #16)
#19 := (f6 #17 #18)
#21 := (f5 #19 #20)
#681 := (pattern #21)
#25 := (f5 #18 #20)
#105 := (= f1 #25)
#23 := (f5 #16 #20)
#102 := (= f1 #23)
#108 := (or #102 #105)
#98 := (= f1 #21)
#111 := (iff #98 #108)
#682 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) (:pat #681) #111)
#114 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) #111)
#685 := (iff #114 #682)
#683 := (iff #111 #111)
#684 := [refl]: #683
#686 := [quant-intro #684]: #685
#163 := (~ #114 #114)
#177 := (~ #111 #111)
#178 := [refl]: #177
#164 := [nnf-pos #178]: #163
#26 := (= #25 f1)
#24 := (= #23 f1)
#27 := (or #24 #26)
#22 := (= #21 f1)
#28 := (iff #22 #27)
#29 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S4)) #28)
#115 := (iff #29 #114)
#112 := (iff #28 #111)
#109 := (iff #27 #108)
#106 := (iff #26 #105)
#107 := [rewrite]: #106
#103 := (iff #24 #102)
#104 := [rewrite]: #103
#110 := [monotonicity #104 #107]: #109
#100 := (iff #22 #98)
#101 := [rewrite]: #100
#113 := [monotonicity #101 #110]: #112
#116 := [quant-intro #113]: #115
#97 := [asserted]: #29
#119 := [mp #97 #116]: #114
#179 := [mp~ #119 #164]: #114
#687 := [mp #179 #686]: #682
#655 := (not #682)
#597 := (or #655 #599)
#608 := (or #645 #344)
#490 := (iff #322 #608)
#600 := (or #655 #490)
#500 := (iff #600 #597)
#503 := (iff #597 #597)
#496 := [rewrite]: #503
#501 := (iff #490 #599)
#492 := (iff #608 #491)
#451 := [rewrite]: #492
#596 := [monotonicity #451]: #501
#502 := [monotonicity #596]: #500
#504 := [trans #502 #496]: #500
#485 := [quant-inst #43 #45 #50]: #600
#505 := [mp #485 #504]: #597
#585 := [unit-resolution #505 #687 #584]: false
#586 := [lemma #585]: #599
#662 := (not #322)
#659 := (or #322 #339)
#656 := (not #659)
#54 := (f7 #53)
#55 := (f6 #54 f13)
#56 := (f5 #55 f14)
#142 := (= f1 #56)
#338 := (not #142)
#49 := (f6 #44 #48)
#51 := (f5 #49 f14)
#138 := (= f1 #51)
#151 := (not #138)
#587 := [hypothesis]: #151
#337 := (or #142 #138)
#152 := (iff #142 #151)
#57 := (= #56 f1)
#52 := (= #51 f1)
#58 := (iff #52 #57)
#59 := (not #58)
#155 := (iff #59 #152)
#145 := (iff #138 #142)
#148 := (not #145)
#153 := (iff #148 #152)
#154 := [rewrite]: #153
#149 := (iff #59 #148)
#146 := (iff #58 #145)
#143 := (iff #57 #142)
#144 := [rewrite]: #143
#140 := (iff #52 #138)
#141 := [rewrite]: #140
#147 := [monotonicity #141 #144]: #146
#150 := [monotonicity #147]: #149
#156 := [trans #150 #154]: #155
#137 := [asserted]: #59
#159 := [mp #137 #156]: #152
#249 := (not #152)
#336 := (or #142 #138 #249)
#250 := [def-axiom]: #336
#251 := [unit-resolution #250 #159]: #337
#581 := [unit-resolution #251 #587]: #142
#572 := (or #338 #659)
#661 := (iff #142 #659)
#327 := (or #655 #661)
#328 := [quant-inst #53 #47 #50]: #327
#588 := [unit-resolution #328 #687]: #661
#657 := (not #661)
#299 := (or #657 #338 #659)
#642 := [def-axiom]: #299
#573 := [unit-resolution #642 #588]: #572
#575 := [unit-resolution #573 #581]: #659
#665 := (not #339)
#605 := (or #655 #623)
#628 := (or #344 #339)
#632 := (iff #448 #628)
#625 := (or #655 #632)
#620 := (iff #625 #605)
#627 := (iff #605 #605)
#468 := [rewrite]: #627
#624 := (iff #632 #623)
#633 := (iff #628 #629)
#622 := [rewrite]: #633
#619 := [monotonicity #622]: #624
#621 := [monotonicity #619]: #620
#469 := [trans #621 #468]: #620
#626 := [quant-inst #45 #47 #50]: #625
#470 := [mp #626 #469]: #605
#576 := [unit-resolution #470 #687]: #623
#566 := (or #589 #601)
#364 := (not #448)
#648 := (or #448 #645)
#637 := (not #648)
#578 := (or #138 #637)
#285 := (iff #138 #648)
#290 := (or #655 #285)
#646 := (or #645 #448)
#647 := (iff #138 #646)
#291 := (or #655 #647)
#651 := (iff #291 #290)
#640 := (iff #290 #290)
#641 := [rewrite]: #640
#650 := (iff #647 #285)
#643 := (iff #646 #648)
#649 := [rewrite]: #643
#652 := [monotonicity #649]: #650
#654 := [monotonicity #652]: #651
#347 := [trans #654 #641]: #651
#653 := [quant-inst #43 #48 #50]: #291
#363 := [mp #653 #347]: #290
#577 := [unit-resolution #363 #687]: #285
#634 := (not #285)
#638 := (or #634 #138 #637)
#635 := [def-axiom]: #638
#574 := [unit-resolution #635 #577]: #578
#579 := [unit-resolution #574 #587]: #637
#365 := (or #648 #364)
#351 := [def-axiom]: #365
#565 := [unit-resolution #351 #579]: #364
#583 := (or #589 #448 #601)
#580 := [def-axiom]: #583
#568 := [unit-resolution #580 #565]: #566
#569 := [unit-resolution #568 #576]: #601
#612 := (or #629 #665)
#506 := [def-axiom]: #612
#570 := [unit-resolution #506 #569]: #665
#314 := (or #656 #322 #339)
#319 := [def-axiom]: #314
#567 := [unit-resolution #319 #570 #575]: #322
#366 := (not #645)
#257 := (or #648 #366)
#636 := [def-axiom]: #257
#571 := [unit-resolution #636 #579]: #366
#507 := (or #629 #613)
#508 := [def-axiom]: #507
#551 := [unit-resolution #508 #569]: #613
#617 := (or #616 #344 #645)
#611 := [def-axiom]: #617
#552 := [unit-resolution #611 #551 #571]: #616
#449 := (or #591 #662 #491)
#450 := [def-axiom]: #449
#554 := [unit-resolution #450 #552 #567 #586]: false
#555 := [lemma #554]: #138
#341 := (or #338 #151)
#329 := (or #338 #151 #249)
#340 := [def-axiom]: #329
#269 := [unit-resolution #340 #159]: #341
#556 := [unit-resolution #269 #555]: #338
#557 := (or #142 #656)
#315 := (or #657 #142 #656)
#658 := [def-axiom]: #315
#558 := [unit-resolution #658 #588]: #557
#559 := [unit-resolution #558 #556]: #656
#663 := (or #659 #662)
#664 := [def-axiom]: #663
#560 := [unit-resolution #664 #559]: #662
#618 := (or #591 #322 #616)
#447 := [def-axiom]: #618
#561 := [unit-resolution #447 #560 #586]: #616
#614 := (or #491 #613)
#615 := [def-axiom]: #614
#562 := [unit-resolution #615 #561]: #613
#660 := (or #659 #665)
#666 := [def-axiom]: #660
#563 := [unit-resolution #666 #559]: #665
#598 := (or #601 #339 #344)
#602 := [def-axiom]: #598
#553 := [unit-resolution #602 #563 #562]: #601
#564 := (or #151 #648)
#639 := (or #634 #151 #648)
#348 := [def-axiom]: #639
#542 := [unit-resolution #348 #577]: #564
#543 := [unit-resolution #542 #555]: #648
#609 := (or #491 #366)
#610 := [def-axiom]: #609
#545 := [unit-resolution #610 #561]: #366
#359 := (or #637 #448 #645)
#360 := [def-axiom]: #359
#546 := [unit-resolution #360 #545 #543]: #448
#582 := (or #589 #364 #629)
#592 := [def-axiom]: #582
#547 := [unit-resolution #592 #546 #553]: #589
[unit-resolution #470 #687 #547]: false
unsat
d2f2f1ccdb6d545bd3f136b38b7ffe9f993f5bcd 158 0
#2 := false
decl f8 :: (-> S5 S6 S1)
decl f13 :: S6
#47 := f13
decl f12 :: S5
#45 := f12
#52 := (f8 f12 f13)
decl f1 :: S1
#4 := f1
#142 := (= f1 #52)
#196 := (not #142)
decl f11 :: S5
#43 := f11
#50 := (f8 f11 f13)
#139 := (= f1 #50)
#195 := (not #139)
#197 := (or #195 #196)
#198 := (not #197)
#339 := [hypothesis]: #198
decl f9 :: (-> S7 S5 S5)
decl f10 :: (-> S5 S7)
#44 := (f10 f11)
#46 := (f9 #44 f12)
#48 := (f8 #46 f13)
#135 := (= f1 #48)
#154 := (not #135)
#345 := (or #154 #197)
#209 := (iff #135 #197)
#145 := (and #139 #142)
#155 := (iff #145 #154)
#212 := (iff #155 #209)
#204 := (iff #197 #135)
#210 := (iff #204 #209)
#211 := [rewrite]: #210
#207 := (iff #155 #204)
#201 := (iff #198 #154)
#205 := (iff #201 #204)
#206 := [rewrite]: #205
#202 := (iff #155 #201)
#199 := (iff #145 #198)
#200 := [rewrite]: #199
#203 := [monotonicity #200]: #202
#208 := [trans #203 #206]: #207
#213 := [trans #208 #211]: #212
#53 := (= #52 f1)
#51 := (= #50 f1)
#54 := (and #51 #53)
#49 := (= #48 f1)
#55 := (iff #49 #54)
#56 := (not #55)
#158 := (iff #56 #155)
#148 := (iff #135 #145)
#151 := (not #148)
#156 := (iff #151 #155)
#157 := [rewrite]: #156
#152 := (iff #56 #151)
#149 := (iff #55 #148)
#146 := (iff #54 #145)
#143 := (iff #53 #142)
#144 := [rewrite]: #143
#140 := (iff #51 #139)
#141 := [rewrite]: #140
#147 := [monotonicity #141 #144]: #146
#137 := (iff #49 #135)
#138 := [rewrite]: #137
#150 := [monotonicity #138 #147]: #149
#153 := [monotonicity #150]: #152
#159 := [trans #153 #157]: #158
#134 := [asserted]: #56
#162 := [mp #134 #159]: #155
#214 := [mp #162 #213]: #209
#352 := (not #209)
#362 := (or #154 #197 #352)
#366 := [def-axiom]: #362
#682 := [unit-resolution #366 #214]: #345
#471 := [unit-resolution #682 #339]: #154
#338 := (or #135 #197)
#684 := (iff #135 #198)
#33 := (:var 0 S6)
#31 := (:var 1 S5)
#29 := (:var 2 S5)
#30 := (f10 #29)
#32 := (f9 #30 #31)
#34 := (f8 #32 #33)
#711 := (pattern #34)
#38 := (f8 #31 #33)
#122 := (= f1 #38)
#187 := (not #122)
#36 := (f8 #29 #33)
#119 := (= f1 #36)
#186 := (not #119)
#170 := (or #186 #187)
#171 := (not #170)
#115 := (= f1 #34)
#188 := (iff #115 #171)
#712 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) (:pat #711) #188)
#191 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #188)
#715 := (iff #191 #712)
#713 := (iff #188 #188)
#714 := [refl]: #713
#716 := [quant-intro #714]: #715
#125 := (and #119 #122)
#128 := (iff #115 #125)
#131 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #128)
#192 := (iff #131 #191)
#189 := (iff #128 #188)
#172 := (iff #125 #171)
#173 := [rewrite]: #172
#190 := [monotonicity #173]: #189
#193 := [quant-intro #190]: #192
#168 := (~ #131 #131)
#183 := (~ #128 #128)
#184 := [refl]: #183
#169 := [nnf-pos #184]: #168
#39 := (= #38 f1)
#37 := (= #36 f1)
#40 := (and #37 #39)
#35 := (= #34 f1)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #41)
#132 := (iff #42 #131)
#129 := (iff #41 #128)
#126 := (iff #40 #125)
#123 := (iff #39 #122)
#124 := [rewrite]: #123
#120 := (iff #37 #119)
#121 := [rewrite]: #120
#127 := [monotonicity #121 #124]: #126
#117 := (iff #35 #115)
#118 := [rewrite]: #117
#130 := [monotonicity #118 #127]: #129
#133 := [quant-intro #130]: #132
#114 := [asserted]: #42
#136 := [mp #114 #133]: #131
#185 := [mp~ #136 #169]: #131
#194 := [mp #185 #193]: #191
#717 := [mp #194 #716]: #712
#678 := (not #712)
#350 := (or #678 #684)
#351 := [quant-inst #43 #45 #47]: #350
#680 := [unit-resolution #351 #717]: #684
#685 := (not #684)
#686 := (or #685 #135 #197)
#687 := [def-axiom]: #686
#681 := [unit-resolution #687 #680]: #338
#322 := [unit-resolution #681 #471 #339]: false
#665 := [lemma #322]: #197
#292 := (or #135 #198)
#363 := (or #135 #198 #352)
#364 := [def-axiom]: #363
#365 := [unit-resolution #364 #214]: #292
#326 := [unit-resolution #365 #665]: #135
#327 := (or #154 #198)
#688 := (or #685 #154 #198)
#683 := [def-axiom]: #688
#328 := [unit-resolution #683 #680]: #327
[unit-resolution #328 #326 #665]: false
unsat
7a081c99c642b081ea8cd661453be0f8f15b2aa5 146 0
#2 := false
decl f3 :: (-> S3 S2 S1)
decl f12 :: S2
#47 := f12
decl f4 :: S3
#8 := f4
#236 := (f3 f4 f12)
decl f1 :: S1
#4 := f1
#323 := (= f1 #236)
#237 := (not #323)
decl f11 :: S3
#44 := f11
#324 := (f3 f11 f12)
#238 := (= f1 #324)
#325 := (not #238)
#316 := (or #325 #237)
#327 := (not #316)
decl f9 :: (-> S7 S3 S3)
decl f10 :: (-> S3 S7)
#45 := (f10 f11)
#46 := (f9 #45 f4)
#48 := (f3 #46 f12)
#130 := (= f1 #48)
#328 := (iff #130 #327)
#9 := (:var 0 S2)
#33 := (:var 1 S3)
#31 := (:var 2 S3)
#32 := (f10 #31)
#34 := (f9 #32 #33)
#35 := (f3 #34 #9)
#675 := (pattern #35)
#39 := (f3 #33 #9)
#117 := (= f1 #39)
#171 := (not #117)
#37 := (f3 #31 #9)
#114 := (= f1 #37)
#170 := (not #114)
#154 := (or #170 #171)
#155 := (not #154)
#110 := (= f1 #35)
#172 := (iff #110 #155)
#676 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S2)) (:pat #675) #172)
#175 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S2)) #172)
#679 := (iff #175 #676)
#677 := (iff #172 #172)
#678 := [refl]: #677
#680 := [quant-intro #678]: #679
#120 := (and #114 #117)
#123 := (iff #110 #120)
#126 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S2)) #123)
#176 := (iff #126 #175)
#173 := (iff #123 #172)
#156 := (iff #120 #155)
#157 := [rewrite]: #156
#174 := [monotonicity #157]: #173
#177 := [quant-intro #174]: #176
#152 := (~ #126 #126)
#167 := (~ #123 #123)
#168 := [refl]: #167
#153 := [nnf-pos #168]: #152
#40 := (= #39 f1)
#38 := (= #37 f1)
#41 := (and #38 #40)
#36 := (= #35 f1)
#42 := (iff #36 #41)
#43 := (forall (vars (?v0 S3) (?v1 S3) (?v2 S2)) #42)
#127 := (iff #43 #126)
#124 := (iff #42 #123)
#121 := (iff #41 #120)
#118 := (iff #40 #117)
#119 := [rewrite]: #118
#115 := (iff #38 #114)
#116 := [rewrite]: #115
#122 := [monotonicity #116 #119]: #121
#112 := (iff #36 #110)
#113 := [rewrite]: #112
#125 := [monotonicity #113 #122]: #124
#128 := [quant-intro #125]: #127
#109 := [asserted]: #43
#131 := [mp #109 #128]: #126
#169 := [mp~ #131 #153]: #126
#178 := [mp #169 #177]: #175
#681 := [mp #178 #680]: #676
#326 := (not #676)
#330 := (or #326 #328)
#309 := [quant-inst #44 #8 #47]: #330
#256 := [unit-resolution #309 #681]: #328
#315 := (not #328)
#329 := (or #315 #327)
#49 := (= #48 f1)
#50 := (not #49)
#51 := (not #50)
#142 := (iff #51 #130)
#134 := (not #130)
#137 := (not #134)
#140 := (iff #137 #130)
#141 := [rewrite]: #140
#138 := (iff #51 #137)
#135 := (iff #50 #134)
#132 := (iff #49 #130)
#133 := [rewrite]: #132
#136 := [monotonicity #133]: #135
#139 := [monotonicity #136]: #138
#143 := [trans #139 #141]: #142
#129 := [asserted]: #51
#146 := [mp #129 #143]: #130
#651 := (or #315 #134 #327)
#652 := [def-axiom]: #651
#645 := [unit-resolution #652 #146]: #329
#286 := [unit-resolution #645 #256]: #327
#303 := (or #316 #323)
#435 := [def-axiom]: #303
#629 := [unit-resolution #435 #286]: #323
#10 := (f3 f4 #9)
#654 := (pattern #10)
#72 := (= f1 #10)
#75 := (not #72)
#655 := (forall (vars (?v0 S2)) (:pat #654) #75)
#78 := (forall (vars (?v0 S2)) #75)
#658 := (iff #78 #655)
#656 := (iff #75 #75)
#657 := [refl]: #656
#659 := [quant-intro #657]: #658
#160 := (~ #78 #78)
#158 := (~ #75 #75)
#159 := [refl]: #158
#161 := [nnf-pos #159]: #160
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#79 := (iff #13 #78)
#76 := (iff #12 #75)
#73 := (iff #11 #72)
#74 := [rewrite]: #73
#77 := [monotonicity #74]: #76
#80 := [quant-intro #77]: #79
#71 := [asserted]: #13
#83 := [mp #71 #80]: #78
#145 := [mp~ #83 #161]: #78
#660 := [mp #145 #659]: #655
#306 := (not #655)
#644 := (or #306 #237)
#302 := [quant-inst #47]: #644
[unit-resolution #302 #660 #629]: false
unsat
a553f34a8063e2bd9b0a5e3813ed9795ccc16096 170 0
#2 := false
decl f4 :: (-> S4 S3 S1)
decl f12 :: S3
#47 := f12
decl f11 :: S4
#44 := f11
#50 := (f4 f11 f12)
decl f1 :: S1
#4 := f1
#136 := (= f1 #50)
#332 := (not #136)
decl f9 :: (-> S7 S4 S4)
decl f5 :: S4
#13 := f5
decl f10 :: (-> S4 S7)
#45 := (f10 f11)
#46 := (f9 #45 f5)
#48 := (f4 #46 f12)
#132 := (= f1 #48)
#336 := (f4 f5 f12)
#333 := (= f1 #336)
#337 := (not #333)
#310 := [hypothesis]: #337
#14 := (:var 0 S3)
#15 := (f4 f5 #14)
#668 := (pattern #15)
#84 := (= f1 #15)
#669 := (forall (vars (?v0 S3)) (:pat #668) #84)
#88 := (forall (vars (?v0 S3)) #84)
#672 := (iff #88 #669)
#670 := (iff #84 #84)
#671 := [refl]: #670
#673 := [quant-intro #671]: #672
#155 := (~ #88 #88)
#154 := (~ #84 #84)
#169 := [refl]: #154
#156 := [nnf-pos #169]: #155
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S3)) #16)
#89 := (iff #17 #88)
#86 := (iff #16 #84)
#87 := [rewrite]: #86
#90 := [quant-intro #87]: #89
#83 := [asserted]: #17
#93 := [mp #83 #90]: #88
#170 := [mp~ #93 #156]: #88
#674 := [mp #170 #673]: #669
#298 := (not #669)
#299 := (or #298 #333)
#300 := [quant-inst #47]: #299
#442 := [unit-resolution #300 #674 #310]: false
#638 := [lemma #442]: #333
#145 := (not #132)
#639 := [hypothesis]: #145
#331 := (or #136 #132)
#146 := (iff #136 #145)
#51 := (= #50 f1)
#49 := (= #48 f1)
#52 := (iff #49 #51)
#53 := (not #52)
#149 := (iff #53 #146)
#139 := (iff #132 #136)
#142 := (not #139)
#147 := (iff #142 #146)
#148 := [rewrite]: #147
#143 := (iff #53 #142)
#140 := (iff #52 #139)
#137 := (iff #51 #136)
#138 := [rewrite]: #137
#134 := (iff #49 #132)
#135 := [rewrite]: #134
#141 := [monotonicity #135 #138]: #140
#144 := [monotonicity #141]: #143
#150 := [trans #144 #148]: #149
#131 := [asserted]: #53
#153 := [mp #131 #150]: #146
#243 := (not #146)
#330 := (or #136 #132 #243)
#244 := [def-axiom]: #330
#245 := [unit-resolution #244 #153]: #331
#640 := [unit-resolution #245 #639]: #136
#316 := (or #332 #337)
#642 := (or #132 #316)
#653 := (not #316)
#655 := (iff #132 #653)
#33 := (:var 1 S4)
#31 := (:var 2 S4)
#32 := (f10 #31)
#34 := (f9 #32 #33)
#35 := (f4 #34 #14)
#682 := (pattern #35)
#39 := (f4 #33 #14)
#119 := (= f1 #39)
#178 := (not #119)
#37 := (f4 #31 #14)
#116 := (= f1 #37)
#177 := (not #116)
#161 := (or #177 #178)
#162 := (not #161)
#112 := (= f1 #35)
#179 := (iff #112 #162)
#683 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S3)) (:pat #682) #179)
#182 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S3)) #179)
#686 := (iff #182 #683)
#684 := (iff #179 #179)
#685 := [refl]: #684
#687 := [quant-intro #685]: #686
#122 := (and #116 #119)
#125 := (iff #112 #122)
#128 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S3)) #125)
#183 := (iff #128 #182)
#180 := (iff #125 #179)
#163 := (iff #122 #162)
#164 := [rewrite]: #163
#181 := [monotonicity #164]: #180
#184 := [quant-intro #181]: #183
#159 := (~ #128 #128)
#174 := (~ #125 #125)
#175 := [refl]: #174
#160 := [nnf-pos #175]: #159
#40 := (= #39 f1)
#38 := (= #37 f1)
#41 := (and #38 #40)
#36 := (= #35 f1)
#42 := (iff #36 #41)
#43 := (forall (vars (?v0 S4) (?v1 S4) (?v2 S3)) #42)
#129 := (iff #43 #128)
#126 := (iff #42 #125)
#123 := (iff #41 #122)
#120 := (iff #40 #119)
#121 := [rewrite]: #120
#117 := (iff #38 #116)
#118 := [rewrite]: #117
#124 := [monotonicity #118 #121]: #123
#114 := (iff #36 #112)
#115 := [rewrite]: #114
#127 := [monotonicity #115 #124]: #126
#130 := [quant-intro #127]: #129
#111 := [asserted]: #43
#133 := [mp #111 #130]: #128
#176 := [mp~ #133 #160]: #128
#185 := [mp #176 #184]: #182
#688 := [mp #185 #687]: #683
#649 := (not #683)
#321 := (or #649 #655)
#322 := [quant-inst #44 #13 #47]: #321
#641 := [unit-resolution #322 #688]: #655
#650 := (not #655)
#308 := (or #650 #132 #316)
#313 := [def-axiom]: #308
#637 := [unit-resolution #313 #641]: #642
#643 := [unit-resolution #637 #639]: #316
#654 := (or #653 #332 #337)
#660 := [def-axiom]: #654
#279 := [unit-resolution #660 #643 #640 #638]: false
#644 := [lemma #279]: #132
#335 := (or #332 #145)
#323 := (or #332 #145 #243)
#334 := [def-axiom]: #323
#263 := [unit-resolution #334 #153]: #335
#646 := [unit-resolution #263 #644]: #332
#284 := (or #145 #653)
#651 := (or #650 #145 #653)
#309 := [def-axiom]: #651
#285 := [unit-resolution #309 #641]: #284
#647 := [unit-resolution #285 #644]: #653
#656 := (or #316 #136)
#657 := [def-axiom]: #656
[unit-resolution #657 #647 #646]: false
unsat
58bc05f7a76c224bbfdad5d684aa2594b451e197 171 0
#2 := false
decl f8 :: (-> S5 S6 S1)
decl f13 :: S6
#47 := f13
decl f9 :: (-> S7 S5 S5)
decl f11 :: S5
#43 := f11
decl f10 :: (-> S5 S7)
decl f12 :: S5
#45 := f12
#50 := (f10 f12)
#51 := (f9 #50 f11)
#52 := (f8 #51 f13)
decl f1 :: S1
#4 := f1
#138 := (= f1 #52)
#334 := (not #138)
#44 := (f10 f11)
#46 := (f9 #44 f12)
#48 := (f8 #46 f13)
#134 := (= f1 #48)
#147 := (not #134)
#636 := [hypothesis]: #147
#333 := (or #138 #134)
#148 := (iff #138 #147)
#53 := (= #52 f1)
#49 := (= #48 f1)
#54 := (iff #49 #53)
#55 := (not #54)
#151 := (iff #55 #148)
#141 := (iff #134 #138)
#144 := (not #141)
#149 := (iff #144 #148)
#150 := [rewrite]: #149
#145 := (iff #55 #144)
#142 := (iff #54 #141)
#139 := (iff #53 #138)
#140 := [rewrite]: #139
#136 := (iff #49 #134)
#137 := [rewrite]: #136
#143 := [monotonicity #137 #140]: #142
#146 := [monotonicity #143]: #145
#152 := [trans #146 #150]: #151
#133 := [asserted]: #55
#155 := [mp #133 #152]: #148
#245 := (not #148)
#332 := (or #138 #134 #245)
#246 := [def-axiom]: #332
#247 := [unit-resolution #246 #155]: #333
#637 := [unit-resolution #247 #636]: #138
#318 := (f8 f12 f13)
#655 := (= f1 #318)
#657 := (not #655)
#338 := (f8 f11 f13)
#335 := (= f1 #338)
#339 := (not #335)
#323 := (or #339 #657)
#634 := (or #134 #323)
#659 := (not #323)
#650 := (iff #134 #659)
#33 := (:var 0 S6)
#31 := (:var 1 S5)
#29 := (:var 2 S5)
#30 := (f10 #29)
#32 := (f9 #30 #31)
#34 := (f8 #32 #33)
#684 := (pattern #34)
#38 := (f8 #31 #33)
#121 := (= f1 #38)
#180 := (not #121)
#36 := (f8 #29 #33)
#118 := (= f1 #36)
#179 := (not #118)
#163 := (or #179 #180)
#164 := (not #163)
#114 := (= f1 #34)
#181 := (iff #114 #164)
#685 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) (:pat #684) #181)
#184 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #181)
#688 := (iff #184 #685)
#686 := (iff #181 #181)
#687 := [refl]: #686
#689 := [quant-intro #687]: #688
#124 := (and #118 #121)
#127 := (iff #114 #124)
#130 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #127)
#185 := (iff #130 #184)
#182 := (iff #127 #181)
#165 := (iff #124 #164)
#166 := [rewrite]: #165
#183 := [monotonicity #166]: #182
#186 := [quant-intro #183]: #185
#161 := (~ #130 #130)
#176 := (~ #127 #127)
#177 := [refl]: #176
#162 := [nnf-pos #177]: #161
#39 := (= #38 f1)
#37 := (= #36 f1)
#40 := (and #37 #39)
#35 := (= #34 f1)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #41)
#131 := (iff #42 #130)
#128 := (iff #41 #127)
#125 := (iff #40 #124)
#122 := (iff #39 #121)
#123 := [rewrite]: #122
#119 := (iff #37 #118)
#120 := [rewrite]: #119
#126 := [monotonicity #120 #123]: #125
#116 := (iff #35 #114)
#117 := [rewrite]: #116
#129 := [monotonicity #117 #126]: #128
#132 := [quant-intro #129]: #131
#113 := [asserted]: #42
#135 := [mp #113 #132]: #130
#178 := [mp~ #135 #162]: #130
#187 := [mp #178 #186]: #184
#690 := [mp #187 #689]: #685
#310 := (not #685)
#343 := (or #310 #650)
#359 := [quant-inst #43 #45 #47]: #343
#630 := [unit-resolution #359 #690]: #650
#360 := (not #650)
#361 := (or #360 #134 #323)
#347 := [def-axiom]: #361
#631 := [unit-resolution #347 #630]: #634
#635 := [unit-resolution #631 #636]: #323
#345 := (or #334 #659)
#656 := (iff #138 #659)
#315 := (or #310 #656)
#312 := (or #657 #339)
#444 := (not #312)
#651 := (iff #138 #444)
#653 := (or #310 #651)
#654 := (iff #653 #315)
#638 := (iff #315 #315)
#299 := [rewrite]: #638
#662 := (iff #651 #656)
#660 := (iff #444 #659)
#324 := (iff #312 #323)
#658 := [rewrite]: #324
#661 := [monotonicity #658]: #660
#652 := [monotonicity #661]: #662
#295 := [monotonicity #652]: #654
#300 := [trans #295 #299]: #654
#311 := [quant-inst #45 #43 #47]: #653
#301 := [mp #311 #300]: #315
#344 := [unit-resolution #301 #690]: #656
#639 := (not #656)
#646 := (or #639 #334 #659)
#648 := [def-axiom]: #646
#346 := [unit-resolution #648 #344]: #345
#348 := [unit-resolution #346 #635 #637]: false
#626 := [lemma #348]: #134
#337 := (or #334 #147)
#325 := (or #334 #147 #245)
#336 := [def-axiom]: #325
#265 := [unit-resolution #336 #155]: #337
#627 := [unit-resolution #265 #626]: #334
#340 := (or #147 #659)
#362 := (or #360 #147 #659)
#253 := [def-axiom]: #362
#624 := [unit-resolution #253 #630]: #340
#628 := [unit-resolution #624 #626]: #659
#625 := (or #138 #323)
#645 := (or #639 #138 #323)
#281 := [def-axiom]: #645
#629 := [unit-resolution #281 #344]: #625
[unit-resolution #629 #628 #627]: false
unsat
8d1e77108728c35ede6d03f92ae722f22d8aeeab 147 0
#2 := false
decl f8 :: (-> S5 S6 S1)
decl f12 :: S6
#46 := f12
decl f9 :: (-> S7 S5 S5)
decl f11 :: S5
#43 := f11
decl f10 :: (-> S5 S7)
#44 := (f10 f11)
#45 := (f9 #44 f11)
#47 := (f8 #45 f12)
decl f1 :: S1
#4 := f1
#131 := (= f1 #47)
#144 := (not #131)
#640 := [hypothesis]: #144
#49 := (f8 f11 f12)
#135 := (= f1 #49)
#330 := (or #135 #131)
#145 := (iff #135 #144)
#50 := (= #49 f1)
#48 := (= #47 f1)
#51 := (iff #48 #50)
#52 := (not #51)
#148 := (iff #52 #145)
#138 := (iff #131 #135)
#141 := (not #138)
#146 := (iff #141 #145)
#147 := [rewrite]: #146
#142 := (iff #52 #141)
#139 := (iff #51 #138)
#136 := (iff #50 #135)
#137 := [rewrite]: #136
#133 := (iff #48 #131)
#134 := [rewrite]: #133
#140 := [monotonicity #134 #137]: #139
#143 := [monotonicity #140]: #142
#149 := [trans #143 #147]: #148
#130 := [asserted]: #52
#152 := [mp #130 #149]: #145
#242 := (not #145)
#329 := (or #135 #131 #242)
#243 := [def-axiom]: #329
#244 := [unit-resolution #243 #152]: #330
#641 := [unit-resolution #244 #640]: #135
#331 := (not #135)
#642 := (or #131 #331)
#33 := (:var 0 S6)
#31 := (:var 1 S5)
#29 := (:var 2 S5)
#30 := (f10 #29)
#32 := (f9 #30 #31)
#34 := (f8 #32 #33)
#681 := (pattern #34)
#38 := (f8 #31 #33)
#118 := (= f1 #38)
#177 := (not #118)
#36 := (f8 #29 #33)
#115 := (= f1 #36)
#176 := (not #115)
#160 := (or #176 #177)
#161 := (not #160)
#111 := (= f1 #34)
#178 := (iff #111 #161)
#682 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) (:pat #681) #178)
#181 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #178)
#685 := (iff #181 #682)
#683 := (iff #178 #178)
#684 := [refl]: #683
#686 := [quant-intro #684]: #685
#121 := (and #115 #118)
#124 := (iff #111 #121)
#127 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #124)
#182 := (iff #127 #181)
#179 := (iff #124 #178)
#162 := (iff #121 #161)
#163 := [rewrite]: #162
#180 := [monotonicity #163]: #179
#183 := [quant-intro #180]: #182
#158 := (~ #127 #127)
#173 := (~ #124 #124)
#174 := [refl]: #173
#159 := [nnf-pos #174]: #158
#39 := (= #38 f1)
#37 := (= #36 f1)
#40 := (and #37 #39)
#35 := (= #34 f1)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #41)
#128 := (iff #42 #127)
#125 := (iff #41 #124)
#122 := (iff #40 #121)
#119 := (iff #39 #118)
#120 := [rewrite]: #119
#116 := (iff #37 #115)
#117 := [rewrite]: #116
#123 := [monotonicity #117 #120]: #122
#113 := (iff #35 #111)
#114 := [rewrite]: #113
#126 := [monotonicity #114 #123]: #125
#129 := [quant-intro #126]: #128
#110 := [asserted]: #42
#132 := [mp #110 #129]: #127
#175 := [mp~ #132 #159]: #127
#184 := [mp #175 #183]: #181
#687 := [mp #184 #686]: #682
#658 := (not #682)
#653 := (or #658 #138)
#335 := (or #331 #331)
#332 := (not #335)
#336 := (iff #131 #332)
#659 := (or #658 #336)
#307 := (iff #659 #653)
#650 := (iff #653 #653)
#308 := [rewrite]: #650
#656 := (iff #336 #138)
#321 := (iff #332 #135)
#654 := (not #331)
#648 := (iff #654 #135)
#320 := [rewrite]: #648
#309 := (iff #332 #654)
#315 := (iff #335 #331)
#652 := [rewrite]: #315
#441 := [monotonicity #652]: #309
#655 := [trans #441 #320]: #321
#657 := [monotonicity #655]: #656
#312 := [monotonicity #657]: #307
#651 := [trans #312 #308]: #307
#649 := [quant-inst #43 #43 #46]: #659
#292 := [mp #649 #651]: #653
#636 := [unit-resolution #292 #687]: #138
#635 := (or #141 #131 #331)
#296 := [def-axiom]: #635
#278 := [unit-resolution #296 #636]: #642
#643 := [unit-resolution #278 #641 #640]: false
#645 := [lemma #643]: #131
#334 := (or #331 #144)
#322 := (or #331 #144 #242)
#333 := [def-axiom]: #322
#262 := [unit-resolution #333 #152]: #334
#283 := [unit-resolution #262 #645]: #331
#284 := (or #144 #135)
#297 := (or #141 #144 #135)
#298 := [def-axiom]: #297
#646 := [unit-resolution #298 #636]: #284
[unit-resolution #646 #283 #645]: false
unsat
3c719dc52c3c9f6d289eb68f38a893d1d68bb5d7 285 0
#2 := false
decl f8 :: (-> S5 S6 S1)
decl f14 :: S6
#50 := f14
decl f9 :: (-> S7 S5 S5)
decl f12 :: S5
#45 := f12
decl f10 :: (-> S5 S7)
decl f11 :: S5
#43 := f11
#44 := (f10 f11)
#53 := (f9 #44 f12)
#322 := (f8 #53 f14)
decl f1 :: S1
#4 := f1
#659 := (= f1 #322)
#257 := (f8 f12 f14)
#636 := (= f1 #257)
#633 := (not #636)
#347 := (f8 f11 f14)
#363 := (= f1 #347)
#364 := (not #363)
#622 := (or #364 #633)
#623 := (not #622)
#619 := (iff #623 #659)
#590 := (not #619)
decl f13 :: S5
#47 := f13
#342 := (f8 f13 f14)
#339 := (= f1 #342)
#343 := (not #339)
#492 := (or #343 #633)
#501 := (not #492)
#46 := (f10 f12)
#48 := (f9 #46 f13)
#654 := (f8 #48 f14)
#640 := (= f1 #654)
#502 := (iff #501 #640)
#595 := (not #502)
#575 := [hypothesis]: #595
#33 := (:var 0 S6)
#31 := (:var 1 S5)
#29 := (:var 2 S5)
#30 := (f10 #29)
#32 := (f9 #30 #31)
#34 := (f8 #32 #33)
#688 := (pattern #34)
#38 := (f8 #31 #33)
#125 := (= f1 #38)
#184 := (not #125)
#36 := (f8 #29 #33)
#122 := (= f1 #36)
#183 := (not #122)
#167 := (or #183 #184)
#168 := (not #167)
#118 := (= f1 #34)
#185 := (iff #118 #168)
#689 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) (:pat #688) #185)
#188 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #185)
#692 := (iff #188 #689)
#690 := (iff #185 #185)
#691 := [refl]: #690
#693 := [quant-intro #691]: #692
#128 := (and #122 #125)
#131 := (iff #118 #128)
#134 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #131)
#189 := (iff #134 #188)
#186 := (iff #131 #185)
#169 := (iff #128 #168)
#170 := [rewrite]: #169
#187 := [monotonicity #170]: #186
#190 := [quant-intro #187]: #189
#165 := (~ #134 #134)
#180 := (~ #131 #131)
#181 := [refl]: #180
#166 := [nnf-pos #181]: #165
#39 := (= #38 f1)
#37 := (= #36 f1)
#40 := (and #37 #39)
#35 := (= #34 f1)
#41 := (iff #35 #40)
#42 := (forall (vars (?v0 S5) (?v1 S5) (?v2 S6)) #41)
#135 := (iff #42 #134)
#132 := (iff #41 #131)
#129 := (iff #40 #128)
#126 := (iff #39 #125)
#127 := [rewrite]: #126
#123 := (iff #37 #122)
#124 := [rewrite]: #123
#130 := [monotonicity #124 #127]: #129
#120 := (iff #35 #118)
#121 := [rewrite]: #120
#133 := [monotonicity #121 #130]: #132
#136 := [quant-intro #133]: #135
#117 := [asserted]: #42
#139 := [mp #117 #136]: #134
#182 := [mp~ #139 #166]: #134
#191 := [mp #182 #190]: #188
#694 := [mp #191 #693]: #689
#314 := (not #689)
#506 := (or #314 #502)
#608 := (or #633 #343)
#490 := (not #608)
#491 := (iff #640 #490)
#507 := (or #314 #491)
#601 := (iff #507 #506)
#602 := (iff #506 #506)
#589 := [rewrite]: #602
#504 := (iff #491 #502)
#600 := (iff #640 #501)
#503 := (iff #600 #502)
#496 := [rewrite]: #503
#485 := (iff #491 #600)
#596 := (iff #490 #501)
#451 := (iff #608 #492)
#599 := [rewrite]: #451
#597 := [monotonicity #599]: #596
#500 := [monotonicity #597]: #485
#505 := [trans #500 #496]: #504
#598 := [monotonicity #505]: #601
#591 := [trans #598 #589]: #601
#508 := [quant-inst #45 #47 #50]: #507
#583 := [mp #508 #591]: #506
#576 := [unit-resolution #583 #694 #575]: false
#577 := [lemma #576]: #502
#641 := (not #640)
#365 := (or #364 #641)
#351 := (not #365)
#49 := (f9 #44 #48)
#51 := (f8 #49 f14)
#138 := (= f1 #51)
#151 := (not #138)
#578 := [hypothesis]: #151
#579 := (or #138 #365)
#366 := (iff #138 #351)
#637 := (or #314 #366)
#359 := [quant-inst #43 #48 #50]: #637
#574 := [unit-resolution #359 #694]: #366
#349 := (not #366)
#350 := (or #349 #138 #365)
#352 := [def-axiom]: #350
#565 := [unit-resolution #352 #574]: #579
#566 := [unit-resolution #565 #578]: #365
#605 := (or #314 #619)
#624 := (iff #659 #623)
#621 := (or #314 #624)
#626 := (iff #621 #605)
#469 := (iff #605 #605)
#470 := [rewrite]: #469
#620 := (iff #624 #619)
#625 := [rewrite]: #620
#468 := [monotonicity #625]: #626
#612 := [trans #468 #470]: #626
#627 := [quant-inst #43 #45 #50]: #621
#613 := [mp #627 #612]: #605
#568 := [unit-resolution #613 #694]: #619
#554 := (or #590 #623)
#661 := (not #659)
#327 := (or #343 #661)
#663 := (not #327)
#54 := (f10 #53)
#55 := (f9 #54 f13)
#56 := (f8 #55 f14)
#142 := (= f1 #56)
#337 := (or #142 #138)
#152 := (iff #142 #151)
#57 := (= #56 f1)
#52 := (= #51 f1)
#58 := (iff #52 #57)
#59 := (not #58)
#155 := (iff #59 #152)
#145 := (iff #138 #142)
#148 := (not #145)
#153 := (iff #148 #152)
#154 := [rewrite]: #153
#149 := (iff #59 #148)
#146 := (iff #58 #145)
#143 := (iff #57 #142)
#144 := [rewrite]: #143
#140 := (iff #52 #138)
#141 := [rewrite]: #140
#147 := [monotonicity #141 #144]: #146
#150 := [monotonicity #147]: #149
#156 := [trans #150 #154]: #155
#137 := [asserted]: #59
#159 := [mp #137 #156]: #152
#249 := (not #152)
#336 := (or #142 #138 #249)
#250 := [def-axiom]: #336
#251 := [unit-resolution #250 #159]: #337
#569 := [unit-resolution #251 #578]: #142
#338 := (not #142)
#567 := (or #338 #663)
#660 := (iff #142 #663)
#319 := (or #314 #660)
#316 := (or #661 #343)
#448 := (not #316)
#655 := (iff #142 #448)
#657 := (or #314 #655)
#658 := (iff #657 #319)
#642 := (iff #319 #319)
#303 := [rewrite]: #642
#666 := (iff #655 #660)
#664 := (iff #448 #663)
#328 := (iff #316 #327)
#662 := [rewrite]: #328
#665 := [monotonicity #662]: #664
#656 := [monotonicity #665]: #666
#299 := [monotonicity #656]: #658
#304 := [trans #299 #303]: #658
#315 := [quant-inst #53 #47 #50]: #657
#305 := [mp #315 #304]: #319
#570 := [unit-resolution #305 #694]: #660
#643 := (not #660)
#650 := (or #643 #338 #663)
#652 := [def-axiom]: #650
#571 := [unit-resolution #652 #570]: #567
#551 := [unit-resolution #571 #569]: #663
#645 := (or #327 #659)
#646 := [def-axiom]: #645
#552 := [unit-resolution #646 #551]: #659
#584 := (or #590 #623 #661)
#585 := [def-axiom]: #584
#555 := [unit-resolution #585 #552]: #554
#556 := [unit-resolution #555 #568]: #623
#614 := (or #622 #363)
#580 := [def-axiom]: #614
#557 := [unit-resolution #580 #556]: #363
#639 := (or #351 #364 #641)
#348 := [def-axiom]: #639
#558 := [unit-resolution #348 #557 #566]: #641
#306 := (or #327 #339)
#644 := [def-axiom]: #306
#559 := [unit-resolution #644 #551]: #339
#582 := (or #622 #636)
#592 := [def-axiom]: #582
#560 := [unit-resolution #592 #556]: #636
#617 := (or #501 #343 #633)
#611 := [def-axiom]: #617
#561 := [unit-resolution #611 #560 #559]: #501
#449 := (or #595 #492 #640)
#450 := [def-axiom]: #449
#562 := [unit-resolution #450 #561 #558 #577]: false
#563 := [lemma #562]: #138
#553 := (or #151 #351)
#630 := (or #349 #151 #351)
#631 := [def-axiom]: #630
#564 := [unit-resolution #631 #574]: #553
#542 := [unit-resolution #564 #563]: #351
#638 := (or #365 #640)
#635 := [def-axiom]: #638
#543 := [unit-resolution #635 #542]: #640
#618 := (or #595 #501 #641)
#447 := [def-axiom]: #618
#545 := [unit-resolution #447 #543 #577]: #501
#610 := (or #492 #636)
#616 := [def-axiom]: #610
#546 := [unit-resolution #616 #545]: #636
#360 := (or #365 #363)
#634 := [def-axiom]: #360
#547 := [unit-resolution #634 #542]: #363
#593 := (or #623 #364 #633)
#594 := [def-axiom]: #593
#548 := [unit-resolution #594 #547 #546]: #623
#341 := (or #338 #151)
#329 := (or #338 #151 #249)
#340 := [def-axiom]: #329
#269 := [unit-resolution #340 #159]: #341
#549 := [unit-resolution #269 #563]: #338
#544 := (or #142 #327)
#649 := (or #643 #142 #327)
#285 := [def-axiom]: #649
#550 := [unit-resolution #285 #570]: #544
#536 := [unit-resolution #550 #549]: #327
#615 := (or #492 #339)
#609 := [def-axiom]: #615
#532 := [unit-resolution #609 #545]: #339
#647 := (or #663 #343 #661)
#648 := [def-axiom]: #647
#533 := [unit-resolution #648 #532 #536]: #661
#586 := (or #590 #622 #659)
#587 := [def-axiom]: #586
#534 := [unit-resolution #587 #533 #548]: #590
[unit-resolution #613 #694 #534]: false
unsat
93dc18f04c0bd27068136e216aafda64d0ca91ea 18 0
#2 := false
decl f9 :: S5
#36 := f9
#37 := (= f9 f9)
#38 := (not #37)
#119 := (iff #38 false)
#1 := true
#114 := (not true)
#117 := (iff #114 false)
#118 := [rewrite]: #117
#115 := (iff #38 #114)
#111 := (iff #37 true)
#113 := [rewrite]: #111
#116 := [monotonicity #113]: #115
#120 := [trans #116 #118]: #119
#110 := [asserted]: #38
[mp #110 #120]: false
unsat
8021f8e09eb3e47791aed2bed0dafccd5948187d 69 0
#2 := false
decl f4 :: (-> S2 S1)
decl f5 :: S2
#16 := f5
#19 := (f4 f5)
decl f1 :: S1
#4 := f1
#66 := (= f1 #19)
#70 := (not #66)
#20 := (= #19 f1)
#21 := (not #20)
#71 := (iff #21 #70)
#68 := (iff #20 #66)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#65 := [asserted]: #21
#75 := [mp #65 #72]: #70
decl f3 :: (-> S2 S1)
#17 := (f3 f5)
#61 := (= f1 #17)
#18 := (= #17 f1)
#63 := (iff #18 #61)
#64 := [rewrite]: #63
#60 := [asserted]: #18
#67 := [mp #60 #64]: #61
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (pattern #9)
#12 := (f4 #8)
#45 := (= f1 #12)
#42 := (= f1 #9)
#51 := (not #42)
#52 := (or #51 #45)
#57 := (forall (vars (?v0 S2)) (:pat #10) #52)
#85 := (~ #57 #57)
#83 := (~ #52 #52)
#84 := [refl]: #83
#86 := [nnf-pos #84]: #85
#13 := (= #12 f1)
#11 := (= #9 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2)) (:pat #10) #14)
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#48 := (implies #42 #45)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#56 := [trans #50 #54]: #55
#59 := [quant-intro #56]: #58
#41 := [asserted]: #15
#62 := [mp #41 #59]: #57
#74 := [mp~ #62 #86]: #57
#137 := (not #61)
#139 := (not #57)
#226 := (or #139 #137 #66)
#224 := (or #137 #66)
#217 := (or #139 #224)
#229 := (iff #217 #226)
#157 := [rewrite]: #229
#228 := [quant-inst #16]: #217
#230 := [mp #228 #157]: #226
[unit-resolution #230 #74 #67 #75]: false
unsat
51102b6663906c70b84f1c6e3a1a2e429b49188d 112 0
#2 := false
decl f5 :: (-> S2 S1)
decl f6 :: S2
#19 := f6
#24 := (f5 f6)
decl f1 :: S1
#4 := f1
#82 := (= f1 #24)
#86 := (not #82)
#25 := (= #24 f1)
#26 := (not #25)
#87 := (iff #26 #86)
#84 := (iff #25 #82)
#85 := [rewrite]: #84
#88 := [monotonicity #85]: #87
#81 := [asserted]: #26
#91 := [mp #81 #88]: #86
decl f4 :: (-> S2 S1)
#22 := (f4 f6)
#77 := (= f1 #22)
#23 := (= #22 f1)
#79 := (iff #23 #77)
#80 := [rewrite]: #79
#76 := [asserted]: #23
#83 := [mp #76 #80]: #77
decl f3 :: (-> S2 S1)
#20 := (f3 f6)
#72 := (= f1 #20)
#21 := (= #20 f1)
#74 := (iff #21 #72)
#75 := [rewrite]: #74
#71 := [asserted]: #21
#78 := [mp #71 #75]: #72
#8 := (:var 0 S2)
#10 := (f4 #8)
#9 := (f3 #8)
#11 := (pattern #9 #10)
#15 := (f5 #8)
#56 := (= f1 #15)
#50 := (= f1 #10)
#105 := (not #50)
#47 := (= f1 #9)
#92 := (not #47)
#112 := (or #92 #105 #56)
#117 := (forall (vars (?v0 S2)) (:pat #11) #112)
#53 := (and #47 #50)
#62 := (not #53)
#63 := (or #62 #56)
#68 := (forall (vars (?v0 S2)) (:pat #11) #63)
#118 := (iff #68 #117)
#115 := (iff #63 #112)
#93 := (or #92 #105)
#109 := (or #93 #56)
#113 := (iff #109 #112)
#114 := [rewrite]: #113
#110 := (iff #63 #109)
#107 := (iff #62 #93)
#94 := (not #93)
#97 := (not #94)
#96 := (iff #97 #93)
#106 := [rewrite]: #96
#98 := (iff #62 #97)
#99 := (iff #53 #94)
#100 := [rewrite]: #99
#95 := [monotonicity #100]: #98
#108 := [trans #95 #106]: #107
#111 := [monotonicity #108]: #110
#116 := [trans #111 #114]: #115
#119 := [quant-intro #116]: #118
#103 := (~ #68 #68)
#101 := (~ #63 #63)
#102 := [refl]: #101
#104 := [nnf-pos #102]: #103
#16 := (= #15 f1)
#13 := (= #10 f1)
#12 := (= #9 f1)
#14 := (and #12 #13)
#17 := (implies #14 #16)
#18 := (forall (vars (?v0 S2)) (:pat #11) #17)
#69 := (iff #18 #68)
#66 := (iff #17 #63)
#59 := (implies #53 #56)
#64 := (iff #59 #63)
#65 := [rewrite]: #64
#60 := (iff #17 #59)
#57 := (iff #16 #56)
#58 := [rewrite]: #57
#54 := (iff #14 #53)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#48 := (iff #12 #47)
#49 := [rewrite]: #48
#55 := [monotonicity #49 #52]: #54
#61 := [monotonicity #55 #58]: #60
#67 := [trans #61 #65]: #66
#70 := [quant-intro #67]: #69
#46 := [asserted]: #18
#73 := [mp #46 #70]: #68
#90 := [mp~ #73 #104]: #68
#120 := [mp #90 #119]: #117
#178 := (not #77)
#265 := (not #72)
#267 := (not #117)
#258 := (or #267 #265 #178 #82)
#179 := (or #265 #178 #82)
#269 := (or #267 #179)
#198 := (iff #269 #258)
#271 := [rewrite]: #198
#270 := [quant-inst #19]: #269
#268 := [mp #270 #271]: #258
[unit-resolution #268 #120 #78 #83 #91]: false
unsat
1191e209015c2f2f439f124434700d861e089600 149 0
#2 := false
decl f3 :: (-> S2 S1)
decl f6 :: S2
#21 := f6
#22 := (f3 f6)
decl f1 :: S1
#4 := f1
#84 := (= f1 #22)
#264 := (not #84)
decl f5 :: (-> S2 S1)
#27 := (f5 f6)
#95 := (= f1 #27)
#178 := (or #264 #95)
decl f4 :: (-> S2 S1)
#24 := (f4 f6)
#88 := (= f1 #24)
#176 := (not #88)
#268 := (or #176 #95)
#266 := (not #268)
#265 := (not #178)
#586 := (or #265 #266)
#375 := (not #586)
#579 := [hypothesis]: #586
#8 := (:var 0 S2)
#11 := (f4 #8)
#12 := (pattern #11)
#9 := (f3 #8)
#10 := (pattern #9)
#65 := (= f1 #11)
#71 := (not #65)
#14 := (f5 #8)
#53 := (= f1 #14)
#72 := (or #53 #71)
#116 := (not #72)
#50 := (= f1 #9)
#59 := (not #50)
#60 := (or #59 #53)
#105 := (not #60)
#106 := (or #105 #116)
#107 := (not #106)
#108 := (forall (vars (?v0 S2)) (:pat #10 #12) #107)
#77 := (and #60 #72)
#80 := (forall (vars (?v0 S2)) (:pat #10 #12) #77)
#109 := (iff #80 #108)
#110 := (iff #77 #107)
#111 := [rewrite]: #110
#117 := [quant-intro #111]: #109
#114 := (~ #80 #80)
#112 := (~ #77 #77)
#113 := [refl]: #112
#115 := [nnf-pos #113]: #114
#15 := (= #14 f1)
#17 := (= #11 f1)
#18 := (implies #17 #15)
#13 := (= #9 f1)
#16 := (implies #13 #15)
#19 := (and #16 #18)
#20 := (forall (vars (?v0 S2)) (:pat #10 #12) #19)
#81 := (iff #20 #80)
#78 := (iff #19 #77)
#75 := (iff #18 #72)
#68 := (implies #65 #53)
#73 := (iff #68 #72)
#74 := [rewrite]: #73
#69 := (iff #18 #68)
#54 := (iff #15 #53)
#55 := [rewrite]: #54
#66 := (iff #17 #65)
#67 := [rewrite]: #66
#70 := [monotonicity #67 #55]: #69
#76 := [trans #70 #74]: #75
#63 := (iff #16 #60)
#56 := (implies #50 #53)
#61 := (iff #56 #60)
#62 := [rewrite]: #61
#57 := (iff #16 #56)
#51 := (iff #13 #50)
#52 := [rewrite]: #51
#58 := [monotonicity #52 #55]: #57
#64 := [trans #58 #62]: #63
#79 := [monotonicity #64 #76]: #78
#82 := [quant-intro #79]: #81
#49 := [asserted]: #20
#85 := [mp #49 #82]: #80
#103 := [mp~ #85 #115]: #80
#118 := [mp #103 #117]: #108
#255 := (not #108)
#589 := (or #255 #375)
#263 := (or #95 #176)
#177 := (not #263)
#256 := (or #265 #177)
#267 := (not #256)
#590 := (or #255 #267)
#592 := (iff #590 #589)
#593 := (iff #589 #589)
#583 := [rewrite]: #593
#582 := (iff #267 #375)
#588 := (iff #256 #586)
#270 := (iff #177 #266)
#196 := (iff #263 #268)
#269 := [rewrite]: #196
#249 := [monotonicity #269]: #270
#243 := [monotonicity #249]: #588
#254 := [monotonicity #243]: #582
#587 := [monotonicity #254]: #592
#241 := [trans #587 #583]: #592
#591 := [quant-inst #21]: #590
#246 := [mp #591 #241]: #589
#217 := [unit-resolution #246 #118 #579]: false
#218 := [lemma #217]: #375
#574 := (or #586 #178)
#575 := [def-axiom]: #574
#580 := [unit-resolution #575 #218]: #178
#578 := (or #265 #264)
#99 := (not #95)
#28 := (= #27 f1)
#29 := (not #28)
#100 := (iff #29 #99)
#97 := (iff #28 #95)
#98 := [rewrite]: #97
#101 := [monotonicity #98]: #100
#94 := [asserted]: #29
#104 := [mp #94 #101]: #99
#569 := (or #265 #264 #95)
#230 := [def-axiom]: #569
#581 := [unit-resolution #230 #104]: #578
#567 := [unit-resolution #581 #580]: #264
#570 := (or #586 #268)
#576 := [def-axiom]: #570
#568 := [unit-resolution #576 #218]: #268
#274 := (or #266 #176)
#572 := (or #266 #176 #95)
#573 := [def-axiom]: #572
#290 := [unit-resolution #573 #104]: #274
#291 := [unit-resolution #290 #568]: #176
#91 := (or #84 #88)
#25 := (= #24 f1)
#23 := (= #22 f1)
#26 := (or #23 #25)
#92 := (iff #26 #91)
#89 := (iff #25 #88)
#90 := [rewrite]: #89
#86 := (iff #23 #84)
#87 := [rewrite]: #86
#93 := [monotonicity #87 #90]: #92
#83 := [asserted]: #26
#96 := [mp #83 #93]: #91
[unit-resolution #96 #291 #567]: false
unsat
45f8ffe676ed981a383aaab6faaf520b9ff236c9 69 0
#2 := false
decl f4 :: (-> S2 S1)
decl f5 :: S2
#16 := f5
#19 := (f4 f5)
decl f1 :: S1
#4 := f1
#66 := (= f1 #19)
#70 := (not #66)
#20 := (= #19 f1)
#21 := (not #20)
#71 := (iff #21 #70)
#68 := (iff #20 #66)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#65 := [asserted]: #21
#75 := [mp #65 #72]: #70
decl f3 :: (-> S2 S1)
#17 := (f3 f5)
#61 := (= f1 #17)
#18 := (= #17 f1)
#63 := (iff #18 #61)
#64 := [rewrite]: #63
#60 := [asserted]: #18
#67 := [mp #60 #64]: #61
#8 := (:var 0 S2)
#9 := (f3 #8)
#10 := (pattern #9)
#12 := (f4 #8)
#45 := (= f1 #12)
#42 := (= f1 #9)
#51 := (not #42)
#52 := (or #51 #45)
#57 := (forall (vars (?v0 S2)) (:pat #10) #52)
#85 := (~ #57 #57)
#83 := (~ #52 #52)
#84 := [refl]: #83
#86 := [nnf-pos #84]: #85
#13 := (= #12 f1)
#11 := (= #9 f1)
#14 := (implies #11 #13)
#15 := (forall (vars (?v0 S2)) (:pat #10) #14)
#58 := (iff #15 #57)
#55 := (iff #14 #52)
#48 := (implies #42 #45)
#53 := (iff #48 #52)
#54 := [rewrite]: #53
#49 := (iff #14 #48)
#46 := (iff #13 #45)
#47 := [rewrite]: #46
#43 := (iff #11 #42)
#44 := [rewrite]: #43
#50 := [monotonicity #44 #47]: #49
#56 := [trans #50 #54]: #55
#59 := [quant-intro #56]: #58
#41 := [asserted]: #15
#62 := [mp #41 #59]: #57
#74 := [mp~ #62 #86]: #57
#137 := (not #61)
#139 := (not #57)
#226 := (or #139 #137 #66)
#224 := (or #137 #66)
#217 := (or #139 #224)
#229 := (iff #217 #226)
#157 := [rewrite]: #229
#228 := [quant-inst #16]: #217
#230 := [mp #228 #157]: #226
[unit-resolution #230 #74 #67 #75]: false
unsat
ceabafba9f0db45264556e8d9525b667725281c7 76 0
#2 := false
decl f4 :: (-> S2 S1)
decl f5 :: S2
#15 := f5
#18 := (f4 f5)
decl f1 :: S1
#4 := f1
#65 := (= f1 #18)
#69 := (not #65)
#19 := (= #18 f1)
#20 := (not #19)
#70 := (iff #20 #69)
#67 := (iff #19 #65)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#64 := [asserted]: #20
#74 := [mp #64 #71]: #69
decl f3 :: (-> S2 S1)
#16 := (f3 f5)
#60 := (= f1 #16)
#17 := (= #16 f1)
#62 := (iff #17 #60)
#63 := [rewrite]: #62
#59 := [asserted]: #17
#66 := [mp #59 #63]: #60
#8 := (:var 0 S2)
#11 := (f4 #8)
#555 := (pattern #11)
#9 := (f3 #8)
#554 := (pattern #9)
#44 := (= f1 #11)
#41 := (= f1 #9)
#50 := (not #41)
#51 := (or #50 #44)
#556 := (forall (vars (?v0 S2)) (:pat #554 #555) #51)
#56 := (forall (vars (?v0 S2)) #51)
#559 := (iff #56 #556)
#557 := (iff #51 #51)
#558 := [refl]: #557
#560 := [quant-intro #558]: #559
#84 := (~ #56 #56)
#82 := (~ #51 #51)
#83 := [refl]: #82
#85 := [nnf-pos #83]: #84
#12 := (= #11 f1)
#10 := (= #9 f1)
#13 := (implies #10 #12)
#14 := (forall (vars (?v0 S2)) #13)
#57 := (iff #14 #56)
#54 := (iff #13 #51)
#47 := (implies #41 #44)
#52 := (iff #47 #51)
#53 := [rewrite]: #52
#48 := (iff #13 #47)
#45 := (iff #12 #44)
#46 := [rewrite]: #45
#42 := (iff #10 #41)
#43 := [rewrite]: #42
#49 := [monotonicity #43 #46]: #48
#55 := [trans #49 #53]: #54
#58 := [quant-intro #55]: #57
#40 := [asserted]: #14
#61 := [mp #40 #58]: #56
#73 := [mp~ #61 #85]: #56
#561 := [mp #73 #560]: #556
#136 := (not #60)
#138 := (not #556)
#225 := (or #138 #136 #65)
#223 := (or #136 #65)
#216 := (or #138 #223)
#228 := (iff #216 #225)
#156 := [rewrite]: #228
#227 := [quant-inst #15]: #216
#229 := [mp #227 #156]: #225
[unit-resolution #229 #561 #66 #74]: false
unsat
7cd7dbb3fbfb0bc76acedbcf070880f3e3e3d434 60 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f9 :: S2
#39 := f9
#40 := (f3 f9 f4)
decl f1 :: S1
#4 := f1
#116 := (= f1 #40)
#41 := (= #40 f1)
#42 := (not #41)
#43 := (not #42)
#128 := (iff #43 #116)
#120 := (not #116)
#123 := (not #120)
#126 := (iff #123 #116)
#127 := [rewrite]: #126
#124 := (iff #43 #123)
#121 := (iff #42 #120)
#118 := (iff #41 #116)
#119 := [rewrite]: #118
#122 := [monotonicity #119]: #121
#125 := [monotonicity #122]: #124
#129 := [trans #125 #127]: #128
#115 := [asserted]: #43
#132 := [mp #115 #129]: #116
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#640 := (pattern #10)
#64 := (= f1 #10)
#67 := (not #64)
#641 := (forall (vars (?v0 S2)) (:pat #640) #67)
#70 := (forall (vars (?v0 S2)) #67)
#644 := (iff #70 #641)
#642 := (iff #67 #67)
#643 := [refl]: #642
#645 := [quant-intro #643]: #644
#146 := (~ #70 #70)
#144 := (~ #67 #67)
#145 := [refl]: #144
#147 := [nnf-pos #145]: #146
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#71 := (iff #13 #70)
#68 := (iff #12 #67)
#65 := (iff #11 #64)
#66 := [rewrite]: #65
#69 := [monotonicity #66]: #68
#72 := [quant-intro #69]: #71
#63 := [asserted]: #13
#75 := [mp #63 #72]: #70
#131 := [mp~ #75 #147]: #70
#646 := [mp #131 #645]: #641
#223 := (not #641)
#310 := (or #223 #120)
#224 := [quant-inst #39]: #310
[unit-resolution #224 #646 #132]: false
unsat
71b592381f7787562afdf512ef22356644e574ef 48 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#14 := f5
decl f9 :: S2
#39 := f9
#40 := (f3 f9 f5)
decl f1 :: S1
#4 := f1
#115 := (= f1 #40)
#119 := (not #115)
#41 := (= #40 f1)
#42 := (not #41)
#120 := (iff #42 #119)
#117 := (iff #41 #115)
#118 := [rewrite]: #117
#121 := [monotonicity #118]: #120
#114 := [asserted]: #42
#124 := [mp #114 #121]: #119
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#639 := (pattern #15)
#73 := (= f1 #15)
#640 := (forall (vars (?v0 S2)) (:pat #639) #73)
#77 := (forall (vars (?v0 S2)) #73)
#643 := (iff #77 #640)
#641 := (iff #73 #73)
#642 := [refl]: #641
#644 := [quant-intro #642]: #643
#126 := (~ #77 #77)
#125 := (~ #73 #73)
#140 := [refl]: #125
#127 := [nnf-pos #140]: #126
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#78 := (iff #17 #77)
#75 := (iff #16 #73)
#76 := [rewrite]: #75
#79 := [quant-intro #76]: #78
#72 := [asserted]: #17
#82 := [mp #72 #79]: #77
#141 := [mp~ #82 #127]: #77
#645 := [mp #141 #644]: #640
#215 := (not #640)
#302 := (or #215 #115)
#216 := [quant-inst #39]: #302
[unit-resolution #216 #645 #124]: false
unsat
164d5a6bdaf120b4948f5b45d9c26eb765a67512 124 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S3 S4)
decl f10 :: S3
#40 := f10
#41 := (f7 f10)
#43 := (f6 #41 f11)
decl f9 :: S2
#39 := f9
#44 := (f3 f9 #43)
decl f1 :: S1
#4 := f1
#125 := (= f1 #44)
#144 := (not #125)
#648 := [hypothesis]: #144
#48 := (f3 f9 f11)
#132 := (= f1 #48)
#46 := (f3 f9 f10)
#129 := (= f1 #46)
#135 := (or #129 #132)
#336 := (or #135 #125)
#145 := (iff #135 #144)
#49 := (= #48 f1)
#47 := (= #46 f1)
#50 := (or #47 #49)
#45 := (= #44 f1)
#51 := (iff #45 #50)
#52 := (not #51)
#148 := (iff #52 #145)
#138 := (iff #125 #135)
#141 := (not #138)
#146 := (iff #141 #145)
#147 := [rewrite]: #146
#142 := (iff #52 #141)
#139 := (iff #51 #138)
#136 := (iff #50 #135)
#133 := (iff #49 #132)
#134 := [rewrite]: #133
#130 := (iff #47 #129)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#127 := (iff #45 #125)
#128 := [rewrite]: #127
#140 := [monotonicity #128 #137]: #139
#143 := [monotonicity #140]: #142
#149 := [trans #143 #147]: #148
#124 := [asserted]: #52
#152 := [mp #124 #149]: #145
#262 := (not #145)
#335 := (or #135 #125 #262)
#332 := [def-axiom]: #335
#315 := [unit-resolution #332 #152]: #336
#320 := [unit-resolution #315 #648]: #135
#322 := (not #135)
#651 := (or #125 #322)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 #19)
#22 := (f6 #20 #21)
#18 := (:var 2 S2)
#23 := (f3 #18 #22)
#674 := (pattern #23)
#27 := (f3 #18 #21)
#98 := (= f1 #27)
#25 := (f3 #18 #19)
#95 := (= f1 #25)
#101 := (or #95 #98)
#91 := (= f1 #23)
#104 := (iff #91 #101)
#675 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #674) #104)
#107 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #104)
#678 := (iff #107 #675)
#676 := (iff #104 #104)
#677 := [refl]: #676
#679 := [quant-intro #677]: #678
#156 := (~ #107 #107)
#170 := (~ #104 #104)
#171 := [refl]: #170
#157 := [nnf-pos #171]: #156
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#108 := (iff #31 #107)
#105 := (iff #30 #104)
#102 := (iff #29 #101)
#99 := (iff #28 #98)
#100 := [rewrite]: #99
#96 := (iff #26 #95)
#97 := [rewrite]: #96
#103 := [monotonicity #97 #100]: #102
#93 := (iff #24 #91)
#94 := [rewrite]: #93
#106 := [monotonicity #94 #103]: #105
#109 := [quant-intro #106]: #108
#90 := [asserted]: #31
#112 := [mp #90 #109]: #107
#172 := [mp~ #112 #157]: #107
#680 := [mp #172 #679]: #675
#321 := (not #675)
#655 := (or #321 #138)
#656 := [quant-inst #39 #40 #42]: #655
#308 := [unit-resolution #656 #680]: #138
#657 := (or #141 #125 #322)
#658 := [def-axiom]: #657
#292 := [unit-resolution #658 #308]: #651
#635 := [unit-resolution #292 #320 #648]: false
#296 := [lemma #635]: #125
#309 := (or #322 #144)
#652 := (or #322 #144 #262)
#654 := [def-axiom]: #652
#441 := [unit-resolution #654 #152]: #309
#297 := [unit-resolution #441 #296]: #322
#298 := (or #144 #135)
#653 := (or #141 #144 #135)
#659 := [def-axiom]: #653
#299 := [unit-resolution #659 #308]: #298
[unit-resolution #299 #297 #296]: false
unsat
d1bc5c257411f66b4000ce061c39762e6b5b7a04 160 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f9 :: S2
#39 := f9
#325 := (f3 f9 f4)
decl f1 :: S1
#4 := f1
#322 := (= f1 #325)
decl f10 :: S3
#40 := f10
#45 := (f3 f9 f10)
#125 := (= f1 #45)
#326 := (or #125 #322)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S3 S4)
#41 := (f7 f10)
#42 := (f6 #41 f4)
#43 := (f3 f9 #42)
#121 := (= f1 #43)
#134 := (not #121)
#642 := [hypothesis]: #134
#320 := (or #125 #121)
#135 := (iff #125 #134)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#138 := (iff #48 #135)
#128 := (iff #121 #125)
#131 := (not #128)
#136 := (iff #131 #135)
#137 := [rewrite]: #136
#132 := (iff #48 #131)
#129 := (iff #47 #128)
#126 := (iff #46 #125)
#127 := [rewrite]: #126
#123 := (iff #44 #121)
#124 := [rewrite]: #123
#130 := [monotonicity #124 #127]: #129
#133 := [monotonicity #130]: #132
#139 := [trans #133 #137]: #138
#120 := [asserted]: #48
#142 := [mp #120 #139]: #135
#232 := (not #135)
#319 := (or #125 #121 #232)
#233 := [def-axiom]: #319
#234 := [unit-resolution #233 #142]: #320
#644 := [unit-resolution #234 #642]: #125
#648 := (not #326)
#288 := (or #121 #648)
#305 := (iff #121 #326)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 #19)
#22 := (f6 #20 #21)
#18 := (:var 2 S2)
#23 := (f3 #18 #22)
#664 := (pattern #23)
#27 := (f3 #18 #21)
#94 := (= f1 #27)
#25 := (f3 #18 #19)
#91 := (= f1 #25)
#97 := (or #91 #94)
#87 := (= f1 #23)
#100 := (iff #87 #97)
#665 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #664) #100)
#103 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #100)
#668 := (iff #103 #665)
#666 := (iff #100 #100)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#146 := (~ #103 #103)
#160 := (~ #100 #100)
#161 := [refl]: #160
#147 := [nnf-pos #161]: #146
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#104 := (iff #31 #103)
#101 := (iff #30 #100)
#98 := (iff #29 #97)
#95 := (iff #28 #94)
#96 := [rewrite]: #95
#92 := (iff #26 #91)
#93 := [rewrite]: #92
#99 := [monotonicity #93 #96]: #98
#89 := (iff #24 #87)
#90 := [rewrite]: #89
#102 := [monotonicity #90 #99]: #101
#105 := [quant-intro #102]: #104
#86 := [asserted]: #31
#108 := [mp #86 #105]: #103
#162 := [mp~ #108 #147]: #103
#670 := [mp #162 #669]: #665
#299 := (not #665)
#431 := (or #299 #305)
#638 := [quant-inst #39 #40 #9]: #431
#287 := [unit-resolution #638 #670]: #305
#639 := (not #305)
#297 := (or #639 #121 #648)
#302 := [def-axiom]: #297
#289 := [unit-resolution #302 #287]: #288
#627 := [unit-resolution #289 #642]: #648
#321 := (not #125)
#310 := (or #326 #321)
#311 := [def-axiom]: #310
#628 := [unit-resolution #311 #627 #644]: false
#629 := [lemma #628]: #121
#630 := (or #134 #326)
#640 := (or #639 #134 #326)
#298 := [def-axiom]: #640
#631 := [unit-resolution #298 #287]: #630
#633 := [unit-resolution #631 #629]: #326
#324 := (or #321 #134)
#312 := (or #321 #134 #232)
#323 := [def-axiom]: #312
#252 := [unit-resolution #323 #142]: #324
#635 := [unit-resolution #252 #629]: #321
#643 := (or #648 #125 #322)
#649 := [def-axiom]: #643
#273 := [unit-resolution #649 #635 #633]: #322
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#650 := (pattern #10)
#69 := (= f1 #10)
#72 := (not #69)
#651 := (forall (vars (?v0 S2)) (:pat #650) #72)
#75 := (forall (vars (?v0 S2)) #72)
#654 := (iff #75 #651)
#652 := (iff #72 #72)
#653 := [refl]: #652
#655 := [quant-intro #653]: #654
#156 := (~ #75 #75)
#154 := (~ #72 #72)
#155 := [refl]: #154
#157 := [nnf-pos #155]: #156
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#76 := (iff #13 #75)
#73 := (iff #12 #72)
#70 := (iff #11 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [quant-intro #74]: #76
#68 := [asserted]: #13
#80 := [mp #68 #77]: #75
#141 := [mp~ #80 #157]: #75
#656 := [mp #141 #655]: #651
#645 := (not #322)
#626 := (not #651)
#632 := (or #626 #645)
#268 := [quant-inst #39]: #632
[unit-resolution #268 #656 #273]: false
unsat
37e8c2c682de93175c2e3b6573d2a98ccec54dc2 134 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#14 := f5
decl f9 :: S2
#39 := f9
#217 := (f3 f9 f5)
decl f1 :: S1
#4 := f1
#304 := (= f1 #217)
#631 := (not #304)
decl f10 :: S3
#40 := f10
#218 := (f3 f9 f10)
#305 := (= f1 #218)
#297 := (or #304 #305)
#282 := (not #297)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S3 S4)
#41 := (f7 f10)
#42 := (f6 #41 f5)
#43 := (f3 f9 #42)
#118 := (= f1 #43)
#237 := (iff #118 #297)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 #19)
#22 := (f6 #20 #21)
#18 := (:var 2 S2)
#23 := (f3 #18 #22)
#649 := (pattern #23)
#27 := (f3 #18 #21)
#91 := (= f1 #27)
#25 := (f3 #18 #19)
#88 := (= f1 #25)
#94 := (or #88 #91)
#84 := (= f1 #23)
#97 := (iff #84 #94)
#650 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #649) #97)
#100 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #97)
#653 := (iff #100 #650)
#651 := (iff #97 #97)
#652 := [refl]: #651
#654 := [quant-intro #652]: #653
#131 := (~ #100 #100)
#145 := (~ #97 #97)
#146 := [refl]: #145
#132 := [nnf-pos #146]: #131
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#101 := (iff #31 #100)
#98 := (iff #30 #97)
#95 := (iff #29 #94)
#92 := (iff #28 #91)
#93 := [rewrite]: #92
#89 := (iff #26 #88)
#90 := [rewrite]: #89
#96 := [monotonicity #90 #93]: #95
#86 := (iff #24 #84)
#87 := [rewrite]: #86
#99 := [monotonicity #87 #96]: #98
#102 := [quant-intro #99]: #101
#83 := [asserted]: #31
#105 := [mp #83 #102]: #100
#147 := [mp~ #105 #132]: #100
#655 := [mp #147 #654]: #650
#311 := (not #650)
#290 := (or #311 #237)
#219 := (or #305 #304)
#306 := (iff #118 #219)
#627 := (or #311 #306)
#284 := (iff #627 #290)
#623 := (iff #290 #290)
#295 := [rewrite]: #623
#310 := (iff #306 #237)
#308 := (iff #219 #297)
#309 := [rewrite]: #308
#307 := [monotonicity #309]: #310
#416 := [monotonicity #307]: #284
#296 := [trans #416 #295]: #284
#629 := [quant-inst #39 #40 #14]: #627
#630 := [mp #629 #296]: #290
#613 := [unit-resolution #630 #655]: #237
#283 := (not #237)
#614 := (or #283 #282)
#122 := (not #118)
#44 := (= #43 f1)
#45 := (not #44)
#123 := (iff #45 #122)
#120 := (iff #44 #118)
#121 := [rewrite]: #120
#124 := [monotonicity #121]: #123
#117 := [asserted]: #45
#127 := [mp #117 #124]: #122
#626 := (or #283 #118 #282)
#267 := [def-axiom]: #626
#617 := [unit-resolution #267 #127]: #614
#253 := [unit-resolution #617 #613]: #282
#632 := (or #297 #631)
#633 := [def-axiom]: #632
#618 := [unit-resolution #633 #253]: #631
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#642 := (pattern #15)
#76 := (= f1 #15)
#643 := (forall (vars (?v0 S2)) (:pat #642) #76)
#80 := (forall (vars (?v0 S2)) #76)
#646 := (iff #80 #643)
#644 := (iff #76 #76)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#129 := (~ #80 #80)
#128 := (~ #76 #76)
#143 := [refl]: #128
#130 := [nnf-pos #143]: #129
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#81 := (iff #17 #80)
#78 := (iff #16 #76)
#79 := [rewrite]: #78
#82 := [quant-intro #79]: #81
#75 := [asserted]: #17
#85 := [mp #75 #82]: #80
#144 := [mp~ #85 #130]: #80
#648 := [mp #144 #647]: #643
#615 := (not #643)
#616 := (or #615 #304)
#611 := [quant-inst #39]: #616
[unit-resolution #611 #648 #618]: false
unsat
8b3671158912b5be83077a5d2f71eae8a40f4427 153 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f10 :: S3
#40 := f10
decl f7 :: (-> S3 S4)
decl f11 :: S3
#42 := f11
#46 := (f7 f11)
#47 := (f6 #46 f10)
decl f9 :: S2
#39 := f9
#48 := (f3 f9 #47)
decl f1 :: S1
#4 := f1
#128 := (= f1 #48)
#324 := (not #128)
#41 := (f7 f10)
#43 := (f6 #41 f11)
#44 := (f3 f9 #43)
#124 := (= f1 #44)
#137 := (not #124)
#243 := [hypothesis]: #137
#323 := (or #128 #124)
#138 := (iff #128 #137)
#49 := (= #48 f1)
#45 := (= #44 f1)
#50 := (iff #45 #49)
#51 := (not #50)
#141 := (iff #51 #138)
#131 := (iff #124 #128)
#134 := (not #131)
#139 := (iff #134 #138)
#140 := [rewrite]: #139
#135 := (iff #51 #134)
#132 := (iff #50 #131)
#129 := (iff #49 #128)
#130 := [rewrite]: #129
#126 := (iff #45 #124)
#127 := [rewrite]: #126
#133 := [monotonicity #127 #130]: #132
#136 := [monotonicity #133]: #135
#142 := [trans #136 #140]: #141
#123 := [asserted]: #51
#145 := [mp #123 #142]: #138
#235 := (not #138)
#322 := (or #128 #124 #235)
#236 := [def-axiom]: #322
#237 := [unit-resolution #236 #145]: #323
#622 := [unit-resolution #237 #243]: #128
#328 := (f3 f9 f10)
#325 := (= f1 #328)
#329 := (f3 f9 f11)
#308 := (= f1 #329)
#645 := (or #308 #325)
#642 := (not #645)
#345 := (or #124 #642)
#632 := (iff #124 #645)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 #19)
#22 := (f6 #20 #21)
#18 := (:var 2 S2)
#23 := (f3 #18 #22)
#667 := (pattern #23)
#27 := (f3 #18 #21)
#97 := (= f1 #27)
#25 := (f3 #18 #19)
#94 := (= f1 #25)
#100 := (or #94 #97)
#90 := (= f1 #23)
#103 := (iff #90 #100)
#668 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #667) #103)
#106 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #103)
#671 := (iff #106 #668)
#669 := (iff #103 #103)
#670 := [refl]: #669
#672 := [quant-intro #670]: #671
#149 := (~ #106 #106)
#163 := (~ #103 #103)
#164 := [refl]: #163
#150 := [nnf-pos #164]: #149
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#107 := (iff #31 #106)
#104 := (iff #30 #103)
#101 := (iff #29 #100)
#98 := (iff #28 #97)
#99 := [rewrite]: #98
#95 := (iff #26 #94)
#96 := [rewrite]: #95
#102 := [monotonicity #96 #99]: #101
#92 := (iff #24 #90)
#93 := [rewrite]: #92
#105 := [monotonicity #93 #102]: #104
#108 := [quant-intro #105]: #107
#89 := [asserted]: #31
#111 := [mp #89 #108]: #106
#165 := [mp~ #111 #150]: #106
#673 := [mp #165 #672]: #668
#641 := (not #668)
#629 := (or #641 #632)
#302 := (or #325 #308)
#434 := (iff #124 #302)
#635 := (or #641 #434)
#636 := (iff #635 #629)
#276 := (iff #629 #629)
#277 := [rewrite]: #276
#633 := (iff #434 #632)
#630 := (iff #302 #645)
#631 := [rewrite]: #630
#634 := [monotonicity #631]: #633
#638 := [monotonicity #634]: #636
#639 := [trans #638 #277]: #636
#271 := [quant-inst #39 #40 #42]: #635
#637 := [mp #271 #639]: #629
#623 := [unit-resolution #637 #673]: #632
#640 := (not #632)
#626 := (or #640 #124 #642)
#627 := [def-axiom]: #626
#346 := [unit-resolution #627 #623]: #345
#620 := [unit-resolution #346 #243]: #642
#621 := (or #324 #645)
#647 := (iff #128 #645)
#313 := (or #641 #647)
#314 := [quant-inst #39 #42 #40]: #313
#624 := [unit-resolution #314 #673]: #647
#643 := (not #647)
#285 := (or #643 #324 #645)
#628 := [def-axiom]: #285
#625 := [unit-resolution #628 #624]: #621
#334 := [unit-resolution #625 #620 #622]: false
#335 := [lemma #334]: #124
#327 := (or #324 #137)
#315 := (or #324 #137 #235)
#326 := [def-axiom]: #315
#255 := [unit-resolution #326 #145]: #327
#336 := [unit-resolution #255 #335]: #324
#338 := (or #137 #645)
#333 := (or #640 #137 #645)
#349 := [def-axiom]: #333
#616 := [unit-resolution #349 #623]: #338
#617 := [unit-resolution #616 #335]: #645
#330 := (or #128 #642)
#301 := (or #643 #128 #642)
#644 := [def-axiom]: #301
#614 := [unit-resolution #644 #624]: #330
[unit-resolution #614 #617 #336]: false
unsat
76f35b24758dff3b162e8fc64fc760da00fb55d8 126 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f10 :: S3
#40 := f10
decl f7 :: (-> S3 S4)
#41 := (f7 f10)
#42 := (f6 #41 f10)
decl f9 :: S2
#39 := f9
#43 := (f3 f9 #42)
decl f1 :: S1
#4 := f1
#121 := (= f1 #43)
#134 := (not #121)
#625 := [hypothesis]: #134
#45 := (f3 f9 f10)
#125 := (= f1 #45)
#320 := (or #125 #121)
#135 := (iff #125 #134)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#138 := (iff #48 #135)
#128 := (iff #121 #125)
#131 := (not #128)
#136 := (iff #131 #135)
#137 := [rewrite]: #136
#132 := (iff #48 #131)
#129 := (iff #47 #128)
#126 := (iff #46 #125)
#127 := [rewrite]: #126
#123 := (iff #44 #121)
#124 := [rewrite]: #123
#130 := [monotonicity #124 #127]: #129
#133 := [monotonicity #130]: #132
#139 := [trans #133 #137]: #138
#120 := [asserted]: #48
#142 := [mp #120 #139]: #135
#232 := (not #135)
#319 := (or #125 #121 #232)
#233 := [def-axiom]: #319
#234 := [unit-resolution #233 #142]: #320
#286 := [unit-resolution #234 #625]: #125
#321 := (not #125)
#288 := (or #121 #321)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 #19)
#22 := (f6 #20 #21)
#18 := (:var 2 S2)
#23 := (f3 #18 #22)
#664 := (pattern #23)
#27 := (f3 #18 #21)
#94 := (= f1 #27)
#25 := (f3 #18 #19)
#91 := (= f1 #25)
#97 := (or #91 #94)
#87 := (= f1 #23)
#100 := (iff #87 #97)
#665 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #664) #100)
#103 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #100)
#668 := (iff #103 #665)
#666 := (iff #100 #100)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#146 := (~ #103 #103)
#160 := (~ #100 #100)
#161 := [refl]: #160
#147 := [nnf-pos #161]: #146
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#104 := (iff #31 #103)
#101 := (iff #30 #100)
#98 := (iff #29 #97)
#95 := (iff #28 #94)
#96 := [rewrite]: #95
#92 := (iff #26 #91)
#93 := [rewrite]: #92
#99 := [monotonicity #93 #96]: #98
#89 := (iff #24 #87)
#90 := [rewrite]: #89
#102 := [monotonicity #90 #99]: #101
#105 := [quant-intro #102]: #104
#86 := [asserted]: #31
#108 := [mp #86 #105]: #103
#162 := [mp~ #108 #147]: #103
#670 := [mp #162 #669]: #665
#299 := (not #665)
#431 := (or #299 #128)
#325 := (or #125 #125)
#322 := (iff #121 #325)
#638 := (or #299 #322)
#311 := (iff #638 #431)
#646 := (iff #431 #431)
#647 := [rewrite]: #646
#642 := (iff #322 #128)
#326 := (iff #325 #125)
#305 := [rewrite]: #326
#644 := [monotonicity #305]: #642
#645 := [monotonicity #644]: #311
#648 := [trans #645 #647]: #311
#310 := [quant-inst #39 #40 #40]: #638
#643 := [mp #310 #648]: #431
#287 := [unit-resolution #643 #670]: #128
#649 := (or #131 #121 #321)
#639 := [def-axiom]: #649
#289 := [unit-resolution #639 #287]: #288
#627 := [unit-resolution #289 #286 #625]: false
#628 := [lemma #627]: #121
#324 := (or #321 #134)
#312 := (or #321 #134 #232)
#323 := [def-axiom]: #312
#252 := [unit-resolution #323 #142]: #324
#629 := [unit-resolution #252 #628]: #321
#630 := (or #134 #125)
#297 := (or #131 #134 #125)
#302 := [def-axiom]: #297
#631 := [unit-resolution #302 #287]: #630
[unit-resolution #631 #629 #628]: false
unsat
2ac06f7d84c36d7f3c61e2f783f6f8bf82530665 264 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#42 := f11
decl f9 :: S2
#39 := f9
#621 := (f3 f9 f11)
decl f1 :: S1
#4 := f1
#334 := (= f1 #621)
decl f12 :: S3
#44 := f12
#332 := (f3 f9 f12)
#329 := (= f1 #332)
#619 := (or #329 #334)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S3 S4)
#43 := (f7 f11)
#45 := (f6 #43 f12)
#306 := (f3 f9 #45)
#438 := (= f1 #306)
#613 := (iff #438 #619)
#579 := (not #613)
#591 := (not #619)
#603 := (not #334)
decl f10 :: S3
#40 := f10
#634 := (f3 f9 f10)
#635 := (= f1 #634)
#481 := (or #334 #635)
#606 := (not #481)
#41 := (f7 f10)
#49 := (f6 #41 f11)
#333 := (f3 f9 #49)
#312 := (= f1 #333)
#589 := (iff #312 #481)
#581 := (not #589)
#574 := [hypothesis]: #581
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#20 := (f7 #19)
#22 := (f6 #20 #21)
#18 := (:var 2 S2)
#23 := (f3 #18 #22)
#671 := (pattern #23)
#27 := (f3 #18 #21)
#101 := (= f1 #27)
#25 := (f3 #18 #19)
#98 := (= f1 #25)
#104 := (or #98 #101)
#94 := (= f1 #23)
#107 := (iff #94 #104)
#672 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #671) #107)
#110 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #107)
#675 := (iff #110 #672)
#673 := (iff #107 #107)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#153 := (~ #110 #110)
#167 := (~ #107 #107)
#168 := [refl]: #167
#154 := [nnf-pos #168]: #153
#28 := (= #27 f1)
#26 := (= #25 f1)
#29 := (or #26 #28)
#24 := (= #23 f1)
#30 := (iff #24 #29)
#31 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #30)
#111 := (iff #31 #110)
#108 := (iff #30 #107)
#105 := (iff #29 #104)
#102 := (iff #28 #101)
#103 := [rewrite]: #102
#99 := (iff #26 #98)
#100 := [rewrite]: #99
#106 := [monotonicity #100 #103]: #105
#96 := (iff #24 #94)
#97 := [rewrite]: #96
#109 := [monotonicity #97 #106]: #108
#112 := [quant-intro #109]: #111
#93 := [asserted]: #31
#115 := [mp #93 #112]: #110
#169 := [mp~ #115 #154]: #110
#677 := [mp #169 #676]: #672
#645 := (not #672)
#587 := (or #645 #589)
#598 := (or #635 #334)
#480 := (iff #312 #598)
#590 := (or #645 #480)
#490 := (iff #590 #587)
#493 := (iff #587 #587)
#486 := [rewrite]: #493
#491 := (iff #480 #589)
#482 := (iff #598 #481)
#441 := [rewrite]: #482
#586 := [monotonicity #441]: #491
#492 := [monotonicity #586]: #490
#494 := [trans #492 #486]: #490
#475 := [quant-inst #39 #40 #42]: #590
#495 := [mp #475 #494]: #587
#575 := [unit-resolution #495 #677 #574]: false
#576 := [lemma #575]: #589
#652 := (not #312)
#649 := (or #312 #329)
#646 := (not #649)
#50 := (f7 #49)
#51 := (f6 #50 f12)
#52 := (f3 f9 #51)
#132 := (= f1 #52)
#328 := (not #132)
#46 := (f6 #41 #45)
#47 := (f3 f9 #46)
#128 := (= f1 #47)
#141 := (not #128)
#577 := [hypothesis]: #141
#327 := (or #132 #128)
#142 := (iff #132 #141)
#53 := (= #52 f1)
#48 := (= #47 f1)
#54 := (iff #48 #53)
#55 := (not #54)
#145 := (iff #55 #142)
#135 := (iff #128 #132)
#138 := (not #135)
#143 := (iff #138 #142)
#144 := [rewrite]: #143
#139 := (iff #55 #138)
#136 := (iff #54 #135)
#133 := (iff #53 #132)
#134 := [rewrite]: #133
#130 := (iff #48 #128)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#140 := [monotonicity #137]: #139
#146 := [trans #140 #144]: #145
#127 := [asserted]: #55
#149 := [mp #127 #146]: #142
#239 := (not #142)
#326 := (or #132 #128 #239)
#240 := [def-axiom]: #326
#241 := [unit-resolution #240 #149]: #327
#571 := [unit-resolution #241 #577]: #132
#562 := (or #328 #649)
#651 := (iff #132 #649)
#317 := (or #645 #651)
#318 := [quant-inst #39 #49 #44]: #317
#578 := [unit-resolution #318 #677]: #651
#647 := (not #651)
#289 := (or #647 #328 #649)
#632 := [def-axiom]: #289
#563 := [unit-resolution #632 #578]: #562
#565 := [unit-resolution #563 #571]: #649
#655 := (not #329)
#595 := (or #645 #613)
#618 := (or #334 #329)
#622 := (iff #438 #618)
#615 := (or #645 #622)
#610 := (iff #615 #595)
#617 := (iff #595 #595)
#458 := [rewrite]: #617
#614 := (iff #622 #613)
#623 := (iff #618 #619)
#612 := [rewrite]: #623
#609 := [monotonicity #612]: #614
#611 := [monotonicity #609]: #610
#459 := [trans #611 #458]: #610
#616 := [quant-inst #39 #42 #44]: #615
#460 := [mp #616 #459]: #595
#566 := [unit-resolution #460 #677]: #613
#556 := (or #579 #591)
#354 := (not #438)
#638 := (or #438 #635)
#627 := (not #638)
#568 := (or #128 #627)
#275 := (iff #128 #638)
#280 := (or #645 #275)
#636 := (or #635 #438)
#637 := (iff #128 #636)
#281 := (or #645 #637)
#641 := (iff #281 #280)
#630 := (iff #280 #280)
#631 := [rewrite]: #630
#640 := (iff #637 #275)
#633 := (iff #636 #638)
#639 := [rewrite]: #633
#642 := [monotonicity #639]: #640
#644 := [monotonicity #642]: #641
#337 := [trans #644 #631]: #641
#643 := [quant-inst #39 #40 #45]: #281
#353 := [mp #643 #337]: #280
#567 := [unit-resolution #353 #677]: #275
#624 := (not #275)
#628 := (or #624 #128 #627)
#625 := [def-axiom]: #628
#564 := [unit-resolution #625 #567]: #568
#569 := [unit-resolution #564 #577]: #627
#355 := (or #638 #354)
#341 := [def-axiom]: #355
#555 := [unit-resolution #341 #569]: #354
#573 := (or #579 #438 #591)
#570 := [def-axiom]: #573
#558 := [unit-resolution #570 #555]: #556
#559 := [unit-resolution #558 #566]: #591
#602 := (or #619 #655)
#496 := [def-axiom]: #602
#560 := [unit-resolution #496 #559]: #655
#304 := (or #646 #312 #329)
#309 := [def-axiom]: #304
#557 := [unit-resolution #309 #560 #565]: #312
#356 := (not #635)
#247 := (or #638 #356)
#626 := [def-axiom]: #247
#561 := [unit-resolution #626 #569]: #356
#497 := (or #619 #603)
#498 := [def-axiom]: #497
#541 := [unit-resolution #498 #559]: #603
#607 := (or #606 #334 #635)
#601 := [def-axiom]: #607
#542 := [unit-resolution #601 #541 #561]: #606
#439 := (or #581 #652 #481)
#440 := [def-axiom]: #439
#544 := [unit-resolution #440 #542 #557 #576]: false
#545 := [lemma #544]: #128
#331 := (or #328 #141)
#319 := (or #328 #141 #239)
#330 := [def-axiom]: #319
#259 := [unit-resolution #330 #149]: #331
#546 := [unit-resolution #259 #545]: #328
#547 := (or #132 #646)
#305 := (or #647 #132 #646)
#648 := [def-axiom]: #305
#548 := [unit-resolution #648 #578]: #547
#549 := [unit-resolution #548 #546]: #646
#653 := (or #649 #652)
#654 := [def-axiom]: #653
#550 := [unit-resolution #654 #549]: #652
#608 := (or #581 #312 #606)
#437 := [def-axiom]: #608
#551 := [unit-resolution #437 #550 #576]: #606
#604 := (or #481 #603)
#605 := [def-axiom]: #604
#552 := [unit-resolution #605 #551]: #603
#650 := (or #649 #655)
#656 := [def-axiom]: #650
#553 := [unit-resolution #656 #549]: #655
#588 := (or #591 #329 #334)
#592 := [def-axiom]: #588
#543 := [unit-resolution #592 #553 #552]: #591
#554 := (or #141 #638)
#629 := (or #624 #141 #638)
#338 := [def-axiom]: #629
#532 := [unit-resolution #338 #567]: #554
#533 := [unit-resolution #532 #545]: #638
#599 := (or #481 #356)
#600 := [def-axiom]: #599
#535 := [unit-resolution #600 #551]: #356
#349 := (or #627 #438 #635)
#350 := [def-axiom]: #349
#536 := [unit-resolution #350 #535 #533]: #438
#572 := (or #579 #354 #619)
#582 := [def-axiom]: #572
#537 := [unit-resolution #582 #536 #543]: #579
[unit-resolution #460 #677 #537]: false
unsat
95f37b9506ab4a9ecf6e4bca8da6ce25960cec6d 158 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#42 := f11
decl f9 :: S2
#39 := f9
#48 := (f3 f9 f11)
decl f1 :: S1
#4 := f1
#132 := (= f1 #48)
#186 := (not #132)
decl f10 :: S3
#40 := f10
#46 := (f3 f9 f10)
#129 := (= f1 #46)
#185 := (not #129)
#187 := (or #185 #186)
#188 := (not #187)
#329 := [hypothesis]: #188
decl f6 :: (-> S4 S3 S3)
decl f8 :: (-> S3 S4)
#41 := (f8 f10)
#43 := (f6 #41 f11)
#44 := (f3 f9 #43)
#125 := (= f1 #44)
#144 := (not #125)
#335 := (or #144 #187)
#199 := (iff #125 #187)
#135 := (and #129 #132)
#145 := (iff #135 #144)
#202 := (iff #145 #199)
#194 := (iff #187 #125)
#200 := (iff #194 #199)
#201 := [rewrite]: #200
#197 := (iff #145 #194)
#191 := (iff #188 #144)
#195 := (iff #191 #194)
#196 := [rewrite]: #195
#192 := (iff #145 #191)
#189 := (iff #135 #188)
#190 := [rewrite]: #189
#193 := [monotonicity #190]: #192
#198 := [trans #193 #196]: #197
#203 := [trans #198 #201]: #202
#49 := (= #48 f1)
#47 := (= #46 f1)
#50 := (and #47 #49)
#45 := (= #44 f1)
#51 := (iff #45 #50)
#52 := (not #51)
#148 := (iff #52 #145)
#138 := (iff #125 #135)
#141 := (not #138)
#146 := (iff #141 #145)
#147 := [rewrite]: #146
#142 := (iff #52 #141)
#139 := (iff #51 #138)
#136 := (iff #50 #135)
#133 := (iff #49 #132)
#134 := [rewrite]: #133
#130 := (iff #47 #129)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#127 := (iff #45 #125)
#128 := [rewrite]: #127
#140 := [monotonicity #128 #137]: #139
#143 := [monotonicity #140]: #142
#149 := [trans #143 #147]: #148
#124 := [asserted]: #52
#152 := [mp #124 #149]: #145
#204 := [mp #152 #203]: #199
#342 := (not #199)
#352 := (or #144 #187 #342)
#356 := [def-axiom]: #352
#672 := [unit-resolution #356 #204]: #335
#461 := [unit-resolution #672 #329]: #144
#328 := (or #125 #187)
#674 := (iff #125 #188)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#32 := (f8 #19)
#33 := (f6 #32 #21)
#18 := (:var 2 S2)
#34 := (f3 #18 #33)
#701 := (pattern #34)
#27 := (f3 #18 #21)
#98 := (= f1 #27)
#177 := (not #98)
#25 := (f3 #18 #19)
#95 := (= f1 #25)
#176 := (not #95)
#160 := (or #176 #177)
#161 := (not #160)
#111 := (= f1 #34)
#178 := (iff #111 #161)
#702 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #701) #178)
#181 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #178)
#705 := (iff #181 #702)
#703 := (iff #178 #178)
#704 := [refl]: #703
#706 := [quant-intro #704]: #705
#115 := (and #95 #98)
#118 := (iff #111 #115)
#121 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #118)
#182 := (iff #121 #181)
#179 := (iff #118 #178)
#162 := (iff #115 #161)
#163 := [rewrite]: #162
#180 := [monotonicity #163]: #179
#183 := [quant-intro #180]: #182
#158 := (~ #121 #121)
#173 := (~ #118 #118)
#174 := [refl]: #173
#159 := [nnf-pos #174]: #158
#28 := (= #27 f1)
#26 := (= #25 f1)
#36 := (and #26 #28)
#35 := (= #34 f1)
#37 := (iff #35 #36)
#38 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #37)
#122 := (iff #38 #121)
#119 := (iff #37 #118)
#116 := (iff #36 #115)
#99 := (iff #28 #98)
#100 := [rewrite]: #99
#96 := (iff #26 #95)
#97 := [rewrite]: #96
#117 := [monotonicity #97 #100]: #116
#113 := (iff #35 #111)
#114 := [rewrite]: #113
#120 := [monotonicity #114 #117]: #119
#123 := [quant-intro #120]: #122
#110 := [asserted]: #38
#126 := [mp #110 #123]: #121
#175 := [mp~ #126 #159]: #121
#184 := [mp #175 #183]: #181
#707 := [mp #184 #706]: #702
#668 := (not #702)
#340 := (or #668 #674)
#341 := [quant-inst #39 #40 #42]: #340
#670 := [unit-resolution #341 #707]: #674
#675 := (not #674)
#676 := (or #675 #125 #187)
#677 := [def-axiom]: #676
#671 := [unit-resolution #677 #670]: #328
#312 := [unit-resolution #671 #461 #329]: false
#655 := [lemma #312]: #187
#282 := (or #125 #188)
#353 := (or #125 #188 #342)
#354 := [def-axiom]: #353
#355 := [unit-resolution #354 #204]: #282
#316 := [unit-resolution #355 #655]: #125
#317 := (or #144 #188)
#678 := (or #675 #144 #188)
#673 := [def-axiom]: #678
#318 := [unit-resolution #673 #670]: #317
[unit-resolution #318 #316 #655]: false
unsat
453491eb61ee5da70153220378ac3f020b43cd23 147 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f9 :: S2
#39 := f9
#225 := (f3 f9 f4)
decl f1 :: S1
#4 := f1
#312 := (= f1 #225)
#226 := (not #312)
decl f10 :: S3
#40 := f10
#313 := (f3 f9 f10)
#227 := (= f1 #313)
#314 := (not #227)
#305 := (or #314 #226)
#316 := (not #305)
decl f6 :: (-> S4 S3 S3)
decl f8 :: (-> S3 S4)
#41 := (f8 f10)
#42 := (f6 #41 f4)
#43 := (f3 f9 #42)
#119 := (= f1 #43)
#317 := (iff #119 #316)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#32 := (f8 #19)
#33 := (f6 #32 #21)
#18 := (:var 2 S2)
#34 := (f3 #18 #33)
#664 := (pattern #34)
#27 := (f3 #18 #21)
#92 := (= f1 #27)
#160 := (not #92)
#25 := (f3 #18 #19)
#89 := (= f1 #25)
#159 := (not #89)
#143 := (or #159 #160)
#144 := (not #143)
#105 := (= f1 #34)
#161 := (iff #105 #144)
#665 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #664) #161)
#164 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #161)
#668 := (iff #164 #665)
#666 := (iff #161 #161)
#667 := [refl]: #666
#669 := [quant-intro #667]: #668
#109 := (and #89 #92)
#112 := (iff #105 #109)
#115 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #112)
#165 := (iff #115 #164)
#162 := (iff #112 #161)
#145 := (iff #109 #144)
#146 := [rewrite]: #145
#163 := [monotonicity #146]: #162
#166 := [quant-intro #163]: #165
#141 := (~ #115 #115)
#156 := (~ #112 #112)
#157 := [refl]: #156
#142 := [nnf-pos #157]: #141
#28 := (= #27 f1)
#26 := (= #25 f1)
#36 := (and #26 #28)
#35 := (= #34 f1)
#37 := (iff #35 #36)
#38 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #37)
#116 := (iff #38 #115)
#113 := (iff #37 #112)
#110 := (iff #36 #109)
#93 := (iff #28 #92)
#94 := [rewrite]: #93
#90 := (iff #26 #89)
#91 := [rewrite]: #90
#111 := [monotonicity #91 #94]: #110
#107 := (iff #35 #105)
#108 := [rewrite]: #107
#114 := [monotonicity #108 #111]: #113
#117 := [quant-intro #114]: #116
#104 := [asserted]: #38
#120 := [mp #104 #117]: #115
#158 := [mp~ #120 #142]: #115
#167 := [mp #158 #166]: #164
#670 := [mp #167 #669]: #665
#315 := (not #665)
#319 := (or #315 #317)
#298 := [quant-inst #39 #40 #9]: #319
#245 := [unit-resolution #298 #670]: #317
#304 := (not #317)
#318 := (or #304 #316)
#44 := (= #43 f1)
#45 := (not #44)
#46 := (not #45)
#131 := (iff #46 #119)
#123 := (not #119)
#126 := (not #123)
#129 := (iff #126 #119)
#130 := [rewrite]: #129
#127 := (iff #46 #126)
#124 := (iff #45 #123)
#121 := (iff #44 #119)
#122 := [rewrite]: #121
#125 := [monotonicity #122]: #124
#128 := [monotonicity #125]: #127
#132 := [trans #128 #130]: #131
#118 := [asserted]: #46
#135 := [mp #118 #132]: #119
#640 := (or #304 #123 #316)
#641 := [def-axiom]: #640
#634 := [unit-resolution #641 #135]: #318
#275 := [unit-resolution #634 #245]: #316
#292 := (or #305 #312)
#424 := [def-axiom]: #292
#618 := [unit-resolution #424 #275]: #312
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#643 := (pattern #10)
#67 := (= f1 #10)
#70 := (not #67)
#644 := (forall (vars (?v0 S2)) (:pat #643) #70)
#73 := (forall (vars (?v0 S2)) #70)
#647 := (iff #73 #644)
#645 := (iff #70 #70)
#646 := [refl]: #645
#648 := [quant-intro #646]: #647
#149 := (~ #73 #73)
#147 := (~ #70 #70)
#148 := [refl]: #147
#150 := [nnf-pos #148]: #149
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#74 := (iff #13 #73)
#71 := (iff #12 #70)
#68 := (iff #11 #67)
#69 := [rewrite]: #68
#72 := [monotonicity #69]: #71
#75 := [quant-intro #72]: #74
#66 := [asserted]: #13
#78 := [mp #66 #75]: #73
#134 := [mp~ #78 #150]: #73
#649 := [mp #134 #648]: #644
#295 := (not #644)
#633 := (or #295 #226)
#291 := [quant-inst #39]: #633
[unit-resolution #291 #649 #618]: false
unsat
6f8829ccc8ddcc6f60b1e61de2ed840042d23d2c 171 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f10 :: S3
#40 := f10
decl f9 :: S2
#39 := f9
#45 := (f3 f9 f10)
decl f1 :: S1
#4 := f1
#125 := (= f1 #45)
#321 := (not #125)
decl f6 :: (-> S4 S3 S3)
decl f5 :: S3
#14 := f5
decl f8 :: (-> S3 S4)
#41 := (f8 f10)
#42 := (f6 #41 f5)
#43 := (f3 f9 #42)
#121 := (= f1 #43)
#325 := (f3 f9 f5)
#322 := (= f1 #325)
#326 := (not #322)
#299 := [hypothesis]: #326
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#657 := (pattern #15)
#79 := (= f1 #15)
#658 := (forall (vars (?v0 S2)) (:pat #657) #79)
#83 := (forall (vars (?v0 S2)) #79)
#661 := (iff #83 #658)
#659 := (iff #79 #79)
#660 := [refl]: #659
#662 := [quant-intro #660]: #661
#144 := (~ #83 #83)
#143 := (~ #79 #79)
#158 := [refl]: #143
#145 := [nnf-pos #158]: #144
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#84 := (iff #17 #83)
#81 := (iff #16 #79)
#82 := [rewrite]: #81
#85 := [quant-intro #82]: #84
#78 := [asserted]: #17
#88 := [mp #78 #85]: #83
#159 := [mp~ #88 #145]: #83
#663 := [mp #159 #662]: #658
#287 := (not #658)
#288 := (or #287 #322)
#289 := [quant-inst #39]: #288
#431 := [unit-resolution #289 #663 #299]: false
#627 := [lemma #431]: #322
#134 := (not #121)
#628 := [hypothesis]: #134
#320 := (or #125 #121)
#135 := (iff #125 #134)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#138 := (iff #48 #135)
#128 := (iff #121 #125)
#131 := (not #128)
#136 := (iff #131 #135)
#137 := [rewrite]: #136
#132 := (iff #48 #131)
#129 := (iff #47 #128)
#126 := (iff #46 #125)
#127 := [rewrite]: #126
#123 := (iff #44 #121)
#124 := [rewrite]: #123
#130 := [monotonicity #124 #127]: #129
#133 := [monotonicity #130]: #132
#139 := [trans #133 #137]: #138
#120 := [asserted]: #48
#142 := [mp #120 #139]: #135
#232 := (not #135)
#319 := (or #125 #121 #232)
#233 := [def-axiom]: #319
#234 := [unit-resolution #233 #142]: #320
#629 := [unit-resolution #234 #628]: #125
#305 := (or #321 #326)
#631 := (or #121 #305)
#642 := (not #305)
#644 := (iff #121 #642)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#32 := (f8 #19)
#33 := (f6 #32 #21)
#18 := (:var 2 S2)
#34 := (f3 #18 #33)
#671 := (pattern #34)
#27 := (f3 #18 #21)
#94 := (= f1 #27)
#167 := (not #94)
#25 := (f3 #18 #19)
#91 := (= f1 #25)
#166 := (not #91)
#150 := (or #166 #167)
#151 := (not #150)
#107 := (= f1 #34)
#168 := (iff #107 #151)
#672 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #671) #168)
#171 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #168)
#675 := (iff #171 #672)
#673 := (iff #168 #168)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#111 := (and #91 #94)
#114 := (iff #107 #111)
#117 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #114)
#172 := (iff #117 #171)
#169 := (iff #114 #168)
#152 := (iff #111 #151)
#153 := [rewrite]: #152
#170 := [monotonicity #153]: #169
#173 := [quant-intro #170]: #172
#148 := (~ #117 #117)
#163 := (~ #114 #114)
#164 := [refl]: #163
#149 := [nnf-pos #164]: #148
#28 := (= #27 f1)
#26 := (= #25 f1)
#36 := (and #26 #28)
#35 := (= #34 f1)
#37 := (iff #35 #36)
#38 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #37)
#118 := (iff #38 #117)
#115 := (iff #37 #114)
#112 := (iff #36 #111)
#95 := (iff #28 #94)
#96 := [rewrite]: #95
#92 := (iff #26 #91)
#93 := [rewrite]: #92
#113 := [monotonicity #93 #96]: #112
#109 := (iff #35 #107)
#110 := [rewrite]: #109
#116 := [monotonicity #110 #113]: #115
#119 := [quant-intro #116]: #118
#106 := [asserted]: #38
#122 := [mp #106 #119]: #117
#165 := [mp~ #122 #149]: #117
#174 := [mp #165 #173]: #171
#677 := [mp #174 #676]: #672
#638 := (not #672)
#310 := (or #638 #644)
#311 := [quant-inst #39 #40 #14]: #310
#630 := [unit-resolution #311 #677]: #644
#639 := (not #644)
#297 := (or #639 #121 #305)
#302 := [def-axiom]: #297
#626 := [unit-resolution #302 #630]: #631
#632 := [unit-resolution #626 #628]: #305
#643 := (or #642 #321 #326)
#649 := [def-axiom]: #643
#268 := [unit-resolution #649 #632 #629 #627]: false
#633 := [lemma #268]: #121
#324 := (or #321 #134)
#312 := (or #321 #134 #232)
#323 := [def-axiom]: #312
#252 := [unit-resolution #323 #142]: #324
#635 := [unit-resolution #252 #633]: #321
#273 := (or #134 #642)
#640 := (or #639 #134 #642)
#298 := [def-axiom]: #640
#274 := [unit-resolution #298 #630]: #273
#636 := [unit-resolution #274 #633]: #642
#645 := (or #305 #125)
#646 := [def-axiom]: #645
[unit-resolution #646 #636 #635]: false
unsat
7fb5c9e3c94a5bd9f761d4854f2678f455553edf 171 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f10 :: S3
#40 := f10
decl f8 :: (-> S3 S4)
decl f11 :: S3
#42 := f11
#46 := (f8 f11)
#47 := (f6 #46 f10)
decl f9 :: S2
#39 := f9
#48 := (f3 f9 #47)
decl f1 :: S1
#4 := f1
#128 := (= f1 #48)
#324 := (not #128)
#41 := (f8 f10)
#43 := (f6 #41 f11)
#44 := (f3 f9 #43)
#124 := (= f1 #44)
#137 := (not #124)
#626 := [hypothesis]: #137
#323 := (or #128 #124)
#138 := (iff #128 #137)
#49 := (= #48 f1)
#45 := (= #44 f1)
#50 := (iff #45 #49)
#51 := (not #50)
#141 := (iff #51 #138)
#131 := (iff #124 #128)
#134 := (not #131)
#139 := (iff #134 #138)
#140 := [rewrite]: #139
#135 := (iff #51 #134)
#132 := (iff #50 #131)
#129 := (iff #49 #128)
#130 := [rewrite]: #129
#126 := (iff #45 #124)
#127 := [rewrite]: #126
#133 := [monotonicity #127 #130]: #132
#136 := [monotonicity #133]: #135
#142 := [trans #136 #140]: #141
#123 := [asserted]: #51
#145 := [mp #123 #142]: #138
#235 := (not #138)
#322 := (or #128 #124 #235)
#236 := [def-axiom]: #322
#237 := [unit-resolution #236 #145]: #323
#627 := [unit-resolution #237 #626]: #128
#308 := (f3 f9 f11)
#645 := (= f1 #308)
#647 := (not #645)
#328 := (f3 f9 f10)
#325 := (= f1 #328)
#329 := (not #325)
#313 := (or #329 #647)
#624 := (or #124 #313)
#649 := (not #313)
#640 := (iff #124 #649)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#32 := (f8 #19)
#33 := (f6 #32 #21)
#18 := (:var 2 S2)
#34 := (f3 #18 #33)
#674 := (pattern #34)
#27 := (f3 #18 #21)
#97 := (= f1 #27)
#170 := (not #97)
#25 := (f3 #18 #19)
#94 := (= f1 #25)
#169 := (not #94)
#153 := (or #169 #170)
#154 := (not #153)
#110 := (= f1 #34)
#171 := (iff #110 #154)
#675 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #674) #171)
#174 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #171)
#678 := (iff #174 #675)
#676 := (iff #171 #171)
#677 := [refl]: #676
#679 := [quant-intro #677]: #678
#114 := (and #94 #97)
#117 := (iff #110 #114)
#120 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #117)
#175 := (iff #120 #174)
#172 := (iff #117 #171)
#155 := (iff #114 #154)
#156 := [rewrite]: #155
#173 := [monotonicity #156]: #172
#176 := [quant-intro #173]: #175
#151 := (~ #120 #120)
#166 := (~ #117 #117)
#167 := [refl]: #166
#152 := [nnf-pos #167]: #151
#28 := (= #27 f1)
#26 := (= #25 f1)
#36 := (and #26 #28)
#35 := (= #34 f1)
#37 := (iff #35 #36)
#38 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #37)
#121 := (iff #38 #120)
#118 := (iff #37 #117)
#115 := (iff #36 #114)
#98 := (iff #28 #97)
#99 := [rewrite]: #98
#95 := (iff #26 #94)
#96 := [rewrite]: #95
#116 := [monotonicity #96 #99]: #115
#112 := (iff #35 #110)
#113 := [rewrite]: #112
#119 := [monotonicity #113 #116]: #118
#122 := [quant-intro #119]: #121
#109 := [asserted]: #38
#125 := [mp #109 #122]: #120
#168 := [mp~ #125 #152]: #120
#177 := [mp #168 #176]: #174
#680 := [mp #177 #679]: #675
#300 := (not #675)
#333 := (or #300 #640)
#349 := [quant-inst #39 #40 #42]: #333
#620 := [unit-resolution #349 #680]: #640
#350 := (not #640)
#351 := (or #350 #124 #313)
#337 := [def-axiom]: #351
#621 := [unit-resolution #337 #620]: #624
#625 := [unit-resolution #621 #626]: #313
#335 := (or #324 #649)
#646 := (iff #128 #649)
#305 := (or #300 #646)
#302 := (or #647 #329)
#434 := (not #302)
#641 := (iff #128 #434)
#643 := (or #300 #641)
#644 := (iff #643 #305)
#628 := (iff #305 #305)
#289 := [rewrite]: #628
#652 := (iff #641 #646)
#650 := (iff #434 #649)
#314 := (iff #302 #313)
#648 := [rewrite]: #314
#651 := [monotonicity #648]: #650
#642 := [monotonicity #651]: #652
#285 := [monotonicity #642]: #644
#290 := [trans #285 #289]: #644
#301 := [quant-inst #39 #42 #40]: #643
#291 := [mp #301 #290]: #305
#334 := [unit-resolution #291 #680]: #646
#629 := (not #646)
#636 := (or #629 #324 #649)
#638 := [def-axiom]: #636
#336 := [unit-resolution #638 #334]: #335
#338 := [unit-resolution #336 #625 #627]: false
#616 := [lemma #338]: #124
#327 := (or #324 #137)
#315 := (or #324 #137 #235)
#326 := [def-axiom]: #315
#255 := [unit-resolution #326 #145]: #327
#617 := [unit-resolution #255 #616]: #324
#330 := (or #137 #649)
#352 := (or #350 #137 #649)
#243 := [def-axiom]: #352
#614 := [unit-resolution #243 #620]: #330
#618 := [unit-resolution #614 #616]: #649
#615 := (or #128 #313)
#635 := (or #629 #128 #313)
#271 := [def-axiom]: #635
#619 := [unit-resolution #271 #334]: #615
[unit-resolution #619 #618 #617]: false
unsat
894705c4ef9337c77fce76fc097ee92668a964e4 147 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f10 :: S3
#40 := f10
decl f8 :: (-> S3 S4)
#41 := (f8 f10)
#42 := (f6 #41 f10)
decl f9 :: S2
#39 := f9
#43 := (f3 f9 #42)
decl f1 :: S1
#4 := f1
#121 := (= f1 #43)
#134 := (not #121)
#630 := [hypothesis]: #134
#45 := (f3 f9 f10)
#125 := (= f1 #45)
#320 := (or #125 #121)
#135 := (iff #125 #134)
#46 := (= #45 f1)
#44 := (= #43 f1)
#47 := (iff #44 #46)
#48 := (not #47)
#138 := (iff #48 #135)
#128 := (iff #121 #125)
#131 := (not #128)
#136 := (iff #131 #135)
#137 := [rewrite]: #136
#132 := (iff #48 #131)
#129 := (iff #47 #128)
#126 := (iff #46 #125)
#127 := [rewrite]: #126
#123 := (iff #44 #121)
#124 := [rewrite]: #123
#130 := [monotonicity #124 #127]: #129
#133 := [monotonicity #130]: #132
#139 := [trans #133 #137]: #138
#120 := [asserted]: #48
#142 := [mp #120 #139]: #135
#232 := (not #135)
#319 := (or #125 #121 #232)
#233 := [def-axiom]: #319
#234 := [unit-resolution #233 #142]: #320
#631 := [unit-resolution #234 #630]: #125
#321 := (not #125)
#632 := (or #121 #321)
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#32 := (f8 #19)
#33 := (f6 #32 #21)
#18 := (:var 2 S2)
#34 := (f3 #18 #33)
#671 := (pattern #34)
#27 := (f3 #18 #21)
#94 := (= f1 #27)
#167 := (not #94)
#25 := (f3 #18 #19)
#91 := (= f1 #25)
#166 := (not #91)
#150 := (or #166 #167)
#151 := (not #150)
#107 := (= f1 #34)
#168 := (iff #107 #151)
#672 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #671) #168)
#171 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #168)
#675 := (iff #171 #672)
#673 := (iff #168 #168)
#674 := [refl]: #673
#676 := [quant-intro #674]: #675
#111 := (and #91 #94)
#114 := (iff #107 #111)
#117 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #114)
#172 := (iff #117 #171)
#169 := (iff #114 #168)
#152 := (iff #111 #151)
#153 := [rewrite]: #152
#170 := [monotonicity #153]: #169
#173 := [quant-intro #170]: #172
#148 := (~ #117 #117)
#163 := (~ #114 #114)
#164 := [refl]: #163
#149 := [nnf-pos #164]: #148
#28 := (= #27 f1)
#26 := (= #25 f1)
#36 := (and #26 #28)
#35 := (= #34 f1)
#37 := (iff #35 #36)
#38 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #37)
#118 := (iff #38 #117)
#115 := (iff #37 #114)
#112 := (iff #36 #111)
#95 := (iff #28 #94)
#96 := [rewrite]: #95
#92 := (iff #26 #91)
#93 := [rewrite]: #92
#113 := [monotonicity #93 #96]: #112
#109 := (iff #35 #107)
#110 := [rewrite]: #109
#116 := [monotonicity #110 #113]: #115
#119 := [quant-intro #116]: #118
#106 := [asserted]: #38
#122 := [mp #106 #119]: #117
#165 := [mp~ #122 #149]: #117
#174 := [mp #165 #173]: #171
#677 := [mp #174 #676]: #672
#648 := (not #672)
#643 := (or #648 #128)
#325 := (or #321 #321)
#322 := (not #325)
#326 := (iff #121 #322)
#649 := (or #648 #326)
#297 := (iff #649 #643)
#640 := (iff #643 #643)
#298 := [rewrite]: #640
#646 := (iff #326 #128)
#311 := (iff #322 #125)
#644 := (not #321)
#638 := (iff #644 #125)
#310 := [rewrite]: #638
#299 := (iff #322 #644)
#305 := (iff #325 #321)
#642 := [rewrite]: #305
#431 := [monotonicity #642]: #299
#645 := [trans #431 #310]: #311
#647 := [monotonicity #645]: #646
#302 := [monotonicity #647]: #297
#641 := [trans #302 #298]: #297
#639 := [quant-inst #39 #40 #40]: #649
#282 := [mp #639 #641]: #643
#626 := [unit-resolution #282 #677]: #128
#625 := (or #131 #121 #321)
#286 := [def-axiom]: #625
#268 := [unit-resolution #286 #626]: #632
#633 := [unit-resolution #268 #631 #630]: false
#635 := [lemma #633]: #121
#324 := (or #321 #134)
#312 := (or #321 #134 #232)
#323 := [def-axiom]: #312
#252 := [unit-resolution #323 #142]: #324
#273 := [unit-resolution #252 #635]: #321
#274 := (or #134 #125)
#287 := (or #131 #134 #125)
#288 := [def-axiom]: #287
#636 := [unit-resolution #288 #626]: #274
[unit-resolution #636 #273 #635]: false
unsat
6bc0dc7cf7d78f36cf0c61d5f399a6c019b36218 285 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f8 :: (-> S3 S4)
decl f10 :: S3
#40 := f10
#41 := (f8 f10)
#49 := (f6 #41 f11)
decl f9 :: S2
#39 := f9
#312 := (f3 f9 #49)
decl f1 :: S1
#4 := f1
#649 := (= f1 #312)
#247 := (f3 f9 f11)
#626 := (= f1 #247)
#623 := (not #626)
#337 := (f3 f9 f10)
#353 := (= f1 #337)
#354 := (not #353)
#612 := (or #354 #623)
#613 := (not #612)
#609 := (iff #613 #649)
#580 := (not #609)
decl f12 :: S3
#44 := f12
#332 := (f3 f9 f12)
#329 := (= f1 #332)
#333 := (not #329)
#482 := (or #333 #623)
#491 := (not #482)
#43 := (f8 f11)
#45 := (f6 #43 f12)
#644 := (f3 f9 #45)
#630 := (= f1 #644)
#492 := (iff #491 #630)
#585 := (not #492)
#565 := [hypothesis]: #585
#21 := (:var 0 S3)
#19 := (:var 1 S3)
#32 := (f8 #19)
#33 := (f6 #32 #21)
#18 := (:var 2 S2)
#34 := (f3 #18 #33)
#678 := (pattern #34)
#27 := (f3 #18 #21)
#101 := (= f1 #27)
#174 := (not #101)
#25 := (f3 #18 #19)
#98 := (= f1 #25)
#173 := (not #98)
#157 := (or #173 #174)
#158 := (not #157)
#114 := (= f1 #34)
#175 := (iff #114 #158)
#679 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #678) #175)
#178 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #175)
#682 := (iff #178 #679)
#680 := (iff #175 #175)
#681 := [refl]: #680
#683 := [quant-intro #681]: #682
#118 := (and #98 #101)
#121 := (iff #114 #118)
#124 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #121)
#179 := (iff #124 #178)
#176 := (iff #121 #175)
#159 := (iff #118 #158)
#160 := [rewrite]: #159
#177 := [monotonicity #160]: #176
#180 := [quant-intro #177]: #179
#155 := (~ #124 #124)
#170 := (~ #121 #121)
#171 := [refl]: #170
#156 := [nnf-pos #171]: #155
#28 := (= #27 f1)
#26 := (= #25 f1)
#36 := (and #26 #28)
#35 := (= #34 f1)
#37 := (iff #35 #36)
#38 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #37)
#125 := (iff #38 #124)
#122 := (iff #37 #121)
#119 := (iff #36 #118)
#102 := (iff #28 #101)
#103 := [rewrite]: #102
#99 := (iff #26 #98)
#100 := [rewrite]: #99
#120 := [monotonicity #100 #103]: #119
#116 := (iff #35 #114)
#117 := [rewrite]: #116
#123 := [monotonicity #117 #120]: #122
#126 := [quant-intro #123]: #125
#113 := [asserted]: #38
#129 := [mp #113 #126]: #124
#172 := [mp~ #129 #156]: #124
#181 := [mp #172 #180]: #178
#684 := [mp #181 #683]: #679
#304 := (not #679)
#496 := (or #304 #492)
#598 := (or #623 #333)
#480 := (not #598)
#481 := (iff #630 #480)
#497 := (or #304 #481)
#591 := (iff #497 #496)
#592 := (iff #496 #496)
#579 := [rewrite]: #592
#494 := (iff #481 #492)
#590 := (iff #630 #491)
#493 := (iff #590 #492)
#486 := [rewrite]: #493
#475 := (iff #481 #590)
#586 := (iff #480 #491)
#441 := (iff #598 #482)
#589 := [rewrite]: #441
#587 := [monotonicity #589]: #586
#490 := [monotonicity #587]: #475
#495 := [trans #490 #486]: #494
#588 := [monotonicity #495]: #591
#581 := [trans #588 #579]: #591
#498 := [quant-inst #39 #42 #44]: #497
#573 := [mp #498 #581]: #496
#566 := [unit-resolution #573 #684 #565]: false
#567 := [lemma #566]: #492
#631 := (not #630)
#355 := (or #354 #631)
#341 := (not #355)
#46 := (f6 #41 #45)
#47 := (f3 f9 #46)
#128 := (= f1 #47)
#141 := (not #128)
#568 := [hypothesis]: #141
#569 := (or #128 #355)
#356 := (iff #128 #341)
#627 := (or #304 #356)
#349 := [quant-inst #39 #40 #45]: #627
#564 := [unit-resolution #349 #684]: #356
#339 := (not #356)
#340 := (or #339 #128 #355)
#342 := [def-axiom]: #340
#555 := [unit-resolution #342 #564]: #569
#556 := [unit-resolution #555 #568]: #355
#595 := (or #304 #609)
#614 := (iff #649 #613)
#611 := (or #304 #614)
#616 := (iff #611 #595)
#459 := (iff #595 #595)
#460 := [rewrite]: #459
#610 := (iff #614 #609)
#615 := [rewrite]: #610
#458 := [monotonicity #615]: #616
#602 := [trans #458 #460]: #616
#617 := [quant-inst #39 #40 #42]: #611
#603 := [mp #617 #602]: #595
#558 := [unit-resolution #603 #684]: #609
#544 := (or #580 #613)
#651 := (not #649)
#317 := (or #333 #651)
#653 := (not #317)
#50 := (f8 #49)
#51 := (f6 #50 f12)
#52 := (f3 f9 #51)
#132 := (= f1 #52)
#327 := (or #132 #128)
#142 := (iff #132 #141)
#53 := (= #52 f1)
#48 := (= #47 f1)
#54 := (iff #48 #53)
#55 := (not #54)
#145 := (iff #55 #142)
#135 := (iff #128 #132)
#138 := (not #135)
#143 := (iff #138 #142)
#144 := [rewrite]: #143
#139 := (iff #55 #138)
#136 := (iff #54 #135)
#133 := (iff #53 #132)
#134 := [rewrite]: #133
#130 := (iff #48 #128)
#131 := [rewrite]: #130
#137 := [monotonicity #131 #134]: #136
#140 := [monotonicity #137]: #139
#146 := [trans #140 #144]: #145
#127 := [asserted]: #55
#149 := [mp #127 #146]: #142
#239 := (not #142)
#326 := (or #132 #128 #239)
#240 := [def-axiom]: #326
#241 := [unit-resolution #240 #149]: #327
#559 := [unit-resolution #241 #568]: #132
#328 := (not #132)
#557 := (or #328 #653)
#650 := (iff #132 #653)
#309 := (or #304 #650)
#306 := (or #651 #333)
#438 := (not #306)
#645 := (iff #132 #438)
#647 := (or #304 #645)
#648 := (iff #647 #309)
#632 := (iff #309 #309)
#293 := [rewrite]: #632
#656 := (iff #645 #650)
#654 := (iff #438 #653)
#318 := (iff #306 #317)
#652 := [rewrite]: #318
#655 := [monotonicity #652]: #654
#646 := [monotonicity #655]: #656
#289 := [monotonicity #646]: #648
#294 := [trans #289 #293]: #648
#305 := [quant-inst #39 #49 #44]: #647
#295 := [mp #305 #294]: #309
#560 := [unit-resolution #295 #684]: #650
#633 := (not #650)
#640 := (or #633 #328 #653)
#642 := [def-axiom]: #640
#561 := [unit-resolution #642 #560]: #557
#541 := [unit-resolution #561 #559]: #653
#635 := (or #317 #649)
#636 := [def-axiom]: #635
#542 := [unit-resolution #636 #541]: #649
#574 := (or #580 #613 #651)
#575 := [def-axiom]: #574
#545 := [unit-resolution #575 #542]: #544
#546 := [unit-resolution #545 #558]: #613
#604 := (or #612 #353)
#570 := [def-axiom]: #604
#547 := [unit-resolution #570 #546]: #353
#629 := (or #341 #354 #631)
#338 := [def-axiom]: #629
#548 := [unit-resolution #338 #547 #556]: #631
#296 := (or #317 #329)
#634 := [def-axiom]: #296
#549 := [unit-resolution #634 #541]: #329
#572 := (or #612 #626)
#582 := [def-axiom]: #572
#550 := [unit-resolution #582 #546]: #626
#607 := (or #491 #333 #623)
#601 := [def-axiom]: #607
#551 := [unit-resolution #601 #550 #549]: #491
#439 := (or #585 #482 #630)
#440 := [def-axiom]: #439
#552 := [unit-resolution #440 #551 #548 #567]: false
#553 := [lemma #552]: #128
#543 := (or #141 #341)
#620 := (or #339 #141 #341)
#621 := [def-axiom]: #620
#554 := [unit-resolution #621 #564]: #543
#532 := [unit-resolution #554 #553]: #341
#628 := (or #355 #630)
#625 := [def-axiom]: #628
#533 := [unit-resolution #625 #532]: #630
#608 := (or #585 #491 #631)
#437 := [def-axiom]: #608
#535 := [unit-resolution #437 #533 #567]: #491
#600 := (or #482 #626)
#606 := [def-axiom]: #600
#536 := [unit-resolution #606 #535]: #626
#350 := (or #355 #353)
#624 := [def-axiom]: #350
#537 := [unit-resolution #624 #532]: #353
#583 := (or #613 #354 #623)
#584 := [def-axiom]: #583
#538 := [unit-resolution #584 #537 #536]: #613
#331 := (or #328 #141)
#319 := (or #328 #141 #239)
#330 := [def-axiom]: #319
#259 := [unit-resolution #330 #149]: #331
#539 := [unit-resolution #259 #553]: #328
#534 := (or #132 #317)
#639 := (or #633 #132 #317)
#275 := [def-axiom]: #639
#540 := [unit-resolution #275 #560]: #534
#526 := [unit-resolution #540 #539]: #317
#605 := (or #482 #329)
#599 := [def-axiom]: #605
#522 := [unit-resolution #599 #535]: #329
#637 := (or #653 #333 #651)
#638 := [def-axiom]: #637
#523 := [unit-resolution #638 #522 #526]: #651
#576 := (or #580 #612 #649)
#577 := [def-axiom]: #576
#524 := [unit-resolution #577 #523 #538]: #580
[unit-resolution #603 #684 #524]: false
unsat
a7bc4cb1c082efb5c0f6c878be007f36211e0adf 20 0
#2 := false
decl f12 :: (-> S3 S3)
decl f4 :: S3
#8 := f4
#48 := (f12 f4)
#49 := (= #48 #48)
#50 := (not #49)
#145 := (iff #50 false)
#1 := true
#140 := (not true)
#143 := (iff #140 false)
#144 := [rewrite]: #143
#141 := (iff #50 #140)
#137 := (iff #49 true)
#139 := [rewrite]: #137
#142 := [monotonicity #139]: #141
#146 := [trans #142 #144]: #145
#136 := [asserted]: #50
[mp #136 #146]: false
unsat
eac8197a82f6b3a5c2024430d69641bb761b0abc 60 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f10 :: S2
#41 := f10
#42 := (f3 f10 f4)
decl f1 :: S1
#4 := f1
#118 := (= f1 #42)
#43 := (= #42 f1)
#44 := (not #43)
#45 := (not #44)
#130 := (iff #45 #118)
#122 := (not #118)
#125 := (not #122)
#128 := (iff #125 #118)
#129 := [rewrite]: #128
#126 := (iff #45 #125)
#123 := (iff #44 #122)
#120 := (iff #43 #118)
#121 := [rewrite]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#117 := [asserted]: #45
#134 := [mp #117 #131]: #118
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#642 := (pattern #10)
#66 := (= f1 #10)
#69 := (not #66)
#643 := (forall (vars (?v0 S2)) (:pat #642) #69)
#72 := (forall (vars (?v0 S2)) #69)
#646 := (iff #72 #643)
#644 := (iff #69 #69)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#148 := (~ #72 #72)
#146 := (~ #69 #69)
#147 := [refl]: #146
#149 := [nnf-pos #147]: #148
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#73 := (iff #13 #72)
#70 := (iff #12 #69)
#67 := (iff #11 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [quant-intro #71]: #73
#65 := [asserted]: #13
#77 := [mp #65 #74]: #72
#133 := [mp~ #77 #149]: #72
#648 := [mp #133 #647]: #643
#225 := (not #643)
#312 := (or #225 #122)
#226 := [quant-inst #41]: #312
[unit-resolution #226 #648 #134]: false
unsat
32295808d649b2df10d022ec20bfa2f501001522 48 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#14 := f5
decl f10 :: S2
#41 := f10
#42 := (f3 f10 f5)
decl f1 :: S1
#4 := f1
#117 := (= f1 #42)
#121 := (not #117)
#43 := (= #42 f1)
#44 := (not #43)
#122 := (iff #44 #121)
#119 := (iff #43 #117)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#116 := [asserted]: #44
#126 := [mp #116 #123]: #121
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#641 := (pattern #15)
#75 := (= f1 #15)
#642 := (forall (vars (?v0 S2)) (:pat #641) #75)
#79 := (forall (vars (?v0 S2)) #75)
#645 := (iff #79 #642)
#643 := (iff #75 #75)
#644 := [refl]: #643
#646 := [quant-intro #644]: #645
#128 := (~ #79 #79)
#127 := (~ #75 #75)
#142 := [refl]: #127
#129 := [nnf-pos #142]: #128
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#80 := (iff #17 #79)
#77 := (iff #16 #75)
#78 := [rewrite]: #77
#81 := [quant-intro #78]: #80
#74 := [asserted]: #17
#84 := [mp #74 #81]: #79
#143 := [mp~ #84 #129]: #79
#647 := [mp #143 #646]: #642
#217 := (not #642)
#304 := (or #217 #117)
#218 := [quant-inst #41]: #304
[unit-resolution #218 #647 #126]: false
unsat
dfe83e391823f1cbfcca9d6fb06c0ae74a22248a 126 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f12 :: S3
#44 := f12
decl f7 :: (-> S5 S3 S4)
decl f11 :: S3
#42 := f11
decl f8 :: S5
#19 := f8
#43 := (f7 f8 f11)
#45 := (f6 #43 f12)
decl f10 :: S2
#41 := f10
#46 := (f3 f10 #45)
decl f1 :: S1
#4 := f1
#127 := (= f1 #46)
#146 := (not #127)
#650 := [hypothesis]: #146
#50 := (f3 f10 f12)
#134 := (= f1 #50)
#48 := (f3 f10 f11)
#131 := (= f1 #48)
#137 := (or #131 #134)
#338 := (or #137 #127)
#147 := (iff #137 #146)
#51 := (= #50 f1)
#49 := (= #48 f1)
#52 := (or #49 #51)
#47 := (= #46 f1)
#53 := (iff #47 #52)
#54 := (not #53)
#150 := (iff #54 #147)
#140 := (iff #127 #137)
#143 := (not #140)
#148 := (iff #143 #147)
#149 := [rewrite]: #148
#144 := (iff #54 #143)
#141 := (iff #53 #140)
#138 := (iff #52 #137)
#135 := (iff #51 #134)
#136 := [rewrite]: #135
#132 := (iff #49 #131)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#129 := (iff #47 #127)
#130 := [rewrite]: #129
#142 := [monotonicity #130 #139]: #141
#145 := [monotonicity #142]: #144
#151 := [trans #145 #149]: #150
#126 := [asserted]: #54
#154 := [mp #126 #151]: #147
#264 := (not #147)
#337 := (or #137 #127 #264)
#334 := [def-axiom]: #337
#317 := [unit-resolution #334 #154]: #338
#322 := [unit-resolution #317 #650]: #137
#324 := (not #137)
#653 := (or #127 #324)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#676 := (pattern #24)
#28 := (f3 #18 #22)
#100 := (= f1 #28)
#26 := (f3 #18 #20)
#97 := (= f1 #26)
#103 := (or #97 #100)
#93 := (= f1 #24)
#106 := (iff #93 #103)
#677 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #676) #106)
#109 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #106)
#680 := (iff #109 #677)
#678 := (iff #106 #106)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#158 := (~ #109 #109)
#172 := (~ #106 #106)
#173 := [refl]: #172
#159 := [nnf-pos #173]: #158
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#110 := (iff #32 #109)
#107 := (iff #31 #106)
#104 := (iff #30 #103)
#101 := (iff #29 #100)
#102 := [rewrite]: #101
#98 := (iff #27 #97)
#99 := [rewrite]: #98
#105 := [monotonicity #99 #102]: #104
#95 := (iff #25 #93)
#96 := [rewrite]: #95
#108 := [monotonicity #96 #105]: #107
#111 := [quant-intro #108]: #110
#92 := [asserted]: #32
#114 := [mp #92 #111]: #109
#174 := [mp~ #114 #159]: #109
#682 := [mp #174 #681]: #677
#323 := (not #677)
#657 := (or #323 #140)
#658 := [quant-inst #41 #42 #44]: #657
#310 := [unit-resolution #658 #682]: #140
#659 := (or #143 #127 #324)
#660 := [def-axiom]: #659
#294 := [unit-resolution #660 #310]: #653
#637 := [unit-resolution #294 #322 #650]: false
#298 := [lemma #637]: #127
#311 := (or #324 #146)
#654 := (or #324 #146 #264)
#656 := [def-axiom]: #654
#443 := [unit-resolution #656 #154]: #311
#299 := [unit-resolution #443 #298]: #324
#300 := (or #146 #137)
#655 := (or #143 #146 #137)
#661 := [def-axiom]: #655
#301 := [unit-resolution #661 #310]: #300
[unit-resolution #301 #299 #298]: false
unsat
54d5adcc9aa92b5c35a0e590a6651cbf7d0b828e 162 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f10 :: S2
#41 := f10
#327 := (f3 f10 f4)
decl f1 :: S1
#4 := f1
#324 := (= f1 #327)
decl f11 :: S3
#42 := f11
#47 := (f3 f10 f11)
#127 := (= f1 #47)
#328 := (or #127 #324)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#19 := f8
#43 := (f7 f8 f11)
#44 := (f6 #43 f4)
#45 := (f3 f10 #44)
#123 := (= f1 #45)
#136 := (not #123)
#644 := [hypothesis]: #136
#322 := (or #127 #123)
#137 := (iff #127 #136)
#48 := (= #47 f1)
#46 := (= #45 f1)
#49 := (iff #46 #48)
#50 := (not #49)
#140 := (iff #50 #137)
#130 := (iff #123 #127)
#133 := (not #130)
#138 := (iff #133 #137)
#139 := [rewrite]: #138
#134 := (iff #50 #133)
#131 := (iff #49 #130)
#128 := (iff #48 #127)
#129 := [rewrite]: #128
#125 := (iff #46 #123)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#135 := [monotonicity #132]: #134
#141 := [trans #135 #139]: #140
#122 := [asserted]: #50
#144 := [mp #122 #141]: #137
#234 := (not #137)
#321 := (or #127 #123 #234)
#235 := [def-axiom]: #321
#236 := [unit-resolution #235 #144]: #322
#646 := [unit-resolution #236 #644]: #127
#650 := (not #328)
#290 := (or #123 #650)
#307 := (iff #123 #328)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#666 := (pattern #24)
#28 := (f3 #18 #22)
#96 := (= f1 #28)
#26 := (f3 #18 #20)
#93 := (= f1 #26)
#99 := (or #93 #96)
#89 := (= f1 #24)
#102 := (iff #89 #99)
#667 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #666) #102)
#105 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #102)
#670 := (iff #105 #667)
#668 := (iff #102 #102)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#148 := (~ #105 #105)
#162 := (~ #102 #102)
#163 := [refl]: #162
#149 := [nnf-pos #163]: #148
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#106 := (iff #32 #105)
#103 := (iff #31 #102)
#100 := (iff #30 #99)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #25 #89)
#92 := [rewrite]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [quant-intro #104]: #106
#88 := [asserted]: #32
#110 := [mp #88 #107]: #105
#164 := [mp~ #110 #149]: #105
#672 := [mp #164 #671]: #667
#301 := (not #667)
#433 := (or #301 #307)
#640 := [quant-inst #41 #42 #9]: #433
#289 := [unit-resolution #640 #672]: #307
#641 := (not #307)
#299 := (or #641 #123 #650)
#304 := [def-axiom]: #299
#291 := [unit-resolution #304 #289]: #290
#629 := [unit-resolution #291 #644]: #650
#323 := (not #127)
#312 := (or #328 #323)
#313 := [def-axiom]: #312
#630 := [unit-resolution #313 #629 #646]: false
#631 := [lemma #630]: #123
#632 := (or #136 #328)
#642 := (or #641 #136 #328)
#300 := [def-axiom]: #642
#633 := [unit-resolution #300 #289]: #632
#635 := [unit-resolution #633 #631]: #328
#326 := (or #323 #136)
#314 := (or #323 #136 #234)
#325 := [def-axiom]: #314
#254 := [unit-resolution #325 #144]: #326
#637 := [unit-resolution #254 #631]: #323
#645 := (or #650 #127 #324)
#651 := [def-axiom]: #645
#275 := [unit-resolution #651 #637 #635]: #324
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#652 := (pattern #10)
#71 := (= f1 #10)
#74 := (not #71)
#653 := (forall (vars (?v0 S2)) (:pat #652) #74)
#77 := (forall (vars (?v0 S2)) #74)
#656 := (iff #77 #653)
#654 := (iff #74 #74)
#655 := [refl]: #654
#657 := [quant-intro #655]: #656
#158 := (~ #77 #77)
#156 := (~ #74 #74)
#157 := [refl]: #156
#159 := [nnf-pos #157]: #158
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#78 := (iff #13 #77)
#75 := (iff #12 #74)
#72 := (iff #11 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#79 := [quant-intro #76]: #78
#70 := [asserted]: #13
#82 := [mp #70 #79]: #77
#143 := [mp~ #82 #159]: #77
#658 := [mp #143 #657]: #653
#647 := (not #324)
#628 := (not #653)
#634 := (or #628 #647)
#270 := [quant-inst #41]: #634
[unit-resolution #270 #658 #275]: false
unsat
6579b339206079120a92afc0dda92279c34507ae 136 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#14 := f5
decl f10 :: S2
#41 := f10
#219 := (f3 f10 f5)
decl f1 :: S1
#4 := f1
#306 := (= f1 #219)
#633 := (not #306)
decl f11 :: S3
#42 := f11
#220 := (f3 f10 f11)
#307 := (= f1 #220)
#299 := (or #306 #307)
#284 := (not #299)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#19 := f8
#43 := (f7 f8 f11)
#44 := (f6 #43 f5)
#45 := (f3 f10 #44)
#120 := (= f1 #45)
#239 := (iff #120 #299)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#651 := (pattern #24)
#28 := (f3 #18 #22)
#93 := (= f1 #28)
#26 := (f3 #18 #20)
#90 := (= f1 #26)
#96 := (or #90 #93)
#86 := (= f1 #24)
#99 := (iff #86 #96)
#652 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #651) #99)
#102 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #99)
#655 := (iff #102 #652)
#653 := (iff #99 #99)
#654 := [refl]: #653
#656 := [quant-intro #654]: #655
#133 := (~ #102 #102)
#147 := (~ #99 #99)
#148 := [refl]: #147
#134 := [nnf-pos #148]: #133
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#103 := (iff #32 #102)
#100 := (iff #31 #99)
#97 := (iff #30 #96)
#94 := (iff #29 #93)
#95 := [rewrite]: #94
#91 := (iff #27 #90)
#92 := [rewrite]: #91
#98 := [monotonicity #92 #95]: #97
#88 := (iff #25 #86)
#89 := [rewrite]: #88
#101 := [monotonicity #89 #98]: #100
#104 := [quant-intro #101]: #103
#85 := [asserted]: #32
#107 := [mp #85 #104]: #102
#149 := [mp~ #107 #134]: #102
#657 := [mp #149 #656]: #652
#313 := (not #652)
#292 := (or #313 #239)
#221 := (or #307 #306)
#308 := (iff #120 #221)
#629 := (or #313 #308)
#286 := (iff #629 #292)
#625 := (iff #292 #292)
#297 := [rewrite]: #625
#312 := (iff #308 #239)
#310 := (iff #221 #299)
#311 := [rewrite]: #310
#309 := [monotonicity #311]: #312
#418 := [monotonicity #309]: #286
#298 := [trans #418 #297]: #286
#631 := [quant-inst #41 #42 #14]: #629
#632 := [mp #631 #298]: #292
#615 := [unit-resolution #632 #657]: #239
#285 := (not #239)
#616 := (or #285 #284)
#124 := (not #120)
#46 := (= #45 f1)
#47 := (not #46)
#125 := (iff #47 #124)
#122 := (iff #46 #120)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#119 := [asserted]: #47
#129 := [mp #119 #126]: #124
#628 := (or #285 #120 #284)
#269 := [def-axiom]: #628
#619 := [unit-resolution #269 #129]: #616
#255 := [unit-resolution #619 #615]: #284
#634 := (or #299 #633)
#635 := [def-axiom]: #634
#620 := [unit-resolution #635 #255]: #633
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#644 := (pattern #15)
#78 := (= f1 #15)
#645 := (forall (vars (?v0 S2)) (:pat #644) #78)
#82 := (forall (vars (?v0 S2)) #78)
#648 := (iff #82 #645)
#646 := (iff #78 #78)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#131 := (~ #82 #82)
#130 := (~ #78 #78)
#145 := [refl]: #130
#132 := [nnf-pos #145]: #131
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#83 := (iff #17 #82)
#80 := (iff #16 #78)
#81 := [rewrite]: #80
#84 := [quant-intro #81]: #83
#77 := [asserted]: #17
#87 := [mp #77 #84]: #82
#146 := [mp~ #87 #132]: #82
#650 := [mp #146 #649]: #645
#617 := (not #645)
#618 := (or #617 #306)
#613 := [quant-inst #41]: #618
[unit-resolution #613 #650 #620]: false
unsat
21f3225a60811428730067e610d6913c3bcb0df3 155 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S5 S3 S4)
decl f12 :: S3
#44 := f12
decl f8 :: S5
#19 := f8
#48 := (f7 f8 f12)
#49 := (f6 #48 f11)
decl f10 :: S2
#41 := f10
#50 := (f3 f10 #49)
decl f1 :: S1
#4 := f1
#130 := (= f1 #50)
#326 := (not #130)
#43 := (f7 f8 f11)
#45 := (f6 #43 f12)
#46 := (f3 f10 #45)
#126 := (= f1 #46)
#139 := (not #126)
#245 := [hypothesis]: #139
#325 := (or #130 #126)
#140 := (iff #130 #139)
#51 := (= #50 f1)
#47 := (= #46 f1)
#52 := (iff #47 #51)
#53 := (not #52)
#143 := (iff #53 #140)
#133 := (iff #126 #130)
#136 := (not #133)
#141 := (iff #136 #140)
#142 := [rewrite]: #141
#137 := (iff #53 #136)
#134 := (iff #52 #133)
#131 := (iff #51 #130)
#132 := [rewrite]: #131
#128 := (iff #47 #126)
#129 := [rewrite]: #128
#135 := [monotonicity #129 #132]: #134
#138 := [monotonicity #135]: #137
#144 := [trans #138 #142]: #143
#125 := [asserted]: #53
#147 := [mp #125 #144]: #140
#237 := (not #140)
#324 := (or #130 #126 #237)
#238 := [def-axiom]: #324
#239 := [unit-resolution #238 #147]: #325
#624 := [unit-resolution #239 #245]: #130
#330 := (f3 f10 f11)
#327 := (= f1 #330)
#331 := (f3 f10 f12)
#310 := (= f1 #331)
#647 := (or #310 #327)
#644 := (not #647)
#347 := (or #126 #644)
#634 := (iff #126 #647)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#669 := (pattern #24)
#28 := (f3 #18 #22)
#99 := (= f1 #28)
#26 := (f3 #18 #20)
#96 := (= f1 #26)
#102 := (or #96 #99)
#92 := (= f1 #24)
#105 := (iff #92 #102)
#670 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #669) #105)
#108 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #105)
#673 := (iff #108 #670)
#671 := (iff #105 #105)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#151 := (~ #108 #108)
#165 := (~ #105 #105)
#166 := [refl]: #165
#152 := [nnf-pos #166]: #151
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#109 := (iff #32 #108)
#106 := (iff #31 #105)
#103 := (iff #30 #102)
#100 := (iff #29 #99)
#101 := [rewrite]: #100
#97 := (iff #27 #96)
#98 := [rewrite]: #97
#104 := [monotonicity #98 #101]: #103
#94 := (iff #25 #92)
#95 := [rewrite]: #94
#107 := [monotonicity #95 #104]: #106
#110 := [quant-intro #107]: #109
#91 := [asserted]: #32
#113 := [mp #91 #110]: #108
#167 := [mp~ #113 #152]: #108
#675 := [mp #167 #674]: #670
#643 := (not #670)
#631 := (or #643 #634)
#304 := (or #327 #310)
#436 := (iff #126 #304)
#637 := (or #643 #436)
#638 := (iff #637 #631)
#278 := (iff #631 #631)
#279 := [rewrite]: #278
#635 := (iff #436 #634)
#632 := (iff #304 #647)
#633 := [rewrite]: #632
#636 := [monotonicity #633]: #635
#640 := [monotonicity #636]: #638
#641 := [trans #640 #279]: #638
#273 := [quant-inst #41 #42 #44]: #637
#639 := [mp #273 #641]: #631
#625 := [unit-resolution #639 #675]: #634
#642 := (not #634)
#628 := (or #642 #126 #644)
#629 := [def-axiom]: #628
#348 := [unit-resolution #629 #625]: #347
#622 := [unit-resolution #348 #245]: #644
#623 := (or #326 #647)
#649 := (iff #130 #647)
#315 := (or #643 #649)
#316 := [quant-inst #41 #44 #42]: #315
#626 := [unit-resolution #316 #675]: #649
#645 := (not #649)
#287 := (or #645 #326 #647)
#630 := [def-axiom]: #287
#627 := [unit-resolution #630 #626]: #623
#336 := [unit-resolution #627 #622 #624]: false
#337 := [lemma #336]: #126
#329 := (or #326 #139)
#317 := (or #326 #139 #237)
#328 := [def-axiom]: #317
#257 := [unit-resolution #328 #147]: #329
#338 := [unit-resolution #257 #337]: #326
#340 := (or #139 #647)
#335 := (or #642 #139 #647)
#351 := [def-axiom]: #335
#618 := [unit-resolution #351 #625]: #340
#619 := [unit-resolution #618 #337]: #647
#332 := (or #130 #644)
#303 := (or #645 #130 #644)
#646 := [def-axiom]: #303
#616 := [unit-resolution #646 #626]: #332
[unit-resolution #616 #619 #338]: false
unsat
0a38803d5203ebb9de80029b1e5de8bcd8e8f404 128 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#19 := f8
#43 := (f7 f8 f11)
#44 := (f6 #43 f11)
decl f10 :: S2
#41 := f10
#45 := (f3 f10 #44)
decl f1 :: S1
#4 := f1
#123 := (= f1 #45)
#136 := (not #123)
#627 := [hypothesis]: #136
#47 := (f3 f10 f11)
#127 := (= f1 #47)
#322 := (or #127 #123)
#137 := (iff #127 #136)
#48 := (= #47 f1)
#46 := (= #45 f1)
#49 := (iff #46 #48)
#50 := (not #49)
#140 := (iff #50 #137)
#130 := (iff #123 #127)
#133 := (not #130)
#138 := (iff #133 #137)
#139 := [rewrite]: #138
#134 := (iff #50 #133)
#131 := (iff #49 #130)
#128 := (iff #48 #127)
#129 := [rewrite]: #128
#125 := (iff #46 #123)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#135 := [monotonicity #132]: #134
#141 := [trans #135 #139]: #140
#122 := [asserted]: #50
#144 := [mp #122 #141]: #137
#234 := (not #137)
#321 := (or #127 #123 #234)
#235 := [def-axiom]: #321
#236 := [unit-resolution #235 #144]: #322
#288 := [unit-resolution #236 #627]: #127
#323 := (not #127)
#290 := (or #123 #323)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#666 := (pattern #24)
#28 := (f3 #18 #22)
#96 := (= f1 #28)
#26 := (f3 #18 #20)
#93 := (= f1 #26)
#99 := (or #93 #96)
#89 := (= f1 #24)
#102 := (iff #89 #99)
#667 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #666) #102)
#105 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #102)
#670 := (iff #105 #667)
#668 := (iff #102 #102)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#148 := (~ #105 #105)
#162 := (~ #102 #102)
#163 := [refl]: #162
#149 := [nnf-pos #163]: #148
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#106 := (iff #32 #105)
#103 := (iff #31 #102)
#100 := (iff #30 #99)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #25 #89)
#92 := [rewrite]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [quant-intro #104]: #106
#88 := [asserted]: #32
#110 := [mp #88 #107]: #105
#164 := [mp~ #110 #149]: #105
#672 := [mp #164 #671]: #667
#301 := (not #667)
#433 := (or #301 #130)
#327 := (or #127 #127)
#324 := (iff #123 #327)
#640 := (or #301 #324)
#313 := (iff #640 #433)
#648 := (iff #433 #433)
#649 := [rewrite]: #648
#644 := (iff #324 #130)
#328 := (iff #327 #127)
#307 := [rewrite]: #328
#646 := [monotonicity #307]: #644
#647 := [monotonicity #646]: #313
#650 := [trans #647 #649]: #313
#312 := [quant-inst #41 #42 #42]: #640
#645 := [mp #312 #650]: #433
#289 := [unit-resolution #645 #672]: #130
#651 := (or #133 #123 #323)
#641 := [def-axiom]: #651
#291 := [unit-resolution #641 #289]: #290
#629 := [unit-resolution #291 #288 #627]: false
#630 := [lemma #629]: #123
#326 := (or #323 #136)
#314 := (or #323 #136 #234)
#325 := [def-axiom]: #314
#254 := [unit-resolution #325 #144]: #326
#631 := [unit-resolution #254 #630]: #323
#632 := (or #136 #127)
#299 := (or #133 #136 #127)
#304 := [def-axiom]: #299
#633 := [unit-resolution #304 #289]: #632
[unit-resolution #633 #631 #630]: false
unsat
a9b4d2c6d5d71402741164958baf8befeec2192a 266 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#44 := f12
decl f10 :: S2
#41 := f10
#623 := (f3 f10 f12)
decl f1 :: S1
#4 := f1
#336 := (= f1 #623)
decl f13 :: S3
#46 := f13
#334 := (f3 f10 f13)
#331 := (= f1 #334)
#621 := (or #331 #336)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#19 := f8
#45 := (f7 f8 f12)
#47 := (f6 #45 f13)
#308 := (f3 f10 #47)
#440 := (= f1 #308)
#615 := (iff #440 #621)
#581 := (not #615)
#593 := (not #621)
#605 := (not #336)
decl f11 :: S3
#42 := f11
#636 := (f3 f10 f11)
#637 := (= f1 #636)
#483 := (or #336 #637)
#608 := (not #483)
#43 := (f7 f8 f11)
#51 := (f6 #43 f12)
#335 := (f3 f10 #51)
#314 := (= f1 #335)
#591 := (iff #314 #483)
#583 := (not #591)
#576 := [hypothesis]: #583
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#673 := (pattern #24)
#28 := (f3 #18 #22)
#103 := (= f1 #28)
#26 := (f3 #18 #20)
#100 := (= f1 #26)
#106 := (or #100 #103)
#96 := (= f1 #24)
#109 := (iff #96 #106)
#674 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #673) #109)
#112 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #109)
#677 := (iff #112 #674)
#675 := (iff #109 #109)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#155 := (~ #112 #112)
#169 := (~ #109 #109)
#170 := [refl]: #169
#156 := [nnf-pos #170]: #155
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#113 := (iff #32 #112)
#110 := (iff #31 #109)
#107 := (iff #30 #106)
#104 := (iff #29 #103)
#105 := [rewrite]: #104
#101 := (iff #27 #100)
#102 := [rewrite]: #101
#108 := [monotonicity #102 #105]: #107
#98 := (iff #25 #96)
#99 := [rewrite]: #98
#111 := [monotonicity #99 #108]: #110
#114 := [quant-intro #111]: #113
#95 := [asserted]: #32
#117 := [mp #95 #114]: #112
#171 := [mp~ #117 #156]: #112
#679 := [mp #171 #678]: #674
#647 := (not #674)
#589 := (or #647 #591)
#600 := (or #637 #336)
#482 := (iff #314 #600)
#592 := (or #647 #482)
#492 := (iff #592 #589)
#495 := (iff #589 #589)
#488 := [rewrite]: #495
#493 := (iff #482 #591)
#484 := (iff #600 #483)
#443 := [rewrite]: #484
#588 := [monotonicity #443]: #493
#494 := [monotonicity #588]: #492
#496 := [trans #494 #488]: #492
#477 := [quant-inst #41 #42 #44]: #592
#497 := [mp #477 #496]: #589
#577 := [unit-resolution #497 #679 #576]: false
#578 := [lemma #577]: #591
#654 := (not #314)
#651 := (or #314 #331)
#648 := (not #651)
#52 := (f7 f8 #51)
#53 := (f6 #52 f13)
#54 := (f3 f10 #53)
#134 := (= f1 #54)
#330 := (not #134)
#48 := (f6 #43 #47)
#49 := (f3 f10 #48)
#130 := (= f1 #49)
#143 := (not #130)
#579 := [hypothesis]: #143
#329 := (or #134 #130)
#144 := (iff #134 #143)
#55 := (= #54 f1)
#50 := (= #49 f1)
#56 := (iff #50 #55)
#57 := (not #56)
#147 := (iff #57 #144)
#137 := (iff #130 #134)
#140 := (not #137)
#145 := (iff #140 #144)
#146 := [rewrite]: #145
#141 := (iff #57 #140)
#138 := (iff #56 #137)
#135 := (iff #55 #134)
#136 := [rewrite]: #135
#132 := (iff #50 #130)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#142 := [monotonicity #139]: #141
#148 := [trans #142 #146]: #147
#129 := [asserted]: #57
#151 := [mp #129 #148]: #144
#241 := (not #144)
#328 := (or #134 #130 #241)
#242 := [def-axiom]: #328
#243 := [unit-resolution #242 #151]: #329
#573 := [unit-resolution #243 #579]: #134
#564 := (or #330 #651)
#653 := (iff #134 #651)
#319 := (or #647 #653)
#320 := [quant-inst #41 #51 #46]: #319
#580 := [unit-resolution #320 #679]: #653
#649 := (not #653)
#291 := (or #649 #330 #651)
#634 := [def-axiom]: #291
#565 := [unit-resolution #634 #580]: #564
#567 := [unit-resolution #565 #573]: #651
#657 := (not #331)
#597 := (or #647 #615)
#620 := (or #336 #331)
#624 := (iff #440 #620)
#617 := (or #647 #624)
#612 := (iff #617 #597)
#619 := (iff #597 #597)
#460 := [rewrite]: #619
#616 := (iff #624 #615)
#625 := (iff #620 #621)
#614 := [rewrite]: #625
#611 := [monotonicity #614]: #616
#613 := [monotonicity #611]: #612
#461 := [trans #613 #460]: #612
#618 := [quant-inst #41 #44 #46]: #617
#462 := [mp #618 #461]: #597
#568 := [unit-resolution #462 #679]: #615
#558 := (or #581 #593)
#356 := (not #440)
#640 := (or #440 #637)
#629 := (not #640)
#570 := (or #130 #629)
#277 := (iff #130 #640)
#282 := (or #647 #277)
#638 := (or #637 #440)
#639 := (iff #130 #638)
#283 := (or #647 #639)
#643 := (iff #283 #282)
#632 := (iff #282 #282)
#633 := [rewrite]: #632
#642 := (iff #639 #277)
#635 := (iff #638 #640)
#641 := [rewrite]: #635
#644 := [monotonicity #641]: #642
#646 := [monotonicity #644]: #643
#339 := [trans #646 #633]: #643
#645 := [quant-inst #41 #42 #47]: #283
#355 := [mp #645 #339]: #282
#569 := [unit-resolution #355 #679]: #277
#626 := (not #277)
#630 := (or #626 #130 #629)
#627 := [def-axiom]: #630
#566 := [unit-resolution #627 #569]: #570
#571 := [unit-resolution #566 #579]: #629
#357 := (or #640 #356)
#343 := [def-axiom]: #357
#557 := [unit-resolution #343 #571]: #356
#575 := (or #581 #440 #593)
#572 := [def-axiom]: #575
#560 := [unit-resolution #572 #557]: #558
#561 := [unit-resolution #560 #568]: #593
#604 := (or #621 #657)
#498 := [def-axiom]: #604
#562 := [unit-resolution #498 #561]: #657
#306 := (or #648 #314 #331)
#311 := [def-axiom]: #306
#559 := [unit-resolution #311 #562 #567]: #314
#358 := (not #637)
#249 := (or #640 #358)
#628 := [def-axiom]: #249
#563 := [unit-resolution #628 #571]: #358
#499 := (or #621 #605)
#500 := [def-axiom]: #499
#543 := [unit-resolution #500 #561]: #605
#609 := (or #608 #336 #637)
#603 := [def-axiom]: #609
#544 := [unit-resolution #603 #543 #563]: #608
#441 := (or #583 #654 #483)
#442 := [def-axiom]: #441
#546 := [unit-resolution #442 #544 #559 #578]: false
#547 := [lemma #546]: #130
#333 := (or #330 #143)
#321 := (or #330 #143 #241)
#332 := [def-axiom]: #321
#261 := [unit-resolution #332 #151]: #333
#548 := [unit-resolution #261 #547]: #330
#549 := (or #134 #648)
#307 := (or #649 #134 #648)
#650 := [def-axiom]: #307
#550 := [unit-resolution #650 #580]: #549
#551 := [unit-resolution #550 #548]: #648
#655 := (or #651 #654)
#656 := [def-axiom]: #655
#552 := [unit-resolution #656 #551]: #654
#610 := (or #583 #314 #608)
#439 := [def-axiom]: #610
#553 := [unit-resolution #439 #552 #578]: #608
#606 := (or #483 #605)
#607 := [def-axiom]: #606
#554 := [unit-resolution #607 #553]: #605
#652 := (or #651 #657)
#658 := [def-axiom]: #652
#555 := [unit-resolution #658 #551]: #657
#590 := (or #593 #331 #336)
#594 := [def-axiom]: #590
#545 := [unit-resolution #594 #555 #554]: #593
#556 := (or #143 #640)
#631 := (or #626 #143 #640)
#340 := [def-axiom]: #631
#534 := [unit-resolution #340 #569]: #556
#535 := [unit-resolution #534 #547]: #640
#601 := (or #483 #358)
#602 := [def-axiom]: #601
#537 := [unit-resolution #602 #553]: #358
#351 := (or #629 #440 #637)
#352 := [def-axiom]: #351
#538 := [unit-resolution #352 #537 #535]: #440
#574 := (or #581 #356 #621)
#584 := [def-axiom]: #574
#539 := [unit-resolution #584 #538 #545]: #581
[unit-resolution #462 #679 #539]: false
unsat
c3c3648cfba9d6c85cac6f8d51a3b06b08975178 160 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#44 := f12
decl f10 :: S2
#41 := f10
#50 := (f3 f10 f12)
decl f1 :: S1
#4 := f1
#134 := (= f1 #50)
#188 := (not #134)
decl f11 :: S3
#42 := f11
#48 := (f3 f10 f11)
#131 := (= f1 #48)
#187 := (not #131)
#189 := (or #187 #188)
#190 := (not #189)
#331 := [hypothesis]: #190
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#45 := (f6 #43 f12)
#46 := (f3 f10 #45)
#127 := (= f1 #46)
#146 := (not #127)
#337 := (or #146 #189)
#201 := (iff #127 #189)
#137 := (and #131 #134)
#147 := (iff #137 #146)
#204 := (iff #147 #201)
#196 := (iff #189 #127)
#202 := (iff #196 #201)
#203 := [rewrite]: #202
#199 := (iff #147 #196)
#193 := (iff #190 #146)
#197 := (iff #193 #196)
#198 := [rewrite]: #197
#194 := (iff #147 #193)
#191 := (iff #137 #190)
#192 := [rewrite]: #191
#195 := [monotonicity #192]: #194
#200 := [trans #195 #198]: #199
#205 := [trans #200 #203]: #204
#51 := (= #50 f1)
#49 := (= #48 f1)
#52 := (and #49 #51)
#47 := (= #46 f1)
#53 := (iff #47 #52)
#54 := (not #53)
#150 := (iff #54 #147)
#140 := (iff #127 #137)
#143 := (not #140)
#148 := (iff #143 #147)
#149 := [rewrite]: #148
#144 := (iff #54 #143)
#141 := (iff #53 #140)
#138 := (iff #52 #137)
#135 := (iff #51 #134)
#136 := [rewrite]: #135
#132 := (iff #49 #131)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#129 := (iff #47 #127)
#130 := [rewrite]: #129
#142 := [monotonicity #130 #139]: #141
#145 := [monotonicity #142]: #144
#151 := [trans #145 #149]: #150
#126 := [asserted]: #54
#154 := [mp #126 #151]: #147
#206 := [mp #154 #205]: #201
#344 := (not #201)
#354 := (or #146 #189 #344)
#358 := [def-axiom]: #354
#674 := [unit-resolution #358 #206]: #337
#463 := [unit-resolution #674 #331]: #146
#330 := (or #127 #189)
#676 := (iff #127 #190)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#703 := (pattern #36)
#28 := (f3 #18 #22)
#100 := (= f1 #28)
#179 := (not #100)
#26 := (f3 #18 #20)
#97 := (= f1 #26)
#178 := (not #97)
#162 := (or #178 #179)
#163 := (not #162)
#113 := (= f1 #36)
#180 := (iff #113 #163)
#704 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #703) #180)
#183 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #180)
#707 := (iff #183 #704)
#705 := (iff #180 #180)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#117 := (and #97 #100)
#120 := (iff #113 #117)
#123 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #120)
#184 := (iff #123 #183)
#181 := (iff #120 #180)
#164 := (iff #117 #163)
#165 := [rewrite]: #164
#182 := [monotonicity #165]: #181
#185 := [quant-intro #182]: #184
#160 := (~ #123 #123)
#175 := (~ #120 #120)
#176 := [refl]: #175
#161 := [nnf-pos #176]: #160
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#124 := (iff #40 #123)
#121 := (iff #39 #120)
#118 := (iff #38 #117)
#101 := (iff #29 #100)
#102 := [rewrite]: #101
#98 := (iff #27 #97)
#99 := [rewrite]: #98
#119 := [monotonicity #99 #102]: #118
#115 := (iff #37 #113)
#116 := [rewrite]: #115
#122 := [monotonicity #116 #119]: #121
#125 := [quant-intro #122]: #124
#112 := [asserted]: #40
#128 := [mp #112 #125]: #123
#177 := [mp~ #128 #161]: #123
#186 := [mp #177 #185]: #183
#709 := [mp #186 #708]: #704
#670 := (not #704)
#342 := (or #670 #676)
#343 := [quant-inst #41 #42 #44]: #342
#672 := [unit-resolution #343 #709]: #676
#677 := (not #676)
#678 := (or #677 #127 #189)
#679 := [def-axiom]: #678
#673 := [unit-resolution #679 #672]: #330
#314 := [unit-resolution #673 #463 #331]: false
#657 := [lemma #314]: #189
#284 := (or #127 #190)
#355 := (or #127 #190 #344)
#356 := [def-axiom]: #355
#357 := [unit-resolution #356 #206]: #284
#318 := [unit-resolution #357 #657]: #127
#319 := (or #146 #190)
#680 := (or #677 #146 #190)
#675 := [def-axiom]: #680
#320 := [unit-resolution #675 #672]: #319
[unit-resolution #320 #318 #657]: false
unsat
1adc4d295cebee376081ce9f5a9d0e96c2943423 149 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f10 :: S2
#41 := f10
#227 := (f3 f10 f4)
decl f1 :: S1
#4 := f1
#314 := (= f1 #227)
#228 := (not #314)
decl f11 :: S3
#42 := f11
#315 := (f3 f10 f11)
#229 := (= f1 #315)
#316 := (not #229)
#307 := (or #316 #228)
#318 := (not #307)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#44 := (f6 #43 f4)
#45 := (f3 f10 #44)
#121 := (= f1 #45)
#319 := (iff #121 #318)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#666 := (pattern #36)
#28 := (f3 #18 #22)
#94 := (= f1 #28)
#162 := (not #94)
#26 := (f3 #18 #20)
#91 := (= f1 #26)
#161 := (not #91)
#145 := (or #161 #162)
#146 := (not #145)
#107 := (= f1 #36)
#163 := (iff #107 #146)
#667 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #666) #163)
#166 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #163)
#670 := (iff #166 #667)
#668 := (iff #163 #163)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#111 := (and #91 #94)
#114 := (iff #107 #111)
#117 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #114)
#167 := (iff #117 #166)
#164 := (iff #114 #163)
#147 := (iff #111 #146)
#148 := [rewrite]: #147
#165 := [monotonicity #148]: #164
#168 := [quant-intro #165]: #167
#143 := (~ #117 #117)
#158 := (~ #114 #114)
#159 := [refl]: #158
#144 := [nnf-pos #159]: #143
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#118 := (iff #40 #117)
#115 := (iff #39 #114)
#112 := (iff #38 #111)
#95 := (iff #29 #94)
#96 := [rewrite]: #95
#92 := (iff #27 #91)
#93 := [rewrite]: #92
#113 := [monotonicity #93 #96]: #112
#109 := (iff #37 #107)
#110 := [rewrite]: #109
#116 := [monotonicity #110 #113]: #115
#119 := [quant-intro #116]: #118
#106 := [asserted]: #40
#122 := [mp #106 #119]: #117
#160 := [mp~ #122 #144]: #117
#169 := [mp #160 #168]: #166
#672 := [mp #169 #671]: #667
#317 := (not #667)
#321 := (or #317 #319)
#300 := [quant-inst #41 #42 #9]: #321
#247 := [unit-resolution #300 #672]: #319
#306 := (not #319)
#320 := (or #306 #318)
#46 := (= #45 f1)
#47 := (not #46)
#48 := (not #47)
#133 := (iff #48 #121)
#125 := (not #121)
#128 := (not #125)
#131 := (iff #128 #121)
#132 := [rewrite]: #131
#129 := (iff #48 #128)
#126 := (iff #47 #125)
#123 := (iff #46 #121)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#120 := [asserted]: #48
#137 := [mp #120 #134]: #121
#642 := (or #306 #125 #318)
#643 := [def-axiom]: #642
#636 := [unit-resolution #643 #137]: #320
#277 := [unit-resolution #636 #247]: #318
#294 := (or #307 #314)
#426 := [def-axiom]: #294
#620 := [unit-resolution #426 #277]: #314
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#645 := (pattern #10)
#69 := (= f1 #10)
#72 := (not #69)
#646 := (forall (vars (?v0 S2)) (:pat #645) #72)
#75 := (forall (vars (?v0 S2)) #72)
#649 := (iff #75 #646)
#647 := (iff #72 #72)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#151 := (~ #75 #75)
#149 := (~ #72 #72)
#150 := [refl]: #149
#152 := [nnf-pos #150]: #151
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#76 := (iff #13 #75)
#73 := (iff #12 #72)
#70 := (iff #11 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [quant-intro #74]: #76
#68 := [asserted]: #13
#80 := [mp #68 #77]: #75
#136 := [mp~ #80 #152]: #75
#651 := [mp #136 #650]: #646
#297 := (not #646)
#635 := (or #297 #228)
#293 := [quant-inst #41]: #635
[unit-resolution #293 #651 #620]: false
unsat
27fbc35929f013c0b43884a593f3f377821cad64 173 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#42 := f11
decl f10 :: S2
#41 := f10
#47 := (f3 f10 f11)
decl f1 :: S1
#4 := f1
#127 := (= f1 #47)
#323 := (not #127)
decl f6 :: (-> S4 S3 S3)
decl f5 :: S3
#14 := f5
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#44 := (f6 #43 f5)
#45 := (f3 f10 #44)
#123 := (= f1 #45)
#327 := (f3 f10 f5)
#324 := (= f1 #327)
#328 := (not #324)
#301 := [hypothesis]: #328
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#659 := (pattern #15)
#81 := (= f1 #15)
#660 := (forall (vars (?v0 S2)) (:pat #659) #81)
#85 := (forall (vars (?v0 S2)) #81)
#663 := (iff #85 #660)
#661 := (iff #81 #81)
#662 := [refl]: #661
#664 := [quant-intro #662]: #663
#146 := (~ #85 #85)
#145 := (~ #81 #81)
#160 := [refl]: #145
#147 := [nnf-pos #160]: #146
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#86 := (iff #17 #85)
#83 := (iff #16 #81)
#84 := [rewrite]: #83
#87 := [quant-intro #84]: #86
#80 := [asserted]: #17
#90 := [mp #80 #87]: #85
#161 := [mp~ #90 #147]: #85
#665 := [mp #161 #664]: #660
#289 := (not #660)
#290 := (or #289 #324)
#291 := [quant-inst #41]: #290
#433 := [unit-resolution #291 #665 #301]: false
#629 := [lemma #433]: #324
#136 := (not #123)
#630 := [hypothesis]: #136
#322 := (or #127 #123)
#137 := (iff #127 #136)
#48 := (= #47 f1)
#46 := (= #45 f1)
#49 := (iff #46 #48)
#50 := (not #49)
#140 := (iff #50 #137)
#130 := (iff #123 #127)
#133 := (not #130)
#138 := (iff #133 #137)
#139 := [rewrite]: #138
#134 := (iff #50 #133)
#131 := (iff #49 #130)
#128 := (iff #48 #127)
#129 := [rewrite]: #128
#125 := (iff #46 #123)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#135 := [monotonicity #132]: #134
#141 := [trans #135 #139]: #140
#122 := [asserted]: #50
#144 := [mp #122 #141]: #137
#234 := (not #137)
#321 := (or #127 #123 #234)
#235 := [def-axiom]: #321
#236 := [unit-resolution #235 #144]: #322
#631 := [unit-resolution #236 #630]: #127
#307 := (or #323 #328)
#633 := (or #123 #307)
#644 := (not #307)
#646 := (iff #123 #644)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#673 := (pattern #36)
#28 := (f3 #18 #22)
#96 := (= f1 #28)
#169 := (not #96)
#26 := (f3 #18 #20)
#93 := (= f1 #26)
#168 := (not #93)
#152 := (or #168 #169)
#153 := (not #152)
#109 := (= f1 #36)
#170 := (iff #109 #153)
#674 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #673) #170)
#173 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #170)
#677 := (iff #173 #674)
#675 := (iff #170 #170)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#113 := (and #93 #96)
#116 := (iff #109 #113)
#119 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #116)
#174 := (iff #119 #173)
#171 := (iff #116 #170)
#154 := (iff #113 #153)
#155 := [rewrite]: #154
#172 := [monotonicity #155]: #171
#175 := [quant-intro #172]: #174
#150 := (~ #119 #119)
#165 := (~ #116 #116)
#166 := [refl]: #165
#151 := [nnf-pos #166]: #150
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#120 := (iff #40 #119)
#117 := (iff #39 #116)
#114 := (iff #38 #113)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#95 := [rewrite]: #94
#115 := [monotonicity #95 #98]: #114
#111 := (iff #37 #109)
#112 := [rewrite]: #111
#118 := [monotonicity #112 #115]: #117
#121 := [quant-intro #118]: #120
#108 := [asserted]: #40
#124 := [mp #108 #121]: #119
#167 := [mp~ #124 #151]: #119
#176 := [mp #167 #175]: #173
#679 := [mp #176 #678]: #674
#640 := (not #674)
#312 := (or #640 #646)
#313 := [quant-inst #41 #42 #14]: #312
#632 := [unit-resolution #313 #679]: #646
#641 := (not #646)
#299 := (or #641 #123 #307)
#304 := [def-axiom]: #299
#628 := [unit-resolution #304 #632]: #633
#634 := [unit-resolution #628 #630]: #307
#645 := (or #644 #323 #328)
#651 := [def-axiom]: #645
#270 := [unit-resolution #651 #634 #631 #629]: false
#635 := [lemma #270]: #123
#326 := (or #323 #136)
#314 := (or #323 #136 #234)
#325 := [def-axiom]: #314
#254 := [unit-resolution #325 #144]: #326
#637 := [unit-resolution #254 #635]: #323
#275 := (or #136 #644)
#642 := (or #641 #136 #644)
#300 := [def-axiom]: #642
#276 := [unit-resolution #300 #632]: #275
#638 := [unit-resolution #276 #635]: #644
#647 := (or #307 #127)
#648 := [def-axiom]: #647
[unit-resolution #648 #638 #637]: false
unsat
fa1e213c15b8e9288bf16d2dc4bd96e3c7fb5c7e 173 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S5 S3 S4)
decl f12 :: S3
#44 := f12
decl f9 :: S5
#33 := f9
#48 := (f7 f9 f12)
#49 := (f6 #48 f11)
decl f10 :: S2
#41 := f10
#50 := (f3 f10 #49)
decl f1 :: S1
#4 := f1
#130 := (= f1 #50)
#326 := (not #130)
#43 := (f7 f9 f11)
#45 := (f6 #43 f12)
#46 := (f3 f10 #45)
#126 := (= f1 #46)
#139 := (not #126)
#628 := [hypothesis]: #139
#325 := (or #130 #126)
#140 := (iff #130 #139)
#51 := (= #50 f1)
#47 := (= #46 f1)
#52 := (iff #47 #51)
#53 := (not #52)
#143 := (iff #53 #140)
#133 := (iff #126 #130)
#136 := (not #133)
#141 := (iff #136 #140)
#142 := [rewrite]: #141
#137 := (iff #53 #136)
#134 := (iff #52 #133)
#131 := (iff #51 #130)
#132 := [rewrite]: #131
#128 := (iff #47 #126)
#129 := [rewrite]: #128
#135 := [monotonicity #129 #132]: #134
#138 := [monotonicity #135]: #137
#144 := [trans #138 #142]: #143
#125 := [asserted]: #53
#147 := [mp #125 #144]: #140
#237 := (not #140)
#324 := (or #130 #126 #237)
#238 := [def-axiom]: #324
#239 := [unit-resolution #238 #147]: #325
#629 := [unit-resolution #239 #628]: #130
#310 := (f3 f10 f12)
#647 := (= f1 #310)
#649 := (not #647)
#330 := (f3 f10 f11)
#327 := (= f1 #330)
#331 := (not #327)
#315 := (or #331 #649)
#626 := (or #126 #315)
#651 := (not #315)
#642 := (iff #126 #651)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#676 := (pattern #36)
#28 := (f3 #18 #22)
#99 := (= f1 #28)
#172 := (not #99)
#26 := (f3 #18 #20)
#96 := (= f1 #26)
#171 := (not #96)
#155 := (or #171 #172)
#156 := (not #155)
#112 := (= f1 #36)
#173 := (iff #112 #156)
#677 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #676) #173)
#176 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #173)
#680 := (iff #176 #677)
#678 := (iff #173 #173)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#116 := (and #96 #99)
#119 := (iff #112 #116)
#122 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #119)
#177 := (iff #122 #176)
#174 := (iff #119 #173)
#157 := (iff #116 #156)
#158 := [rewrite]: #157
#175 := [monotonicity #158]: #174
#178 := [quant-intro #175]: #177
#153 := (~ #122 #122)
#168 := (~ #119 #119)
#169 := [refl]: #168
#154 := [nnf-pos #169]: #153
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#123 := (iff #40 #122)
#120 := (iff #39 #119)
#117 := (iff #38 #116)
#100 := (iff #29 #99)
#101 := [rewrite]: #100
#97 := (iff #27 #96)
#98 := [rewrite]: #97
#118 := [monotonicity #98 #101]: #117
#114 := (iff #37 #112)
#115 := [rewrite]: #114
#121 := [monotonicity #115 #118]: #120
#124 := [quant-intro #121]: #123
#111 := [asserted]: #40
#127 := [mp #111 #124]: #122
#170 := [mp~ #127 #154]: #122
#179 := [mp #170 #178]: #176
#682 := [mp #179 #681]: #677
#302 := (not #677)
#335 := (or #302 #642)
#351 := [quant-inst #41 #42 #44]: #335
#622 := [unit-resolution #351 #682]: #642
#352 := (not #642)
#353 := (or #352 #126 #315)
#339 := [def-axiom]: #353
#623 := [unit-resolution #339 #622]: #626
#627 := [unit-resolution #623 #628]: #315
#337 := (or #326 #651)
#648 := (iff #130 #651)
#307 := (or #302 #648)
#304 := (or #649 #331)
#436 := (not #304)
#643 := (iff #130 #436)
#645 := (or #302 #643)
#646 := (iff #645 #307)
#630 := (iff #307 #307)
#291 := [rewrite]: #630
#654 := (iff #643 #648)
#652 := (iff #436 #651)
#316 := (iff #304 #315)
#650 := [rewrite]: #316
#653 := [monotonicity #650]: #652
#644 := [monotonicity #653]: #654
#287 := [monotonicity #644]: #646
#292 := [trans #287 #291]: #646
#303 := [quant-inst #41 #44 #42]: #645
#293 := [mp #303 #292]: #307
#336 := [unit-resolution #293 #682]: #648
#631 := (not #648)
#638 := (or #631 #326 #651)
#640 := [def-axiom]: #638
#338 := [unit-resolution #640 #336]: #337
#340 := [unit-resolution #338 #627 #629]: false
#618 := [lemma #340]: #126
#329 := (or #326 #139)
#317 := (or #326 #139 #237)
#328 := [def-axiom]: #317
#257 := [unit-resolution #328 #147]: #329
#619 := [unit-resolution #257 #618]: #326
#332 := (or #139 #651)
#354 := (or #352 #139 #651)
#245 := [def-axiom]: #354
#616 := [unit-resolution #245 #622]: #332
#620 := [unit-resolution #616 #618]: #651
#617 := (or #130 #315)
#637 := (or #631 #130 #315)
#273 := [def-axiom]: #637
#621 := [unit-resolution #273 #336]: #617
[unit-resolution #621 #620 #619]: false
unsat
8424513290e59440c92fec106021e2354c2f6a1c 149 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#44 := (f6 #43 f11)
decl f10 :: S2
#41 := f10
#45 := (f3 f10 #44)
decl f1 :: S1
#4 := f1
#123 := (= f1 #45)
#136 := (not #123)
#632 := [hypothesis]: #136
#47 := (f3 f10 f11)
#127 := (= f1 #47)
#322 := (or #127 #123)
#137 := (iff #127 #136)
#48 := (= #47 f1)
#46 := (= #45 f1)
#49 := (iff #46 #48)
#50 := (not #49)
#140 := (iff #50 #137)
#130 := (iff #123 #127)
#133 := (not #130)
#138 := (iff #133 #137)
#139 := [rewrite]: #138
#134 := (iff #50 #133)
#131 := (iff #49 #130)
#128 := (iff #48 #127)
#129 := [rewrite]: #128
#125 := (iff #46 #123)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#135 := [monotonicity #132]: #134
#141 := [trans #135 #139]: #140
#122 := [asserted]: #50
#144 := [mp #122 #141]: #137
#234 := (not #137)
#321 := (or #127 #123 #234)
#235 := [def-axiom]: #321
#236 := [unit-resolution #235 #144]: #322
#633 := [unit-resolution #236 #632]: #127
#323 := (not #127)
#634 := (or #123 #323)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#673 := (pattern #36)
#28 := (f3 #18 #22)
#96 := (= f1 #28)
#169 := (not #96)
#26 := (f3 #18 #20)
#93 := (= f1 #26)
#168 := (not #93)
#152 := (or #168 #169)
#153 := (not #152)
#109 := (= f1 #36)
#170 := (iff #109 #153)
#674 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #673) #170)
#173 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #170)
#677 := (iff #173 #674)
#675 := (iff #170 #170)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#113 := (and #93 #96)
#116 := (iff #109 #113)
#119 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #116)
#174 := (iff #119 #173)
#171 := (iff #116 #170)
#154 := (iff #113 #153)
#155 := [rewrite]: #154
#172 := [monotonicity #155]: #171
#175 := [quant-intro #172]: #174
#150 := (~ #119 #119)
#165 := (~ #116 #116)
#166 := [refl]: #165
#151 := [nnf-pos #166]: #150
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#120 := (iff #40 #119)
#117 := (iff #39 #116)
#114 := (iff #38 #113)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#95 := [rewrite]: #94
#115 := [monotonicity #95 #98]: #114
#111 := (iff #37 #109)
#112 := [rewrite]: #111
#118 := [monotonicity #112 #115]: #117
#121 := [quant-intro #118]: #120
#108 := [asserted]: #40
#124 := [mp #108 #121]: #119
#167 := [mp~ #124 #151]: #119
#176 := [mp #167 #175]: #173
#679 := [mp #176 #678]: #674
#650 := (not #674)
#645 := (or #650 #130)
#327 := (or #323 #323)
#324 := (not #327)
#328 := (iff #123 #324)
#651 := (or #650 #328)
#299 := (iff #651 #645)
#642 := (iff #645 #645)
#300 := [rewrite]: #642
#648 := (iff #328 #130)
#313 := (iff #324 #127)
#646 := (not #323)
#640 := (iff #646 #127)
#312 := [rewrite]: #640
#301 := (iff #324 #646)
#307 := (iff #327 #323)
#644 := [rewrite]: #307
#433 := [monotonicity #644]: #301
#647 := [trans #433 #312]: #313
#649 := [monotonicity #647]: #648
#304 := [monotonicity #649]: #299
#643 := [trans #304 #300]: #299
#641 := [quant-inst #41 #42 #42]: #651
#284 := [mp #641 #643]: #645
#628 := [unit-resolution #284 #679]: #130
#627 := (or #133 #123 #323)
#288 := [def-axiom]: #627
#270 := [unit-resolution #288 #628]: #634
#635 := [unit-resolution #270 #633 #632]: false
#637 := [lemma #635]: #123
#326 := (or #323 #136)
#314 := (or #323 #136 #234)
#325 := [def-axiom]: #314
#254 := [unit-resolution #325 #144]: #326
#275 := [unit-resolution #254 #637]: #323
#276 := (or #136 #127)
#289 := (or #133 #136 #127)
#290 := [def-axiom]: #289
#638 := [unit-resolution #290 #628]: #276
[unit-resolution #638 #275 #637]: false
unsat
5973328496eea1e33493c38f9af9d86965f67ad9 287 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f12 :: S3
#44 := f12
decl f7 :: (-> S5 S3 S4)
decl f11 :: S3
#42 := f11
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#51 := (f6 #43 f12)
decl f10 :: S2
#41 := f10
#314 := (f3 f10 #51)
decl f1 :: S1
#4 := f1
#651 := (= f1 #314)
#249 := (f3 f10 f12)
#628 := (= f1 #249)
#625 := (not #628)
#339 := (f3 f10 f11)
#355 := (= f1 #339)
#356 := (not #355)
#614 := (or #356 #625)
#615 := (not #614)
#611 := (iff #615 #651)
#582 := (not #611)
decl f13 :: S3
#46 := f13
#334 := (f3 f10 f13)
#331 := (= f1 #334)
#335 := (not #331)
#484 := (or #335 #625)
#493 := (not #484)
#45 := (f7 f9 f12)
#47 := (f6 #45 f13)
#646 := (f3 f10 #47)
#632 := (= f1 #646)
#494 := (iff #493 #632)
#587 := (not #494)
#567 := [hypothesis]: #587
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#680 := (pattern #36)
#28 := (f3 #18 #22)
#103 := (= f1 #28)
#176 := (not #103)
#26 := (f3 #18 #20)
#100 := (= f1 #26)
#175 := (not #100)
#159 := (or #175 #176)
#160 := (not #159)
#116 := (= f1 #36)
#177 := (iff #116 #160)
#681 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #680) #177)
#180 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #177)
#684 := (iff #180 #681)
#682 := (iff #177 #177)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#120 := (and #100 #103)
#123 := (iff #116 #120)
#126 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #123)
#181 := (iff #126 #180)
#178 := (iff #123 #177)
#161 := (iff #120 #160)
#162 := [rewrite]: #161
#179 := [monotonicity #162]: #178
#182 := [quant-intro #179]: #181
#157 := (~ #126 #126)
#172 := (~ #123 #123)
#173 := [refl]: #172
#158 := [nnf-pos #173]: #157
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#127 := (iff #40 #126)
#124 := (iff #39 #123)
#121 := (iff #38 #120)
#104 := (iff #29 #103)
#105 := [rewrite]: #104
#101 := (iff #27 #100)
#102 := [rewrite]: #101
#122 := [monotonicity #102 #105]: #121
#118 := (iff #37 #116)
#119 := [rewrite]: #118
#125 := [monotonicity #119 #122]: #124
#128 := [quant-intro #125]: #127
#115 := [asserted]: #40
#131 := [mp #115 #128]: #126
#174 := [mp~ #131 #158]: #126
#183 := [mp #174 #182]: #180
#686 := [mp #183 #685]: #681
#306 := (not #681)
#498 := (or #306 #494)
#600 := (or #625 #335)
#482 := (not #600)
#483 := (iff #632 #482)
#499 := (or #306 #483)
#593 := (iff #499 #498)
#594 := (iff #498 #498)
#581 := [rewrite]: #594
#496 := (iff #483 #494)
#592 := (iff #632 #493)
#495 := (iff #592 #494)
#488 := [rewrite]: #495
#477 := (iff #483 #592)
#588 := (iff #482 #493)
#443 := (iff #600 #484)
#591 := [rewrite]: #443
#589 := [monotonicity #591]: #588
#492 := [monotonicity #589]: #477
#497 := [trans #492 #488]: #496
#590 := [monotonicity #497]: #593
#583 := [trans #590 #581]: #593
#500 := [quant-inst #41 #44 #46]: #499
#575 := [mp #500 #583]: #498
#568 := [unit-resolution #575 #686 #567]: false
#569 := [lemma #568]: #494
#633 := (not #632)
#357 := (or #356 #633)
#343 := (not #357)
#48 := (f6 #43 #47)
#49 := (f3 f10 #48)
#130 := (= f1 #49)
#143 := (not #130)
#570 := [hypothesis]: #143
#571 := (or #130 #357)
#358 := (iff #130 #343)
#629 := (or #306 #358)
#351 := [quant-inst #41 #42 #47]: #629
#566 := [unit-resolution #351 #686]: #358
#341 := (not #358)
#342 := (or #341 #130 #357)
#344 := [def-axiom]: #342
#557 := [unit-resolution #344 #566]: #571
#558 := [unit-resolution #557 #570]: #357
#597 := (or #306 #611)
#616 := (iff #651 #615)
#613 := (or #306 #616)
#618 := (iff #613 #597)
#461 := (iff #597 #597)
#462 := [rewrite]: #461
#612 := (iff #616 #611)
#617 := [rewrite]: #612
#460 := [monotonicity #617]: #618
#604 := [trans #460 #462]: #618
#619 := [quant-inst #41 #42 #44]: #613
#605 := [mp #619 #604]: #597
#560 := [unit-resolution #605 #686]: #611
#546 := (or #582 #615)
#653 := (not #651)
#319 := (or #335 #653)
#655 := (not #319)
#52 := (f7 f9 #51)
#53 := (f6 #52 f13)
#54 := (f3 f10 #53)
#134 := (= f1 #54)
#329 := (or #134 #130)
#144 := (iff #134 #143)
#55 := (= #54 f1)
#50 := (= #49 f1)
#56 := (iff #50 #55)
#57 := (not #56)
#147 := (iff #57 #144)
#137 := (iff #130 #134)
#140 := (not #137)
#145 := (iff #140 #144)
#146 := [rewrite]: #145
#141 := (iff #57 #140)
#138 := (iff #56 #137)
#135 := (iff #55 #134)
#136 := [rewrite]: #135
#132 := (iff #50 #130)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#142 := [monotonicity #139]: #141
#148 := [trans #142 #146]: #147
#129 := [asserted]: #57
#151 := [mp #129 #148]: #144
#241 := (not #144)
#328 := (or #134 #130 #241)
#242 := [def-axiom]: #328
#243 := [unit-resolution #242 #151]: #329
#561 := [unit-resolution #243 #570]: #134
#330 := (not #134)
#559 := (or #330 #655)
#652 := (iff #134 #655)
#311 := (or #306 #652)
#308 := (or #653 #335)
#440 := (not #308)
#647 := (iff #134 #440)
#649 := (or #306 #647)
#650 := (iff #649 #311)
#634 := (iff #311 #311)
#295 := [rewrite]: #634
#658 := (iff #647 #652)
#656 := (iff #440 #655)
#320 := (iff #308 #319)
#654 := [rewrite]: #320
#657 := [monotonicity #654]: #656
#648 := [monotonicity #657]: #658
#291 := [monotonicity #648]: #650
#296 := [trans #291 #295]: #650
#307 := [quant-inst #41 #51 #46]: #649
#297 := [mp #307 #296]: #311
#562 := [unit-resolution #297 #686]: #652
#635 := (not #652)
#642 := (or #635 #330 #655)
#644 := [def-axiom]: #642
#563 := [unit-resolution #644 #562]: #559
#543 := [unit-resolution #563 #561]: #655
#637 := (or #319 #651)
#638 := [def-axiom]: #637
#544 := [unit-resolution #638 #543]: #651
#576 := (or #582 #615 #653)
#577 := [def-axiom]: #576
#547 := [unit-resolution #577 #544]: #546
#548 := [unit-resolution #547 #560]: #615
#606 := (or #614 #355)
#572 := [def-axiom]: #606
#549 := [unit-resolution #572 #548]: #355
#631 := (or #343 #356 #633)
#340 := [def-axiom]: #631
#550 := [unit-resolution #340 #549 #558]: #633
#298 := (or #319 #331)
#636 := [def-axiom]: #298
#551 := [unit-resolution #636 #543]: #331
#574 := (or #614 #628)
#584 := [def-axiom]: #574
#552 := [unit-resolution #584 #548]: #628
#609 := (or #493 #335 #625)
#603 := [def-axiom]: #609
#553 := [unit-resolution #603 #552 #551]: #493
#441 := (or #587 #484 #632)
#442 := [def-axiom]: #441
#554 := [unit-resolution #442 #553 #550 #569]: false
#555 := [lemma #554]: #130
#545 := (or #143 #343)
#622 := (or #341 #143 #343)
#623 := [def-axiom]: #622
#556 := [unit-resolution #623 #566]: #545
#534 := [unit-resolution #556 #555]: #343
#630 := (or #357 #632)
#627 := [def-axiom]: #630
#535 := [unit-resolution #627 #534]: #632
#610 := (or #587 #493 #633)
#439 := [def-axiom]: #610
#537 := [unit-resolution #439 #535 #569]: #493
#602 := (or #484 #628)
#608 := [def-axiom]: #602
#538 := [unit-resolution #608 #537]: #628
#352 := (or #357 #355)
#626 := [def-axiom]: #352
#539 := [unit-resolution #626 #534]: #355
#585 := (or #615 #356 #625)
#586 := [def-axiom]: #585
#540 := [unit-resolution #586 #539 #538]: #615
#333 := (or #330 #143)
#321 := (or #330 #143 #241)
#332 := [def-axiom]: #321
#261 := [unit-resolution #332 #151]: #333
#541 := [unit-resolution #261 #555]: #330
#536 := (or #134 #319)
#641 := (or #635 #134 #319)
#277 := [def-axiom]: #641
#542 := [unit-resolution #277 #562]: #536
#528 := [unit-resolution #542 #541]: #319
#607 := (or #484 #331)
#601 := [def-axiom]: #607
#524 := [unit-resolution #601 #537]: #331
#639 := (or #655 #335 #653)
#640 := [def-axiom]: #639
#525 := [unit-resolution #640 #524 #528]: #653
#578 := (or #582 #614 #651)
#579 := [def-axiom]: #578
#526 := [unit-resolution #579 #525 #540]: #582
[unit-resolution #605 #686 #526]: false
unsat
6c759b8f06a9510b6e4f2c41f45fd7a908ea138f 22 0
#2 := false
decl f13 :: (-> S7 S3 S4)
decl f4 :: S3
#8 := f4
decl f14 :: S7
#50 := f14
#51 := (f13 f14 f4)
#52 := (= #51 #51)
#53 := (not #52)
#148 := (iff #53 false)
#1 := true
#143 := (not true)
#146 := (iff #143 false)
#147 := [rewrite]: #146
#144 := (iff #53 #143)
#140 := (iff #52 true)
#142 := [rewrite]: #140
#145 := [monotonicity #142]: #144
#149 := [trans #145 #147]: #148
#139 := [asserted]: #53
[mp #139 #149]: false
unsat
eac8197a82f6b3a5c2024430d69641bb761b0abc 60 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f10 :: S2
#41 := f10
#42 := (f3 f10 f4)
decl f1 :: S1
#4 := f1
#118 := (= f1 #42)
#43 := (= #42 f1)
#44 := (not #43)
#45 := (not #44)
#130 := (iff #45 #118)
#122 := (not #118)
#125 := (not #122)
#128 := (iff #125 #118)
#129 := [rewrite]: #128
#126 := (iff #45 #125)
#123 := (iff #44 #122)
#120 := (iff #43 #118)
#121 := [rewrite]: #120
#124 := [monotonicity #121]: #123
#127 := [monotonicity #124]: #126
#131 := [trans #127 #129]: #130
#117 := [asserted]: #45
#134 := [mp #117 #131]: #118
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#642 := (pattern #10)
#66 := (= f1 #10)
#69 := (not #66)
#643 := (forall (vars (?v0 S2)) (:pat #642) #69)
#72 := (forall (vars (?v0 S2)) #69)
#646 := (iff #72 #643)
#644 := (iff #69 #69)
#645 := [refl]: #644
#647 := [quant-intro #645]: #646
#148 := (~ #72 #72)
#146 := (~ #69 #69)
#147 := [refl]: #146
#149 := [nnf-pos #147]: #148
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#73 := (iff #13 #72)
#70 := (iff #12 #69)
#67 := (iff #11 #66)
#68 := [rewrite]: #67
#71 := [monotonicity #68]: #70
#74 := [quant-intro #71]: #73
#65 := [asserted]: #13
#77 := [mp #65 #74]: #72
#133 := [mp~ #77 #149]: #72
#648 := [mp #133 #647]: #643
#225 := (not #643)
#312 := (or #225 #122)
#226 := [quant-inst #41]: #312
[unit-resolution #226 #648 #134]: false
unsat
32295808d649b2df10d022ec20bfa2f501001522 48 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#14 := f5
decl f10 :: S2
#41 := f10
#42 := (f3 f10 f5)
decl f1 :: S1
#4 := f1
#117 := (= f1 #42)
#121 := (not #117)
#43 := (= #42 f1)
#44 := (not #43)
#122 := (iff #44 #121)
#119 := (iff #43 #117)
#120 := [rewrite]: #119
#123 := [monotonicity #120]: #122
#116 := [asserted]: #44
#126 := [mp #116 #123]: #121
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#641 := (pattern #15)
#75 := (= f1 #15)
#642 := (forall (vars (?v0 S2)) (:pat #641) #75)
#79 := (forall (vars (?v0 S2)) #75)
#645 := (iff #79 #642)
#643 := (iff #75 #75)
#644 := [refl]: #643
#646 := [quant-intro #644]: #645
#128 := (~ #79 #79)
#127 := (~ #75 #75)
#142 := [refl]: #127
#129 := [nnf-pos #142]: #128
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#80 := (iff #17 #79)
#77 := (iff #16 #75)
#78 := [rewrite]: #77
#81 := [quant-intro #78]: #80
#74 := [asserted]: #17
#84 := [mp #74 #81]: #79
#143 := [mp~ #84 #129]: #79
#647 := [mp #143 #646]: #642
#217 := (not #642)
#304 := (or #217 #117)
#218 := [quant-inst #41]: #304
[unit-resolution #218 #647 #126]: false
unsat
dfe83e391823f1cbfcca9d6fb06c0ae74a22248a 126 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f12 :: S3
#44 := f12
decl f7 :: (-> S5 S3 S4)
decl f11 :: S3
#42 := f11
decl f8 :: S5
#19 := f8
#43 := (f7 f8 f11)
#45 := (f6 #43 f12)
decl f10 :: S2
#41 := f10
#46 := (f3 f10 #45)
decl f1 :: S1
#4 := f1
#127 := (= f1 #46)
#146 := (not #127)
#650 := [hypothesis]: #146
#50 := (f3 f10 f12)
#134 := (= f1 #50)
#48 := (f3 f10 f11)
#131 := (= f1 #48)
#137 := (or #131 #134)
#338 := (or #137 #127)
#147 := (iff #137 #146)
#51 := (= #50 f1)
#49 := (= #48 f1)
#52 := (or #49 #51)
#47 := (= #46 f1)
#53 := (iff #47 #52)
#54 := (not #53)
#150 := (iff #54 #147)
#140 := (iff #127 #137)
#143 := (not #140)
#148 := (iff #143 #147)
#149 := [rewrite]: #148
#144 := (iff #54 #143)
#141 := (iff #53 #140)
#138 := (iff #52 #137)
#135 := (iff #51 #134)
#136 := [rewrite]: #135
#132 := (iff #49 #131)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#129 := (iff #47 #127)
#130 := [rewrite]: #129
#142 := [monotonicity #130 #139]: #141
#145 := [monotonicity #142]: #144
#151 := [trans #145 #149]: #150
#126 := [asserted]: #54
#154 := [mp #126 #151]: #147
#264 := (not #147)
#337 := (or #137 #127 #264)
#334 := [def-axiom]: #337
#317 := [unit-resolution #334 #154]: #338
#322 := [unit-resolution #317 #650]: #137
#324 := (not #137)
#653 := (or #127 #324)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#676 := (pattern #24)
#28 := (f3 #18 #22)
#100 := (= f1 #28)
#26 := (f3 #18 #20)
#97 := (= f1 #26)
#103 := (or #97 #100)
#93 := (= f1 #24)
#106 := (iff #93 #103)
#677 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #676) #106)
#109 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #106)
#680 := (iff #109 #677)
#678 := (iff #106 #106)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#158 := (~ #109 #109)
#172 := (~ #106 #106)
#173 := [refl]: #172
#159 := [nnf-pos #173]: #158
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#110 := (iff #32 #109)
#107 := (iff #31 #106)
#104 := (iff #30 #103)
#101 := (iff #29 #100)
#102 := [rewrite]: #101
#98 := (iff #27 #97)
#99 := [rewrite]: #98
#105 := [monotonicity #99 #102]: #104
#95 := (iff #25 #93)
#96 := [rewrite]: #95
#108 := [monotonicity #96 #105]: #107
#111 := [quant-intro #108]: #110
#92 := [asserted]: #32
#114 := [mp #92 #111]: #109
#174 := [mp~ #114 #159]: #109
#682 := [mp #174 #681]: #677
#323 := (not #677)
#657 := (or #323 #140)
#658 := [quant-inst #41 #42 #44]: #657
#310 := [unit-resolution #658 #682]: #140
#659 := (or #143 #127 #324)
#660 := [def-axiom]: #659
#294 := [unit-resolution #660 #310]: #653
#637 := [unit-resolution #294 #322 #650]: false
#298 := [lemma #637]: #127
#311 := (or #324 #146)
#654 := (or #324 #146 #264)
#656 := [def-axiom]: #654
#443 := [unit-resolution #656 #154]: #311
#299 := [unit-resolution #443 #298]: #324
#300 := (or #146 #137)
#655 := (or #143 #146 #137)
#661 := [def-axiom]: #655
#301 := [unit-resolution #661 #310]: #300
[unit-resolution #301 #299 #298]: false
unsat
54d5adcc9aa92b5c35a0e590a6651cbf7d0b828e 162 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f10 :: S2
#41 := f10
#327 := (f3 f10 f4)
decl f1 :: S1
#4 := f1
#324 := (= f1 #327)
decl f11 :: S3
#42 := f11
#47 := (f3 f10 f11)
#127 := (= f1 #47)
#328 := (or #127 #324)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#19 := f8
#43 := (f7 f8 f11)
#44 := (f6 #43 f4)
#45 := (f3 f10 #44)
#123 := (= f1 #45)
#136 := (not #123)
#644 := [hypothesis]: #136
#322 := (or #127 #123)
#137 := (iff #127 #136)
#48 := (= #47 f1)
#46 := (= #45 f1)
#49 := (iff #46 #48)
#50 := (not #49)
#140 := (iff #50 #137)
#130 := (iff #123 #127)
#133 := (not #130)
#138 := (iff #133 #137)
#139 := [rewrite]: #138
#134 := (iff #50 #133)
#131 := (iff #49 #130)
#128 := (iff #48 #127)
#129 := [rewrite]: #128
#125 := (iff #46 #123)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#135 := [monotonicity #132]: #134
#141 := [trans #135 #139]: #140
#122 := [asserted]: #50
#144 := [mp #122 #141]: #137
#234 := (not #137)
#321 := (or #127 #123 #234)
#235 := [def-axiom]: #321
#236 := [unit-resolution #235 #144]: #322
#646 := [unit-resolution #236 #644]: #127
#650 := (not #328)
#290 := (or #123 #650)
#307 := (iff #123 #328)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#666 := (pattern #24)
#28 := (f3 #18 #22)
#96 := (= f1 #28)
#26 := (f3 #18 #20)
#93 := (= f1 #26)
#99 := (or #93 #96)
#89 := (= f1 #24)
#102 := (iff #89 #99)
#667 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #666) #102)
#105 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #102)
#670 := (iff #105 #667)
#668 := (iff #102 #102)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#148 := (~ #105 #105)
#162 := (~ #102 #102)
#163 := [refl]: #162
#149 := [nnf-pos #163]: #148
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#106 := (iff #32 #105)
#103 := (iff #31 #102)
#100 := (iff #30 #99)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #25 #89)
#92 := [rewrite]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [quant-intro #104]: #106
#88 := [asserted]: #32
#110 := [mp #88 #107]: #105
#164 := [mp~ #110 #149]: #105
#672 := [mp #164 #671]: #667
#301 := (not #667)
#433 := (or #301 #307)
#640 := [quant-inst #41 #42 #9]: #433
#289 := [unit-resolution #640 #672]: #307
#641 := (not #307)
#299 := (or #641 #123 #650)
#304 := [def-axiom]: #299
#291 := [unit-resolution #304 #289]: #290
#629 := [unit-resolution #291 #644]: #650
#323 := (not #127)
#312 := (or #328 #323)
#313 := [def-axiom]: #312
#630 := [unit-resolution #313 #629 #646]: false
#631 := [lemma #630]: #123
#632 := (or #136 #328)
#642 := (or #641 #136 #328)
#300 := [def-axiom]: #642
#633 := [unit-resolution #300 #289]: #632
#635 := [unit-resolution #633 #631]: #328
#326 := (or #323 #136)
#314 := (or #323 #136 #234)
#325 := [def-axiom]: #314
#254 := [unit-resolution #325 #144]: #326
#637 := [unit-resolution #254 #631]: #323
#645 := (or #650 #127 #324)
#651 := [def-axiom]: #645
#275 := [unit-resolution #651 #637 #635]: #324
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#652 := (pattern #10)
#71 := (= f1 #10)
#74 := (not #71)
#653 := (forall (vars (?v0 S2)) (:pat #652) #74)
#77 := (forall (vars (?v0 S2)) #74)
#656 := (iff #77 #653)
#654 := (iff #74 #74)
#655 := [refl]: #654
#657 := [quant-intro #655]: #656
#158 := (~ #77 #77)
#156 := (~ #74 #74)
#157 := [refl]: #156
#159 := [nnf-pos #157]: #158
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#78 := (iff #13 #77)
#75 := (iff #12 #74)
#72 := (iff #11 #71)
#73 := [rewrite]: #72
#76 := [monotonicity #73]: #75
#79 := [quant-intro #76]: #78
#70 := [asserted]: #13
#82 := [mp #70 #79]: #77
#143 := [mp~ #82 #159]: #77
#658 := [mp #143 #657]: #653
#647 := (not #324)
#628 := (not #653)
#634 := (or #628 #647)
#270 := [quant-inst #41]: #634
[unit-resolution #270 #658 #275]: false
unsat
6579b339206079120a92afc0dda92279c34507ae 136 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f5 :: S3
#14 := f5
decl f10 :: S2
#41 := f10
#219 := (f3 f10 f5)
decl f1 :: S1
#4 := f1
#306 := (= f1 #219)
#633 := (not #306)
decl f11 :: S3
#42 := f11
#220 := (f3 f10 f11)
#307 := (= f1 #220)
#299 := (or #306 #307)
#284 := (not #299)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#19 := f8
#43 := (f7 f8 f11)
#44 := (f6 #43 f5)
#45 := (f3 f10 #44)
#120 := (= f1 #45)
#239 := (iff #120 #299)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#651 := (pattern #24)
#28 := (f3 #18 #22)
#93 := (= f1 #28)
#26 := (f3 #18 #20)
#90 := (= f1 #26)
#96 := (or #90 #93)
#86 := (= f1 #24)
#99 := (iff #86 #96)
#652 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #651) #99)
#102 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #99)
#655 := (iff #102 #652)
#653 := (iff #99 #99)
#654 := [refl]: #653
#656 := [quant-intro #654]: #655
#133 := (~ #102 #102)
#147 := (~ #99 #99)
#148 := [refl]: #147
#134 := [nnf-pos #148]: #133
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#103 := (iff #32 #102)
#100 := (iff #31 #99)
#97 := (iff #30 #96)
#94 := (iff #29 #93)
#95 := [rewrite]: #94
#91 := (iff #27 #90)
#92 := [rewrite]: #91
#98 := [monotonicity #92 #95]: #97
#88 := (iff #25 #86)
#89 := [rewrite]: #88
#101 := [monotonicity #89 #98]: #100
#104 := [quant-intro #101]: #103
#85 := [asserted]: #32
#107 := [mp #85 #104]: #102
#149 := [mp~ #107 #134]: #102
#657 := [mp #149 #656]: #652
#313 := (not #652)
#292 := (or #313 #239)
#221 := (or #307 #306)
#308 := (iff #120 #221)
#629 := (or #313 #308)
#286 := (iff #629 #292)
#625 := (iff #292 #292)
#297 := [rewrite]: #625
#312 := (iff #308 #239)
#310 := (iff #221 #299)
#311 := [rewrite]: #310
#309 := [monotonicity #311]: #312
#418 := [monotonicity #309]: #286
#298 := [trans #418 #297]: #286
#631 := [quant-inst #41 #42 #14]: #629
#632 := [mp #631 #298]: #292
#615 := [unit-resolution #632 #657]: #239
#285 := (not #239)
#616 := (or #285 #284)
#124 := (not #120)
#46 := (= #45 f1)
#47 := (not #46)
#125 := (iff #47 #124)
#122 := (iff #46 #120)
#123 := [rewrite]: #122
#126 := [monotonicity #123]: #125
#119 := [asserted]: #47
#129 := [mp #119 #126]: #124
#628 := (or #285 #120 #284)
#269 := [def-axiom]: #628
#619 := [unit-resolution #269 #129]: #616
#255 := [unit-resolution #619 #615]: #284
#634 := (or #299 #633)
#635 := [def-axiom]: #634
#620 := [unit-resolution #635 #255]: #633
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#644 := (pattern #15)
#78 := (= f1 #15)
#645 := (forall (vars (?v0 S2)) (:pat #644) #78)
#82 := (forall (vars (?v0 S2)) #78)
#648 := (iff #82 #645)
#646 := (iff #78 #78)
#647 := [refl]: #646
#649 := [quant-intro #647]: #648
#131 := (~ #82 #82)
#130 := (~ #78 #78)
#145 := [refl]: #130
#132 := [nnf-pos #145]: #131
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#83 := (iff #17 #82)
#80 := (iff #16 #78)
#81 := [rewrite]: #80
#84 := [quant-intro #81]: #83
#77 := [asserted]: #17
#87 := [mp #77 #84]: #82
#146 := [mp~ #87 #132]: #82
#650 := [mp #146 #649]: #645
#617 := (not #645)
#618 := (or #617 #306)
#613 := [quant-inst #41]: #618
[unit-resolution #613 #650 #620]: false
unsat
21f3225a60811428730067e610d6913c3bcb0df3 155 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S5 S3 S4)
decl f12 :: S3
#44 := f12
decl f8 :: S5
#19 := f8
#48 := (f7 f8 f12)
#49 := (f6 #48 f11)
decl f10 :: S2
#41 := f10
#50 := (f3 f10 #49)
decl f1 :: S1
#4 := f1
#130 := (= f1 #50)
#326 := (not #130)
#43 := (f7 f8 f11)
#45 := (f6 #43 f12)
#46 := (f3 f10 #45)
#126 := (= f1 #46)
#139 := (not #126)
#245 := [hypothesis]: #139
#325 := (or #130 #126)
#140 := (iff #130 #139)
#51 := (= #50 f1)
#47 := (= #46 f1)
#52 := (iff #47 #51)
#53 := (not #52)
#143 := (iff #53 #140)
#133 := (iff #126 #130)
#136 := (not #133)
#141 := (iff #136 #140)
#142 := [rewrite]: #141
#137 := (iff #53 #136)
#134 := (iff #52 #133)
#131 := (iff #51 #130)
#132 := [rewrite]: #131
#128 := (iff #47 #126)
#129 := [rewrite]: #128
#135 := [monotonicity #129 #132]: #134
#138 := [monotonicity #135]: #137
#144 := [trans #138 #142]: #143
#125 := [asserted]: #53
#147 := [mp #125 #144]: #140
#237 := (not #140)
#324 := (or #130 #126 #237)
#238 := [def-axiom]: #324
#239 := [unit-resolution #238 #147]: #325
#624 := [unit-resolution #239 #245]: #130
#330 := (f3 f10 f11)
#327 := (= f1 #330)
#331 := (f3 f10 f12)
#310 := (= f1 #331)
#647 := (or #310 #327)
#644 := (not #647)
#347 := (or #126 #644)
#634 := (iff #126 #647)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#669 := (pattern #24)
#28 := (f3 #18 #22)
#99 := (= f1 #28)
#26 := (f3 #18 #20)
#96 := (= f1 #26)
#102 := (or #96 #99)
#92 := (= f1 #24)
#105 := (iff #92 #102)
#670 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #669) #105)
#108 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #105)
#673 := (iff #108 #670)
#671 := (iff #105 #105)
#672 := [refl]: #671
#674 := [quant-intro #672]: #673
#151 := (~ #108 #108)
#165 := (~ #105 #105)
#166 := [refl]: #165
#152 := [nnf-pos #166]: #151
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#109 := (iff #32 #108)
#106 := (iff #31 #105)
#103 := (iff #30 #102)
#100 := (iff #29 #99)
#101 := [rewrite]: #100
#97 := (iff #27 #96)
#98 := [rewrite]: #97
#104 := [monotonicity #98 #101]: #103
#94 := (iff #25 #92)
#95 := [rewrite]: #94
#107 := [monotonicity #95 #104]: #106
#110 := [quant-intro #107]: #109
#91 := [asserted]: #32
#113 := [mp #91 #110]: #108
#167 := [mp~ #113 #152]: #108
#675 := [mp #167 #674]: #670
#643 := (not #670)
#631 := (or #643 #634)
#304 := (or #327 #310)
#436 := (iff #126 #304)
#637 := (or #643 #436)
#638 := (iff #637 #631)
#278 := (iff #631 #631)
#279 := [rewrite]: #278
#635 := (iff #436 #634)
#632 := (iff #304 #647)
#633 := [rewrite]: #632
#636 := [monotonicity #633]: #635
#640 := [monotonicity #636]: #638
#641 := [trans #640 #279]: #638
#273 := [quant-inst #41 #42 #44]: #637
#639 := [mp #273 #641]: #631
#625 := [unit-resolution #639 #675]: #634
#642 := (not #634)
#628 := (or #642 #126 #644)
#629 := [def-axiom]: #628
#348 := [unit-resolution #629 #625]: #347
#622 := [unit-resolution #348 #245]: #644
#623 := (or #326 #647)
#649 := (iff #130 #647)
#315 := (or #643 #649)
#316 := [quant-inst #41 #44 #42]: #315
#626 := [unit-resolution #316 #675]: #649
#645 := (not #649)
#287 := (or #645 #326 #647)
#630 := [def-axiom]: #287
#627 := [unit-resolution #630 #626]: #623
#336 := [unit-resolution #627 #622 #624]: false
#337 := [lemma #336]: #126
#329 := (or #326 #139)
#317 := (or #326 #139 #237)
#328 := [def-axiom]: #317
#257 := [unit-resolution #328 #147]: #329
#338 := [unit-resolution #257 #337]: #326
#340 := (or #139 #647)
#335 := (or #642 #139 #647)
#351 := [def-axiom]: #335
#618 := [unit-resolution #351 #625]: #340
#619 := [unit-resolution #618 #337]: #647
#332 := (or #130 #644)
#303 := (or #645 #130 #644)
#646 := [def-axiom]: #303
#616 := [unit-resolution #646 #626]: #332
[unit-resolution #616 #619 #338]: false
unsat
0a38803d5203ebb9de80029b1e5de8bcd8e8f404 128 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#19 := f8
#43 := (f7 f8 f11)
#44 := (f6 #43 f11)
decl f10 :: S2
#41 := f10
#45 := (f3 f10 #44)
decl f1 :: S1
#4 := f1
#123 := (= f1 #45)
#136 := (not #123)
#627 := [hypothesis]: #136
#47 := (f3 f10 f11)
#127 := (= f1 #47)
#322 := (or #127 #123)
#137 := (iff #127 #136)
#48 := (= #47 f1)
#46 := (= #45 f1)
#49 := (iff #46 #48)
#50 := (not #49)
#140 := (iff #50 #137)
#130 := (iff #123 #127)
#133 := (not #130)
#138 := (iff #133 #137)
#139 := [rewrite]: #138
#134 := (iff #50 #133)
#131 := (iff #49 #130)
#128 := (iff #48 #127)
#129 := [rewrite]: #128
#125 := (iff #46 #123)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#135 := [monotonicity #132]: #134
#141 := [trans #135 #139]: #140
#122 := [asserted]: #50
#144 := [mp #122 #141]: #137
#234 := (not #137)
#321 := (or #127 #123 #234)
#235 := [def-axiom]: #321
#236 := [unit-resolution #235 #144]: #322
#288 := [unit-resolution #236 #627]: #127
#323 := (not #127)
#290 := (or #123 #323)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#666 := (pattern #24)
#28 := (f3 #18 #22)
#96 := (= f1 #28)
#26 := (f3 #18 #20)
#93 := (= f1 #26)
#99 := (or #93 #96)
#89 := (= f1 #24)
#102 := (iff #89 #99)
#667 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #666) #102)
#105 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #102)
#670 := (iff #105 #667)
#668 := (iff #102 #102)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#148 := (~ #105 #105)
#162 := (~ #102 #102)
#163 := [refl]: #162
#149 := [nnf-pos #163]: #148
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#106 := (iff #32 #105)
#103 := (iff #31 #102)
#100 := (iff #30 #99)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#95 := [rewrite]: #94
#101 := [monotonicity #95 #98]: #100
#91 := (iff #25 #89)
#92 := [rewrite]: #91
#104 := [monotonicity #92 #101]: #103
#107 := [quant-intro #104]: #106
#88 := [asserted]: #32
#110 := [mp #88 #107]: #105
#164 := [mp~ #110 #149]: #105
#672 := [mp #164 #671]: #667
#301 := (not #667)
#433 := (or #301 #130)
#327 := (or #127 #127)
#324 := (iff #123 #327)
#640 := (or #301 #324)
#313 := (iff #640 #433)
#648 := (iff #433 #433)
#649 := [rewrite]: #648
#644 := (iff #324 #130)
#328 := (iff #327 #127)
#307 := [rewrite]: #328
#646 := [monotonicity #307]: #644
#647 := [monotonicity #646]: #313
#650 := [trans #647 #649]: #313
#312 := [quant-inst #41 #42 #42]: #640
#645 := [mp #312 #650]: #433
#289 := [unit-resolution #645 #672]: #130
#651 := (or #133 #123 #323)
#641 := [def-axiom]: #651
#291 := [unit-resolution #641 #289]: #290
#629 := [unit-resolution #291 #288 #627]: false
#630 := [lemma #629]: #123
#326 := (or #323 #136)
#314 := (or #323 #136 #234)
#325 := [def-axiom]: #314
#254 := [unit-resolution #325 #144]: #326
#631 := [unit-resolution #254 #630]: #323
#632 := (or #136 #127)
#299 := (or #133 #136 #127)
#304 := [def-axiom]: #299
#633 := [unit-resolution #304 #289]: #632
[unit-resolution #633 #631 #630]: false
unsat
a9b4d2c6d5d71402741164958baf8befeec2192a 266 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#44 := f12
decl f10 :: S2
#41 := f10
#623 := (f3 f10 f12)
decl f1 :: S1
#4 := f1
#336 := (= f1 #623)
decl f13 :: S3
#46 := f13
#334 := (f3 f10 f13)
#331 := (= f1 #334)
#621 := (or #331 #336)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f8 :: S5
#19 := f8
#45 := (f7 f8 f12)
#47 := (f6 #45 f13)
#308 := (f3 f10 #47)
#440 := (= f1 #308)
#615 := (iff #440 #621)
#581 := (not #615)
#593 := (not #621)
#605 := (not #336)
decl f11 :: S3
#42 := f11
#636 := (f3 f10 f11)
#637 := (= f1 #636)
#483 := (or #336 #637)
#608 := (not #483)
#43 := (f7 f8 f11)
#51 := (f6 #43 f12)
#335 := (f3 f10 #51)
#314 := (= f1 #335)
#591 := (iff #314 #483)
#583 := (not #591)
#576 := [hypothesis]: #583
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#21 := (f7 f8 #20)
#23 := (f6 #21 #22)
#18 := (:var 2 S2)
#24 := (f3 #18 #23)
#673 := (pattern #24)
#28 := (f3 #18 #22)
#103 := (= f1 #28)
#26 := (f3 #18 #20)
#100 := (= f1 #26)
#106 := (or #100 #103)
#96 := (= f1 #24)
#109 := (iff #96 #106)
#674 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #673) #109)
#112 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #109)
#677 := (iff #112 #674)
#675 := (iff #109 #109)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#155 := (~ #112 #112)
#169 := (~ #109 #109)
#170 := [refl]: #169
#156 := [nnf-pos #170]: #155
#29 := (= #28 f1)
#27 := (= #26 f1)
#30 := (or #27 #29)
#25 := (= #24 f1)
#31 := (iff #25 #30)
#32 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #31)
#113 := (iff #32 #112)
#110 := (iff #31 #109)
#107 := (iff #30 #106)
#104 := (iff #29 #103)
#105 := [rewrite]: #104
#101 := (iff #27 #100)
#102 := [rewrite]: #101
#108 := [monotonicity #102 #105]: #107
#98 := (iff #25 #96)
#99 := [rewrite]: #98
#111 := [monotonicity #99 #108]: #110
#114 := [quant-intro #111]: #113
#95 := [asserted]: #32
#117 := [mp #95 #114]: #112
#171 := [mp~ #117 #156]: #112
#679 := [mp #171 #678]: #674
#647 := (not #674)
#589 := (or #647 #591)
#600 := (or #637 #336)
#482 := (iff #314 #600)
#592 := (or #647 #482)
#492 := (iff #592 #589)
#495 := (iff #589 #589)
#488 := [rewrite]: #495
#493 := (iff #482 #591)
#484 := (iff #600 #483)
#443 := [rewrite]: #484
#588 := [monotonicity #443]: #493
#494 := [monotonicity #588]: #492
#496 := [trans #494 #488]: #492
#477 := [quant-inst #41 #42 #44]: #592
#497 := [mp #477 #496]: #589
#577 := [unit-resolution #497 #679 #576]: false
#578 := [lemma #577]: #591
#654 := (not #314)
#651 := (or #314 #331)
#648 := (not #651)
#52 := (f7 f8 #51)
#53 := (f6 #52 f13)
#54 := (f3 f10 #53)
#134 := (= f1 #54)
#330 := (not #134)
#48 := (f6 #43 #47)
#49 := (f3 f10 #48)
#130 := (= f1 #49)
#143 := (not #130)
#579 := [hypothesis]: #143
#329 := (or #134 #130)
#144 := (iff #134 #143)
#55 := (= #54 f1)
#50 := (= #49 f1)
#56 := (iff #50 #55)
#57 := (not #56)
#147 := (iff #57 #144)
#137 := (iff #130 #134)
#140 := (not #137)
#145 := (iff #140 #144)
#146 := [rewrite]: #145
#141 := (iff #57 #140)
#138 := (iff #56 #137)
#135 := (iff #55 #134)
#136 := [rewrite]: #135
#132 := (iff #50 #130)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#142 := [monotonicity #139]: #141
#148 := [trans #142 #146]: #147
#129 := [asserted]: #57
#151 := [mp #129 #148]: #144
#241 := (not #144)
#328 := (or #134 #130 #241)
#242 := [def-axiom]: #328
#243 := [unit-resolution #242 #151]: #329
#573 := [unit-resolution #243 #579]: #134
#564 := (or #330 #651)
#653 := (iff #134 #651)
#319 := (or #647 #653)
#320 := [quant-inst #41 #51 #46]: #319
#580 := [unit-resolution #320 #679]: #653
#649 := (not #653)
#291 := (or #649 #330 #651)
#634 := [def-axiom]: #291
#565 := [unit-resolution #634 #580]: #564
#567 := [unit-resolution #565 #573]: #651
#657 := (not #331)
#597 := (or #647 #615)
#620 := (or #336 #331)
#624 := (iff #440 #620)
#617 := (or #647 #624)
#612 := (iff #617 #597)
#619 := (iff #597 #597)
#460 := [rewrite]: #619
#616 := (iff #624 #615)
#625 := (iff #620 #621)
#614 := [rewrite]: #625
#611 := [monotonicity #614]: #616
#613 := [monotonicity #611]: #612
#461 := [trans #613 #460]: #612
#618 := [quant-inst #41 #44 #46]: #617
#462 := [mp #618 #461]: #597
#568 := [unit-resolution #462 #679]: #615
#558 := (or #581 #593)
#356 := (not #440)
#640 := (or #440 #637)
#629 := (not #640)
#570 := (or #130 #629)
#277 := (iff #130 #640)
#282 := (or #647 #277)
#638 := (or #637 #440)
#639 := (iff #130 #638)
#283 := (or #647 #639)
#643 := (iff #283 #282)
#632 := (iff #282 #282)
#633 := [rewrite]: #632
#642 := (iff #639 #277)
#635 := (iff #638 #640)
#641 := [rewrite]: #635
#644 := [monotonicity #641]: #642
#646 := [monotonicity #644]: #643
#339 := [trans #646 #633]: #643
#645 := [quant-inst #41 #42 #47]: #283
#355 := [mp #645 #339]: #282
#569 := [unit-resolution #355 #679]: #277
#626 := (not #277)
#630 := (or #626 #130 #629)
#627 := [def-axiom]: #630
#566 := [unit-resolution #627 #569]: #570
#571 := [unit-resolution #566 #579]: #629
#357 := (or #640 #356)
#343 := [def-axiom]: #357
#557 := [unit-resolution #343 #571]: #356
#575 := (or #581 #440 #593)
#572 := [def-axiom]: #575
#560 := [unit-resolution #572 #557]: #558
#561 := [unit-resolution #560 #568]: #593
#604 := (or #621 #657)
#498 := [def-axiom]: #604
#562 := [unit-resolution #498 #561]: #657
#306 := (or #648 #314 #331)
#311 := [def-axiom]: #306
#559 := [unit-resolution #311 #562 #567]: #314
#358 := (not #637)
#249 := (or #640 #358)
#628 := [def-axiom]: #249
#563 := [unit-resolution #628 #571]: #358
#499 := (or #621 #605)
#500 := [def-axiom]: #499
#543 := [unit-resolution #500 #561]: #605
#609 := (or #608 #336 #637)
#603 := [def-axiom]: #609
#544 := [unit-resolution #603 #543 #563]: #608
#441 := (or #583 #654 #483)
#442 := [def-axiom]: #441
#546 := [unit-resolution #442 #544 #559 #578]: false
#547 := [lemma #546]: #130
#333 := (or #330 #143)
#321 := (or #330 #143 #241)
#332 := [def-axiom]: #321
#261 := [unit-resolution #332 #151]: #333
#548 := [unit-resolution #261 #547]: #330
#549 := (or #134 #648)
#307 := (or #649 #134 #648)
#650 := [def-axiom]: #307
#550 := [unit-resolution #650 #580]: #549
#551 := [unit-resolution #550 #548]: #648
#655 := (or #651 #654)
#656 := [def-axiom]: #655
#552 := [unit-resolution #656 #551]: #654
#610 := (or #583 #314 #608)
#439 := [def-axiom]: #610
#553 := [unit-resolution #439 #552 #578]: #608
#606 := (or #483 #605)
#607 := [def-axiom]: #606
#554 := [unit-resolution #607 #553]: #605
#652 := (or #651 #657)
#658 := [def-axiom]: #652
#555 := [unit-resolution #658 #551]: #657
#590 := (or #593 #331 #336)
#594 := [def-axiom]: #590
#545 := [unit-resolution #594 #555 #554]: #593
#556 := (or #143 #640)
#631 := (or #626 #143 #640)
#340 := [def-axiom]: #631
#534 := [unit-resolution #340 #569]: #556
#535 := [unit-resolution #534 #547]: #640
#601 := (or #483 #358)
#602 := [def-axiom]: #601
#537 := [unit-resolution #602 #553]: #358
#351 := (or #629 #440 #637)
#352 := [def-axiom]: #351
#538 := [unit-resolution #352 #537 #535]: #440
#574 := (or #581 #356 #621)
#584 := [def-axiom]: #574
#539 := [unit-resolution #584 #538 #545]: #581
[unit-resolution #462 #679 #539]: false
unsat
c3c3648cfba9d6c85cac6f8d51a3b06b08975178 160 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f12 :: S3
#44 := f12
decl f10 :: S2
#41 := f10
#50 := (f3 f10 f12)
decl f1 :: S1
#4 := f1
#134 := (= f1 #50)
#188 := (not #134)
decl f11 :: S3
#42 := f11
#48 := (f3 f10 f11)
#131 := (= f1 #48)
#187 := (not #131)
#189 := (or #187 #188)
#190 := (not #189)
#331 := [hypothesis]: #190
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#45 := (f6 #43 f12)
#46 := (f3 f10 #45)
#127 := (= f1 #46)
#146 := (not #127)
#337 := (or #146 #189)
#201 := (iff #127 #189)
#137 := (and #131 #134)
#147 := (iff #137 #146)
#204 := (iff #147 #201)
#196 := (iff #189 #127)
#202 := (iff #196 #201)
#203 := [rewrite]: #202
#199 := (iff #147 #196)
#193 := (iff #190 #146)
#197 := (iff #193 #196)
#198 := [rewrite]: #197
#194 := (iff #147 #193)
#191 := (iff #137 #190)
#192 := [rewrite]: #191
#195 := [monotonicity #192]: #194
#200 := [trans #195 #198]: #199
#205 := [trans #200 #203]: #204
#51 := (= #50 f1)
#49 := (= #48 f1)
#52 := (and #49 #51)
#47 := (= #46 f1)
#53 := (iff #47 #52)
#54 := (not #53)
#150 := (iff #54 #147)
#140 := (iff #127 #137)
#143 := (not #140)
#148 := (iff #143 #147)
#149 := [rewrite]: #148
#144 := (iff #54 #143)
#141 := (iff #53 #140)
#138 := (iff #52 #137)
#135 := (iff #51 #134)
#136 := [rewrite]: #135
#132 := (iff #49 #131)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#129 := (iff #47 #127)
#130 := [rewrite]: #129
#142 := [monotonicity #130 #139]: #141
#145 := [monotonicity #142]: #144
#151 := [trans #145 #149]: #150
#126 := [asserted]: #54
#154 := [mp #126 #151]: #147
#206 := [mp #154 #205]: #201
#344 := (not #201)
#354 := (or #146 #189 #344)
#358 := [def-axiom]: #354
#674 := [unit-resolution #358 #206]: #337
#463 := [unit-resolution #674 #331]: #146
#330 := (or #127 #189)
#676 := (iff #127 #190)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#703 := (pattern #36)
#28 := (f3 #18 #22)
#100 := (= f1 #28)
#179 := (not #100)
#26 := (f3 #18 #20)
#97 := (= f1 #26)
#178 := (not #97)
#162 := (or #178 #179)
#163 := (not #162)
#113 := (= f1 #36)
#180 := (iff #113 #163)
#704 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #703) #180)
#183 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #180)
#707 := (iff #183 #704)
#705 := (iff #180 #180)
#706 := [refl]: #705
#708 := [quant-intro #706]: #707
#117 := (and #97 #100)
#120 := (iff #113 #117)
#123 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #120)
#184 := (iff #123 #183)
#181 := (iff #120 #180)
#164 := (iff #117 #163)
#165 := [rewrite]: #164
#182 := [monotonicity #165]: #181
#185 := [quant-intro #182]: #184
#160 := (~ #123 #123)
#175 := (~ #120 #120)
#176 := [refl]: #175
#161 := [nnf-pos #176]: #160
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#124 := (iff #40 #123)
#121 := (iff #39 #120)
#118 := (iff #38 #117)
#101 := (iff #29 #100)
#102 := [rewrite]: #101
#98 := (iff #27 #97)
#99 := [rewrite]: #98
#119 := [monotonicity #99 #102]: #118
#115 := (iff #37 #113)
#116 := [rewrite]: #115
#122 := [monotonicity #116 #119]: #121
#125 := [quant-intro #122]: #124
#112 := [asserted]: #40
#128 := [mp #112 #125]: #123
#177 := [mp~ #128 #161]: #123
#186 := [mp #177 #185]: #183
#709 := [mp #186 #708]: #704
#670 := (not #704)
#342 := (or #670 #676)
#343 := [quant-inst #41 #42 #44]: #342
#672 := [unit-resolution #343 #709]: #676
#677 := (not #676)
#678 := (or #677 #127 #189)
#679 := [def-axiom]: #678
#673 := [unit-resolution #679 #672]: #330
#314 := [unit-resolution #673 #463 #331]: false
#657 := [lemma #314]: #189
#284 := (or #127 #190)
#355 := (or #127 #190 #344)
#356 := [def-axiom]: #355
#357 := [unit-resolution #356 #206]: #284
#318 := [unit-resolution #357 #657]: #127
#319 := (or #146 #190)
#680 := (or #677 #146 #190)
#675 := [def-axiom]: #680
#320 := [unit-resolution #675 #672]: #319
[unit-resolution #320 #318 #657]: false
unsat
1adc4d295cebee376081ce9f5a9d0e96c2943423 149 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f4 :: S3
#9 := f4
decl f10 :: S2
#41 := f10
#227 := (f3 f10 f4)
decl f1 :: S1
#4 := f1
#314 := (= f1 #227)
#228 := (not #314)
decl f11 :: S3
#42 := f11
#315 := (f3 f10 f11)
#229 := (= f1 #315)
#316 := (not #229)
#307 := (or #316 #228)
#318 := (not #307)
decl f6 :: (-> S4 S3 S3)
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#44 := (f6 #43 f4)
#45 := (f3 f10 #44)
#121 := (= f1 #45)
#319 := (iff #121 #318)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#666 := (pattern #36)
#28 := (f3 #18 #22)
#94 := (= f1 #28)
#162 := (not #94)
#26 := (f3 #18 #20)
#91 := (= f1 #26)
#161 := (not #91)
#145 := (or #161 #162)
#146 := (not #145)
#107 := (= f1 #36)
#163 := (iff #107 #146)
#667 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #666) #163)
#166 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #163)
#670 := (iff #166 #667)
#668 := (iff #163 #163)
#669 := [refl]: #668
#671 := [quant-intro #669]: #670
#111 := (and #91 #94)
#114 := (iff #107 #111)
#117 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #114)
#167 := (iff #117 #166)
#164 := (iff #114 #163)
#147 := (iff #111 #146)
#148 := [rewrite]: #147
#165 := [monotonicity #148]: #164
#168 := [quant-intro #165]: #167
#143 := (~ #117 #117)
#158 := (~ #114 #114)
#159 := [refl]: #158
#144 := [nnf-pos #159]: #143
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#118 := (iff #40 #117)
#115 := (iff #39 #114)
#112 := (iff #38 #111)
#95 := (iff #29 #94)
#96 := [rewrite]: #95
#92 := (iff #27 #91)
#93 := [rewrite]: #92
#113 := [monotonicity #93 #96]: #112
#109 := (iff #37 #107)
#110 := [rewrite]: #109
#116 := [monotonicity #110 #113]: #115
#119 := [quant-intro #116]: #118
#106 := [asserted]: #40
#122 := [mp #106 #119]: #117
#160 := [mp~ #122 #144]: #117
#169 := [mp #160 #168]: #166
#672 := [mp #169 #671]: #667
#317 := (not #667)
#321 := (or #317 #319)
#300 := [quant-inst #41 #42 #9]: #321
#247 := [unit-resolution #300 #672]: #319
#306 := (not #319)
#320 := (or #306 #318)
#46 := (= #45 f1)
#47 := (not #46)
#48 := (not #47)
#133 := (iff #48 #121)
#125 := (not #121)
#128 := (not #125)
#131 := (iff #128 #121)
#132 := [rewrite]: #131
#129 := (iff #48 #128)
#126 := (iff #47 #125)
#123 := (iff #46 #121)
#124 := [rewrite]: #123
#127 := [monotonicity #124]: #126
#130 := [monotonicity #127]: #129
#134 := [trans #130 #132]: #133
#120 := [asserted]: #48
#137 := [mp #120 #134]: #121
#642 := (or #306 #125 #318)
#643 := [def-axiom]: #642
#636 := [unit-resolution #643 #137]: #320
#277 := [unit-resolution #636 #247]: #318
#294 := (or #307 #314)
#426 := [def-axiom]: #294
#620 := [unit-resolution #426 #277]: #314
#8 := (:var 0 S2)
#10 := (f3 #8 f4)
#645 := (pattern #10)
#69 := (= f1 #10)
#72 := (not #69)
#646 := (forall (vars (?v0 S2)) (:pat #645) #72)
#75 := (forall (vars (?v0 S2)) #72)
#649 := (iff #75 #646)
#647 := (iff #72 #72)
#648 := [refl]: #647
#650 := [quant-intro #648]: #649
#151 := (~ #75 #75)
#149 := (~ #72 #72)
#150 := [refl]: #149
#152 := [nnf-pos #150]: #151
#11 := (= #10 f1)
#12 := (not #11)
#13 := (forall (vars (?v0 S2)) #12)
#76 := (iff #13 #75)
#73 := (iff #12 #72)
#70 := (iff #11 #69)
#71 := [rewrite]: #70
#74 := [monotonicity #71]: #73
#77 := [quant-intro #74]: #76
#68 := [asserted]: #13
#80 := [mp #68 #77]: #75
#136 := [mp~ #80 #152]: #75
#651 := [mp #136 #650]: #646
#297 := (not #646)
#635 := (or #297 #228)
#293 := [quant-inst #41]: #635
[unit-resolution #293 #651 #620]: false
unsat
27fbc35929f013c0b43884a593f3f377821cad64 173 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f11 :: S3
#42 := f11
decl f10 :: S2
#41 := f10
#47 := (f3 f10 f11)
decl f1 :: S1
#4 := f1
#127 := (= f1 #47)
#323 := (not #127)
decl f6 :: (-> S4 S3 S3)
decl f5 :: S3
#14 := f5
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#44 := (f6 #43 f5)
#45 := (f3 f10 #44)
#123 := (= f1 #45)
#327 := (f3 f10 f5)
#324 := (= f1 #327)
#328 := (not #324)
#301 := [hypothesis]: #328
#8 := (:var 0 S2)
#15 := (f3 #8 f5)
#659 := (pattern #15)
#81 := (= f1 #15)
#660 := (forall (vars (?v0 S2)) (:pat #659) #81)
#85 := (forall (vars (?v0 S2)) #81)
#663 := (iff #85 #660)
#661 := (iff #81 #81)
#662 := [refl]: #661
#664 := [quant-intro #662]: #663
#146 := (~ #85 #85)
#145 := (~ #81 #81)
#160 := [refl]: #145
#147 := [nnf-pos #160]: #146
#16 := (= #15 f1)
#17 := (forall (vars (?v0 S2)) #16)
#86 := (iff #17 #85)
#83 := (iff #16 #81)
#84 := [rewrite]: #83
#87 := [quant-intro #84]: #86
#80 := [asserted]: #17
#90 := [mp #80 #87]: #85
#161 := [mp~ #90 #147]: #85
#665 := [mp #161 #664]: #660
#289 := (not #660)
#290 := (or #289 #324)
#291 := [quant-inst #41]: #290
#433 := [unit-resolution #291 #665 #301]: false
#629 := [lemma #433]: #324
#136 := (not #123)
#630 := [hypothesis]: #136
#322 := (or #127 #123)
#137 := (iff #127 #136)
#48 := (= #47 f1)
#46 := (= #45 f1)
#49 := (iff #46 #48)
#50 := (not #49)
#140 := (iff #50 #137)
#130 := (iff #123 #127)
#133 := (not #130)
#138 := (iff #133 #137)
#139 := [rewrite]: #138
#134 := (iff #50 #133)
#131 := (iff #49 #130)
#128 := (iff #48 #127)
#129 := [rewrite]: #128
#125 := (iff #46 #123)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#135 := [monotonicity #132]: #134
#141 := [trans #135 #139]: #140
#122 := [asserted]: #50
#144 := [mp #122 #141]: #137
#234 := (not #137)
#321 := (or #127 #123 #234)
#235 := [def-axiom]: #321
#236 := [unit-resolution #235 #144]: #322
#631 := [unit-resolution #236 #630]: #127
#307 := (or #323 #328)
#633 := (or #123 #307)
#644 := (not #307)
#646 := (iff #123 #644)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#673 := (pattern #36)
#28 := (f3 #18 #22)
#96 := (= f1 #28)
#169 := (not #96)
#26 := (f3 #18 #20)
#93 := (= f1 #26)
#168 := (not #93)
#152 := (or #168 #169)
#153 := (not #152)
#109 := (= f1 #36)
#170 := (iff #109 #153)
#674 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #673) #170)
#173 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #170)
#677 := (iff #173 #674)
#675 := (iff #170 #170)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#113 := (and #93 #96)
#116 := (iff #109 #113)
#119 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #116)
#174 := (iff #119 #173)
#171 := (iff #116 #170)
#154 := (iff #113 #153)
#155 := [rewrite]: #154
#172 := [monotonicity #155]: #171
#175 := [quant-intro #172]: #174
#150 := (~ #119 #119)
#165 := (~ #116 #116)
#166 := [refl]: #165
#151 := [nnf-pos #166]: #150
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#120 := (iff #40 #119)
#117 := (iff #39 #116)
#114 := (iff #38 #113)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#95 := [rewrite]: #94
#115 := [monotonicity #95 #98]: #114
#111 := (iff #37 #109)
#112 := [rewrite]: #111
#118 := [monotonicity #112 #115]: #117
#121 := [quant-intro #118]: #120
#108 := [asserted]: #40
#124 := [mp #108 #121]: #119
#167 := [mp~ #124 #151]: #119
#176 := [mp #167 #175]: #173
#679 := [mp #176 #678]: #674
#640 := (not #674)
#312 := (or #640 #646)
#313 := [quant-inst #41 #42 #14]: #312
#632 := [unit-resolution #313 #679]: #646
#641 := (not #646)
#299 := (or #641 #123 #307)
#304 := [def-axiom]: #299
#628 := [unit-resolution #304 #632]: #633
#634 := [unit-resolution #628 #630]: #307
#645 := (or #644 #323 #328)
#651 := [def-axiom]: #645
#270 := [unit-resolution #651 #634 #631 #629]: false
#635 := [lemma #270]: #123
#326 := (or #323 #136)
#314 := (or #323 #136 #234)
#325 := [def-axiom]: #314
#254 := [unit-resolution #325 #144]: #326
#637 := [unit-resolution #254 #635]: #323
#275 := (or #136 #644)
#642 := (or #641 #136 #644)
#300 := [def-axiom]: #642
#276 := [unit-resolution #300 #632]: #275
#638 := [unit-resolution #276 #635]: #644
#647 := (or #307 #127)
#648 := [def-axiom]: #647
[unit-resolution #648 #638 #637]: false
unsat
fa1e213c15b8e9288bf16d2dc4bd96e3c7fb5c7e 173 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S5 S3 S4)
decl f12 :: S3
#44 := f12
decl f9 :: S5
#33 := f9
#48 := (f7 f9 f12)
#49 := (f6 #48 f11)
decl f10 :: S2
#41 := f10
#50 := (f3 f10 #49)
decl f1 :: S1
#4 := f1
#130 := (= f1 #50)
#326 := (not #130)
#43 := (f7 f9 f11)
#45 := (f6 #43 f12)
#46 := (f3 f10 #45)
#126 := (= f1 #46)
#139 := (not #126)
#628 := [hypothesis]: #139
#325 := (or #130 #126)
#140 := (iff #130 #139)
#51 := (= #50 f1)
#47 := (= #46 f1)
#52 := (iff #47 #51)
#53 := (not #52)
#143 := (iff #53 #140)
#133 := (iff #126 #130)
#136 := (not #133)
#141 := (iff #136 #140)
#142 := [rewrite]: #141
#137 := (iff #53 #136)
#134 := (iff #52 #133)
#131 := (iff #51 #130)
#132 := [rewrite]: #131
#128 := (iff #47 #126)
#129 := [rewrite]: #128
#135 := [monotonicity #129 #132]: #134
#138 := [monotonicity #135]: #137
#144 := [trans #138 #142]: #143
#125 := [asserted]: #53
#147 := [mp #125 #144]: #140
#237 := (not #140)
#324 := (or #130 #126 #237)
#238 := [def-axiom]: #324
#239 := [unit-resolution #238 #147]: #325
#629 := [unit-resolution #239 #628]: #130
#310 := (f3 f10 f12)
#647 := (= f1 #310)
#649 := (not #647)
#330 := (f3 f10 f11)
#327 := (= f1 #330)
#331 := (not #327)
#315 := (or #331 #649)
#626 := (or #126 #315)
#651 := (not #315)
#642 := (iff #126 #651)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#676 := (pattern #36)
#28 := (f3 #18 #22)
#99 := (= f1 #28)
#172 := (not #99)
#26 := (f3 #18 #20)
#96 := (= f1 #26)
#171 := (not #96)
#155 := (or #171 #172)
#156 := (not #155)
#112 := (= f1 #36)
#173 := (iff #112 #156)
#677 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #676) #173)
#176 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #173)
#680 := (iff #176 #677)
#678 := (iff #173 #173)
#679 := [refl]: #678
#681 := [quant-intro #679]: #680
#116 := (and #96 #99)
#119 := (iff #112 #116)
#122 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #119)
#177 := (iff #122 #176)
#174 := (iff #119 #173)
#157 := (iff #116 #156)
#158 := [rewrite]: #157
#175 := [monotonicity #158]: #174
#178 := [quant-intro #175]: #177
#153 := (~ #122 #122)
#168 := (~ #119 #119)
#169 := [refl]: #168
#154 := [nnf-pos #169]: #153
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#123 := (iff #40 #122)
#120 := (iff #39 #119)
#117 := (iff #38 #116)
#100 := (iff #29 #99)
#101 := [rewrite]: #100
#97 := (iff #27 #96)
#98 := [rewrite]: #97
#118 := [monotonicity #98 #101]: #117
#114 := (iff #37 #112)
#115 := [rewrite]: #114
#121 := [monotonicity #115 #118]: #120
#124 := [quant-intro #121]: #123
#111 := [asserted]: #40
#127 := [mp #111 #124]: #122
#170 := [mp~ #127 #154]: #122
#179 := [mp #170 #178]: #176
#682 := [mp #179 #681]: #677
#302 := (not #677)
#335 := (or #302 #642)
#351 := [quant-inst #41 #42 #44]: #335
#622 := [unit-resolution #351 #682]: #642
#352 := (not #642)
#353 := (or #352 #126 #315)
#339 := [def-axiom]: #353
#623 := [unit-resolution #339 #622]: #626
#627 := [unit-resolution #623 #628]: #315
#337 := (or #326 #651)
#648 := (iff #130 #651)
#307 := (or #302 #648)
#304 := (or #649 #331)
#436 := (not #304)
#643 := (iff #130 #436)
#645 := (or #302 #643)
#646 := (iff #645 #307)
#630 := (iff #307 #307)
#291 := [rewrite]: #630
#654 := (iff #643 #648)
#652 := (iff #436 #651)
#316 := (iff #304 #315)
#650 := [rewrite]: #316
#653 := [monotonicity #650]: #652
#644 := [monotonicity #653]: #654
#287 := [monotonicity #644]: #646
#292 := [trans #287 #291]: #646
#303 := [quant-inst #41 #44 #42]: #645
#293 := [mp #303 #292]: #307
#336 := [unit-resolution #293 #682]: #648
#631 := (not #648)
#638 := (or #631 #326 #651)
#640 := [def-axiom]: #638
#338 := [unit-resolution #640 #336]: #337
#340 := [unit-resolution #338 #627 #629]: false
#618 := [lemma #340]: #126
#329 := (or #326 #139)
#317 := (or #326 #139 #237)
#328 := [def-axiom]: #317
#257 := [unit-resolution #328 #147]: #329
#619 := [unit-resolution #257 #618]: #326
#332 := (or #139 #651)
#354 := (or #352 #139 #651)
#245 := [def-axiom]: #354
#616 := [unit-resolution #245 #622]: #332
#620 := [unit-resolution #616 #618]: #651
#617 := (or #130 #315)
#637 := (or #631 #130 #315)
#273 := [def-axiom]: #637
#621 := [unit-resolution #273 #336]: #617
[unit-resolution #621 #620 #619]: false
unsat
8424513290e59440c92fec106021e2354c2f6a1c 149 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f11 :: S3
#42 := f11
decl f7 :: (-> S5 S3 S4)
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#44 := (f6 #43 f11)
decl f10 :: S2
#41 := f10
#45 := (f3 f10 #44)
decl f1 :: S1
#4 := f1
#123 := (= f1 #45)
#136 := (not #123)
#632 := [hypothesis]: #136
#47 := (f3 f10 f11)
#127 := (= f1 #47)
#322 := (or #127 #123)
#137 := (iff #127 #136)
#48 := (= #47 f1)
#46 := (= #45 f1)
#49 := (iff #46 #48)
#50 := (not #49)
#140 := (iff #50 #137)
#130 := (iff #123 #127)
#133 := (not #130)
#138 := (iff #133 #137)
#139 := [rewrite]: #138
#134 := (iff #50 #133)
#131 := (iff #49 #130)
#128 := (iff #48 #127)
#129 := [rewrite]: #128
#125 := (iff #46 #123)
#126 := [rewrite]: #125
#132 := [monotonicity #126 #129]: #131
#135 := [monotonicity #132]: #134
#141 := [trans #135 #139]: #140
#122 := [asserted]: #50
#144 := [mp #122 #141]: #137
#234 := (not #137)
#321 := (or #127 #123 #234)
#235 := [def-axiom]: #321
#236 := [unit-resolution #235 #144]: #322
#633 := [unit-resolution #236 #632]: #127
#323 := (not #127)
#634 := (or #123 #323)
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#673 := (pattern #36)
#28 := (f3 #18 #22)
#96 := (= f1 #28)
#169 := (not #96)
#26 := (f3 #18 #20)
#93 := (= f1 #26)
#168 := (not #93)
#152 := (or #168 #169)
#153 := (not #152)
#109 := (= f1 #36)
#170 := (iff #109 #153)
#674 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #673) #170)
#173 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #170)
#677 := (iff #173 #674)
#675 := (iff #170 #170)
#676 := [refl]: #675
#678 := [quant-intro #676]: #677
#113 := (and #93 #96)
#116 := (iff #109 #113)
#119 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #116)
#174 := (iff #119 #173)
#171 := (iff #116 #170)
#154 := (iff #113 #153)
#155 := [rewrite]: #154
#172 := [monotonicity #155]: #171
#175 := [quant-intro #172]: #174
#150 := (~ #119 #119)
#165 := (~ #116 #116)
#166 := [refl]: #165
#151 := [nnf-pos #166]: #150
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#120 := (iff #40 #119)
#117 := (iff #39 #116)
#114 := (iff #38 #113)
#97 := (iff #29 #96)
#98 := [rewrite]: #97
#94 := (iff #27 #93)
#95 := [rewrite]: #94
#115 := [monotonicity #95 #98]: #114
#111 := (iff #37 #109)
#112 := [rewrite]: #111
#118 := [monotonicity #112 #115]: #117
#121 := [quant-intro #118]: #120
#108 := [asserted]: #40
#124 := [mp #108 #121]: #119
#167 := [mp~ #124 #151]: #119
#176 := [mp #167 #175]: #173
#679 := [mp #176 #678]: #674
#650 := (not #674)
#645 := (or #650 #130)
#327 := (or #323 #323)
#324 := (not #327)
#328 := (iff #123 #324)
#651 := (or #650 #328)
#299 := (iff #651 #645)
#642 := (iff #645 #645)
#300 := [rewrite]: #642
#648 := (iff #328 #130)
#313 := (iff #324 #127)
#646 := (not #323)
#640 := (iff #646 #127)
#312 := [rewrite]: #640
#301 := (iff #324 #646)
#307 := (iff #327 #323)
#644 := [rewrite]: #307
#433 := [monotonicity #644]: #301
#647 := [trans #433 #312]: #313
#649 := [monotonicity #647]: #648
#304 := [monotonicity #649]: #299
#643 := [trans #304 #300]: #299
#641 := [quant-inst #41 #42 #42]: #651
#284 := [mp #641 #643]: #645
#628 := [unit-resolution #284 #679]: #130
#627 := (or #133 #123 #323)
#288 := [def-axiom]: #627
#270 := [unit-resolution #288 #628]: #634
#635 := [unit-resolution #270 #633 #632]: false
#637 := [lemma #635]: #123
#326 := (or #323 #136)
#314 := (or #323 #136 #234)
#325 := [def-axiom]: #314
#254 := [unit-resolution #325 #144]: #326
#275 := [unit-resolution #254 #637]: #323
#276 := (or #136 #127)
#289 := (or #133 #136 #127)
#290 := [def-axiom]: #289
#638 := [unit-resolution #290 #628]: #276
[unit-resolution #638 #275 #637]: false
unsat
5973328496eea1e33493c38f9af9d86965f67ad9 287 0
#2 := false
decl f3 :: (-> S2 S3 S1)
decl f6 :: (-> S4 S3 S3)
decl f12 :: S3
#44 := f12
decl f7 :: (-> S5 S3 S4)
decl f11 :: S3
#42 := f11
decl f9 :: S5
#33 := f9
#43 := (f7 f9 f11)
#51 := (f6 #43 f12)
decl f10 :: S2
#41 := f10
#314 := (f3 f10 #51)
decl f1 :: S1
#4 := f1
#651 := (= f1 #314)
#249 := (f3 f10 f12)
#628 := (= f1 #249)
#625 := (not #628)
#339 := (f3 f10 f11)
#355 := (= f1 #339)
#356 := (not #355)
#614 := (or #356 #625)
#615 := (not #614)
#611 := (iff #615 #651)
#582 := (not #611)
decl f13 :: S3
#46 := f13
#334 := (f3 f10 f13)
#331 := (= f1 #334)
#335 := (not #331)
#484 := (or #335 #625)
#493 := (not #484)
#45 := (f7 f9 f12)
#47 := (f6 #45 f13)
#646 := (f3 f10 #47)
#632 := (= f1 #646)
#494 := (iff #493 #632)
#587 := (not #494)
#567 := [hypothesis]: #587
#22 := (:var 0 S3)
#20 := (:var 1 S3)
#34 := (f7 f9 #20)
#35 := (f6 #34 #22)
#18 := (:var 2 S2)
#36 := (f3 #18 #35)
#680 := (pattern #36)
#28 := (f3 #18 #22)
#103 := (= f1 #28)
#176 := (not #103)
#26 := (f3 #18 #20)
#100 := (= f1 #26)
#175 := (not #100)
#159 := (or #175 #176)
#160 := (not #159)
#116 := (= f1 #36)
#177 := (iff #116 #160)
#681 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) (:pat #680) #177)
#180 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #177)
#684 := (iff #180 #681)
#682 := (iff #177 #177)
#683 := [refl]: #682
#685 := [quant-intro #683]: #684
#120 := (and #100 #103)
#123 := (iff #116 #120)
#126 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #123)
#181 := (iff #126 #180)
#178 := (iff #123 #177)
#161 := (iff #120 #160)
#162 := [rewrite]: #161
#179 := [monotonicity #162]: #178
#182 := [quant-intro #179]: #181
#157 := (~ #126 #126)
#172 := (~ #123 #123)
#173 := [refl]: #172
#158 := [nnf-pos #173]: #157
#29 := (= #28 f1)
#27 := (= #26 f1)
#38 := (and #27 #29)
#37 := (= #36 f1)
#39 := (iff #37 #38)
#40 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S3)) #39)
#127 := (iff #40 #126)
#124 := (iff #39 #123)
#121 := (iff #38 #120)
#104 := (iff #29 #103)
#105 := [rewrite]: #104
#101 := (iff #27 #100)
#102 := [rewrite]: #101
#122 := [monotonicity #102 #105]: #121
#118 := (iff #37 #116)
#119 := [rewrite]: #118
#125 := [monotonicity #119 #122]: #124
#128 := [quant-intro #125]: #127
#115 := [asserted]: #40
#131 := [mp #115 #128]: #126
#174 := [mp~ #131 #158]: #126
#183 := [mp #174 #182]: #180
#686 := [mp #183 #685]: #681
#306 := (not #681)
#498 := (or #306 #494)
#600 := (or #625 #335)
#482 := (not #600)
#483 := (iff #632 #482)
#499 := (or #306 #483)
#593 := (iff #499 #498)
#594 := (iff #498 #498)
#581 := [rewrite]: #594
#496 := (iff #483 #494)
#592 := (iff #632 #493)
#495 := (iff #592 #494)
#488 := [rewrite]: #495
#477 := (iff #483 #592)
#588 := (iff #482 #493)
#443 := (iff #600 #484)
#591 := [rewrite]: #443
#589 := [monotonicity #591]: #588
#492 := [monotonicity #589]: #477
#497 := [trans #492 #488]: #496
#590 := [monotonicity #497]: #593
#583 := [trans #590 #581]: #593
#500 := [quant-inst #41 #44 #46]: #499
#575 := [mp #500 #583]: #498
#568 := [unit-resolution #575 #686 #567]: false
#569 := [lemma #568]: #494
#633 := (not #632)
#357 := (or #356 #633)
#343 := (not #357)
#48 := (f6 #43 #47)
#49 := (f3 f10 #48)
#130 := (= f1 #49)
#143 := (not #130)
#570 := [hypothesis]: #143
#571 := (or #130 #357)
#358 := (iff #130 #343)
#629 := (or #306 #358)
#351 := [quant-inst #41 #42 #47]: #629
#566 := [unit-resolution #351 #686]: #358
#341 := (not #358)
#342 := (or #341 #130 #357)
#344 := [def-axiom]: #342
#557 := [unit-resolution #344 #566]: #571
#558 := [unit-resolution #557 #570]: #357
#597 := (or #306 #611)
#616 := (iff #651 #615)
#613 := (or #306 #616)
#618 := (iff #613 #597)
#461 := (iff #597 #597)
#462 := [rewrite]: #461
#612 := (iff #616 #611)
#617 := [rewrite]: #612
#460 := [monotonicity #617]: #618
#604 := [trans #460 #462]: #618
#619 := [quant-inst #41 #42 #44]: #613
#605 := [mp #619 #604]: #597
#560 := [unit-resolution #605 #686]: #611
#546 := (or #582 #615)
#653 := (not #651)
#319 := (or #335 #653)
#655 := (not #319)
#52 := (f7 f9 #51)
#53 := (f6 #52 f13)
#54 := (f3 f10 #53)
#134 := (= f1 #54)
#329 := (or #134 #130)
#144 := (iff #134 #143)
#55 := (= #54 f1)
#50 := (= #49 f1)
#56 := (iff #50 #55)
#57 := (not #56)
#147 := (iff #57 #144)
#137 := (iff #130 #134)
#140 := (not #137)
#145 := (iff #140 #144)
#146 := [rewrite]: #145
#141 := (iff #57 #140)
#138 := (iff #56 #137)
#135 := (iff #55 #134)
#136 := [rewrite]: #135
#132 := (iff #50 #130)
#133 := [rewrite]: #132
#139 := [monotonicity #133 #136]: #138
#142 := [monotonicity #139]: #141
#148 := [trans #142 #146]: #147
#129 := [asserted]: #57
#151 := [mp #129 #148]: #144
#241 := (not #144)
#328 := (or #134 #130 #241)
#242 := [def-axiom]: #328
#243 := [unit-resolution #242 #151]: #329
#561 := [unit-resolution #243 #570]: #134
#330 := (not #134)
#559 := (or #330 #655)
#652 := (iff #134 #655)
#311 := (or #306 #652)
#308 := (or #653 #335)
#440 := (not #308)
#647 := (iff #134 #440)
#649 := (or #306 #647)
#650 := (iff #649 #311)
#634 := (iff #311 #311)
#295 := [rewrite]: #634
#658 := (iff #647 #652)
#656 := (iff #440 #655)
#320 := (iff #308 #319)
#654 := [rewrite]: #320
#657 := [monotonicity #654]: #656
#648 := [monotonicity #657]: #658
#291 := [monotonicity #648]: #650
#296 := [trans #291 #295]: #650
#307 := [quant-inst #41 #51 #46]: #649
#297 := [mp #307 #296]: #311
#562 := [unit-resolution #297 #686]: #652
#635 := (not #652)
#642 := (or #635 #330 #655)
#644 := [def-axiom]: #642
#563 := [unit-resolution #644 #562]: #559
#543 := [unit-resolution #563 #561]: #655
#637 := (or #319 #651)
#638 := [def-axiom]: #637
#544 := [unit-resolution #638 #543]: #651
#576 := (or #582 #615 #653)
#577 := [def-axiom]: #576
#547 := [unit-resolution #577 #544]: #546
#548 := [unit-resolution #547 #560]: #615
#606 := (or #614 #355)
#572 := [def-axiom]: #606
#549 := [unit-resolution #572 #548]: #355
#631 := (or #343 #356 #633)
#340 := [def-axiom]: #631
#550 := [unit-resolution #340 #549 #558]: #633
#298 := (or #319 #331)
#636 := [def-axiom]: #298
#551 := [unit-resolution #636 #543]: #331
#574 := (or #614 #628)
#584 := [def-axiom]: #574
#552 := [unit-resolution #584 #548]: #628
#609 := (or #493 #335 #625)
#603 := [def-axiom]: #609
#553 := [unit-resolution #603 #552 #551]: #493
#441 := (or #587 #484 #632)
#442 := [def-axiom]: #441
#554 := [unit-resolution #442 #553 #550 #569]: false
#555 := [lemma #554]: #130
#545 := (or #143 #343)
#622 := (or #341 #143 #343)
#623 := [def-axiom]: #622
#556 := [unit-resolution #623 #566]: #545
#534 := [unit-resolution #556 #555]: #343
#630 := (or #357 #632)
#627 := [def-axiom]: #630
#535 := [unit-resolution #627 #534]: #632
#610 := (or #587 #493 #633)
#439 := [def-axiom]: #610
#537 := [unit-resolution #439 #535 #569]: #493
#602 := (or #484 #628)
#608 := [def-axiom]: #602
#538 := [unit-resolution #608 #537]: #628
#352 := (or #357 #355)
#626 := [def-axiom]: #352
#539 := [unit-resolution #626 #534]: #355
#585 := (or #615 #356 #625)
#586 := [def-axiom]: #585
#540 := [unit-resolution #586 #539 #538]: #615
#333 := (or #330 #143)
#321 := (or #330 #143 #241)
#332 := [def-axiom]: #321
#261 := [unit-resolution #332 #151]: #333
#541 := [unit-resolution #261 #555]: #330
#536 := (or #134 #319)
#641 := (or #635 #134 #319)
#277 := [def-axiom]: #641
#542 := [unit-resolution #277 #562]: #536
#528 := [unit-resolution #542 #541]: #319
#607 := (or #484 #331)
#601 := [def-axiom]: #607
#524 := [unit-resolution #601 #537]: #331
#639 := (or #655 #335 #653)
#640 := [def-axiom]: #639
#525 := [unit-resolution #640 #524 #528]: #653
#578 := (or #582 #614 #651)
#579 := [def-axiom]: #578
#526 := [unit-resolution #579 #525 #540]: #582
[unit-resolution #605 #686 #526]: false
unsat
6c759b8f06a9510b6e4f2c41f45fd7a908ea138f 22 0
#2 := false
decl f13 :: (-> S7 S3 S4)
decl f4 :: S3
#8 := f4
decl f14 :: S7
#50 := f14
#51 := (f13 f14 f4)
#52 := (= #51 #51)
#53 := (not #52)
#148 := (iff #53 false)
#1 := true
#143 := (not true)
#146 := (iff #143 false)
#147 := [rewrite]: #146
#144 := (iff #53 #143)
#140 := (iff #52 true)
#142 := [rewrite]: #140
#145 := [monotonicity #142]: #144
#149 := [trans #145 #147]: #148
#139 := [asserted]: #53
[mp #139 #149]: false
unsat
f09576464eb9a729afbe3fe966b57e4354456502 30 0
#2 := false
decl f4 :: (-> S3 S4)
decl f6 :: S3
#16 := f6
#17 := (f4 f6)
decl f3 :: (-> S2 S4)
decl f5 :: S2
#14 := f5
#15 := (f3 f5)
#18 := (= #15 #17)
#19 := (not #18)
#41 := [asserted]: #19
#9 := (:var 0 S3)
#10 := (f4 #9)
#7 := (:var 1 S2)
#8 := (f3 #7)
#11 := (pattern #8 #10)
#12 := (= #8 #10)
#13 := (forall (vars (?v0 S2) (?v1 S3)) (:pat #11) #12)
#51 := (~ #13 #13)
#49 := (~ #12 #12)
#50 := [refl]: #49
#52 := [nnf-pos #50]: #51
#40 := [asserted]: #13
#43 := [mp~ #40 #52]: #13
#111 := (not #13)
#197 := (or #111 #18)
#112 := [quant-inst #14 #16]: #197
[unit-resolution #112 #43 #41]: false
unsat
5a4509215da405eb20d4081e74524f90aaca407d 1 0
unsat
ec561a73aaf24cad28c298d64ff90ab9419e03b9 1 0
unsat
99895ba337908a50454cc51cd8d58f8c9973a5d8 1 0
unsat
f66af12ea27f7d59df586df568e3d48733d0c2ad 1 0
unsat
98a1d35ce489ce400102751e60b482d34ba4c100 1 0
unsat
997d0c877f7a6af3978a25e9a11fe86be44aa3d7 1 0
unsat
dec47d92e2bc6704596ff538272e4aa7dad033f8 1 0
unsat
79ff64606be9eaf1430551196cf6a56b904cd2f0 1 0
unsat
9ddb2d0aa5571f810dbdcf99f2a9c0dd91892822 1 0
unsat
383af2a9be136c8b9da304961ed7781d6d8b67da 1 0
unsat
8a45fca8152b4b73650f0bdadc7b4837d03b0e4f 1 0
unsat
028cbfc14838b1039241d56404b98b994249bd70 1 0
unsat
0c3c93869b86cd3cceaa64f6505c6b53e5a0d5f5 1 0
unsat
da5a18ce51a6fcaf95a5da1f3cf6ec44d50d2911 1 0
unsat
b326e9b62ea312d34250c299905421b42e169a3d 1 0
unsat
2df9f9573f4c3d690e8e9d39a01fbee0d0dabfca 1 0
unsat
64fe45c879d2ce11b605b7ccbadec44b7474cdb3 1 0
unsat
27388d866d376a195719342119d2c39bddbbda5e 1 0
unsat
4fdb33415d645476800f24bc2645077ed20fbcc7 1 0
unsat
34954aeef00ac521d8d6983ea46bbdde741af613 1 0
unsat
c975ecb6377964929f32ae1b30fbd693a2969c6a 1 0
unsat
5c9a9ffe9941b81f90170c912034e8b681bc281f 1 0
unsat
26a6ebeac1bb75693d61408e7c0984072dfbd2df 1 0
unsat
2f894a623075d62f46fa0487301d3cff02b03b4d 123 0
#2 := false
decl f4 :: S2
#8 := f4
decl f3 :: S2
#7 := f3
#9 := (= f3 f4)
decl inj!0 :: (-> S3 S2)
decl f6 :: (-> S2 S3)
#28 := (f6 f4)
#179 := (inj!0 #28)
#265 := (= #179 f4)
#18 := (:var 0 S2)
#19 := (f6 #18)
#112 := (pattern #19)
#111 := (inj!0 #19)
#108 := (= #111 #18)
#594 := (forall (vars (k!0 S2)) (:pat #112) #108)
#113 := (forall (vars (k!0 S2)) (:pat #112) #108)
#595 := (iff #113 #594)
#597 := (iff #594 #594)
#598 := [rewrite]: #597
#596 := [rewrite]: #595
#599 := [trans #596 #598]: #595
#16 := (:var 1 S2)
#21 := (= #18 #16)
#17 := (f6 #16)
#20 := (= #17 #19)
#54 := (not #20)
#55 := (or #54 #21)
#58 := (forall (vars (?v0 S2) (?v1 S2)) #55)
#114 := (iff #58 #113)
#115 := [rewrite]: #114
#118 := (~ #58 #58)
#116 := (~ #55 #55)
#117 := [refl]: #116
#119 := [nnf-pos #117]: #118
decl f5 :: S2
#11 := f5
#14 := (= f4 f5)
#15 := (not #14)
#12 := (= f3 f5)
#13 := (not #12)
#10 := (not #9)
#82 := (and #10 #13 #15 #58)
#27 := (f6 f3)
#29 := (= #27 #28)
#30 := (not #29)
#85 := (not #82)
#88 := (or #85 #30)
#91 := (not #88)
#22 := (implies #20 #21)
#23 := (forall (vars (?v0 S2) (?v1 S2)) #22)
#24 := (and #15 #23)
#25 := (and #13 #24)
#26 := (and #10 #25)
#31 := (implies #26 #30)
#32 := (not #31)
#94 := (iff #32 #91)
#61 := (and #15 #58)
#64 := (and #13 #61)
#67 := (and #10 #64)
#73 := (not #67)
#74 := (or #73 #30)
#79 := (not #74)
#92 := (iff #79 #91)
#89 := (iff #74 #88)
#86 := (iff #73 #85)
#83 := (iff #67 #82)
#84 := [rewrite]: #83
#87 := [monotonicity #84]: #86
#90 := [monotonicity #87]: #89
#93 := [monotonicity #90]: #92
#80 := (iff #32 #79)
#77 := (iff #31 #74)
#70 := (implies #67 #30)
#75 := (iff #70 #74)
#76 := [rewrite]: #75
#71 := (iff #31 #70)
#68 := (iff #26 #67)
#65 := (iff #25 #64)
#62 := (iff #24 #61)
#59 := (iff #23 #58)
#56 := (iff #22 #55)
#57 := [rewrite]: #56
#60 := [quant-intro #57]: #59
#63 := [monotonicity #60]: #62
#66 := [monotonicity #63]: #65
#69 := [monotonicity #66]: #68
#72 := [monotonicity #69]: #71
#78 := [trans #72 #76]: #77
#81 := [monotonicity #78]: #80
#95 := [trans #81 #93]: #94
#53 := [asserted]: #32
#96 := [mp #53 #95]: #91
#97 := [not-or-elim #96]: #82
#101 := [and-elim #97]: #58
#110 := [mp~ #101 #119]: #58
#109 := [mp #110 #115]: #113
#600 := [mp #109 #599]: #594
#180 := (not #594)
#270 := (or #180 #265)
#267 := [quant-inst #8]: #270
#250 := [unit-resolution #267 #600]: #265
#590 := (= f3 #179)
#178 := (inj!0 #27)
#256 := (= #178 #179)
#244 := (= #179 #178)
#269 := (= #28 #27)
#102 := [not-or-elim #96]: #29
#271 := [symm #102]: #269
#375 := [monotonicity #271]: #244
#589 := [symm #375]: #256
#582 := (= f3 #178)
#264 := (= #178 f3)
#266 := (or #180 #264)
#257 := [quant-inst #7]: #266
#268 := [unit-resolution #257 #600]: #264
#255 := [symm #268]: #582
#591 := [trans #255 #589]: #590
#592 := [trans #591 #250]: #9
#98 := [and-elim #97]: #10
[unit-resolution #98 #592]: false
unsat
dbb5533c26f60f0a5c965d87e1dfccfd73b06e07 152 0
#2 := false
decl f3 :: (-> S2 S3 S4)
decl f10 :: S3
#34 := f10
decl f11 :: S2
#41 := f11
#51 := (f3 f11 f10)
decl f4 :: (-> S5 S4 S2)
decl f12 :: S4
#44 := f12
decl f5 :: (-> S6 S3 S5)
decl f8 :: S3
#30 := f8
decl f6 :: (-> S7 S2 S6)
decl f7 :: S7
#7 := f7
#42 := (f6 f7 f11)
#43 := (f5 #42 f8)
#45 := (f4 #43 f12)
#281 := (f3 #45 f10)
#282 := (= #281 #51)
#568 := (= #281 f12)
#567 := (= f10 f8)
#565 := (if #567 #568 #282)
#23 := (:var 0 S3)
#21 := (:var 1 S4)
#19 := (:var 2 S3)
#17 := (:var 3 S2)
#18 := (f6 f7 #17)
#20 := (f5 #18 #19)
#22 := (f4 #20 #21)
#24 := (f3 #22 #23)
#611 := (pattern #24)
#26 := (f3 #17 #23)
#128 := (= #24 #26)
#127 := (= #24 #21)
#25 := (= #23 #19)
#111 := (if #25 #127 #128)
#612 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) (:pat #611) #111)
#120 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #111)
#615 := (iff #120 #612)
#613 := (iff #111 #111)
#614 := [refl]: #613
#616 := [quant-intro #614]: #615
#27 := (if #25 #21 #26)
#28 := (= #24 #27)
#29 := (forall (vars (?v0 S2) (?v1 S3) (?v2 S4) (?v3 S3)) #28)
#117 := (iff #29 #120)
#112 := (iff #28 #111)
#119 := [rewrite]: #112
#118 := [quant-intro #119]: #117
#109 := (~ #29 #29)
#108 := (~ #28 #28)
#125 := [refl]: #108
#110 := [nnf-pos #125]: #109
#76 := [asserted]: #29
#126 := [mp~ #76 #110]: #29
#115 := [mp #126 #118]: #120
#617 := [mp #115 #616]: #612
#385 := (not #612)
#570 := (or #385 #565)
#559 := [quant-inst #41 #30 #44 #34]: #570
#569 := [unit-resolution #559 #617]: #565
#561 := (not #567)
#35 := (= f8 f10)
#36 := (not #35)
#546 := (iff #36 #561)
#551 := (iff #35 #567)
#566 := (iff #567 #35)
#550 := [commutativity]: #566
#552 := [symm #550]: #551
#547 := [monotonicity #552]: #546
decl f9 :: S3
#31 := f9
#37 := (= f9 f10)
#38 := (not #37)
#32 := (= f8 f9)
#33 := (not #32)
#85 := (and #33 #36 #38)
decl f13 :: S4
#48 := f13
#46 := (f6 f7 #45)
#47 := (f5 #46 f9)
#49 := (f4 #47 f13)
#50 := (f3 #49 f10)
#52 := (= #50 #51)
#88 := (not #85)
#91 := (or #88 #52)
#94 := (not #91)
#39 := (and #36 #38)
#40 := (and #33 #39)
#53 := (implies #40 #52)
#54 := (not #53)
#97 := (iff #54 #94)
#78 := (not #40)
#79 := (or #78 #52)
#82 := (not #79)
#95 := (iff #82 #94)
#92 := (iff #79 #91)
#89 := (iff #78 #88)
#86 := (iff #40 #85)
#87 := [rewrite]: #86
#90 := [monotonicity #87]: #89
#93 := [monotonicity #90]: #92
#96 := [monotonicity #93]: #95
#83 := (iff #54 #82)
#80 := (iff #53 #79)
#81 := [rewrite]: #80
#84 := [monotonicity #81]: #83
#98 := [trans #84 #96]: #97
#77 := [asserted]: #54
#99 := [mp #77 #98]: #94
#100 := [not-or-elim #99]: #85
#102 := [and-elim #100]: #36
#553 := [mp #102 #547]: #561
#406 := (not #282)
#104 := (not #52)
#388 := (iff #104 #406)
#428 := (iff #52 #282)
#545 := (iff #282 #52)
#544 := (= #281 #50)
#260 := (= #50 #281)
#279 := (= #50 f13)
#278 := (= f10 f9)
#596 := (if #278 #279 #260)
#592 := (or #385 #596)
#265 := [quant-inst #45 #31 #48 #34]: #592
#554 := [unit-resolution #265 #617]: #596
#599 := (not #278)
#387 := (iff #38 #599)
#384 := (iff #37 #278)
#548 := (iff #278 #37)
#555 := [commutativity]: #548
#386 := [symm #555]: #384
#540 := [monotonicity #386]: #387
#103 := [and-elim #100]: #38
#541 := [mp #103 #540]: #599
#266 := (not #596)
#602 := (or #266 #278 #260)
#597 := [def-axiom]: #602
#543 := [unit-resolution #597 #541 #554]: #260
#542 := [symm #543]: #544
#427 := [monotonicity #542]: #545
#429 := [symm #427]: #428
#536 := [monotonicity #429]: #388
#105 := [not-or-elim #99]: #104
#438 := [mp #105 #536]: #406
#560 := (not #565)
#562 := (or #560 #567 #282)
#563 := [def-axiom]: #562
[unit-resolution #563 #438 #553 #569]: false
unsat
