Die Aufgabe, eine IDE für Isabelle im Browser zu implementieren, welche auf die Informationen des Isabelle Systems zurückgeift stellt uns vor viele Probleme: 

= Client =

Auch in der HTML5-Welt bleibt die einzige verbreitete browserübergreifende Möglichkeit Programmlogik auf clientseite zu implementieren die dynamisch typisierte Scriptsprache 'JavaScript'. Da es undenkbar ist, das komplexe Isabelle-System auch nur teilweise in JavaScript nach zu implementieren und dabei noch ein effizientes Ergebnis zu erhalten, ist es unumgänglich, mit einem Server zu kommunizieren, welcher die meiste Arbeit übernimmt.

Somit ist es sinnvoll einen 'thin client' zu entwickeln, bei dem die Programmlogik auf einen Server implementiert ist und der Client lediglich der Eingabe und Visualisierung dient.

-- Modularisierung --

In JavaScript gibt es von Haus aus keine Modularisierung. Bei einem Projekt dieser Größe ist dies aber essenziell. Es existieren verschiedene Ansätze, dieses Problem zu lösen:

- CommonJS
  TODO
- RequireJS 
  TODO
- Die Sprache 'CoffeeScript' welche zu JavaScript kompiliert
  TODO

Da RequireJS gleichzeitig ein Framework für das bedarfsmäßige Nachladen von Scripten bietet, TODO

= Server =

PIDE ist eine hauptsächlich für jEdit konzipierte abstraktion des Isabelle frameworks. PIDE ist dabei in der Sprache Scala implementiert. Scala ist für Webanwendungen eine sehr freundliche Umgebung, da es mehrere sehr mächtige Webframeworks gibt und Scala zudem in der JVM 'wohnt', für die es bereits ausgereifte Webserver gibt.


= Kommunikation =

- Websocket -



- ScalaConnector
  TODO
- JSConnector
  TODO