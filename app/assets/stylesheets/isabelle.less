@type: rgb(43,145,175);
@keyword: blue;
@string: rgb(3, 106, 7);
@variable: #00009b;
@verbatim: gray;
@comment: rgb(76, 136, 107);

 /* outer syntax */
.cm-s-default {
  span.keyword {
    color: @keyword;
  }
  span.operator {

  }
  span.command {
    color: @keyword;
    font-weight: bold;
  }
  span.string {
    background: rgba(0,0,0,0.05);
  }  
  span.altstring {
    color: @string;
  }
  span.verbatim {
    background: rgba(0,0,0,0.05);
    color: @verbatim;
  }
  span.comment {
    color: @comment;
  }
  span.control {

  }
  span.malformed {
    text-decoration: line-through;
  }

  span.command_span {

  }
  span.ignored_span {

  }
  span.malformed_span {

  }


  /* inner syntax */
  span.tfree {
    color: @type 
  }
  span.tvar {
    color: @type 
  }
  span.entity {
    color: black ;
  }
  span.free {
    font-style: italic;
    color: @purple ;
  }
  span.skolem {
    color: #d2691e 
  }
  span.bound {
    color: green 
  }
  span.var {
    color: @variable 
  }
  span.numeral {

  }
  span.literal {

  }
  span.delimiter {
    color: gray 
  }
  span.inner_string {
    
  }
  span.inner_comment {

  }
  span.token_range {

  }
  span.sort {

  }
  span.typ {

  }
  span.term {

  }
  span.prop {

  }

  span.typing {
    
  }

  span.attribute {
    
  }

  span.method {

  }


  /* embedded source text */
  span.ML_source {

  }
  span.doc_source {

  }
  span.antiq {

  }

    /* ML syntax */

  span.ML_keyword {
    color: @keyword
  }
  span.ML_delimiter {

  }
  span.ML_tvar {

  }
  span.ML_numeral {
    color: red
  }
  span.ML_char {
    color: @string
  }
  span.ML_string {
    color: @string
  }
  span.ML_comment {
    color: #8b0000
  }
  span.ML_malform {
    color: #ff6a6a
  }
  span.ML_def {

  }
  span.ML_open {

  }
  span.ML_struct {

  }
  span.ML_typing {

  }


  /*
    val INIT = "init"
    val STATUS = "status"
    val REPORT = "report"
    val WRITELN = "writeln"
    val TRACING = "tracing"
    val WARNING = "warning"
  */
  span.error{
    border-bottom: 1px dotted red;
    text-decoration-line: underline;
    text-decoration-style: wavy;
    text-decoration-color: red;
  }

  span.warning{  
    border-bottom: 1px dotted @orange;
    text-decoration-line: underline;
    text-decoration-style: wavy;
    text-decoration-color: yellow;
  }

  span.accepted {
    border-bottom: 1px dotted green  
  }

  span.forked {
    border-bottom: 1px dotted blue 
  }

  pre.finished {
    background-color: transparent;
  }
  pre.running {
    background-color: @mustard;
  }
  pre.unprocessed {
    background-color: @gray;
  }
  pre.error {
    background-color: @red;
  }
  pre.warning {
    background-color: @orange;
  }
}

/*
  val PROTOCOL = "protocol"
  val SYSTEM = "system"
  val STDOUT = "stdout"
  val STDERR = "stderr"
  val EXIT = "exit"

  val LEGACY = "legacy"

  val NO_REPORT = "no_report"

  val BAD = "bad"

*/