@type: rgb(43,145,175);
@keyword: blue;
@string: rgb(3, 106, 7);
@variable: #00009b;
@verbatim: gray;
@comment: rgb(76, 136, 107);

 /* outer syntax */
.ace_line {
  .ace_keyword {
    color: @keyword !important;
  }
  .ace_operator {

  }
  .ace_command {
    color: @keyword !important;
    font-weight: bold;
  }
  .ace_string {
    background: rgba(0,0,0,0.02) !important;
  }  
  .ace_altstring {
    color: @string;
  }
  .ace_verbatim {
    background: rgba(0,0,0,0.02) !important;
    color: @verbatim;
  }
  .ace_comment {
    color: @comment;
  }
  .ace_control {

  }
  .ace_malformed {
    text-decoration: line-through;
  }

  .ace_command_span {

  }
  .ace_ignored_span {

  }
  .ace_malformed_span {

  }


  /* inner syntax */
  .ace_tfree {
    color: @type !important
  }
  .ace_tvar {
    color: @type !important
  }
  .ace_entity {
    color: black !important;
  }
  .ace_free {
    font-style: italic;
    color: @purple !important;
  }
  .ace_skolem {
    color: #d2691e !important
  }
  .ace_bound {
    color: green !important
  }
  .ace_var {
    color: @variable !important
  }
  .ace_numeral {

  }
  .ace_literal {

  }
  .ace_delimiter {
    color: gray !important
  }
  .ace_inner_string {
    
  }
  .ace_inner_comment {

  }
  .ace_token_range {

  }
  .ace_sort {

  }
  .ace_typ {

  }
  .ace_term {

  }
  .ace_prop {

  }

  .ace_typing {
    
  }

  .ace_attribute {
    
  }

  .ace_method {

  }


  /* embedded source text */
  .ace_ML_source {

  }
  .ace_doc_source {

  }
  .ace_antiq {

  }

    /* ML syntax */

  .ace_ML_keyword {
    color: @keyword !important
  }
  .ace_ML_delimiter {

  }
  .ace_ML_tvar {

  }
  .ace_ML_numeral {
    color: red !important
  }
  .ace_ML_char {
    color: @string !important
  }
  .ace_ML_string {
    color: @string !important
  }
  .ace_ML_comment {
    color: #8b0000 !important
  }
  .ace_ML_malform {
    color: #ff6a6a !important
  }
  .ace_ML_def {

  }
  .ace_ML_open {

  }
  .ace_ML_struct {

  }
  .ace_ML_typing {

  }


  /*
    val INIT = "init"
    val STATUS = "status"
    val REPORT = "report"
    val WRITELN = "writeln"
    val TRACING = "tracing"
    val WARNING = "warning"
  */
  .ace_error{
    border-bottom: 1px dotted red;
    text-decoration-line: underline;
    text-decoration-style: wavy;
    text-decoration-color: red;
  }

  .ace_warning{  
    border-bottom: 1px dotted @orange;
    text-decoration-line: underline;
    text-decoration-style: wavy;
    text-decoration-color: yellow;
  }

  .ace_accepted {
    border-bottom: 1px dotted green !important  
  }

  .ace_forked {
    border-bottom: 1px dotted blue !important 
  }
}

.ace_gutter-cell {
  background-color: transparent !important;
  color: @grayDark;
  &.finished {
    background-color: transparent;
  }
  &.running {
    background-color: @mustard;
  }
  &.unprocessed {
    background-color: @gray;
  }
  &.error {
    background-color: @red;
  }
  &.warning {
    background-color: @orange;
  }
}

/*
  val PROTOCOL = "protocol"
  val SYSTEM = "system"
  val STDOUT = "stdout"
  val STDERR = "stderr"
  val EXIT = "exit"

  val LEGACY = "legacy"

  val NO_REPORT = "no_report"

  val BAD = "bad"

*/
